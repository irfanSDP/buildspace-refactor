<?php

/**
 * AccountGroup
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 *  
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class AccountGroup extends BaseAccountGroup
{
    public function updatePriority($isOperationAdd)
    {       
        $entries = DoctrineQuery::create()->select('ag.id, ag.priority')
            ->from('AccountGroup ag')
            ->where('ag.id != ?', $this->id)
            ->andWhere('ag.priority >= ?', $this->priority)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->execute();

        $pdo = AccountGroupTable::getInstance()->getConnection()->getDbh();

        foreach($entries as $entry)
        {   
            $priority = $isOperationAdd ? ($entry['priority'] + 1) : ($entry['priority'] - 1);
            $stmt = $pdo->prepare("UPDATE " . AccountGroupTable::getInstance()->getTableName() . " SET priority=:priority WHERE id=:id;");
            $stmt->bindParam(':id', $entry['id'], PDO::PARAM_INT);
            $stmt->bindParam(':priority', $priority, PDO::PARAM_INT);
            $stmt->execute();
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            Doctrine_Query::create()
                ->delete('AccountCode ac')
                ->where('ac.account_group_id = ?', $this->id)
                ->execute();

            parent::delete($conn);

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
            throw $e;
        }
    }

    public function canBeDeleted()
    {
        // check in item codes settings
        $itemCodeSettings = DoctrineQuery::create()->select('ics.id')
                            ->from('ItemCodeSetting ics')
                            ->where('ics.account_group_id = ?', $this->id)
                            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                            ->execute();
        
        // check in debit credit note claim
        $debitCreditNoteClaims = DoctrineQuery::create()->select('c.id')
                                        ->from('DebitCreditNoteClaim c')
                                        ->where('c.account_group_id = ?', $this->id)
                                        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                                        ->execute();

        return empty($itemCodeSettings) && empty($debitCreditNoteClaims);
    }
}
