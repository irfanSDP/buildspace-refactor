<?php

/**
 * SubPackageVariationOrderItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SubPackageVariationOrderItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object SubPackageVariationOrderItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('SubPackageVariationOrderItem');
    }

    public static function createItemFromLastRow($previousItem, $variationOrderId, $fieldName=null, $fieldValue=null)
    {
        $item = new SubPackageVariationOrderItem();

        $item->sub_package_variation_order_id = $variationOrderId;

        if($fieldName)
        {
            $columns = array_keys(self::getInstance()->getColumns());

            if(in_array($fieldName, $columns))
            {
                $fieldValue = ($fieldName == 'uom_id' and $fieldValue == -1) ? null : $fieldValue;

                if($fieldName == "type" or $fieldName == "uom_id")
                {
                    $item->updateColumnByColumnName($fieldName, $fieldValue);
                }
                elseif($fieldName == 'addition_quantity')
                {
                    $fieldValue = is_numeric($fieldValue) ? $fieldValue : 0;
                    $item->updateColumnByColumnName($fieldName, $fieldValue);
                }
                elseif($fieldName == 'rate')
                {
                    $fieldValue = is_numeric($fieldValue) ? $fieldValue : 0;
                    $item->rate = number_format($fieldValue,2,'.','');
                }
                else
                {
                    $item->{'set'.sfInflector::camelize($fieldName)}($fieldValue);
                }
            }
        }

        if($fieldName != 'type')
        {
            $item->type = SubPackageVariationOrderItem::TYPE_WORK_ITEM;
        }

        $asRoot = true;
        $priority = 0;

        if($previousItem)
        {
            if($previousItem->node->isRoot())
            {
                $priority = $previousItem->priority + 1;
            }
            else
            {
                $asRoot = false;
                $item->node->insertAsNextSiblingOf($previousItem);

                $priority = $previousItem->priority;
            }
        }

        $item->priority = $priority;
        $item->save();

        if($asRoot)
        {
            $item->getTable()->getTree()->createRoot($item);

            $item->updateRootPriority($priority, $item->id);
        }

        return $item;
    }

    public static function createItem($nextItem, $variationOrderId)
    {
        $item                                 = new SubPackageVariationOrderItem();
        $item->sub_package_variation_order_id = $variationOrderId;
        $item->type                           = SubPackageVariationOrderItem::TYPE_WORK_ITEM;

        if($nextItem->node->isRoot())
        {
            $priority = $nextItem->priority;

            $item->priority = $priority;

            $item->save();

            $node = $item->node;

            if ($node->isValidNode())
            {
                $node->makeRoot($item->id);
            }
            else
            {
                $item->getTable()->getTree()->createRoot($item);
            }

            $item->updateRootPriority($priority, $item->id);
        }
        else
        {
            $item->node->insertAsPrevSiblingOf($nextItem);
            $item->priority = $nextItem->priority;
        }

        $item->save();

        return $item;
    }

    public static function deleteBuildUpQuantitiesByVariationOrderItemId($variationOrderItemId, $buildUpQuantityType = null)
    {
        $con = self::getInstance()->getConnection();

        $sql = $buildUpQuantityType ? "AND type = ".$buildUpQuantityType : "";

        $con->fetchAssoc("UPDATE ".SubPackageVariationOrderBuildUpQuantityFormulatedColumnTable::getInstance()->getTableName()." SET deleted_at = NOW() WHERE
        relation_id IN (SELECT id FROM ".SubPackageVariationOrderBuildUpQuantityItemTable::getInstance()->getTableName()." WHERE sub_package_variation_order_item_id = ".$variationOrderItemId." ".$sql." AND deleted_at IS NULL)");

        $deleteBuildUpQtyItemQuery = Doctrine_Query::create()
            ->delete('SubPackageVariationOrderBuildUpQuantityItem i')
            ->where('i.sub_package_variation_order_item_id = ?', $variationOrderItemId);

        $deleteBuildUpQtySummaryQuery = Doctrine_Query::create()
            ->delete('SubPackageVariationOrderBuildUpQuantitySummary s')
            ->where('s.sub_package_variation_order_item_id = ?', $variationOrderItemId);

        $deleteScheduleOfQuantityXrefQuery = Doctrine_Query::create()
            ->delete('ScheduleOfQuantitySubPackageVOItemXref x')
            ->where('x.sub_package_variation_order_item_id = ?', $variationOrderItemId);

        if($buildUpQuantityType)
        {
            $deleteBuildUpQtyItemQuery->addWhere('i.type = ?', $buildUpQuantityType);

            $deleteBuildUpQtySummaryQuery->addWhere('s.type = ?', $buildUpQuantityType);

            $deleteScheduleOfQuantityXrefQuery->addWhere('x.type = ?', $buildUpQuantityType);
        }

        $deleteBuildUpQtyItemQuery->execute();

        $deleteBuildUpQtySummaryQuery->execute();

        $deleteScheduleOfQuantityXrefQuery->execute();
    }

    public static function omitBillItems($targetItemId, Array $selectedBillItemIds, Array $unSelectedBillItemIds, SubPackageVariationOrder $variationOrder, BillColumnSetting $billColumnSetting, $unitCount)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();
        $postContractId = $billColumnSetting->ProjectStructure->getRoot()->PostContract->id;

        $typeReference = DoctrineQuery::create()->select('t.id')
            ->from('PostContractStandardClaimTypeReference t')
            ->where('t.bill_column_setting_id = ?', array($billColumnSetting->id))
            ->andWhere('t.post_contract_id = ?', array($postContractId))
            ->andWhere('t.counter = ? ', array($unitCount))
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        if(!$typeReference)
        {
            throw new Exception("There is no PostContractStandardClaimTypeReference with bill_column_setting_id: ".$billColumnSetting->id.", post_contract_id: ".$postContractId.", counter: ".$unitCount);
        }

        if(count($unSelectedBillItemIds) > 0 && array_search("", $unSelectedBillItemIds) === false)
        {
            /*
            * Remove all vo items from unselected bill items list
            */
            $stmt = $pdo->prepare("DELETE FROM ".SubPackageVariationOrderItemUnitTable::getInstance()->getTableName()." u
            WHERE u.type_reference_id = ".$typeReference['id']." AND u.sub_package_variation_order_item_id IN (SELECT id FROM ".self::getInstance()->getTableName()."
            WHERE sub_package_variation_order_id = ".$variationOrder->id." AND bill_item_id IN (".implode(',', $unSelectedBillItemIds).") AND deleted_at IS NULL)");

            $stmt->execute();

            $stmt = $pdo->prepare("UPDATE ".self::getInstance()->getTableName()." SET total_unit = t2.total_unit FROM
            (SELECT i.id, COALESCE(COUNT(u.*), 0) AS total_unit FROM ".self::getInstance()->getTableName()." i
            LEFT JOIN ".SubPackageVariationOrderItemUnitTable::getInstance()->getTableName()." u ON u.sub_package_variation_order_item_id = i.id
            LEFT JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." r ON u.type_reference_id = r.id AND r.bill_column_setting_id = ".$billColumnSetting->id." AND r.post_contract_id = ".$postContractId."
            WHERE i.sub_package_variation_order_id = ".$variationOrder->id." AND i.bill_item_id IN (".implode(',', $unSelectedBillItemIds).")
            AND i.deleted_at IS NULL GROUP BY i.id ) AS t2
            WHERE ".self::getInstance()->getTableName().".id = t2.id AND ".self::getInstance()->getTableName().".sub_package_variation_order_id = ".$variationOrder->id);

            $stmt->execute();

            $stmt = $pdo->prepare("DELETE FROM ".self::getInstance()->getTableName()." WHERE bill_item_id IN (".implode(',', $unSelectedBillItemIds).")
            AND total_unit = 0 AND sub_package_variation_order_id =".$variationOrder->id);

            $stmt->execute();
        }

        if(count($selectedBillItemIds) > 0 && array_search("", $selectedBillItemIds) === false)
        {
            $targetItem = $targetItemId > 0 ? self::getInstance()->find($targetItemId) : false;
            $priority = 0;

            if(!$targetItem)
            {
                /* If no target item specify we get the last root item as target item */
                $rootItem = DoctrineQuery::create()->select('i.*')
                    ->from('SubPackageVariationOrderItem i')
                    ->where('i.sub_package_variation_order_id = ?', $variationOrder->id)
                    ->andWhere('i.root_id = i.id')
                    ->limit(1)
                    ->addOrderBy('i.priority DESC')
                    ->fetchOne();

                if($rootItem)
                {
                    // then we query last child if there's any children under the root
                    $targetItem = DoctrineQuery::create()->select('i.*')
                        ->from('SubPackageVariationOrderItem i')
                        ->where('i.sub_package_variation_order_id = ?', $variationOrder->id)
                        ->andWhere('i.root_id = ?', $rootItem->id)
                        ->limit(1)
                        ->addOrderBy('i.lft DESC')
                        ->fetchOne();

                    $targetItem = !$targetItem ? $rootItem : $targetItem;
                }

                if($targetItem)
                {
                    /* if target item is root we will set the new item to be below target item which means we need to increment the new item's priority
                     * else we just set it same as root's priority (belongs to root family tree)
                     */
                    $priority = $targetItem->node->isRoot() ? $targetItem->priority + 1 : $targetItem->priority;
                }
            }
            else
            {
                $priority = $targetItem->priority;
            }

            $pageNoPrefix = $billColumnSetting->ProjectStructure->BillLayoutSetting->page_no_prefix;

            $stmt = $pdo->prepare("SELECT DISTINCT i.id, i.bill_item_id FROM ".self::getInstance()->getTableName()." i
            JOIN ".SubPackageVariationOrderItemUnitTable::getInstance()->getTableName()." u ON u.sub_package_variation_order_item_id = i.id
            JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." r ON u.type_reference_id = r.id
            WHERE i.bill_item_id IN (".implode(',', $selectedBillItemIds).") AND i.sub_package_variation_order_id =".$variationOrder->id."
            AND r.bill_column_setting_id = ".$billColumnSetting->id." AND r.post_contract_id = ".$postContractId."
            AND i.deleted_at IS NULL");

            $stmt->execute();

            $existingVariationOrderItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $existingVariationOrderItemIds = array();

            foreach($existingVariationOrderItems as $existingVariationOrderItem)
            {
                if(($key = array_search($existingVariationOrderItem['bill_item_id'], $selectedBillItemIds)) !== false)
                {
                    unset($selectedBillItemIds[$key]);
                }

                $existingVariationOrderItemIds[] = $existingVariationOrderItem['id'];
            }

            if(count($existingVariationOrderItemIds) > 0)
            {
                $stmt = $pdo->prepare("SELECT DISTINCT i.id FROM ".self::getInstance()->getTableName()." i
                WHERE i.id NOT IN (SELECT u.sub_package_variation_order_item_id FROM ".SubPackageVariationOrderItemUnitTable::getInstance()->getTableName()." u
                JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." r ON u.type_reference_id = r.id
                WHERE u.sub_package_variation_order_item_id IN (".implode(',', $existingVariationOrderItemIds).")
                AND r.bill_column_setting_id = ".$billColumnSetting->id." AND r.post_contract_id = ".$postContractId." AND r.counter = ".$unitCount.")
                AND i.sub_package_variation_order_id = ".$variationOrder->id." AND i.id IN (".implode(',', $existingVariationOrderItemIds).") AND i.deleted_at IS NULL");

                $stmt->execute();

                $existingVariationOrderItemsWithoutUnitCounter = $stmt->fetchAll(PDO::FETCH_ASSOC);

                if($existingVariationOrderItemsWithoutUnitCounter)
                {
                    $dataToInsert = array();
                    $variationOrderItemIds = array();

                    foreach($existingVariationOrderItemsWithoutUnitCounter as $record)
                    {
                        $dataToInsert[] = "(".$record['id'].", ".$typeReference['id'].", NOW(), NOW())";
                        $variationOrderItemIds[] = $record['id'];
                    }

                    if(count($dataToInsert) > 0)
                    {
                        $stmt = $pdo->prepare("INSERT INTO ".SubPackageVariationOrderItemUnitTable::getInstance()->getTableName()." (sub_package_variation_order_item_id, type_reference_id, created_at, updated_at)
                        VALUES ".implode(",", $dataToInsert));

                        $stmt->execute();

                        $stmt = $pdo->prepare("UPDATE ".SubPackageVariationOrderItemTable::getInstance()->getTableName()." SET total_unit = t2.total_unit FROM
                        (SELECT u.sub_package_variation_order_item_id, COUNT(u.*) AS total_unit FROM ".SubPackageVariationOrderItemUnitTable::getInstance()->getTableName()." u
                        JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." r ON u.type_reference_id = r.id
                        WHERE u.sub_package_variation_order_item_id IN (".implode(",", $variationOrderItemIds).")
                        AND r.bill_column_setting_id = ".$billColumnSetting->id." AND r.post_contract_id = ".$postContractId." GROUP BY u.sub_package_variation_order_item_id ) AS t2
                        WHERE ".SubPackageVariationOrderItemTable::getInstance()->getTableName().".id = t2.sub_package_variation_order_item_id");

                        $stmt->execute();
                    }
                }
            }


            if(count($selectedBillItemIds) > 0 && array_search("", $selectedBillItemIds) === false)
            {
                $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.description, p.type, p.uom_id, p.level,
                r.bill_ref_element_no, r.bill_ref_page_no, r.bill_ref_char, spr.rate, pc.total AS pc_total,
                P .priority, P .lft, P . rgt, P . level
                FROM " . BillItemTable::getInstance()->getTableName() . " i
                JOIN " . BillItemTable::getInstance()->getTableName() . " P ON i.lft BETWEEN P .lft AND P .rgt
                LEFT JOIN " .SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " spr ON P . ID = spr.bill_item_id
                LEFT JOIN " . BillItemPrimeCostRateTable::getInstance()->getTableName() . " pc ON (P . ID = pc.bill_item_id)
                LEFT JOIN " . PostContractBillItemRateTable::getInstance()->getTableName() . " r ON (P . ID = r.bill_item_id)
                WHERE spr.sub_package_id = ".$variationOrder->sub_package_id."
                AND i. ID IN (" . implode(',', array_values($selectedBillItemIds)) . ")
                AND i.root_id = P .root_id
                AND P . TYPE <> " . BillItem::TYPE_NOID . "
                AND P .deleted_at IS NULL
                AND i. deleted_at IS NULL
                AND P .project_revision_deleted_at IS NULL
                ORDER BY P .priority, P .lft, P . LEVEL ASC");

                $stmt->execute();

                $billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

                $con = self::getInstance()->getConnection();

                try
                {
                    $con->beginTransaction();

                    $billItems = ($targetItem and !$targetItem->node->isRoot()) ? array_reverse($billItems) : $billItems;

                    foreach($billItems as $billItem)
                    {
                        $obj = new SubPackageVariationOrderItem();

                        $billItem['bill_ref'] = BillItemTable::generateBillRef($pageNoPrefix, $billItem['bill_ref_element_no'], $billItem['bill_ref_page_no'], $billItem['bill_ref_char']);
                        $billItem['sub_package_variation_order_id'] = $variationOrder->id;
                        $billItem['bill_item_id'] = $billItem['id'];

                        unset($billItem['priority'], $billItem['lft'], $billItem['rgt'], $billItem['level'], $billItem['pc_total'], $billItem['bill_ref_element_no'], $billItem['bill_ref_page_no'], $billItem['bill_ref_char'], $billItem['id']);

                        foreach($billItem as $key => $value)
                        {
                            $obj->{$key} = $value;
                        }

                        if($targetItem and !$targetItem->node->isRoot())
                        {
                            $obj->priority = $targetItem->priority;
                            $obj->save();

                            $obj->getNode()->insertAsPrevSiblingOf($targetItem);
                        }
                        else
                        {
                            $obj->priority = $priority;
                            $obj->save();

                            $obj->getTable()->getTree()->createRoot($obj);

                            if($targetItem)
                            {
                                //Update Priority
                                $targetItem->updateRootPriority($priority, $obj->id);
                            }

                            ++$priority;
                        }

                        /*
                        * if copy build up qty returns false it means either an error occurred while copying the build up qty
                        * or there is no build up qty. We assume if there is no build up quantity then we call copyQuantityFromLinkedBillItem
                        * to copy quantity per unit into variation order item
                        */
                        if(!$obj->copyBuildUpQuantityFromLinkedBillItem($billColumnSetting))
                        {
                            $obj->copyQuantityFromLinkedBillItem($billColumnSetting);
                        }

                        $variationOrderItemUnit = new SubPackageVariationOrderItemUnit();
                        $variationOrderItemUnit->sub_package_variation_order_item_id = $obj->id;
                        $variationOrderItemUnit->type_reference_id = $typeReference['id'];
                        $variationOrderItemUnit->save();

                        unset($obj);
                    }

                    $con->commit();

                    unset($billItems);
                }
                catch(Exception $e)
                {
                    $con->rollback();
                    throw $e;
                }
            }
        }
    }

    public static function getVOItemsStructure(SubPackage $subPackage, array $itemIds)
    {
        $pdo                      = self::getInstance()->getConnection()->getDbh();
        $data                     = array();
        $newItemIds               = array();
        $voIds                    = array();
        $dimensionsIds            = array();
        $unitsDimensions          = array();
        $buildUpQuantitySummaries = array();

        $stmt = $pdo->prepare("SELECT DISTINCT i.id, i.sub_package_variation_order_id, i.description, i.type, i.priority, i.lft, i.level, i.total_unit, i.rate,
        i.bill_ref, i.bill_item_id, i.omission_quantity, i.has_omission_build_up_quantity,
        i.addition_quantity, i.has_addition_build_up_quantity, uom.id AS uom_id, uom.symbol AS uom_symbol
        FROM ".SubPackageVariationOrderItemTable::getInstance()->getTableName()." i
        LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON i.uom_id = uom.id AND uom.deleted_at IS NULL
        JOIN ".SubPackageVariationOrderTable::getInstance()->getTableName()." vo ON vo.id = i.sub_package_variation_order_id
        WHERE vo.sub_package_id = ".$subPackage->id." AND i.id IN (".implode(',', $itemIds).") AND i.deleted_at IS NULL
        ORDER BY i.priority, i.lft, i.level");

        $stmt->execute(array());
        $variationOrderItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $variationOrderItems as $variationOrderItem )
        {
            $voIds[$variationOrderItem['sub_package_variation_order_id']] = $variationOrderItem['sub_package_variation_order_id'];
            $newItemIds[$variationOrderItem['id']]                        = $variationOrderItem['id'];
        }

        // get VO's information
        $stmt = $pdo->prepare("SELECT vo.id, vo.description FROM ".SubPackageVariationOrderTable::getInstance()->getTableName()." vo
        WHERE vo.id IN (".implode(',', $voIds).") AND vo.sub_package_id = ".$subPackage->id." AND vo.deleted_at IS NULL
        ORDER BY vo.priority");

        $stmt->execute(array());
        $variationOrders = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // process the data first, then only start the generation of print-out
        foreach ( $variationOrders as $variationOrder )
        {
            foreach($variationOrderItems as $variationOrderItem)
            {
                if ( $variationOrderItem['sub_package_variation_order_id'] != $variationOrder['id'] )
                {
                    continue;
                }

                $variationOrderItem['omission_quantity-value'] = $variationOrderItem['omission_quantity'];
                $variationOrderItem['addition_quantity-value'] = $variationOrderItem['addition_quantity'];
                $variationOrderItem['rate-value']              = $variationOrderItem['rate'];
                $variationOrderItem['type']                    = (string) $variationOrderItem['type'];
                $variationOrderItem['uom_id']                  = $variationOrderItem['uom_id'] > 0 ? (string) $variationOrderItem['uom_id'] : '-1';
                $variationOrderItem['uom_symbol']              = $variationOrderItem['uom_id'] > 0 ? $variationOrderItem['uom_symbol'] : '';

                $variationOrderItem['has_omission']            = ($variationOrderItem['omission_quantity'] != 0) ? true : false;
                $variationOrderItem['has_addition']            = ($variationOrderItem['addition_quantity'] != 0) ? true : false;

                $data[$variationOrder['id']][]                 = $variationOrderItem;
                $dimensionsIds[$variationOrderItem['uom_id']]  = $variationOrderItem['uom_id'];

                unset($variationOrderItem);
            }
        }

        // get variation order item(s) build up summary if available
        $stmt = $pdo->prepare("SELECT * FROM ".SubPackageVariationOrderBuildUpQuantitySummaryTable::getInstance()->getTableName()." voqs
        WHERE voqs.sub_package_variation_order_item_id IN (".implode(',', $newItemIds).") AND voqs.deleted_at IS NULL");

        $stmt->execute();
        $buildupSummaries = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $buildupSummaries as $buildupSummary )
        {
            $buildUpQuantitySummaries[$buildupSummary['type']][$buildupSummary['sub_package_variation_order_item_id']] = $buildupSummary;

            unset($buildupSummary);
        }

        unset($variationOrderItems, $buildupSummaries);

        // get unit's dimension
        if ( count($dimensionsIds) > 0 )
        {
            $unitsDimensions = UnitOfMeasurementDimensionsTable::getUnitDimensionsByUnitIds($dimensionsIds);
        }

        $buildUpItemsWithType = SubPackageVariationOrderBuildUpQuantityItemTable::getBuildUpItemsByVOItemIds($newItemIds);

        return array($data, $variationOrders, $buildUpQuantitySummaries, $unitsDimensions, $buildUpItemsWithType);
    }
}