<?php

/**
 * PostContractClaimRevisionTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PostContractClaimRevisionTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PostContractClaimRevisionTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PostContractClaimRevision');
    }

    public static function getCurrentProjectRevision(PostContract $postContract, $hydrate=true)
    {
        // get current BQ's Claim Version
        $claimCertificateColumns = $postContract->published_type == PostContract::PUBLISHED_TYPE_NEW ? ', cert.id, cert.status' : null;

        $query = DoctrineQuery::create()->select('br.post_contract_id, br.locked_status, br.version'.$claimCertificateColumns)
            ->from('PostContractClaimRevision br');

        if($postContract->published_type == PostContract::PUBLISHED_TYPE_NEW)
        {
            $query->leftJoin('br.ClaimCertificate cert');
        }

        $query->where('br.post_contract_id = ?', $postContract->id)
            ->addOrderBy('br.version DESC')
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
        }

        return $query->fetchOne();
    }

    public static function getCurrentSelectedProjectRevision(PostContract $postContract, $hydrate=true)
    {
        $claimCertificateColumns = $postContract->published_type == PostContract::PUBLISHED_TYPE_NEW ? ', cert.id, cert.status' : null;

        $query = DoctrineQuery::create()->select('br.post_contract_id, br.locked_status, br.version'.$claimCertificateColumns)
            ->from('PostContractClaimRevision br');

        if($postContract->published_type == PostContract::PUBLISHED_TYPE_NEW)
        {
            $query->leftJoin('br.ClaimCertificate cert');
        }

        $query->where('br.post_contract_id = ?', $postContract->id)
            ->andWhere('br.current_selected_revision = ?', true)
            ->addOrderBy('br.version DESC')
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
        }

        return $query->fetchOne();
    }

    public static function getClaimRevision(PostContract $postContract, $version, $hydrate=true)
    {
        $claimCertificateColumns = $postContract->published_type == PostContract::PUBLISHED_TYPE_NEW ? ', cert.id, cert.status' : null;

        $query = DoctrineQuery::create()->select('br.post_contract_id, br.locked_status, br.version'.$claimCertificateColumns)
            ->from('PostContractClaimRevision br');

        if($postContract->published_type == PostContract::PUBLISHED_TYPE_NEW)
        {
            $query->leftJoin('br.ClaimCertificate cert');
        }

        $query->where('br.post_contract_id = ?', $postContract->id)
            ->andWhere('br.version = ?', intval($version))
            ->addOrderBy('br.version DESC')
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
        }

        return $query->fetchOne();
    }

    public static function getPreviousProjectRevision(PostContract $postContract, $version, $hydrate=true)
    {
        $claimCertificateColumns = $postContract->published_type == PostContract::PUBLISHED_TYPE_NEW ? ', cert.id, cert.status' : null;

        $query = DoctrineQuery::create()->select('br.post_contract_id, br.locked_status, br.version'.$claimCertificateColumns)
            ->from('PostContractClaimRevision br');

        if($postContract->published_type == PostContract::PUBLISHED_TYPE_NEW)
        {
            $query->leftJoin('br.ClaimCertificate cert');
        }

        $query->where('br.post_contract_id = ?', $postContract->id)
            ->andWhere('br.version < ?', intval($version))
            ->addOrderBy('br.version DESC')
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
        }

        return $query->fetchOne();
    }

    public static function getNextProjectRevision(PostContract $postContract, $version, $hydrate=true)
    {
        $claimCertificateColumns = $postContract->published_type == PostContract::PUBLISHED_TYPE_NEW ? ', cert.id, cert.status' : null;

        $query = DoctrineQuery::create()->select('br.post_contract_id, br.locked_status, br.version'.$claimCertificateColumns)
            ->from('PostContractClaimRevision br');

        if($postContract->published_type == PostContract::PUBLISHED_TYPE_NEW)
        {
            $query->leftJoin('br.ClaimCertificate cert');
        }

        $query->where('br.post_contract_id = ?', $postContract->id)
            ->andWhere('br.version > ?', intval($version))
            ->addOrderBy('br.version ASC')
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
        }

        return $query->fetchOne();
    }

    public static function getClaimCertificates($claimRevisionId, $versionRangeOperator = '=')
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $claimRevision = Doctrine_Core::getTable('PostContractClaimRevision')->find($claimRevisionId);

        $stmt = $pdo->prepare("SELECT cert.id
                FROM ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev
                JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON cert.post_contract_claim_revision_id = rev.id
                WHERE rev.post_contract_id = :postContractId
                AND rev.version {$versionRangeOperator} :version
                AND rev.deleted_at IS NULL ORDER BY rev.version ASC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id ?? 0, 'version' => $claimRevision->version ?? 0 ));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}