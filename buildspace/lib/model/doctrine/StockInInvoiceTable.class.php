<?php

/**
 * StockInInvoiceTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StockInInvoiceTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object StockInInvoiceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('StockInInvoice');
    }

    public static function getInvoicesByProject(ProjectStructure $project)
    {
        return Doctrine_Query::create()
        ->select('i.id, i.invoice_no, i.invoice_date, po.id as purchase_order_id, pos.id as purchase_order_supplier_id,
        po.prefix as po_prefix, po.po_count, cb.id as creator_id, pr.name as creator_name, c.name as company_name')
        ->from('StockInInvoice i')
        ->leftJoin('i.PurchaseOrder po')
        ->leftJoin('po.PurchaseOrderSupplier pos')
        ->leftJoin('pos.Company c')
        ->leftJoin('i.Creator cb')
        ->leftJoin('cb.Profile pr')
        ->where('i.project_structure_id = ?', array($project->id))
        ->orderBy('i.id DESC')
        ->fetchArray();
    }

    public static function generateDropDownSelectionsForTerms()
    {
        $data = array();

        $data[] = array(
            'id'   => (string) StockInInvoice::TERM_CASH_ID,
            'name' => StockInInvoice::TERM_CASH_TEXT,
        );

        $data[] = array(
            'id'   => (string) StockInInvoice::TERM_30_DAYS_ID,
            'name' => StockInInvoice::TERM_30_DAYS_TEXT,
        );

        $data[] = array(
            'id'   => (string) StockInInvoice::TERM_60_DAYS_ID,
            'name' => StockInInvoice::TERM_60_DAYS_TEXT,
        );

        return array(
            'identifier' => 'id',
            'label'      => 'name',
            'items'      => $data
        );
    }

    public static function getTermTypeText($termType)
    {
        $termTypeText = null;

        switch ($termType)
        {
            case StockInInvoice::TERM_CASH_ID:
                $termTypeText = StockInInvoice::TERM_CASH_TEXT;
                break;

            case StockInInvoice::TERM_30_DAYS_ID:
                $termTypeText = StockInInvoice::TERM_30_DAYS_TEXT;
                break;

            case StockInInvoice::TERM_60_DAYS_ID:
                $termTypeText = StockInInvoice::TERM_60_DAYS_TEXT;
                break;
        }

        return $termTypeText;
    }

    public static function getProjectsThatHasInvoice()
    {
        $data       = array();
        $projectIds = array();
        $pdo        = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare('SELECT DISTINCT p.id, p.title FROM '.self::getInstance()->getTableName().' sii
        JOIN '.ProjectStructureTable::getInstance()->getTableName().' p ON (p.id = sii.project_structure_id AND p.deleted_at IS NULL)
        WHERE sii.deleted_at IS NULL ORDER BY p.id DESC');

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $records as $project )
        {
            $projectIds[$project['id']] = $project['id'];

            unset($project);
        }

        unset($records);

        if (empty($projectIds))
        {
            return $data;
        }

        $projects = DoctrineQuery::create()
        ->select('p.id, p.title, m.status, r.country, sr.name, p.created_at, cb.id as creator_id, pr.name')
        ->from('ProjectStructure p')
        ->leftJoin('p.MainInformation m')
        ->leftJoin('m.Regions r')
        ->leftJoin('m.Subregions sr')
        ->leftJoin('p.Creator cb')
        ->leftJoin('cb.Profile pr')
        ->whereIn('p.id', $projectIds)
        ->addOrderBy('p.id DESC')
        ->fetchArray();

        foreach ( $projects as $project )
        {
            $data[] = array(
                'id'         => $project['id'],
                'title'      => $project['title'],
                'status'     => ProjectMainInformation::getProjectStatusById($project['MainInformation']['status']),
                'status_id'  => $project['MainInformation']['status'],
                'state'      => ( $project['MainInformation']['Subregions']['name'] ) ? $project['MainInformation']['Subregions']['name'] : "N/A",
                'country'    => ( $project['MainInformation']['Regions']['country'] ) ? $project['MainInformation']['Regions']['country'] : "N/A",
                'created_by' => ( $project['Creator']['Profile']['name'] ) ? $project['Creator']['Profile']['name'] : '-',
                'created_at' => date('d/m/Y H:i', strtotime($project['created_at'])),
            );

            unset($project);
        }

        unset($projects);

        return $data;
    }
}