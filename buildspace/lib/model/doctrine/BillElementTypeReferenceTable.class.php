<?php

/**
 * BillElementTypeReferenceTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillElementTypeReferenceTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BillElementTypeReferenceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillElementTypeReference');
    }

    public static function getByElementIdAndBillColumnSettingId($elementId, $billColumnSettingId, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('BillElementTypeReference r')
            ->where('r.bill_element_id = ?', $elementId)
            ->andWhere('r.bill_column_setting_id = ?', $billColumnSettingId)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->count() > 0 ? $query->fetchOne() : false;
    }

    public static function getOverallOriginalTotalItemRateByElementIdAndBillColumnSettingId($elementId, Array $billColumnSetting)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        // We'll fetch and SUM the latest Grand Total Element
        $sql = "SELECT COALESCE(SUM(type.grand_total),0) AS total_rate
                FROM ".BillItemTable::getInstance()->getTableName()." AS item
                LEFT JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." AS type ON type.bill_item_id = item.id
                WHERE item.project_revision_deleted_at IS NULL AND item.element_id = :element_id
                AND type.bill_column_setting_id = :bill_column_setting_id AND item.deleted_at IS NULL";

        $stmt = $pdo->prepare($sql);

        $stmt->execute(array(
            'element_id' => $elementId,
            'bill_column_setting_id' => $billColumnSetting['id']
        ));

        $originalTotalRate = $stmt->fetch(PDO::FETCH_ASSOC);

        return $originalTotalRate['total_rate'];
    }

    public static function getTotalItemRateByElementIdAndBillColumnSettingId($elementId, Array $billColumnSetting, Array $markupSettingsInfo)
    {
        $data = array('total_rate_after_markup' => 0,'original_total_rate' => 0);

        $billItemFormulatedColumnTable = Doctrine_Core::getTable('BillItemFormulatedColumn');
        $billItemTypeReferenceTable = Doctrine_Core::getTable('BillItemTypeReference');
        $billItemTypeReferenceFormulatedColumnTable = Doctrine_Core::getTable('BillItemTypeReferenceFormulatedColumn');
        $billItemTable = Doctrine_Core::getTable('BillItem');

        $quantityColumnName = $billColumnSetting['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

        /*
        * Sum original rate (no markup)
        */
        $originalTotalRate = self::getOverallOriginalTotalItemRateByElementIdAndBillColumnSettingId($elementId, $billColumnSetting);

        if($markupSettingsInfo['item_markup_enabled'] || $markupSettingsInfo['element_markup_enabled'] || $markupSettingsInfo['bill_markup_enabled'])
        {
            if($markupSettingsInfo['item_markup_enabled'])
            {
                $sqlWithMarkup = "(type.grand_total + COALESCE((type.grand_total * ifc.final_value) / 100 ,0))";
            }

            if($markupSettingsInfo['element_markup_enabled'])
            {
                $elementMarkupPercentage = $markupSettingsInfo['element_markup_percentage'] ? $markupSettingsInfo['element_markup_percentage'] : 0;
                $sqlWithMarkup = $markupSettingsInfo['item_markup_enabled'] ? $sqlWithMarkup." + (".$sqlWithMarkup." * (".$elementMarkupPercentage." / 100))" : "type.grand_total + (type.grand_total * (".$elementMarkupPercentage." / 100))";
            }

            if($markupSettingsInfo['bill_markup_enabled'] && $markupSettingsInfo['bill_markup_percentage'] != 0)
            {
                if($markupSettingsInfo['element_markup_enabled'] || $markupSettingsInfo['item_markup_enabled'])
                {
                    $sqlWithMarkup = $sqlWithMarkup."+ (".$sqlWithMarkup." * (".$markupSettingsInfo['bill_markup_percentage']." / 100))";
                }
                else
                {
                    $sqlWithMarkup = "rate.final_value + (rate.final_value * ".$markupSettingsInfo['bill_markup_percentage']." / 100)";
                }
            }

            switch($markupSettingsInfo['rounding_type'])
            {
                case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                    $sqlWithMarkup = 'CEIL('.$sqlWithMarkup.')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                    $sqlWithMarkup = 'FLOOR('.$sqlWithMarkup.')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                    $sqlWithMarkup = 'ROUND('.$sqlWithMarkup.')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                    $sqlWithMarkup = 'ROUND(('.$sqlWithMarkup.') * 10) / 10';
                    break;
                default:
                    $sqlWithMarkup = 'ROUND('.$sqlWithMarkup.', 2)';
            }

            $totalRateAfterMarkup = Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("SELECT COALESCE(SUM( ".$sqlWithMarkup." ),0) AS rate_after_item_markup
                FROM ".BillItemTable::getInstance()->getTableName()." AS item
                LEFT JOIN ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS ifc ON ifc.relation_id = item.id
                AND ifc.column_name = '".BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
                LEFT JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." AS type ON type.bill_item_id = item.id
                WHERE item.project_revision_deleted_at IS NULL AND item.element_id = ".$elementId."
                AND type.bill_column_setting_id = ".$billColumnSetting['id']." AND item.deleted_at IS NULL");

            $data['total_rate_after_markup'] = $totalRateAfterMarkup[0]['rate_after_item_markup'];
        }
        else
        {
            $data['total_rate_after_markup'] = $originalTotalRate;
        }

        $data['original_total_rate'] = $originalTotalRate;

        return $data;
    }
}