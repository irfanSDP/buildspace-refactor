<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TenderAlternative', 'main_conn');

/**
 * BaseTenderAlternative
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property integer $project_structure_id
 * @property string $tender_origin_id
 * @property integer $project_revision_id
 * @property integer $deleted_at_project_revision_id
 * @property timestamp $project_revision_deleted_at
 * @property boolean $is_awarded
 * @property ProjectStructure $ProjectStructure
 * @property ProjectRevision $ProjectRevision
 * @property Doctrine_Collection $Bills
 * 
 * @method integer             getId()                             Returns the current record's "id" value
 * @method string              getTitle()                          Returns the current record's "title" value
 * @method string              getDescription()                    Returns the current record's "description" value
 * @method integer             getProjectStructureId()             Returns the current record's "project_structure_id" value
 * @method string              getTenderOriginId()                 Returns the current record's "tender_origin_id" value
 * @method integer             getProjectRevisionId()              Returns the current record's "project_revision_id" value
 * @method integer             getDeletedAtProjectRevisionId()     Returns the current record's "deleted_at_project_revision_id" value
 * @method timestamp           getProjectRevisionDeletedAt()       Returns the current record's "project_revision_deleted_at" value
 * @method boolean             getIsAwarded()                      Returns the current record's "is_awarded" value
 * @method ProjectStructure    getProjectStructure()               Returns the current record's "ProjectStructure" value
 * @method ProjectRevision     getProjectRevision()                Returns the current record's "ProjectRevision" value
 * @method Doctrine_Collection getBills()                          Returns the current record's "Bills" collection
 * @method TenderAlternative   setId()                             Sets the current record's "id" value
 * @method TenderAlternative   setTitle()                          Sets the current record's "title" value
 * @method TenderAlternative   setDescription()                    Sets the current record's "description" value
 * @method TenderAlternative   setProjectStructureId()             Sets the current record's "project_structure_id" value
 * @method TenderAlternative   setTenderOriginId()                 Sets the current record's "tender_origin_id" value
 * @method TenderAlternative   setProjectRevisionId()              Sets the current record's "project_revision_id" value
 * @method TenderAlternative   setDeletedAtProjectRevisionId()     Sets the current record's "deleted_at_project_revision_id" value
 * @method TenderAlternative   setProjectRevisionDeletedAt()       Sets the current record's "project_revision_deleted_at" value
 * @method TenderAlternative   setIsAwarded()                      Sets the current record's "is_awarded" value
 * @method TenderAlternative   setProjectStructure()               Sets the current record's "ProjectStructure" value
 * @method TenderAlternative   setProjectRevision()                Sets the current record's "ProjectRevision" value
 * @method TenderAlternative   setBills()                          Sets the current record's "Bills" collection
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTenderAlternative extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tender_alternatives');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('title', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('project_structure_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('tender_origin_id', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('project_revision_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('deleted_at_project_revision_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('project_revision_deleted_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('is_awarded', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));


        $this->index('tender_alternative_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'project_structure_id',
              2 => 'project_revision_deleted_at',
             ),
             ));
        $this->index('tender_alternative_fk_idx', array(
             'fields' => 
             array(
              0 => 'project_structure_id',
              1 => 'project_revision_id',
              2 => 'deleted_at_project_revision_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProjectStructure', array(
             'local' => 'project_structure_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('ProjectRevision', array(
             'local' => 'project_revision_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('TenderAlternativeBill as Bills', array(
             'local' => 'id',
             'foreign' => 'tender_alternative_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}