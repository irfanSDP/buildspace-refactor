<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('VariationOrderBuildUpQuantitySummary', 'main_conn');

/**
 * BaseVariationOrderBuildUpQuantitySummary
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $variation_order_item_id
 * @property decimal $linked_total_quantity
 * @property decimal $total_quantity
 * @property decimal $final_quantity
 * @property boolean $apply_conversion_factor
 * @property decimal $conversion_factor_amount
 * @property varchar $conversion_factor_operator
 * @property integer $rounding_type
 * @property integer $type
 * @property VariationOrderItem $VariationOrderItem
 * 
 * @method integer                              getId()                         Returns the current record's "id" value
 * @method integer                              getVariationOrderItemId()       Returns the current record's "variation_order_item_id" value
 * @method decimal                              getLinkedTotalQuantity()        Returns the current record's "linked_total_quantity" value
 * @method decimal                              getTotalQuantity()              Returns the current record's "total_quantity" value
 * @method decimal                              getFinalQuantity()              Returns the current record's "final_quantity" value
 * @method boolean                              getApplyConversionFactor()      Returns the current record's "apply_conversion_factor" value
 * @method decimal                              getConversionFactorAmount()     Returns the current record's "conversion_factor_amount" value
 * @method varchar                              getConversionFactorOperator()   Returns the current record's "conversion_factor_operator" value
 * @method integer                              getRoundingType()               Returns the current record's "rounding_type" value
 * @method integer                              getType()                       Returns the current record's "type" value
 * @method VariationOrderItem                   getVariationOrderItem()         Returns the current record's "VariationOrderItem" value
 * @method VariationOrderBuildUpQuantitySummary setId()                         Sets the current record's "id" value
 * @method VariationOrderBuildUpQuantitySummary setVariationOrderItemId()       Sets the current record's "variation_order_item_id" value
 * @method VariationOrderBuildUpQuantitySummary setLinkedTotalQuantity()        Sets the current record's "linked_total_quantity" value
 * @method VariationOrderBuildUpQuantitySummary setTotalQuantity()              Sets the current record's "total_quantity" value
 * @method VariationOrderBuildUpQuantitySummary setFinalQuantity()              Sets the current record's "final_quantity" value
 * @method VariationOrderBuildUpQuantitySummary setApplyConversionFactor()      Sets the current record's "apply_conversion_factor" value
 * @method VariationOrderBuildUpQuantitySummary setConversionFactorAmount()     Sets the current record's "conversion_factor_amount" value
 * @method VariationOrderBuildUpQuantitySummary setConversionFactorOperator()   Sets the current record's "conversion_factor_operator" value
 * @method VariationOrderBuildUpQuantitySummary setRoundingType()               Sets the current record's "rounding_type" value
 * @method VariationOrderBuildUpQuantitySummary setType()                       Sets the current record's "type" value
 * @method VariationOrderBuildUpQuantitySummary setVariationOrderItem()         Sets the current record's "VariationOrderItem" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseVariationOrderBuildUpQuantitySummary extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('variation_order_build_up_quantity_summaries');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('variation_order_item_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('linked_total_quantity', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('total_quantity', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('final_quantity', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('apply_conversion_factor', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('conversion_factor_amount', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('conversion_factor_operator', 'varchar', 1, array(
             'type' => 'varchar',
             'notnull' => true,
             'length' => 1,
             ));
        $this->hasColumn('rounding_type', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('type', 'integer', 2, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 2,
             ));


        $this->index('vo_buq_summary_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'variation_order_item_id',
              2 => 'deleted_at',
             ),
             ));
        $this->index('vo_buq_unique_idx', array(
             'fields' => 
             array(
              0 => 'variation_order_item_id',
              1 => 'type',
              2 => 'deleted_at',
             ),
             'type' => 'unique',
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('VariationOrderItem', array(
             'local' => 'variation_order_item_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}