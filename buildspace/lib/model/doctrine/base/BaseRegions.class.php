<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Regions', 'main_conn');

/**
 * BaseRegions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property varchar $iso
 * @property varchar $iso3
 * @property varchar $fips
 * @property varchar $country
 * @property varchar $continent
 * @property string $currency_code
 * @property string $currency_name
 * @property varchar $phone_prefix
 * @property varchar $postal_code
 * @property varchar $languages
 * @property varchar $geonameid
 * @property Doctrine_Collection $Companies
 * @property Doctrine_Collection $CompanyBranches
 * @property Doctrine_Collection $CostData
 * @property Doctrine_Collection $CalendarSetting
 * @property Doctrine_Collection $GlobalCalendarEvents
 * @property Doctrine_Collection $myCompanyProfile
 * @property Doctrine_Collection $ProjectsInformation
 * @property Doctrine_Collection $PurchaseOrderRequests
 * @property Doctrine_Collection $Subregions
 * @property Doctrine_Collection $QuotationRequests
 * 
 * @method integer             getId()                    Returns the current record's "id" value
 * @method varchar             getIso()                   Returns the current record's "iso" value
 * @method varchar             getIso3()                  Returns the current record's "iso3" value
 * @method varchar             getFips()                  Returns the current record's "fips" value
 * @method varchar             getCountry()               Returns the current record's "country" value
 * @method varchar             getContinent()             Returns the current record's "continent" value
 * @method string              getCurrencyCode()          Returns the current record's "currency_code" value
 * @method string              getCurrencyName()          Returns the current record's "currency_name" value
 * @method varchar             getPhonePrefix()           Returns the current record's "phone_prefix" value
 * @method varchar             getPostalCode()            Returns the current record's "postal_code" value
 * @method varchar             getLanguages()             Returns the current record's "languages" value
 * @method varchar             getGeonameid()             Returns the current record's "geonameid" value
 * @method Doctrine_Collection getCompanies()             Returns the current record's "Companies" collection
 * @method Doctrine_Collection getCompanyBranches()       Returns the current record's "CompanyBranches" collection
 * @method Doctrine_Collection getCostData()              Returns the current record's "CostData" collection
 * @method Doctrine_Collection getCalendarSetting()       Returns the current record's "CalendarSetting" collection
 * @method Doctrine_Collection getGlobalCalendarEvents()  Returns the current record's "GlobalCalendarEvents" collection
 * @method Doctrine_Collection getMyCompanyProfile()      Returns the current record's "myCompanyProfile" collection
 * @method Doctrine_Collection getProjectsInformation()   Returns the current record's "ProjectsInformation" collection
 * @method Doctrine_Collection getPurchaseOrderRequests() Returns the current record's "PurchaseOrderRequests" collection
 * @method Doctrine_Collection getSubregions()            Returns the current record's "Subregions" collection
 * @method Doctrine_Collection getQuotationRequests()     Returns the current record's "QuotationRequests" collection
 * @method Regions             setId()                    Sets the current record's "id" value
 * @method Regions             setIso()                   Sets the current record's "iso" value
 * @method Regions             setIso3()                  Sets the current record's "iso3" value
 * @method Regions             setFips()                  Sets the current record's "fips" value
 * @method Regions             setCountry()               Sets the current record's "country" value
 * @method Regions             setContinent()             Sets the current record's "continent" value
 * @method Regions             setCurrencyCode()          Sets the current record's "currency_code" value
 * @method Regions             setCurrencyName()          Sets the current record's "currency_name" value
 * @method Regions             setPhonePrefix()           Sets the current record's "phone_prefix" value
 * @method Regions             setPostalCode()            Sets the current record's "postal_code" value
 * @method Regions             setLanguages()             Sets the current record's "languages" value
 * @method Regions             setGeonameid()             Sets the current record's "geonameid" value
 * @method Regions             setCompanies()             Sets the current record's "Companies" collection
 * @method Regions             setCompanyBranches()       Sets the current record's "CompanyBranches" collection
 * @method Regions             setCostData()              Sets the current record's "CostData" collection
 * @method Regions             setCalendarSetting()       Sets the current record's "CalendarSetting" collection
 * @method Regions             setGlobalCalendarEvents()  Sets the current record's "GlobalCalendarEvents" collection
 * @method Regions             setMyCompanyProfile()      Sets the current record's "myCompanyProfile" collection
 * @method Regions             setProjectsInformation()   Sets the current record's "ProjectsInformation" collection
 * @method Regions             setPurchaseOrderRequests() Sets the current record's "PurchaseOrderRequests" collection
 * @method Regions             setSubregions()            Sets the current record's "Subregions" collection
 * @method Regions             setQuotationRequests()     Sets the current record's "QuotationRequests" collection
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRegions extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('regions');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'sequence' => 'regions_id',
             ));
        $this->hasColumn('iso', 'varchar', 2, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 2,
             ));
        $this->hasColumn('iso3', 'varchar', 3, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 3,
             ));
        $this->hasColumn('fips', 'varchar', 2, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 2,
             ));
        $this->hasColumn('country', 'varchar', 255, array(
             'type' => 'varchar',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('continent', 'varchar', 255, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('currency_code', 'string', 3, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 3,
             ));
        $this->hasColumn('currency_name', 'string', 60, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 60,
             ));
        $this->hasColumn('phone_prefix', 'varchar', 20, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('postal_code', 'varchar', 20, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('languages', 'varchar', 50, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 50,
             ));
        $this->hasColumn('geonameid', 'varchar', 10, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 10,
             ));


        $this->index('region_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Company as Companies', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('CompanyBranch as CompanyBranches', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('CostData', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('GlobalCalendarSetting as CalendarSetting', array(
             'local' => 'id',
             'foreign' => 'default_region_id'));

        $this->hasMany('GlobalCalendar as GlobalCalendarEvents', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('myCompanyProfile', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('ProjectMainInformation as ProjectsInformation', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('PurchaseOrder as PurchaseOrderRequests', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('Subregions', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('RFQ as QuotationRequests', array(
             'local' => 'id',
             'foreign' => 'region_id'));
    }
}