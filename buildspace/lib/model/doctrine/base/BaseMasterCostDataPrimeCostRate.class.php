<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MasterCostDataPrimeCostRate', 'main_conn');

/**
 * BaseMasterCostDataPrimeCostRate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $master_cost_data_id
 * @property integer $parent_id
 * @property string $description
 * @property integer $priority
 * @property integer $level
 * @property integer $uom_id
 * @property MasterCostData $MasterCostData
 * @property MasterCostDataPrimeCostRate $Parent
 * @property UnitOfMeasurement $UnitOfMeasurement
 * @property Doctrine_Collection $CostDataPrimeCostRate
 * @property Doctrine_Collection $Children
 * 
 * @method integer                     getId()                    Returns the current record's "id" value
 * @method integer                     getMasterCostDataId()      Returns the current record's "master_cost_data_id" value
 * @method integer                     getParentId()              Returns the current record's "parent_id" value
 * @method string                      getDescription()           Returns the current record's "description" value
 * @method integer                     getPriority()              Returns the current record's "priority" value
 * @method integer                     getLevel()                 Returns the current record's "level" value
 * @method integer                     getUomId()                 Returns the current record's "uom_id" value
 * @method MasterCostData              getMasterCostData()        Returns the current record's "MasterCostData" value
 * @method MasterCostDataPrimeCostRate getParent()                Returns the current record's "Parent" value
 * @method UnitOfMeasurement           getUnitOfMeasurement()     Returns the current record's "UnitOfMeasurement" value
 * @method Doctrine_Collection         getCostDataPrimeCostRate() Returns the current record's "CostDataPrimeCostRate" collection
 * @method Doctrine_Collection         getChildren()              Returns the current record's "Children" collection
 * @method MasterCostDataPrimeCostRate setId()                    Sets the current record's "id" value
 * @method MasterCostDataPrimeCostRate setMasterCostDataId()      Sets the current record's "master_cost_data_id" value
 * @method MasterCostDataPrimeCostRate setParentId()              Sets the current record's "parent_id" value
 * @method MasterCostDataPrimeCostRate setDescription()           Sets the current record's "description" value
 * @method MasterCostDataPrimeCostRate setPriority()              Sets the current record's "priority" value
 * @method MasterCostDataPrimeCostRate setLevel()                 Sets the current record's "level" value
 * @method MasterCostDataPrimeCostRate setUomId()                 Sets the current record's "uom_id" value
 * @method MasterCostDataPrimeCostRate setMasterCostData()        Sets the current record's "MasterCostData" value
 * @method MasterCostDataPrimeCostRate setParent()                Sets the current record's "Parent" value
 * @method MasterCostDataPrimeCostRate setUnitOfMeasurement()     Sets the current record's "UnitOfMeasurement" value
 * @method MasterCostDataPrimeCostRate setCostDataPrimeCostRate() Sets the current record's "CostDataPrimeCostRate" collection
 * @method MasterCostDataPrimeCostRate setChildren()              Sets the current record's "Children" collection
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMasterCostDataPrimeCostRate extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('master_cost_data_prime_cost_rates');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('master_cost_data_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('parent_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('priority', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('level', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('uom_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));


        $this->index('master_cost_data_prime_cost_rate_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             ));
        $this->index('master_cost_data_prime_cost_rate_idx', array(
             'fields' => 
             array(
              0 => 'master_cost_data_id',
              1 => 'parent_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MasterCostData', array(
             'local' => 'master_cost_data_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('MasterCostDataPrimeCostRate as Parent', array(
             'local' => 'parent_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('UnitOfMeasurement', array(
             'local' => 'uom_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('CostDataPrimeCostRate', array(
             'local' => 'id',
             'foreign' => 'master_cost_data_prime_cost_rate_id'));

        $this->hasMany('MasterCostDataPrimeCostRate as Children', array(
             'local' => 'id',
             'foreign' => 'parent_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}