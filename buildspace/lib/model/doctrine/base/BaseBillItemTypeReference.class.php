<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('BillItemTypeReference', 'main_conn');

/**
 * BaseBillItemTypeReference
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $bill_item_id
 * @property integer $bill_column_setting_id
 * @property boolean $include
 * @property decimal $quantity_per_unit_difference
 * @property decimal $total_quantity
 * @property decimal $grand_total
 * @property decimal $grand_total_after_markup
 * @property BillItem $BillItem
 * @property BillColumnSetting $BillColumnSetting
 * @property Doctrine_Collection $FormulatedColumns
 * 
 * @method integer               getId()                           Returns the current record's "id" value
 * @method integer               getBillItemId()                   Returns the current record's "bill_item_id" value
 * @method integer               getBillColumnSettingId()          Returns the current record's "bill_column_setting_id" value
 * @method boolean               getInclude()                      Returns the current record's "include" value
 * @method decimal               getQuantityPerUnitDifference()    Returns the current record's "quantity_per_unit_difference" value
 * @method decimal               getTotalQuantity()                Returns the current record's "total_quantity" value
 * @method decimal               getGrandTotal()                   Returns the current record's "grand_total" value
 * @method decimal               getGrandTotalAfterMarkup()        Returns the current record's "grand_total_after_markup" value
 * @method BillItem              getBillItem()                     Returns the current record's "BillItem" value
 * @method BillColumnSetting     getBillColumnSetting()            Returns the current record's "BillColumnSetting" value
 * @method Doctrine_Collection   getFormulatedColumns()            Returns the current record's "FormulatedColumns" collection
 * @method BillItemTypeReference setId()                           Sets the current record's "id" value
 * @method BillItemTypeReference setBillItemId()                   Sets the current record's "bill_item_id" value
 * @method BillItemTypeReference setBillColumnSettingId()          Sets the current record's "bill_column_setting_id" value
 * @method BillItemTypeReference setInclude()                      Sets the current record's "include" value
 * @method BillItemTypeReference setQuantityPerUnitDifference()    Sets the current record's "quantity_per_unit_difference" value
 * @method BillItemTypeReference setTotalQuantity()                Sets the current record's "total_quantity" value
 * @method BillItemTypeReference setGrandTotal()                   Sets the current record's "grand_total" value
 * @method BillItemTypeReference setGrandTotalAfterMarkup()        Sets the current record's "grand_total_after_markup" value
 * @method BillItemTypeReference setBillItem()                     Sets the current record's "BillItem" value
 * @method BillItemTypeReference setBillColumnSetting()            Sets the current record's "BillColumnSetting" value
 * @method BillItemTypeReference setFormulatedColumns()            Sets the current record's "FormulatedColumns" collection
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBillItemTypeReference extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('bill_item_type_references');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('bill_item_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('bill_column_setting_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('include', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('quantity_per_unit_difference', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'notnull' => false,
             ));
        $this->hasColumn('total_quantity', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('grand_total', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('grand_total_after_markup', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));


        $this->index('bill_itr_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'bill_item_id',
              2 => 'bill_column_setting_id',
              3 => 'deleted_at',
             ),
             ));
        $this->index('bill_itr_fk_idx', array(
             'fields' => 
             array(
              0 => 'bill_item_id',
              1 => 'bill_column_setting_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('BillItem', array(
             'local' => 'bill_item_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('BillColumnSetting', array(
             'local' => 'bill_column_setting_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('BillItemTypeReferenceFormulatedColumn as FormulatedColumns', array(
             'local' => 'id',
             'foreign' => 'relation_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}