<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('CostData', 'main_conn');

/**
 * BaseCostData
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $master_cost_data_id
 * @property string $name
 * @property integer $subsidiary_id
 * @property timestamp $approved_date
 * @property timestamp $awarded_date
 * @property timestamp $adjusted_date
 * @property integer $cost_data_type_id
 * @property integer $region_id
 * @property integer $subregion_id
 * @property integer $currency_id
 * @property timestamp $tender_date
 * @property timestamp $award_date
 * @property MasterCostData $MasterCostData
 * @property CostDataType $CostDataType
 * @property Regions $Region
 * @property Subregions $SubRegion
 * @property Currency $Currency
 * @property Doctrine_Collection $CostDataParticular
 * @property Doctrine_Collection $CostDataItem
 * @property Doctrine_Collection $CostDataProject
 * @property Doctrine_Collection $CostDataProjectInformation
 * @property Doctrine_Collection $CostDataNodelessItemRemarks
 * @property Doctrine_Collection $CostDataPrimeCostRate
 * @property Doctrine_Collection $CostDataPrimeCostSumItem
 * @property Doctrine_Collection $CostDataPrimeCostSumColumnDefinition
 * @property Doctrine_Collection $CostDataProvisionalSumItem
 * 
 * @method integer             getId()                                   Returns the current record's "id" value
 * @method integer             getMasterCostDataId()                     Returns the current record's "master_cost_data_id" value
 * @method string              getName()                                 Returns the current record's "name" value
 * @method integer             getSubsidiaryId()                         Returns the current record's "subsidiary_id" value
 * @method timestamp           getApprovedDate()                         Returns the current record's "approved_date" value
 * @method timestamp           getAwardedDate()                          Returns the current record's "awarded_date" value
 * @method timestamp           getAdjustedDate()                         Returns the current record's "adjusted_date" value
 * @method integer             getCostDataTypeId()                       Returns the current record's "cost_data_type_id" value
 * @method integer             getRegionId()                             Returns the current record's "region_id" value
 * @method integer             getSubregionId()                          Returns the current record's "subregion_id" value
 * @method integer             getCurrencyId()                           Returns the current record's "currency_id" value
 * @method timestamp           getTenderDate()                           Returns the current record's "tender_date" value
 * @method timestamp           getAwardDate()                            Returns the current record's "award_date" value
 * @method MasterCostData      getMasterCostData()                       Returns the current record's "MasterCostData" value
 * @method CostDataType        getCostDataType()                         Returns the current record's "CostDataType" value
 * @method Regions             getRegion()                               Returns the current record's "Region" value
 * @method Subregions          getSubRegion()                            Returns the current record's "SubRegion" value
 * @method Currency            getCurrency()                             Returns the current record's "Currency" value
 * @method Doctrine_Collection getCostDataParticular()                   Returns the current record's "CostDataParticular" collection
 * @method Doctrine_Collection getCostDataItem()                         Returns the current record's "CostDataItem" collection
 * @method Doctrine_Collection getCostDataProject()                      Returns the current record's "CostDataProject" collection
 * @method Doctrine_Collection getCostDataProjectInformation()           Returns the current record's "CostDataProjectInformation" collection
 * @method Doctrine_Collection getCostDataNodelessItemRemarks()          Returns the current record's "CostDataNodelessItemRemarks" collection
 * @method Doctrine_Collection getCostDataPrimeCostRate()                Returns the current record's "CostDataPrimeCostRate" collection
 * @method Doctrine_Collection getCostDataPrimeCostSumItem()             Returns the current record's "CostDataPrimeCostSumItem" collection
 * @method Doctrine_Collection getCostDataPrimeCostSumColumnDefinition() Returns the current record's "CostDataPrimeCostSumColumnDefinition" collection
 * @method Doctrine_Collection getCostDataProvisionalSumItem()           Returns the current record's "CostDataProvisionalSumItem" collection
 * @method CostData            setId()                                   Sets the current record's "id" value
 * @method CostData            setMasterCostDataId()                     Sets the current record's "master_cost_data_id" value
 * @method CostData            setName()                                 Sets the current record's "name" value
 * @method CostData            setSubsidiaryId()                         Sets the current record's "subsidiary_id" value
 * @method CostData            setApprovedDate()                         Sets the current record's "approved_date" value
 * @method CostData            setAwardedDate()                          Sets the current record's "awarded_date" value
 * @method CostData            setAdjustedDate()                         Sets the current record's "adjusted_date" value
 * @method CostData            setCostDataTypeId()                       Sets the current record's "cost_data_type_id" value
 * @method CostData            setRegionId()                             Sets the current record's "region_id" value
 * @method CostData            setSubregionId()                          Sets the current record's "subregion_id" value
 * @method CostData            setCurrencyId()                           Sets the current record's "currency_id" value
 * @method CostData            setTenderDate()                           Sets the current record's "tender_date" value
 * @method CostData            setAwardDate()                            Sets the current record's "award_date" value
 * @method CostData            setMasterCostData()                       Sets the current record's "MasterCostData" value
 * @method CostData            setCostDataType()                         Sets the current record's "CostDataType" value
 * @method CostData            setRegion()                               Sets the current record's "Region" value
 * @method CostData            setSubRegion()                            Sets the current record's "SubRegion" value
 * @method CostData            setCurrency()                             Sets the current record's "Currency" value
 * @method CostData            setCostDataParticular()                   Sets the current record's "CostDataParticular" collection
 * @method CostData            setCostDataItem()                         Sets the current record's "CostDataItem" collection
 * @method CostData            setCostDataProject()                      Sets the current record's "CostDataProject" collection
 * @method CostData            setCostDataProjectInformation()           Sets the current record's "CostDataProjectInformation" collection
 * @method CostData            setCostDataNodelessItemRemarks()          Sets the current record's "CostDataNodelessItemRemarks" collection
 * @method CostData            setCostDataPrimeCostRate()                Sets the current record's "CostDataPrimeCostRate" collection
 * @method CostData            setCostDataPrimeCostSumItem()             Sets the current record's "CostDataPrimeCostSumItem" collection
 * @method CostData            setCostDataPrimeCostSumColumnDefinition() Sets the current record's "CostDataPrimeCostSumColumnDefinition" collection
 * @method CostData            setCostDataProvisionalSumItem()           Sets the current record's "CostDataProvisionalSumItem" collection
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCostData extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('cost_data');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('master_cost_data_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 200,
             ));
        $this->hasColumn('subsidiary_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('approved_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('awarded_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('adjusted_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('cost_data_type_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('region_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('subregion_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('currency_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('tender_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('award_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));


        $this->index('cost_data_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MasterCostData', array(
             'local' => 'master_cost_data_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('CostDataType', array(
             'local' => 'cost_data_type_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Regions as Region', array(
             'local' => 'region_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Subregions as SubRegion', array(
             'local' => 'sub_region_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Currency', array(
             'local' => 'currency_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('CostDataParticular', array(
             'local' => 'id',
             'foreign' => 'cost_data_id'));

        $this->hasMany('CostDataItem', array(
             'local' => 'id',
             'foreign' => 'cost_data_id'));

        $this->hasMany('CostDataProject', array(
             'local' => 'id',
             'foreign' => 'cost_data_id'));

        $this->hasMany('CostDataProjectInformation', array(
             'local' => 'id',
             'foreign' => 'cost_data_id'));

        $this->hasMany('CostDataNodelessItemRemark as CostDataNodelessItemRemarks', array(
             'local' => 'id',
             'foreign' => 'cost_data_id'));

        $this->hasMany('CostDataPrimeCostRate', array(
             'local' => 'id',
             'foreign' => 'cost_data_id'));

        $this->hasMany('CostDataPrimeCostSumItem', array(
             'local' => 'id',
             'foreign' => 'cost_data_id'));

        $this->hasMany('CostDataPrimeCostSumColumnDefinition', array(
             'local' => 'id',
             'foreign' => 'cost_data_id'));

        $this->hasMany('CostDataProvisionalSumItem', array(
             'local' => 'id',
             'foreign' => 'cost_data_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}