<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('CostDataProvisionalSumItem', 'main_conn');

/**
 * BaseCostDataProvisionalSumItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $cost_data_id
 * @property string $description
 * @property integer $priority
 * @property decimal $approved_cost
 * @property decimal $awarded_cost
 * @property date $awarded_date
 * @property decimal $variation_order_cost
 * @property CostData $CostData
 * 
 * @method integer                    getId()                   Returns the current record's "id" value
 * @method integer                    getCostDataId()           Returns the current record's "cost_data_id" value
 * @method string                     getDescription()          Returns the current record's "description" value
 * @method integer                    getPriority()             Returns the current record's "priority" value
 * @method decimal                    getApprovedCost()         Returns the current record's "approved_cost" value
 * @method decimal                    getAwardedCost()          Returns the current record's "awarded_cost" value
 * @method date                       getAwardedDate()          Returns the current record's "awarded_date" value
 * @method decimal                    getVariationOrderCost()   Returns the current record's "variation_order_cost" value
 * @method CostData                   getCostData()             Returns the current record's "CostData" value
 * @method CostDataProvisionalSumItem setId()                   Sets the current record's "id" value
 * @method CostDataProvisionalSumItem setCostDataId()           Sets the current record's "cost_data_id" value
 * @method CostDataProvisionalSumItem setDescription()          Sets the current record's "description" value
 * @method CostDataProvisionalSumItem setPriority()             Sets the current record's "priority" value
 * @method CostDataProvisionalSumItem setApprovedCost()         Sets the current record's "approved_cost" value
 * @method CostDataProvisionalSumItem setAwardedCost()          Sets the current record's "awarded_cost" value
 * @method CostDataProvisionalSumItem setAwardedDate()          Sets the current record's "awarded_date" value
 * @method CostDataProvisionalSumItem setVariationOrderCost()   Sets the current record's "variation_order_cost" value
 * @method CostDataProvisionalSumItem setCostData()             Sets the current record's "CostData" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCostDataProvisionalSumItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('cost_data_provisional_sum_items');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('cost_data_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('priority', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('approved_cost', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('awarded_cost', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('awarded_date', 'date', null, array(
             'type' => 'date',
             'notnull' => false,
             ));
        $this->hasColumn('variation_order_cost', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'notnull' => true,
             'default' => 0,
             ));


        $this->index('cost_data_item_provisional_sum_item_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             ));
        $this->index('cost_data_item_provisional_sum_item_fk_idx', array(
             'fields' => 
             array(
              0 => 'cost_data_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('CostData', array(
             'local' => 'cost_data_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}