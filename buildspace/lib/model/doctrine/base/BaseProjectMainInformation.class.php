<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ProjectMainInformation', 'main_conn');

/**
 * BaseProjectMainInformation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $eproject_origin_id
 * @property string $title
 * @property string $description
 * @property integer $project_structure_id
 * @property integer $region_id
 * @property integer $subregion_id
 * @property text $site_address
 * @property integer $status
 * @property integer $currency_id
 * @property string $client
 * @property integer $tender_type_id
 * @property integer $work_category_id
 * @property date $start_date
 * @property timestamp $published_at
 * @property string $unique_id
 * @property ProjectStructure $ProjectStructure
 * @property WorkCategory $WorkCategory
 * @property Regions $Regions
 * @property Subregions $Subregions
 * @property Currency $Currency
 * 
 * @method integer                getId()                   Returns the current record's "id" value
 * @method integer                getEprojectOriginId()     Returns the current record's "eproject_origin_id" value
 * @method string                 getTitle()                Returns the current record's "title" value
 * @method string                 getDescription()          Returns the current record's "description" value
 * @method integer                getProjectStructureId()   Returns the current record's "project_structure_id" value
 * @method integer                getRegionId()             Returns the current record's "region_id" value
 * @method integer                getSubregionId()          Returns the current record's "subregion_id" value
 * @method text                   getSiteAddress()          Returns the current record's "site_address" value
 * @method integer                getStatus()               Returns the current record's "status" value
 * @method integer                getCurrencyId()           Returns the current record's "currency_id" value
 * @method string                 getClient()               Returns the current record's "client" value
 * @method integer                getTenderTypeId()         Returns the current record's "tender_type_id" value
 * @method integer                getWorkCategoryId()       Returns the current record's "work_category_id" value
 * @method date                   getStartDate()            Returns the current record's "start_date" value
 * @method timestamp              getPublishedAt()          Returns the current record's "published_at" value
 * @method string                 getUniqueId()             Returns the current record's "unique_id" value
 * @method ProjectStructure       getProjectStructure()     Returns the current record's "ProjectStructure" value
 * @method WorkCategory           getWorkCategory()         Returns the current record's "WorkCategory" value
 * @method Regions                getRegions()              Returns the current record's "Regions" value
 * @method Subregions             getSubregions()           Returns the current record's "Subregions" value
 * @method Currency               getCurrency()             Returns the current record's "Currency" value
 * @method ProjectMainInformation setId()                   Sets the current record's "id" value
 * @method ProjectMainInformation setEprojectOriginId()     Sets the current record's "eproject_origin_id" value
 * @method ProjectMainInformation setTitle()                Sets the current record's "title" value
 * @method ProjectMainInformation setDescription()          Sets the current record's "description" value
 * @method ProjectMainInformation setProjectStructureId()   Sets the current record's "project_structure_id" value
 * @method ProjectMainInformation setRegionId()             Sets the current record's "region_id" value
 * @method ProjectMainInformation setSubregionId()          Sets the current record's "subregion_id" value
 * @method ProjectMainInformation setSiteAddress()          Sets the current record's "site_address" value
 * @method ProjectMainInformation setStatus()               Sets the current record's "status" value
 * @method ProjectMainInformation setCurrencyId()           Sets the current record's "currency_id" value
 * @method ProjectMainInformation setClient()               Sets the current record's "client" value
 * @method ProjectMainInformation setTenderTypeId()         Sets the current record's "tender_type_id" value
 * @method ProjectMainInformation setWorkCategoryId()       Sets the current record's "work_category_id" value
 * @method ProjectMainInformation setStartDate()            Sets the current record's "start_date" value
 * @method ProjectMainInformation setPublishedAt()          Sets the current record's "published_at" value
 * @method ProjectMainInformation setUniqueId()             Sets the current record's "unique_id" value
 * @method ProjectMainInformation setProjectStructure()     Sets the current record's "ProjectStructure" value
 * @method ProjectMainInformation setWorkCategory()         Sets the current record's "WorkCategory" value
 * @method ProjectMainInformation setRegions()              Sets the current record's "Regions" value
 * @method ProjectMainInformation setSubregions()           Sets the current record's "Subregions" value
 * @method ProjectMainInformation setCurrency()             Sets the current record's "Currency" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProjectMainInformation extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('project_main_information');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('eproject_origin_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('title', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('project_structure_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('region_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('subregion_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('site_address', 'text', null, array(
             'type' => 'text',
             'notnull' => true,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('currency_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('client', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('tender_type_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('work_category_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('start_date', 'date', null, array(
             'type' => 'date',
             'notnull' => false,
             ));
        $this->hasColumn('published_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('unique_id', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));


        $this->index('project_main_info_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'project_structure_id',
              2 => 'deleted_at',
             ),
             ));
        $this->index('project_eproject_origin_id', array(
             'fields' => 
             array(
              0 => 'eproject_origin_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProjectStructure', array(
             'local' => 'project_structure_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('WorkCategory', array(
             'local' => 'work_category_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Regions', array(
             'local' => 'region_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Subregions', array(
             'local' => 'subregion_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Currency', array(
             'local' => 'currency_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}