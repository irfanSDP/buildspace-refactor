<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('CompanyOtherInformation', 'main_conn');

/**
 * BaseCompanyOtherInformation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $company_id
 * @property string $title
 * @property text $description
 * @property Doctrine_Collection $Files
 * @property Company $Company
 * 
 * @method integer                 getCompanyId()   Returns the current record's "company_id" value
 * @method string                  getTitle()       Returns the current record's "title" value
 * @method text                    getDescription() Returns the current record's "description" value
 * @method Doctrine_Collection     getFiles()       Returns the current record's "Files" collection
 * @method Company                 getCompany()     Returns the current record's "Company" value
 * @method CompanyOtherInformation setCompanyId()   Sets the current record's "company_id" value
 * @method CompanyOtherInformation setTitle()       Sets the current record's "title" value
 * @method CompanyOtherInformation setDescription() Sets the current record's "description" value
 * @method CompanyOtherInformation setFiles()       Sets the current record's "Files" collection
 * @method CompanyOtherInformation setCompany()     Sets the current record's "Company" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCompanyOtherInformation extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('company_other_informations');
        $this->hasColumn('company_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('title', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('description', 'text', null, array(
             'type' => 'text',
             ));


        $this->index('company_other_information_company_id_idx', array(
             'fields' => 
             array(
              0 => 'company_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('CompanyOtherInformationFile as Files', array(
             'local' => 'id',
             'foreign' => 'company_other_information_id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Company', array(
             'local' => 'company_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}