<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('DebitCreditNoteClaimItem', 'main_conn');

/**
 * BaseDebitCreditNoteClaimItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $debit_credit_note_claim_id
 * @property integer $account_code_id
 * @property string $invoice_number
 * @property date $invoice_date
 * @property date $due_date
 * @property integer $uom_id
 * @property decimal $quantity
 * @property decimal $rate
 * @property string $remarks
 * @property integer $priority
 * @property DebitCreditNoteClaim $DebitCreditNoteClaim
 * @property AccountCode $AccountCode
 * 
 * @method integer                  getId()                         Returns the current record's "id" value
 * @method integer                  getDebitCreditNoteClaimId()     Returns the current record's "debit_credit_note_claim_id" value
 * @method integer                  getAccountCodeId()              Returns the current record's "account_code_id" value
 * @method string                   getInvoiceNumber()              Returns the current record's "invoice_number" value
 * @method date                     getInvoiceDate()                Returns the current record's "invoice_date" value
 * @method date                     getDueDate()                    Returns the current record's "due_date" value
 * @method integer                  getUomId()                      Returns the current record's "uom_id" value
 * @method decimal                  getQuantity()                   Returns the current record's "quantity" value
 * @method decimal                  getRate()                       Returns the current record's "rate" value
 * @method string                   getRemarks()                    Returns the current record's "remarks" value
 * @method integer                  getPriority()                   Returns the current record's "priority" value
 * @method DebitCreditNoteClaim     getDebitCreditNoteClaim()       Returns the current record's "DebitCreditNoteClaim" value
 * @method AccountCode              getAccountCode()                Returns the current record's "AccountCode" value
 * @method DebitCreditNoteClaimItem setId()                         Sets the current record's "id" value
 * @method DebitCreditNoteClaimItem setDebitCreditNoteClaimId()     Sets the current record's "debit_credit_note_claim_id" value
 * @method DebitCreditNoteClaimItem setAccountCodeId()              Sets the current record's "account_code_id" value
 * @method DebitCreditNoteClaimItem setInvoiceNumber()              Sets the current record's "invoice_number" value
 * @method DebitCreditNoteClaimItem setInvoiceDate()                Sets the current record's "invoice_date" value
 * @method DebitCreditNoteClaimItem setDueDate()                    Sets the current record's "due_date" value
 * @method DebitCreditNoteClaimItem setUomId()                      Sets the current record's "uom_id" value
 * @method DebitCreditNoteClaimItem setQuantity()                   Sets the current record's "quantity" value
 * @method DebitCreditNoteClaimItem setRate()                       Sets the current record's "rate" value
 * @method DebitCreditNoteClaimItem setRemarks()                    Sets the current record's "remarks" value
 * @method DebitCreditNoteClaimItem setPriority()                   Sets the current record's "priority" value
 * @method DebitCreditNoteClaimItem setDebitCreditNoteClaim()       Sets the current record's "DebitCreditNoteClaim" value
 * @method DebitCreditNoteClaimItem setAccountCode()                Sets the current record's "AccountCode" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDebitCreditNoteClaimItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('debit_credit_note_claim_items');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('debit_credit_note_claim_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('account_code_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('invoice_number', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('invoice_date', 'date', null, array(
             'type' => 'date',
             'notnull' => false,
             ));
        $this->hasColumn('due_date', 'date', null, array(
             'type' => 'date',
             'notnull' => false,
             ));
        $this->hasColumn('uom_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('quantity', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('rate', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('remarks', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('priority', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));


        $this->index('debit_credit_note_claim_item_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'debit_credit_note_claim_id',
              2 => 'account_code_id',
             ),
             ));
        $this->index('debit_credit_note_claim_item_fk_idx', array(
             'fields' => 
             array(
              0 => 'debit_credit_note_claim_id',
              1 => 'account_code_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('DebitCreditNoteClaim', array(
             'local' => 'debit_credit_note_claim_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('AccountCode', array(
             'local' => 'account_code_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $signable0 = new Doctrine_Template_Signable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}