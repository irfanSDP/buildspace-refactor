<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ContractManagementVerifier', 'main_conn');

/**
 * BaseContractManagementVerifier
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $project_structure_id
 * @property integer $module_identifier
 * @property integer $user_id
 * @property integer $sequence_number
 * @property boolean $approved
 * @property timestamp $verified_at
 * @property timestamp $start_at
 * @property integer $days_to_verify
 * @property string $remarks
 * @property integer $substitute_id
 * @property ProjectStructure $ProjectStructure
 * @property sfGuardUser $sfGuardUser
 * 
 * @method integer                    getId()                   Returns the current record's "id" value
 * @method integer                    getProjectStructureId()   Returns the current record's "project_structure_id" value
 * @method integer                    getModuleIdentifier()     Returns the current record's "module_identifier" value
 * @method integer                    getUserId()               Returns the current record's "user_id" value
 * @method integer                    getSequenceNumber()       Returns the current record's "sequence_number" value
 * @method boolean                    getApproved()             Returns the current record's "approved" value
 * @method timestamp                  getVerifiedAt()           Returns the current record's "verified_at" value
 * @method timestamp                  getStartAt()              Returns the current record's "start_at" value
 * @method integer                    getDaysToVerify()         Returns the current record's "days_to_verify" value
 * @method string                     getRemarks()              Returns the current record's "remarks" value
 * @method integer                    getSubstituteId()         Returns the current record's "substitute_id" value
 * @method ProjectStructure           getProjectStructure()     Returns the current record's "ProjectStructure" value
 * @method sfGuardUser                getSfGuardUser()          Returns the current record's "sfGuardUser" value
 * @method ContractManagementVerifier setId()                   Sets the current record's "id" value
 * @method ContractManagementVerifier setProjectStructureId()   Sets the current record's "project_structure_id" value
 * @method ContractManagementVerifier setModuleIdentifier()     Sets the current record's "module_identifier" value
 * @method ContractManagementVerifier setUserId()               Sets the current record's "user_id" value
 * @method ContractManagementVerifier setSequenceNumber()       Sets the current record's "sequence_number" value
 * @method ContractManagementVerifier setApproved()             Sets the current record's "approved" value
 * @method ContractManagementVerifier setVerifiedAt()           Sets the current record's "verified_at" value
 * @method ContractManagementVerifier setStartAt()              Sets the current record's "start_at" value
 * @method ContractManagementVerifier setDaysToVerify()         Sets the current record's "days_to_verify" value
 * @method ContractManagementVerifier setRemarks()              Sets the current record's "remarks" value
 * @method ContractManagementVerifier setSubstituteId()         Sets the current record's "substitute_id" value
 * @method ContractManagementVerifier setProjectStructure()     Sets the current record's "ProjectStructure" value
 * @method ContractManagementVerifier setSfGuardUser()          Sets the current record's "sfGuardUser" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseContractManagementVerifier extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('contract_management_verifiers');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('project_structure_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('module_identifier', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('sequence_number', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('approved', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             ));
        $this->hasColumn('verified_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('start_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('days_to_verify', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('remarks', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('substitute_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));


        $this->index('contract_management_verifiers_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             ));
        $this->index('contract_management_verifiers_project_structure_id_idx', array(
             'fields' => 
             array(
              0 => 'project_structure_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProjectStructure', array(
             'local' => 'project_structure_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($softdelete0);
    }
}