<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PostContractClaim', 'main_conn');

/**
 * BasePostContractClaim
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $description
 * @property integer $claim_certificate_id
 * @property integer $sequence
 * @property integer $project_structure_id
 * @property integer $status
 * @property integer $type
 * @property ProjectStructure $ProjectStructure
 * @property ClaimCertificate $ClaimCertificate
 * @property AdvancePayment $AdvancePayment
 * @property Doctrine_Collection $PostContractClaimItems
 * @property Doctrine_Collection $Claims
 * 
 * @method integer             getId()                     Returns the current record's "id" value
 * @method string              getDescription()            Returns the current record's "description" value
 * @method integer             getClaimCertificateId()     Returns the current record's "claim_certificate_id" value
 * @method integer             getSequence()               Returns the current record's "sequence" value
 * @method integer             getProjectStructureId()     Returns the current record's "project_structure_id" value
 * @method integer             getStatus()                 Returns the current record's "status" value
 * @method integer             getType()                   Returns the current record's "type" value
 * @method ProjectStructure    getProjectStructure()       Returns the current record's "ProjectStructure" value
 * @method ClaimCertificate    getClaimCertificate()       Returns the current record's "ClaimCertificate" value
 * @method AdvancePayment      getAdvancePayment()         Returns the current record's "AdvancePayment" value
 * @method Doctrine_Collection getPostContractClaimItems() Returns the current record's "PostContractClaimItems" collection
 * @method Doctrine_Collection getClaims()                 Returns the current record's "Claims" collection
 * @method PostContractClaim   setId()                     Sets the current record's "id" value
 * @method PostContractClaim   setDescription()            Sets the current record's "description" value
 * @method PostContractClaim   setClaimCertificateId()     Sets the current record's "claim_certificate_id" value
 * @method PostContractClaim   setSequence()               Sets the current record's "sequence" value
 * @method PostContractClaim   setProjectStructureId()     Sets the current record's "project_structure_id" value
 * @method PostContractClaim   setStatus()                 Sets the current record's "status" value
 * @method PostContractClaim   setType()                   Sets the current record's "type" value
 * @method PostContractClaim   setProjectStructure()       Sets the current record's "ProjectStructure" value
 * @method PostContractClaim   setClaimCertificate()       Sets the current record's "ClaimCertificate" value
 * @method PostContractClaim   setAdvancePayment()         Sets the current record's "AdvancePayment" value
 * @method PostContractClaim   setPostContractClaimItems() Sets the current record's "PostContractClaimItems" collection
 * @method PostContractClaim   setClaims()                 Sets the current record's "Claims" collection
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePostContractClaim extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('post_contract_claims');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('claim_certificate_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('sequence', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('project_structure_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('type', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));


        $this->index('post_contract_claim_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'project_structure_id',
              2 => 'claim_certificate_id',
             ),
             ));
        $this->index('post_contract_claim_unique_idx', array(
             'fields' => 
             array(
              0 => 'sequence',
              1 => 'project_structure_id',
              2 => 'deleted_at',
             ),
             'type' => 'unique',
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProjectStructure', array(
             'local' => 'project_structure_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('ClaimCertificate', array(
             'local' => 'claim_certificate_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('AdvancePayment', array(
             'local' => 'id',
             'foreign' => 'post_contract_claim_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('PostContractClaimItem as PostContractClaimItems', array(
             'local' => 'id',
             'foreign' => 'post_contract_claim_id'));

        $this->hasMany('PostContractClaimClaim as Claims', array(
             'local' => 'id',
             'foreign' => 'post_contract_claim_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}