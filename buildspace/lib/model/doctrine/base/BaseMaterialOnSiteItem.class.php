<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MaterialOnSiteItem', 'main_conn');

/**
 * BaseMaterialOnSiteItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $material_on_site_id
 * @property integer $import_resource_item_id
 * @property string $description
 * @property integer $type
 * @property integer $uom_id
 * @property decimal $delivered_qty
 * @property decimal $used_qty
 * @property decimal $balance_qty
 * @property decimal $rate
 * @property decimal $amount
 * @property integer $priority
 * @property MaterialOnSite $MaterialOnSite
 * @property UnitOfMeasurement $UnitOfMeasurement
 * 
 * @method integer            getMaterialOnSiteId()        Returns the current record's "material_on_site_id" value
 * @method integer            getImportResourceItemId()    Returns the current record's "import_resource_item_id" value
 * @method string             getDescription()             Returns the current record's "description" value
 * @method integer            getType()                    Returns the current record's "type" value
 * @method integer            getUomId()                   Returns the current record's "uom_id" value
 * @method decimal            getDeliveredQty()            Returns the current record's "delivered_qty" value
 * @method decimal            getUsedQty()                 Returns the current record's "used_qty" value
 * @method decimal            getBalanceQty()              Returns the current record's "balance_qty" value
 * @method decimal            getRate()                    Returns the current record's "rate" value
 * @method decimal            getAmount()                  Returns the current record's "amount" value
 * @method integer            getPriority()                Returns the current record's "priority" value
 * @method MaterialOnSite     getMaterialOnSite()          Returns the current record's "MaterialOnSite" value
 * @method UnitOfMeasurement  getUnitOfMeasurement()       Returns the current record's "UnitOfMeasurement" value
 * @method MaterialOnSiteItem setMaterialOnSiteId()        Sets the current record's "material_on_site_id" value
 * @method MaterialOnSiteItem setImportResourceItemId()    Sets the current record's "import_resource_item_id" value
 * @method MaterialOnSiteItem setDescription()             Sets the current record's "description" value
 * @method MaterialOnSiteItem setType()                    Sets the current record's "type" value
 * @method MaterialOnSiteItem setUomId()                   Sets the current record's "uom_id" value
 * @method MaterialOnSiteItem setDeliveredQty()            Sets the current record's "delivered_qty" value
 * @method MaterialOnSiteItem setUsedQty()                 Sets the current record's "used_qty" value
 * @method MaterialOnSiteItem setBalanceQty()              Sets the current record's "balance_qty" value
 * @method MaterialOnSiteItem setRate()                    Sets the current record's "rate" value
 * @method MaterialOnSiteItem setAmount()                  Sets the current record's "amount" value
 * @method MaterialOnSiteItem setPriority()                Sets the current record's "priority" value
 * @method MaterialOnSiteItem setMaterialOnSite()          Sets the current record's "MaterialOnSite" value
 * @method MaterialOnSiteItem setUnitOfMeasurement()       Sets the current record's "UnitOfMeasurement" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMaterialOnSiteItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('material_on_site_items');
        $this->hasColumn('material_on_site_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('import_resource_item_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('type', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('uom_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('delivered_qty', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('used_qty', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('balance_qty', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('rate', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('amount', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('priority', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));


        $this->index('mos_items_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'root_id',
              2 => 'lft',
              3 => 'rgt',
             ),
             ));
        $this->index('mos_items_type_idx', array(
             'fields' => 
             array(
              0 => 'type',
             ),
             ));
        $this->index('mos_items_fk_idx', array(
             'fields' => 
             array(
              0 => 'material_on_site_id',
              1 => 'root_id',
              2 => 'uom_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MaterialOnSite', array(
             'local' => 'material_on_site_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('UnitOfMeasurement', array(
             'local' => 'uom_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $signable0 = new Doctrine_Template_Signable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'levelColumnName' => 'level',
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
        $this->actAs($nestedset0);
    }
}