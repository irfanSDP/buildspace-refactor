<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('BQElement', 'main_conn');

/**
 * BaseBQElement
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $description
 * @property integer $library_id
 * @property integer $priority
 * @property BQLibrary $Library
 * @property Doctrine_Collection $Items
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method string              getDescription() Returns the current record's "description" value
 * @method integer             getLibraryId()   Returns the current record's "library_id" value
 * @method integer             getPriority()    Returns the current record's "priority" value
 * @method BQLibrary           getLibrary()     Returns the current record's "Library" value
 * @method Doctrine_Collection getItems()       Returns the current record's "Items" collection
 * @method BQElement           setId()          Sets the current record's "id" value
 * @method BQElement           setDescription() Sets the current record's "description" value
 * @method BQElement           setLibraryId()   Sets the current record's "library_id" value
 * @method BQElement           setPriority()    Sets the current record's "priority" value
 * @method BQElement           setLibrary()     Sets the current record's "Library" value
 * @method BQElement           setItems()       Sets the current record's "Items" collection
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBQElement extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('bq_elements');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('library_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('priority', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));


        $this->index('bq_elem_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'library_id',
             ),
             ));
        $this->index('bq_elem_priority_unique_idx', array(
             'fields' => 
             array(
              0 => 'priority',
              1 => 'library_id',
              2 => 'deleted_at',
             ),
             'type' => 'unique',
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('BQLibrary as Library', array(
             'local' => 'library_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('BQItem as Items', array(
             'local' => 'id',
             'foreign' => 'element_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}