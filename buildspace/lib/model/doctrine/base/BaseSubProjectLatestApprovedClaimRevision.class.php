<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('SubProjectLatestApprovedClaimRevision', 'main_conn');

/**
 * BaseSubProjectLatestApprovedClaimRevision
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $main_project_id
 * @property integer $main_project_claim_revision_id
 * @property integer $sub_project_id
 * @property integer $sub_project_claim_revision_id
 * @property ProjectStructure $MainProject
 * @property ProjectStructure $SubProject
 * @property PostContractClaimRevision $MainProjectClaimRevision
 * @property PostContractClaimRevision $SubProjectClaimRevision
 * 
 * @method integer                               getId()                             Returns the current record's "id" value
 * @method integer                               getMainProjectId()                  Returns the current record's "main_project_id" value
 * @method integer                               getMainProjectClaimRevisionId()     Returns the current record's "main_project_claim_revision_id" value
 * @method integer                               getSubProjectId()                   Returns the current record's "sub_project_id" value
 * @method integer                               getSubProjectClaimRevisionId()      Returns the current record's "sub_project_claim_revision_id" value
 * @method ProjectStructure                      getMainProject()                    Returns the current record's "MainProject" value
 * @method ProjectStructure                      getSubProject()                     Returns the current record's "SubProject" value
 * @method PostContractClaimRevision             getMainProjectClaimRevision()       Returns the current record's "MainProjectClaimRevision" value
 * @method PostContractClaimRevision             getSubProjectClaimRevision()        Returns the current record's "SubProjectClaimRevision" value
 * @method SubProjectLatestApprovedClaimRevision setId()                             Sets the current record's "id" value
 * @method SubProjectLatestApprovedClaimRevision setMainProjectId()                  Sets the current record's "main_project_id" value
 * @method SubProjectLatestApprovedClaimRevision setMainProjectClaimRevisionId()     Sets the current record's "main_project_claim_revision_id" value
 * @method SubProjectLatestApprovedClaimRevision setSubProjectId()                   Sets the current record's "sub_project_id" value
 * @method SubProjectLatestApprovedClaimRevision setSubProjectClaimRevisionId()      Sets the current record's "sub_project_claim_revision_id" value
 * @method SubProjectLatestApprovedClaimRevision setMainProject()                    Sets the current record's "MainProject" value
 * @method SubProjectLatestApprovedClaimRevision setSubProject()                     Sets the current record's "SubProject" value
 * @method SubProjectLatestApprovedClaimRevision setMainProjectClaimRevision()       Sets the current record's "MainProjectClaimRevision" value
 * @method SubProjectLatestApprovedClaimRevision setSubProjectClaimRevision()        Sets the current record's "SubProjectClaimRevision" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSubProjectLatestApprovedClaimRevision extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sub_project_latest_approved_claim_revisions');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('main_project_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('main_project_claim_revision_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('sub_project_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('sub_project_claim_revision_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));


        $this->index('sp_latest_approved_claim_rev_idx', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             ));
        $this->index('sp_latest_approved_claim_rev_main_project_claim_rev_id_fk_idx', array(
             'fields' => 
             array(
              0 => 'main_project_claim_revision_id',
             ),
             ));
        $this->index('sp_latest_approved_claim_rev_sub_project_claim_rev_id_fk_idx', array(
             'fields' => 
             array(
              0 => 'sub_project_claim_revision_id',
             ),
             ));
        $this->index('sp_latest_approved_claim_rev_unique_idx', array(
             'fields' => 
             array(
              0 => 'sub_project_claim_revision_id',
             ),
             'type' => 'unique',
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProjectStructure as MainProject', array(
             'local' => 'main_project_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('ProjectStructure as SubProject', array(
             'local' => 'sub_project_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('PostContractClaimRevision as MainProjectClaimRevision', array(
             'local' => 'main_project_claim_revision_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('PostContractClaimRevision as SubProjectClaimRevision', array(
             'local' => 'sub_project_claim_revision_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}