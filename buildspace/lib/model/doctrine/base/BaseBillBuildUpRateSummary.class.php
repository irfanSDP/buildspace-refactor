<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('BillBuildUpRateSummary', 'main_conn');

/**
 * BaseBillBuildUpRateSummary
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $bill_item_id
 * @property decimal $total_cost
 * @property decimal $markup
 * @property decimal $final_cost
 * @property boolean $apply_conversion_factor
 * @property decimal $conversion_factor_amount
 * @property integer $conversion_factor_uom_id
 * @property varchar $conversion_factor_operator
 * @property integer $rounding_type
 * @property BillItem $BillItem
 * @property UnitOfMeasurement $UnitOfMeasurement
 * 
 * @method integer                getId()                         Returns the current record's "id" value
 * @method integer                getBillItemId()                 Returns the current record's "bill_item_id" value
 * @method decimal                getTotalCost()                  Returns the current record's "total_cost" value
 * @method decimal                getMarkup()                     Returns the current record's "markup" value
 * @method decimal                getFinalCost()                  Returns the current record's "final_cost" value
 * @method boolean                getApplyConversionFactor()      Returns the current record's "apply_conversion_factor" value
 * @method decimal                getConversionFactorAmount()     Returns the current record's "conversion_factor_amount" value
 * @method integer                getConversionFactorUomId()      Returns the current record's "conversion_factor_uom_id" value
 * @method varchar                getConversionFactorOperator()   Returns the current record's "conversion_factor_operator" value
 * @method integer                getRoundingType()               Returns the current record's "rounding_type" value
 * @method BillItem               getBillItem()                   Returns the current record's "BillItem" value
 * @method UnitOfMeasurement      getUnitOfMeasurement()          Returns the current record's "UnitOfMeasurement" value
 * @method BillBuildUpRateSummary setId()                         Sets the current record's "id" value
 * @method BillBuildUpRateSummary setBillItemId()                 Sets the current record's "bill_item_id" value
 * @method BillBuildUpRateSummary setTotalCost()                  Sets the current record's "total_cost" value
 * @method BillBuildUpRateSummary setMarkup()                     Sets the current record's "markup" value
 * @method BillBuildUpRateSummary setFinalCost()                  Sets the current record's "final_cost" value
 * @method BillBuildUpRateSummary setApplyConversionFactor()      Sets the current record's "apply_conversion_factor" value
 * @method BillBuildUpRateSummary setConversionFactorAmount()     Sets the current record's "conversion_factor_amount" value
 * @method BillBuildUpRateSummary setConversionFactorUomId()      Sets the current record's "conversion_factor_uom_id" value
 * @method BillBuildUpRateSummary setConversionFactorOperator()   Sets the current record's "conversion_factor_operator" value
 * @method BillBuildUpRateSummary setRoundingType()               Sets the current record's "rounding_type" value
 * @method BillBuildUpRateSummary setBillItem()                   Sets the current record's "BillItem" value
 * @method BillBuildUpRateSummary setUnitOfMeasurement()          Sets the current record's "UnitOfMeasurement" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBillBuildUpRateSummary extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('bill_build_up_rate_summaries');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('bill_item_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('total_cost', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('markup', 'decimal', null, array(
             'type' => 'decimal',
             'default' => 0,
             ));
        $this->hasColumn('final_cost', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('apply_conversion_factor', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('conversion_factor_amount', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('conversion_factor_uom_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('conversion_factor_operator', 'varchar', 1, array(
             'type' => 'varchar',
             'notnull' => true,
             'length' => 1,
             ));
        $this->hasColumn('rounding_type', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));


        $this->index('bill_burs_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'bill_item_id',
              2 => 'total_cost',
              3 => 'final_cost',
              4 => 'deleted_at',
             ),
             ));
        $this->index('bill_burs_unique_idx', array(
             'fields' => 
             array(
              0 => 'bill_item_id',
              1 => 'deleted_at',
             ),
             'type' => 'unique',
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('BillItem', array(
             'local' => 'bill_item_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('UnitOfMeasurement', array(
             'local' => 'conversion_factor_uom_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}