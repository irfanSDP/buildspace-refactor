<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('RFQ', 'main_conn');

/**
 * BaseRFQ
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $project_structure_id
 * @property string $prefix
 * @property integer $rfq_count
 * @property integer $type
 * @property integer $region_id
 * @property integer $sub_region_id
 * @property integer $status
 * @property ProjectStructure $Project
 * @property Regions $Region
 * @property Subregions $SubRegion
 * @property RFQProject $Quotation
 * @property Doctrine_Collection $RequestForQuotationSuppliers
 * @property Doctrine_Collection $RequestForQuotationItems
 * 
 * @method integer             getProjectStructureId()           Returns the current record's "project_structure_id" value
 * @method string              getPrefix()                       Returns the current record's "prefix" value
 * @method integer             getRfqCount()                     Returns the current record's "rfq_count" value
 * @method integer             getType()                         Returns the current record's "type" value
 * @method integer             getRegionId()                     Returns the current record's "region_id" value
 * @method integer             getSubRegionId()                  Returns the current record's "sub_region_id" value
 * @method integer             getStatus()                       Returns the current record's "status" value
 * @method ProjectStructure    getProject()                      Returns the current record's "Project" value
 * @method Regions             getRegion()                       Returns the current record's "Region" value
 * @method Subregions          getSubRegion()                    Returns the current record's "SubRegion" value
 * @method RFQProject          getQuotation()                    Returns the current record's "Quotation" value
 * @method Doctrine_Collection getRequestForQuotationSuppliers() Returns the current record's "RequestForQuotationSuppliers" collection
 * @method Doctrine_Collection getRequestForQuotationItems()     Returns the current record's "RequestForQuotationItems" collection
 * @method RFQ                 setProjectStructureId()           Sets the current record's "project_structure_id" value
 * @method RFQ                 setPrefix()                       Sets the current record's "prefix" value
 * @method RFQ                 setRfqCount()                     Sets the current record's "rfq_count" value
 * @method RFQ                 setType()                         Sets the current record's "type" value
 * @method RFQ                 setRegionId()                     Sets the current record's "region_id" value
 * @method RFQ                 setSubRegionId()                  Sets the current record's "sub_region_id" value
 * @method RFQ                 setStatus()                       Sets the current record's "status" value
 * @method RFQ                 setProject()                      Sets the current record's "Project" value
 * @method RFQ                 setRegion()                       Sets the current record's "Region" value
 * @method RFQ                 setSubRegion()                    Sets the current record's "SubRegion" value
 * @method RFQ                 setQuotation()                    Sets the current record's "Quotation" value
 * @method RFQ                 setRequestForQuotationSuppliers() Sets the current record's "RequestForQuotationSuppliers" collection
 * @method RFQ                 setRequestForQuotationItems()     Sets the current record's "RequestForQuotationItems" collection
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRFQ extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('request_for_quotations');
        $this->hasColumn('project_structure_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('prefix', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('rfq_count', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('type', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('region_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('sub_region_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));


        $this->index('rfq_fk_idx', array(
             'fields' => 
             array(
              0 => 'project_structure_id',
              1 => 'region_id',
              2 => 'sub_region_id',
              3 => 'deleted_at',
             ),
             ));
        $this->index('rfq_prefix_rfq_count_uniq_idx', array(
             'fields' => 
             array(
              0 => 'project_structure_id',
              1 => 'prefix',
              2 => 'rfq_count',
              3 => 'type',
             ),
             'type' => 'unique',
             ));
        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProjectStructure as Project', array(
             'local' => 'project_structure_id',
             'foreign' => 'id'));

        $this->hasOne('Regions as Region', array(
             'local' => 'region_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Subregions as SubRegion', array(
             'local' => 'sub_region_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('RFQProject as Quotation', array(
             'local' => 'id',
             'foreign' => 'request_for_quotation_id'));

        $this->hasMany('RFQSupplier as RequestForQuotationSuppliers', array(
             'local' => 'id',
             'foreign' => 'request_for_quotation_id'));

        $this->hasMany('RFQItem as RequestForQuotationItems', array(
             'local' => 'id',
             'foreign' => 'request_for_quotation_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}