<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('GlobalCalendar', 'main_conn');

/**
 * BaseGlobalCalendar
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $description
 * @property integer $region_id
 * @property integer $subregion_id
 * @property integer $event_type
 * @property boolean $is_holiday
 * @property date $start_date
 * @property date $end_date
 * @property Regions $Regions
 * @property Subregions $Subregions
 * 
 * @method integer        getId()           Returns the current record's "id" value
 * @method string         getDescription()  Returns the current record's "description" value
 * @method integer        getRegionId()     Returns the current record's "region_id" value
 * @method integer        getSubregionId()  Returns the current record's "subregion_id" value
 * @method integer        getEventType()    Returns the current record's "event_type" value
 * @method boolean        getIsHoliday()    Returns the current record's "is_holiday" value
 * @method date           getStartDate()    Returns the current record's "start_date" value
 * @method date           getEndDate()      Returns the current record's "end_date" value
 * @method Regions        getRegions()      Returns the current record's "Regions" value
 * @method Subregions     getSubregions()   Returns the current record's "Subregions" value
 * @method GlobalCalendar setId()           Sets the current record's "id" value
 * @method GlobalCalendar setDescription()  Sets the current record's "description" value
 * @method GlobalCalendar setRegionId()     Sets the current record's "region_id" value
 * @method GlobalCalendar setSubregionId()  Sets the current record's "subregion_id" value
 * @method GlobalCalendar setEventType()    Sets the current record's "event_type" value
 * @method GlobalCalendar setIsHoliday()    Sets the current record's "is_holiday" value
 * @method GlobalCalendar setStartDate()    Sets the current record's "start_date" value
 * @method GlobalCalendar setEndDate()      Sets the current record's "end_date" value
 * @method GlobalCalendar setRegions()      Sets the current record's "Regions" value
 * @method GlobalCalendar setSubregions()   Sets the current record's "Subregions" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseGlobalCalendar extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('global_calendar');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('region_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('subregion_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('event_type', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('is_holiday', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('start_date', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             ));
        $this->hasColumn('end_date', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             ));


        $this->index('global_calendar_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'region_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Regions', array(
             'local' => 'region_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Subregions', array(
             'local' => 'subregion_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
    }
}