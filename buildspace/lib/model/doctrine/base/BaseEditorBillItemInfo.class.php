<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('EditorBillItemInfo', 'main_conn');

/**
 * BaseEditorBillItemInfo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $bill_item_id
 * @property integer $company_id
 * @property decimal $grand_total_quantity
 * @property decimal $grand_total
 * @property BillItem $BillItem
 * @property Company $Company
 * @property Doctrine_Collection $FormulatedColumns
 * @property Doctrine_Collection $EditorBillItemTypeReferences
 * @property EditorBillItemPrimeCostRate $PrimeCostRate
 * @property EditorBillItemLumpSumPercentage $LumpSumPercentage
 * 
 * @method integer                         getId()                           Returns the current record's "id" value
 * @method integer                         getBillItemId()                   Returns the current record's "bill_item_id" value
 * @method integer                         getCompanyId()                    Returns the current record's "company_id" value
 * @method decimal                         getGrandTotalQuantity()           Returns the current record's "grand_total_quantity" value
 * @method decimal                         getGrandTotal()                   Returns the current record's "grand_total" value
 * @method BillItem                        getBillItem()                     Returns the current record's "BillItem" value
 * @method Company                         getCompany()                      Returns the current record's "Company" value
 * @method Doctrine_Collection             getFormulatedColumns()            Returns the current record's "FormulatedColumns" collection
 * @method Doctrine_Collection             getEditorBillItemTypeReferences() Returns the current record's "EditorBillItemTypeReferences" collection
 * @method EditorBillItemPrimeCostRate     getPrimeCostRate()                Returns the current record's "PrimeCostRate" value
 * @method EditorBillItemLumpSumPercentage getLumpSumPercentage()            Returns the current record's "LumpSumPercentage" value
 * @method EditorBillItemInfo              setId()                           Sets the current record's "id" value
 * @method EditorBillItemInfo              setBillItemId()                   Sets the current record's "bill_item_id" value
 * @method EditorBillItemInfo              setCompanyId()                    Sets the current record's "company_id" value
 * @method EditorBillItemInfo              setGrandTotalQuantity()           Sets the current record's "grand_total_quantity" value
 * @method EditorBillItemInfo              setGrandTotal()                   Sets the current record's "grand_total" value
 * @method EditorBillItemInfo              setBillItem()                     Sets the current record's "BillItem" value
 * @method EditorBillItemInfo              setCompany()                      Sets the current record's "Company" value
 * @method EditorBillItemInfo              setFormulatedColumns()            Sets the current record's "FormulatedColumns" collection
 * @method EditorBillItemInfo              setEditorBillItemTypeReferences() Sets the current record's "EditorBillItemTypeReferences" collection
 * @method EditorBillItemInfo              setPrimeCostRate()                Sets the current record's "PrimeCostRate" value
 * @method EditorBillItemInfo              setLumpSumPercentage()            Sets the current record's "LumpSumPercentage" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEditorBillItemInfo extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('editor_bill_item_information');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('bill_item_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('company_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('grand_total_quantity', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));
        $this->hasColumn('grand_total', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'default' => 0,
             ));


        $this->index('editor_bill_item_info_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'bill_item_id',
              2 => 'company_id',
             ),
             ));
        $this->index('editor_bill_item_info_fk_idx', array(
             'fields' => 
             array(
              0 => 'bill_item_id',
              1 => 'company_id',
             ),
             ));
        $this->index('editor_bill_item_info_unique_idx', array(
             'fields' => 
             array(
              0 => 'bill_item_id',
              1 => 'company_id',
             ),
             'type' => 'unique',
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('BillItem', array(
             'local' => 'bill_item_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Company', array(
             'local' => 'company_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('EditorBillItemFormulatedColumn as FormulatedColumns', array(
             'local' => 'id',
             'foreign' => 'relation_id'));

        $this->hasMany('EditorBillItemTypeReference as EditorBillItemTypeReferences', array(
             'local' => 'id',
             'foreign' => 'bill_item_info_id'));

        $this->hasOne('EditorBillItemPrimeCostRate as PrimeCostRate', array(
             'local' => 'id',
             'foreign' => 'bill_item_info_id'));

        $this->hasOne('EditorBillItemLumpSumPercentage as LumpSumPercentage', array(
             'local' => 'id',
             'foreign' => 'bill_item_info_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
    }
}