<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('VariationOrder', 'main_conn');

/**
 * BaseVariationOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $description
 * @property integer $project_structure_id
 * @property integer $eproject_rfv_id
 * @property boolean $is_approved
 * @property integer $status
 * @property integer $type
 * @property integer $priority
 * @property ProjectStructure $ProjectStructure
 * @property VariationOrderClaimCertificate $ClaimCertificateXref
 * @property Doctrine_Collection $Items
 * @property Doctrine_Collection $Claims
 * 
 * @method integer                        getId()                   Returns the current record's "id" value
 * @method string                         getDescription()          Returns the current record's "description" value
 * @method integer                        getProjectStructureId()   Returns the current record's "project_structure_id" value
 * @method integer                        getEprojectRfvId()        Returns the current record's "eproject_rfv_id" value
 * @method boolean                        getIsApproved()           Returns the current record's "is_approved" value
 * @method integer                        getStatus()               Returns the current record's "status" value
 * @method integer                        getType()                 Returns the current record's "type" value
 * @method integer                        getPriority()             Returns the current record's "priority" value
 * @method ProjectStructure               getProjectStructure()     Returns the current record's "ProjectStructure" value
 * @method VariationOrderClaimCertificate getClaimCertificateXref() Returns the current record's "ClaimCertificateXref" value
 * @method Doctrine_Collection            getItems()                Returns the current record's "Items" collection
 * @method Doctrine_Collection            getClaims()               Returns the current record's "Claims" collection
 * @method VariationOrder                 setId()                   Sets the current record's "id" value
 * @method VariationOrder                 setDescription()          Sets the current record's "description" value
 * @method VariationOrder                 setProjectStructureId()   Sets the current record's "project_structure_id" value
 * @method VariationOrder                 setEprojectRfvId()        Sets the current record's "eproject_rfv_id" value
 * @method VariationOrder                 setIsApproved()           Sets the current record's "is_approved" value
 * @method VariationOrder                 setStatus()               Sets the current record's "status" value
 * @method VariationOrder                 setType()                 Sets the current record's "type" value
 * @method VariationOrder                 setPriority()             Sets the current record's "priority" value
 * @method VariationOrder                 setProjectStructure()     Sets the current record's "ProjectStructure" value
 * @method VariationOrder                 setClaimCertificateXref() Sets the current record's "ClaimCertificateXref" value
 * @method VariationOrder                 setItems()                Sets the current record's "Items" collection
 * @method VariationOrder                 setClaims()               Sets the current record's "Claims" collection
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseVariationOrder extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('variation_orders');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('project_structure_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('eproject_rfv_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('is_approved', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('type', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             'length' => 4,
             ));
        $this->hasColumn('priority', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));


        $this->index('variation_order_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'project_structure_id',
              2 => 'type',
             ),
             ));
        $this->index('variation_order_priority_unique_idx', array(
             'fields' => 
             array(
              0 => 'priority',
              1 => 'project_structure_id',
              2 => 'deleted_at',
             ),
             'type' => 'unique',
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProjectStructure', array(
             'local' => 'project_structure_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('VariationOrderClaimCertificate as ClaimCertificateXref', array(
             'local' => 'id',
             'foreign' => 'variation_order_id'));

        $this->hasMany('VariationOrderItem as Items', array(
             'local' => 'id',
             'foreign' => 'variation_order_id'));

        $this->hasMany('VariationOrderClaim as Claims', array(
             'local' => 'id',
             'foreign' => 'variation_order_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}