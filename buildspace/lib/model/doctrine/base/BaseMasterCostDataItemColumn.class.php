<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MasterCostDataItemColumn', 'main_conn');

/**
 * BaseMasterCostDataItemColumn
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $master_cost_data_item_id
 * @property string $column_name
 * @property boolean $show
 * @property MasterCostDataItem $MasterCostDataItem
 * @property MasterCostDataItemColumnParticular $ItemColumnParticular
 * 
 * @method integer                            getId()                       Returns the current record's "id" value
 * @method integer                            getMasterCostDataItemId()     Returns the current record's "master_cost_data_item_id" value
 * @method string                             getColumnName()               Returns the current record's "column_name" value
 * @method boolean                            getShow()                     Returns the current record's "show" value
 * @method MasterCostDataItem                 getMasterCostDataItem()       Returns the current record's "MasterCostDataItem" value
 * @method MasterCostDataItemColumnParticular getItemColumnParticular()     Returns the current record's "ItemColumnParticular" value
 * @method MasterCostDataItemColumn           setId()                       Sets the current record's "id" value
 * @method MasterCostDataItemColumn           setMasterCostDataItemId()     Sets the current record's "master_cost_data_item_id" value
 * @method MasterCostDataItemColumn           setColumnName()               Sets the current record's "column_name" value
 * @method MasterCostDataItemColumn           setShow()                     Sets the current record's "show" value
 * @method MasterCostDataItemColumn           setMasterCostDataItem()       Sets the current record's "MasterCostDataItem" value
 * @method MasterCostDataItemColumn           setItemColumnParticular()     Sets the current record's "ItemColumnParticular" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMasterCostDataItemColumn extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('master_cost_data_item_columns');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('master_cost_data_item_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('column_name', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('show', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));


        $this->index('master_cost_data_item_column_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             ));
        $this->index('master_cost_data_item_column_idx', array(
             'fields' => 
             array(
              0 => 'master_cost_data_item_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MasterCostDataItem', array(
             'local' => 'master_cost_data_item_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('MasterCostDataItemColumnParticular as ItemColumnParticular', array(
             'local' => 'id',
             'foreign' => 'master_cost_data_item_column_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}