<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('myCompanyProfile', 'main_conn');

/**
 * BasemyCompanyProfile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property text $address
 * @property string $city
 * @property integer $region_id
 * @property integer $subregion_id
 * @property string $zipcode
 * @property string $timezone
 * @property string $email
 * @property string $phone_number
 * @property string $fax_number
 * @property string $website
 * @property string $company_logo
 * @property Regions $Regions
 * @property Subregions $Subregions
 * 
 * @method string           getName()         Returns the current record's "name" value
 * @method text             getAddress()      Returns the current record's "address" value
 * @method string           getCity()         Returns the current record's "city" value
 * @method integer          getRegionId()     Returns the current record's "region_id" value
 * @method integer          getSubregionId()  Returns the current record's "subregion_id" value
 * @method string           getZipcode()      Returns the current record's "zipcode" value
 * @method string           getTimezone()     Returns the current record's "timezone" value
 * @method string           getEmail()        Returns the current record's "email" value
 * @method string           getPhoneNumber()  Returns the current record's "phone_number" value
 * @method string           getFaxNumber()    Returns the current record's "fax_number" value
 * @method string           getWebsite()      Returns the current record's "website" value
 * @method string           getCompanyLogo()  Returns the current record's "company_logo" value
 * @method Regions          getRegions()      Returns the current record's "Regions" value
 * @method Subregions       getSubregions()   Returns the current record's "Subregions" value
 * @method myCompanyProfile setName()         Sets the current record's "name" value
 * @method myCompanyProfile setAddress()      Sets the current record's "address" value
 * @method myCompanyProfile setCity()         Sets the current record's "city" value
 * @method myCompanyProfile setRegionId()     Sets the current record's "region_id" value
 * @method myCompanyProfile setSubregionId()  Sets the current record's "subregion_id" value
 * @method myCompanyProfile setZipcode()      Sets the current record's "zipcode" value
 * @method myCompanyProfile setTimezone()     Sets the current record's "timezone" value
 * @method myCompanyProfile setEmail()        Sets the current record's "email" value
 * @method myCompanyProfile setPhoneNumber()  Sets the current record's "phone_number" value
 * @method myCompanyProfile setFaxNumber()    Sets the current record's "fax_number" value
 * @method myCompanyProfile setWebsite()      Sets the current record's "website" value
 * @method myCompanyProfile setCompanyLogo()  Sets the current record's "company_logo" value
 * @method myCompanyProfile setRegions()      Sets the current record's "Regions" value
 * @method myCompanyProfile setSubregions()   Sets the current record's "Subregions" value
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasemyCompanyProfile extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('my_company_profile');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('address', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('city', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('region_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('subregion_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('zipcode', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('timezone', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('phone_number', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('fax_number', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('website', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('company_logo', 'string', null, array(
             'type' => 'string',
             ));


        $this->index('my_com_prof_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             ));
        $this->index('my_com_prof_fk_idx', array(
             'fields' => 
             array(
              0 => 'region_id',
              1 => 'subregion_id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Regions', array(
             'local' => 'region_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Subregions', array(
             'local' => 'subregion_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
    }
}