<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MasterCostDataParticular', 'main_conn');

/**
 * BaseMasterCostDataParticular
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $master_cost_data_id
 * @property string $description
 * @property integer $priority
 * @property integer $uom_id
 * @property boolean $is_summary_displayed
 * @property boolean $is_prime_cost_rate_summary_displayed
 * @property string $summary_description
 * @property boolean $is_used_for_cost_comparison
 * @property boolean $include_provisional_sum
 * @property MasterCostData $MasterCostData
 * @property UnitOfMeasurement $UnitOfMeasurement
 * @property Doctrine_Collection $CostDataParticular
 * @property MasterCostDataItemColumnParticular $ItemColumnParticular
 * @property Doctrine_Collection $MasterCostDataParticularAssignedType
 * @property Doctrine_Collection $MasterCostDataParticularMasterCostDataItem
 * @property Doctrine_Collection $MasterCostDataItemParticular
 * 
 * @method integer                            getId()                                         Returns the current record's "id" value
 * @method integer                            getMasterCostDataId()                           Returns the current record's "master_cost_data_id" value
 * @method string                             getDescription()                                Returns the current record's "description" value
 * @method integer                            getPriority()                                   Returns the current record's "priority" value
 * @method integer                            getUomId()                                      Returns the current record's "uom_id" value
 * @method boolean                            getIsSummaryDisplayed()                         Returns the current record's "is_summary_displayed" value
 * @method boolean                            getIsPrimeCostRateSummaryDisplayed()            Returns the current record's "is_prime_cost_rate_summary_displayed" value
 * @method string                             getSummaryDescription()                         Returns the current record's "summary_description" value
 * @method boolean                            getIsUsedForCostComparison()                    Returns the current record's "is_used_for_cost_comparison" value
 * @method boolean                            getIncludeProvisionalSum()                      Returns the current record's "include_provisional_sum" value
 * @method MasterCostData                     getMasterCostData()                             Returns the current record's "MasterCostData" value
 * @method UnitOfMeasurement                  getUnitOfMeasurement()                          Returns the current record's "UnitOfMeasurement" value
 * @method Doctrine_Collection                getCostDataParticular()                         Returns the current record's "CostDataParticular" collection
 * @method MasterCostDataItemColumnParticular getItemColumnParticular()                       Returns the current record's "ItemColumnParticular" value
 * @method Doctrine_Collection                getMasterCostDataParticularAssignedType()       Returns the current record's "MasterCostDataParticularAssignedType" collection
 * @method Doctrine_Collection                getMasterCostDataParticularMasterCostDataItem() Returns the current record's "MasterCostDataParticularMasterCostDataItem" collection
 * @method Doctrine_Collection                getMasterCostDataItemParticular()               Returns the current record's "MasterCostDataItemParticular" collection
 * @method MasterCostDataParticular           setId()                                         Sets the current record's "id" value
 * @method MasterCostDataParticular           setMasterCostDataId()                           Sets the current record's "master_cost_data_id" value
 * @method MasterCostDataParticular           setDescription()                                Sets the current record's "description" value
 * @method MasterCostDataParticular           setPriority()                                   Sets the current record's "priority" value
 * @method MasterCostDataParticular           setUomId()                                      Sets the current record's "uom_id" value
 * @method MasterCostDataParticular           setIsSummaryDisplayed()                         Sets the current record's "is_summary_displayed" value
 * @method MasterCostDataParticular           setIsPrimeCostRateSummaryDisplayed()            Sets the current record's "is_prime_cost_rate_summary_displayed" value
 * @method MasterCostDataParticular           setSummaryDescription()                         Sets the current record's "summary_description" value
 * @method MasterCostDataParticular           setIsUsedForCostComparison()                    Sets the current record's "is_used_for_cost_comparison" value
 * @method MasterCostDataParticular           setIncludeProvisionalSum()                      Sets the current record's "include_provisional_sum" value
 * @method MasterCostDataParticular           setMasterCostData()                             Sets the current record's "MasterCostData" value
 * @method MasterCostDataParticular           setUnitOfMeasurement()                          Sets the current record's "UnitOfMeasurement" value
 * @method MasterCostDataParticular           setCostDataParticular()                         Sets the current record's "CostDataParticular" collection
 * @method MasterCostDataParticular           setItemColumnParticular()                       Sets the current record's "ItemColumnParticular" value
 * @method MasterCostDataParticular           setMasterCostDataParticularAssignedType()       Sets the current record's "MasterCostDataParticularAssignedType" collection
 * @method MasterCostDataParticular           setMasterCostDataParticularMasterCostDataItem() Sets the current record's "MasterCostDataParticularMasterCostDataItem" collection
 * @method MasterCostDataParticular           setMasterCostDataItemParticular()               Sets the current record's "MasterCostDataItemParticular" collection
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMasterCostDataParticular extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('master_cost_data_particulars');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('master_cost_data_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('priority', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('uom_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('is_summary_displayed', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('is_prime_cost_rate_summary_displayed', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('summary_description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('is_used_for_cost_comparison', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('include_provisional_sum', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));


        $this->index('master_cost_data_particular_id_idx', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MasterCostData', array(
             'local' => 'master_cost_data_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('UnitOfMeasurement', array(
             'local' => 'uom_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('CostDataParticular', array(
             'local' => 'id',
             'foreign' => 'master_cost_data_particular_id'));

        $this->hasOne('MasterCostDataItemColumnParticular as ItemColumnParticular', array(
             'local' => 'id',
             'foreign' => 'master_cost_data_particular_id'));

        $this->hasMany('MasterCostDataParticularAssignedGroup as MasterCostDataParticularAssignedType', array(
             'local' => 'id',
             'foreign' => 'master_cost_data_particular_id'));

        $this->hasMany('MasterCostDataParticularMasterCostDataItem', array(
             'local' => 'id',
             'foreign' => 'master_cost_data_particular_id'));

        $this->hasMany('MasterCostDataItemParticular', array(
             'local' => 'id',
             'foreign' => 'master_cost_data_particular_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}