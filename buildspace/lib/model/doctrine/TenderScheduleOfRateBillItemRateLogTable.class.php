<?php

/**
 * TenderScheduleOfRateBillItemRateLogTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TenderScheduleOfRateBillItemRateLogTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TenderScheduleOfRateBillItemRateLogTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TenderScheduleOfRateBillItemRateLog');
    }

    public static function insertIntoLog(TenderScheduleOfRate $tenderScheduleOfRate, $con=null)
    {
        $data[] = array(
            'tender_company_id'             => $tenderScheduleOfRate->tender_company_id,
            'schedule_of_rate_bill_item_id' => $tenderScheduleOfRate->schedule_of_rate_bill_item_id,
            'estimation_rate'               => $tenderScheduleOfRate->estimation_rate,
            'contractor_rate'               => $tenderScheduleOfRate->contractor_rate,
            'difference'                    => $tenderScheduleOfRate->difference
        );

        self::insertBatchLog($data, "MANUAL");
    }

    public static function insertBatchLog(Array $records, $type = "IMPORT")
    {
        $companyIds = array();
        $itemIds = array();

        foreach($records as $record)
        {
            if(!array_key_exists($record['tender_company_id'], $companyIds))
            {
                $companyIds[$record['tender_company_id']] = $record['tender_company_id'];
            }

            if(!array_key_exists($record['schedule_of_rate_bill_item_id'], $itemIds))
            {
                $itemIds[$record['schedule_of_rate_bill_item_id']] = $record['schedule_of_rate_bill_item_id'];
            }
        }

        if($companyIds and $itemIds)
        {
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
            $userId = is_integer($userId) ? $userId : 'NULL';

            $pdo = self::getInstance()->getConnection()->getDbh();

            $stmt = $pdo->prepare("SELECT schedule_of_rate_bill_item_id, MAX(changes_count) FROM ".self::getInstance()->getTableName()."
            WHERE tender_company_id IN (".implode(',', array_keys($companyIds)).")
            AND schedule_of_rate_bill_item_id IN (".implode(',', array_keys($itemIds)).")
            GROUP BY tender_company_id, schedule_of_rate_bill_item_id");

            $stmt->execute();

            $itemLogs = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

            $sqlValues = array();

            foreach($records as $record)
            {
                $changesCount = array_key_exists($record['schedule_of_rate_bill_item_id'], $itemLogs) ? $itemLogs[$record['schedule_of_rate_bill_item_id']] + 1 : 1;

                $sqlValues[] = "(".$record['tender_company_id'].", ".$record['schedule_of_rate_bill_item_id'].", ".$record['estimation_rate'].", ".$record['contractor_rate'].", ".$record['difference'].", ".$changesCount.", '".$type."', NOW(), NOW(), ".$userId.", ".$userId.")";
            }

            $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (tender_company_id, schedule_of_rate_bill_item_id, estimation_rate, contractor_rate, difference, changes_count, type, created_at, updated_at, created_by, updated_by)
            VALUES ".implode(',', $sqlValues));

            $stmt->execute();
        }
    }
}