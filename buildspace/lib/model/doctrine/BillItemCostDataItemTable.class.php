<?php

/**
 * BillItemCostDataItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillItemCostDataItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return BillItemCostDataItemTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillItemCostDataItem');
    }

    public static function sync(CostData $costData, MasterCostDataItem $masterItem, $selectedBillItemIds, $deselectedBillItemIds)
    {
        self::unlink($costData, $masterItem, $deselectedBillItemIds);

        self::link($costData, $masterItem, $selectedBillItemIds);

        self::itemValueUpdate($costData, $masterItem);
    }

    public static function itemValueUpdate(CostData $costData, MasterCostDataItem $masterItem)
    {
        $item = CostDataItemTable::getItem($costData, $masterItem);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $statement = "UPDATE " . CostDataItemTable::getInstance()->getTableName() . " i
            SET awarded_cost = :awardedCost
            WHERE i.id = :itemId";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array(
            'awardedCost' => self::getSumOfLinkedBillItems($costData, $masterItem) * $item->conversion_factor,
            'itemId'      => $item['id']
        ));

        $item->updateRelativesCost(array( CostDataItem::COLUMN_AWARDED_COST ));
    }

    protected static function unlink(CostData $costData, MasterCostDataItem $masterItem, $deselectedBillItemIds)
    {
        if( count($deselectedBillItemIds) <= 0 ) return;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $item = CostDataItemTable::getItem($costData, $masterItem);

        $implodedDeselectedItemIds = implode(',', $deselectedBillItemIds);

        if( $item->exists() )
        {
            $statement = "DELETE FROM " . self::getInstance()->getTableName() . " pivot
                WHERE pivot.cost_data_item_id = :itemId
                AND pivot.bill_item_id in ({$implodedDeselectedItemIds})";

            $stmt = $pdo->prepare($statement);

            $stmt->execute(array( 'itemId' => $item['id'] ));
        }
    }

    protected static function link(CostData $costData, MasterCostDataItem $masterItem, array $selectedBillItemIds)
    {
        $item = CostDataItemTable::getItem($costData, $masterItem);

        if($item->isNew()) $item->save();

        $linkedBillItemIds = array_column(self::getLinkedBillItems($costData, $masterItem), 'bill_item_id');

        $newlySelectedBillItemIds = array_diff($selectedBillItemIds, $linkedBillItemIds);

        foreach($newlySelectedBillItemIds as $billItemId)
        {
            $pivotRecord = new BillItemCostDataItem();
            $pivotRecord->bill_item_id = $billItemId;
            $pivotRecord->cost_data_item_id = $item->id;
            $pivotRecord->save();
        }
    }

    public static function getDescendantsAndSelfLinkedBillItems(CostData $costData, array $masterItemIds)
    {
        if(empty($masterItemIds)) return array();

        $pdo = self::getInstance()->getConnection()->getDbh();

        $descendantIdsByMasterItemId = array();

        $descendantIds = array();

        foreach($masterItemIds as $masterItemId)
        {
            $descendantIdsByMasterItemId[$masterItemId] = MasterCostDataItemTable::getDescendantIds([$masterItemId]);

            $descendantIdsByMasterItemId[$masterItemId][] = $masterItemId;

            $descendantIds = array_merge($descendantIds, $descendantIdsByMasterItemId[$masterItemId]);
        }

        $statement = "SELECT mi.id as master_cost_data_item_id, pivot.cost_data_item_id, i.id as bill_item_id, e.id as element_id, b.id as bill_id, p.id as project_id
            FROM ".self::getInstance()->getTableName()." pivot
            JOIN " . CostDataItemTable::getInstance()->getTableName() . " ci ON ci.id = pivot.cost_data_item_id
            JOIN " . MasterCostDataItemTable::getInstance()->getTableName() . " mi ON mi.id = ci.master_cost_data_item_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.id = pivot.bill_item_id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.id = i.element_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b ON b.id = e.project_structure_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.id = b.root_id
            WHERE ci.cost_data_id = {$costData->id}
            AND mi.id IN (" . implode(',', $descendantIds) . ")";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $data = array();

        foreach($descendantIdsByMasterItemId as $itemId => $descendantIds)
        {
            if(!array_key_exists($itemId, $data)) $data[$itemId] = array();

            foreach($records as $key => $record)
            {
                if(!in_array($record['master_cost_data_item_id'], $descendantIds)) continue;

                unset($record['master_cost_data_item_id'], $record['cost_data_item_id']);

                $data[$itemId][] = $record;

                unset($records[$key]);
            }
        }

        return $data;
    }

    public static function getLinkedBillItems(CostData $costData, MasterCostDataItem $masterItem)
    {
        // Todo: refactor to handle multiple items at once.
        $pdo = self::getInstance()->getConnection()->getDbh();

        $item = CostDataItemTable::getItem($costData, $masterItem);

        if($item->isNew()) return array();

        $statement = "SELECT i.id as bill_item_id, e.id as element_id, b.id as bill_id, p.id as project_id 
            FROM ".self::getInstance()->getTableName()." pivot
            JOIN " . BillItemTable::getInstance()->getTableName() . " i on i.id = pivot.bill_item_id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e on e.id = i.element_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b on b.id = e.project_structure_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p on p.id = b.root_id
            WHERE pivot.cost_data_item_id = :itemId";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array( 'itemId' => $item['id'] ));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getSumOfLinkedBillItems(CostData $costData, MasterCostDataItem $masterItem)
    {
        // Todo: refactor to handle multiple items at once.
        $pdo = self::getInstance()->getConnection()->getDbh();

        $item = CostDataItemTable::getItem($costData, $masterItem);

        $linkedBillItems = self::getLinkedBillItems($costData, $masterItem);

        if($item->isNew() || empty($linkedBillItems)) return 0;

        $linkedBillItemIds = Utilities::arrayValueRecursive('bill_item_id', $linkedBillItems);

        $statement = "SELECT SUM(COALESCE(r.grand_total,0))
        FROM ".self::getInstance()->getTableName()." pivot
        JOIN ".BillItemTable::getInstance()->getTableName()." bi on bi.id = pivot.bill_item_id
        LEFT JOIN " . PostContractBillItemRateTable::getInstance()->getTableName() . " r ON bi.id = r.bill_item_id
        WHERE pivot.cost_data_item_id = :itemId
        AND bi.deleted_at IS NULL;";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array( 'itemId' => $item['id'] ));

        return $stmt->fetch(PDO::FETCH_COLUMN,0);
    }

    public static function flushItemLinks($billItemIds)
    {
        Doctrine_Query::create()
            ->delete('BillItemCostDataItem')
            ->whereIn('bill_item_id', $billItemIds)
            ->execute();
    }
}