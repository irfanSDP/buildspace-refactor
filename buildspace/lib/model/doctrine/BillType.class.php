<?php

/**
 * BillType
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BillType extends BaseBillType
{
    const TYPE_STANDARD = 1;
    const TYPE_PROVISIONAL = 2;
    const TYPE_PRELIMINARY = 4;
    const TYPE_PRIMECOST = 8;

    const STATUS_OPEN = 1;
    const STATUS_CLOSED = 2;
    const STATUS_RESOURCE_ANALYSIS_RECALCULATE_ITEM = 4;
    const STATUS_RESOURCE_ANALYSIS_RECALCULATE_ELEMENT = 8;
    const STATUS_RESOURCE_ANALYSIS_RECALCULATE_BILL = 16;
    const STATUS_SCHEDULE_OF_RATE_ANALYSIS_RECALCULATE_ITEM = 32;
    const STATUS_SCHEDULE_OF_RATE_ANALYSIS_RECALCULATE_ELEMENT = 64;
    const STATUS_SCHEDULE_OF_RATE_ANALYSIS_RECALCULATE_BILL = 128;
    const STATUS_SCHEDULE_OF_QUANTITY_RECALCULATE_ITEM = 256;
    const STATUS_SCHEDULE_OF_QUANTITY_RECALCULATE_ELEMENT = 512;
    const STATUS_SCHEDULE_OF_QUANTITY_RECALCULATE_BILL = 1024;

    public function recalculateByLevel($level)
    {
        $status = $this->status;

        if($status & self::STATUS_RESOURCE_ANALYSIS_RECALCULATE_ITEM || $status & self::STATUS_RESOURCE_ANALYSIS_RECALCULATE_ELEMENT || $status & self::STATUS_RESOURCE_ANALYSIS_RECALCULATE_BILL)
        {
            switch($level)
            {
                case 'item':
                    $this->recalculateResourceAnalysisItem();
                    break;
                case 'element':
                    $this->recalculateElement(RecalculateBillItem::TYPE_RESOURCE_ANALYSIS);
                    break;
                case 'bill':
                    $this->recalculateBill(RecalculateBillItem::TYPE_RESOURCE_ANALYSIS);
                    break;
                default:
                    throw new Exception('invalid level type');
            }
        }
        elseif($status & self::STATUS_SCHEDULE_OF_RATE_ANALYSIS_RECALCULATE_ITEM || $status & self::STATUS_SCHEDULE_OF_RATE_ANALYSIS_RECALCULATE_ELEMENT || $status & self::STATUS_SCHEDULE_OF_RATE_ANALYSIS_RECALCULATE_BILL)
        {
            switch($level)
            {
                case 'item':
                    $this->recalculateScheduleOfRateItem();
                    return;
                case 'element':
                    $this->recalculateElement(RecalculateBillItem::TYPE_SCHEDULE_OF_RATE_ANALYSIS);
                    break;
                case 'bill':
                    $this->recalculateBill(RecalculateBillItem::TYPE_SCHEDULE_OF_RATE_ANALYSIS);
                    break;
                default:
                    throw new Exception('invalid level type');
            }
        }
        elseif($status & self::STATUS_SCHEDULE_OF_QUANTITY_RECALCULATE_ITEM || $status & self::STATUS_SCHEDULE_OF_QUANTITY_RECALCULATE_ELEMENT || $status & self::STATUS_SCHEDULE_OF_QUANTITY_RECALCULATE_BILL)
        {
            switch($level)
            {
                case 'item':
                    return;
                case 'element':
                    $this->recalculateElement(RecalculateBillItem::TYPE_SCHEDULE_OF_QUANTITY_UPDATE);
                    break;
                case 'bill':
                    $this->recalculateBill(RecalculateBillItem::TYPE_SCHEDULE_OF_QUANTITY_UPDATE);
                    break;
                default:
                    throw new Exception('invalid level type');
            }
        }
    }

    private function recalculateElement($recalculateType)
    {
        switch($recalculateType)
        {
            case RecalculateBillItem::TYPE_SCHEDULE_OF_RATE_ANALYSIS:
                $billColumnSettings = $this->ProjectStructure->BillColumnSettings->toArray();
                $billMarkupSetting = $this->ProjectStructure->BillMarkupSetting->toArray();
                $billTypeStatus = BillType::STATUS_SCHEDULE_OF_RATE_ANALYSIS_RECALCULATE_BILL;
                break;
            case RecalculateBillItem::TYPE_RESOURCE_ANALYSIS:
                $billTypeStatus = BillType::STATUS_RESOURCE_ANALYSIS_RECALCULATE_BILL;
                $billColumnSettings = false;
                $billMarkupSetting = false;
                break;
            case RecalculateBillItem::TYPE_SCHEDULE_OF_QUANTITY_UPDATE:
                $billColumnSettings = $this->ProjectStructure->BillColumnSettings->toArray();
                $billMarkupSetting = $this->ProjectStructure->BillMarkupSetting->toArray();
                $billTypeStatus = BillType::STATUS_SCHEDULE_OF_QUANTITY_RECALCULATE_BILL;
                break;
            default:
                throw new Exception('invalid recalculate type');
        }

        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT i.element_id AS id FROM
            ".RecalculateBillItemTable::getInstance()->getTableName()." AS r JOIN
            ".BillItemTable::getInstance()->getTableName()." AS i ON i.id = r.bill_item_id JOIN
            ".BillElementTable::getInstance()->getTableName()." AS be ON i.element_id = be.id JOIN
            ".ProjectStructureTable::getInstance()->getTableName()." AS s ON be.project_structure_id = s.id
            WHERE s.id = ".$this->project_structure_id." AND r.type = ".$recalculateType."
            AND i.deleted_at IS NULL AND be.deleted_at IS NULL AND s.deleted_at IS NULL");

        $stmt->execute();

        $elements = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach($elements as $element)
        {
            if($billColumnSettings and $billMarkupSetting)
            {
                BillElementTable::updateAllItemTotalAfterMarkupByElementId($element['id'], $billColumnSettings, $billMarkupSetting);
            }

            BillElementTable::updateMarkupAmountByElementId($element['id']);
        }

        $this->status = $billTypeStatus;
        $this->save();
    }

    private function recalculateBill($recalculateType)
    {
        switch($recalculateType)
        {
            case RecalculateBillItem::TYPE_SCHEDULE_OF_RATE_ANALYSIS:
                break;
            case RecalculateBillItem::TYPE_RESOURCE_ANALYSIS:
                break;
            case RecalculateBillItem::TYPE_SCHEDULE_OF_QUANTITY_UPDATE:
                break;
            default:
                throw new Exception('invalid recalculate type');
        }

        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM ".RecalculateBillItemTable::getInstance()->getTableName()."
        WHERE type = ".$recalculateType." AND bill_item_id
        IN (SELECT DISTINCT i.id FROM ".BillItemTable::getInstance()->getTableName()." AS i JOIN
        ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id JOIN
        ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        WHERE s.id = ".$this->project_structure_id." AND i.deleted_at IS NULL
        AND e.deleted_at IS NULL AND s.deleted_at IS NULL)");

        $stmt->execute();

        $this->status = BillType::STATUS_OPEN;
        $this->save();
    }

    private function recalculateScheduleOfRateItem()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        try
        {
            $pdo->beginTransaction();

            $stmt = $pdo->prepare("SELECT DISTINCT i.element_id, r.bill_item_id FROM
            ".RecalculateBillItemTable::getInstance()->getTableName()." AS r JOIN
            ".BillItemTable::getInstance()->getTableName()." AS i ON i.id = r.bill_item_id JOIN
            ".BillElementTable::getInstance()->getTableName()." AS be ON i.element_id = be.id JOIN
            ".ProjectStructureTable::getInstance()->getTableName()." AS s ON be.project_structure_id = s.id
            WHERE s.id = ".$this->project_structure_id." AND r.type = ".RecalculateBillItem::TYPE_SCHEDULE_OF_RATE_ANALYSIS."
            AND i.deleted_at IS NULL AND be.deleted_at IS NULL AND s.deleted_at IS NULL");

            $stmt->execute();

            $billItems = $stmt->fetchAll(PDO::FETCH_COLUMN | PDO::FETCH_GROUP);

            $billColumnSettings = $this->ProjectStructure->BillColumnSettings->toArray();

            $billMarkupSetting = $this->ProjectStructure->BillMarkupSetting->toArray();

            $elementMarkupPercentage = array();

            foreach($billItems as $billElementId => $billItemIds)
            {
                if(!isset($elementMarkupPercentage[$billElementId]) || !array_key_exists($billElementId, $elementMarkupPercentage))
                {
                    //Get Element Markup if enabled
                    if($billMarkupSetting['element_markup_enabled'])
                    {
                        $stmt = $pdo->prepare("SELECT COALESCE(c.final_value, 0) as value FROM ".BillElementFormulatedColumnTable::getInstance()->getTableName()." c
                        JOIN ".BillElementTable::getInstance()->getTableName()." e ON c.relation_id = e.id
                        WHERE e.id = ".$billElementId." AND c.column_name = '".BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
                        AND c.deleted_at IS NULL AND c.final_value <> 0 AND e.deleted_at IS NULL");

                        $stmt->execute();

                        if(!$elementMarkupPercentage[$billElementId] = $stmt->fetchColumn())
                        {
                            $elementMarkupPercentage[$billElementId] = 0;
                        }
                    }
                    else
                    {
                        $elementMarkupPercentage[$billElementId] = 0;
                    }
                }

                foreach($billItemIds as $billItemId)
                {
                    BillItemTable::updateTypeTotalAmount($billItemId, $billColumnSettings, array(
                        'bill_markup_enabled'       => $billMarkupSetting['bill_markup_enabled'],
                        'bill_markup_percentage'    => $billMarkupSetting['bill_markup_percentage'],
                        'element_markup_enabled'    => $billMarkupSetting['element_markup_enabled'],
                        'element_markup_percentage' => $elementMarkupPercentage[$billElementId],
                        'item_markup_enabled'       => $billMarkupSetting['item_markup_enabled'],
                        'rounding_type'             => $billMarkupSetting['rounding_type']
                    ));

                    //update grand total
                    $stmt = $pdo->prepare("UPDATE " . BillItemTable::getInstance()->getTableName() . " SET
                    grand_total = subquery.grand_total,
                    grand_total_after_markup = subquery.grand_total_after_markup
                    FROM (SELECT r.bill_item_id, COALESCE(SUM(r.grand_total), 0) AS grand_total, COALESCE(SUM(r.grand_total_after_markup), 0) AS grand_total_after_markup
                    FROM " . BillItemTypeReferenceTable::getInstance()->getTableName() . " AS r
                    LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " AS c ON r.bill_column_setting_id = c.id
                    JOIN ".BillItemTable::getInstance()->getTableName()." i ON r.bill_item_id = i.id
                    WHERE i.id = " . $billItemId . "
                    AND r.include IS TRUE AND r.deleted_at IS NULL AND c.deleted_at IS NULL
                    AND i.type <> ".BillItem::TYPE_HEADER."
                    AND i.type <> ".BillItem::TYPE_NOID."
                    AND i.type <> ".BillItem::TYPE_HEADER_N."
                    AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL GROUP BY r.bill_item_id) AS subquery
                    WHERE " . BillItemTable::getInstance()->getTableName() . ".id = subquery.bill_item_id");

                    $stmt->execute();

                    //update markup amount columns since any changes on total qty or original grand total will affect markup amount (base on markup percentage)
                    BillItemTable::updateMarkupAmountByBillItemId($billItemId);
                }

                unset($billItemIds);
            }

            $pdo->commit();
        }
        catch(PDOException $e)
        {
            $pdo->rollBack();
            throw $e;
        }

        $this->status = BillType::STATUS_SCHEDULE_OF_RATE_ANALYSIS_RECALCULATE_ELEMENT;
        $this->save();
    }

    private function recalculateResourceAnalysisItem()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        try
        {
            $pdo->beginTransaction();

            $stmt = $pdo->prepare("SELECT i.id AS item_id,
            COALESCE(markup.final_value, 0) as markup_percentage,
            e.id AS element_id,
            sum.markup AS summary_markup,
            sum.rounding_type AS summary_rounding_type,
            sum.conversion_factor_amount AS summary_conversion_factor_amount,
            sum.conversion_factor_operator AS summary_conversion_factor_operator,
            sum.apply_conversion_factor AS summary_apply_conversion_factor, (
                SELECT COALESCE(SUM(b.line_total),0) FROM ".BillBuildUpRateItemTable::getInstance()->getTableName()." b
                WHERE b.bill_item_id = i.id AND b.deleted_at IS NULL) as total_cost FROM
            ".RecalculateBillItemTable::getInstance()->getTableName()." AS r JOIN
            ".BillItemTable::getInstance()->getTableName()." AS i ON i.id = r.bill_item_id LEFT JOIN
            ".BillItemFormulatedColumnTable::getInstance()->getTableName()." markup ON markup.relation_id = i.id
            AND markup.deleted_at IS NULL AND markup.column_name = '".BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE."' JOIN
            ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." AS sum ON sum.bill_item_id = i.id JOIN
            ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id JOIN
            ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
            WHERE s.id = ".$this->project_structure_id." AND r.type = ".RecalculateBillItem::TYPE_RESOURCE_ANALYSIS."
            AND sum.deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL AND s.deleted_at IS NULL");

            $stmt->execute();

            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $billColumnSettings = $this->ProjectStructure->BillColumnSettings->toArray();

            $billMarkupSetting = $this->ProjectStructure->BillMarkupSetting->toArray();

            //Get Element Markup Percentage
            if($billMarkupSetting['element_markup_enabled'])
            {
                $stmt = $pdo->prepare("SELECT e.id, COALESCE(c.final_value, 0) as value FROM ".BillElementFormulatedColumnTable::getInstance()->getTableName()." c
                    JOIN ".BillElementTable::getInstance()->getTableName()." e ON c.relation_id = e.id
                    WHERE e.project_structure_id = ".$this->project_structure_id." AND c.column_name = '".BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
                    AND c.deleted_at IS NULL AND e.deleted_at IS NULL");

                $stmt->execute();

                $elementMarkupResults = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);
            }

            $summaryTotalCostCaseStatement = '';
            $summaryFinalCostCaseStatement = '';
            $ratesCaseStatement = '';

            $itemIdsToUpdate = array();
            $itemRatesAndMarkup = array();

            foreach($results as $result)
            {
                $infoArray = array(
                    'bill_item_id' => $result['item_id'],
                    'bill_element_id' => $result['element_id'],
                    'total_cost' => $result['total_cost'],
                    'markup_percentage' => $result['markup_percentage'],
                    'summary_markup' => $result['summary_markup'],
                    'summary_rounding_type' => $result['summary_rounding_type'],
                    'summary_conversion_factor_amount' => $result['summary_conversion_factor_amount'],
                    'summary_conversion_factor_operator' => $result['summary_conversion_factor_operator'],
                    'summary_apply_conversion_factor' => $result['summary_apply_conversion_factor']
                );

                //prepare total cost statement
                $summaryTotalCostCaseStatement.=" WHEN ".$infoArray['bill_item_id']." THEN (".$infoArray['total_cost'].")";

                $totalCost = $infoArray['total_cost'];
                $conversionFactorAmount = $infoArray['summary_conversion_factor_amount'];
                $operator = $infoArray['summary_conversion_factor_operator'];

                if($infoArray['summary_apply_conversion_factor'])
                {
                    $exp = $totalCost.$operator.$conversionFactorAmount;

                    $evaluator = new EvalMath(true, true);
                    $evaluator->suppress_errors = true;
                    $evaluatedValue = $evaluator->evaluate($exp);

                    $totalCost = $evaluatedValue ? $evaluatedValue : 0;
                }

                $markupPrice = $totalCost * ($infoArray['summary_markup'] / 100);

                $finalCost = $totalCost + $markupPrice;

                switch($infoArray['summary_rounding_type'])
                {
                    case BillBuildUpRateSummary::ROUNDING_TYPE_UPWARD:
                        $finalCost  = ceil($finalCost);
                        break;
                    case BillBuildUpRateSummary::ROUNDING_TYPE_DOWNWARD:
                        $finalCost  =  floor($finalCost);
                        break;
                    case BillBuildUpRateSummary::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                        $finalCost  =  round($finalCost);
                        break;
                    case BillBuildUpRateSummary::ROUNDING_TYPE_NEAREST_TENTH:
                        $finalCost  =  round($finalCost * 10) / 10;
                        break;
                    default:
                        $finalCost  =  round($finalCost, 2);
                }

                //prepare final cost statement
                $summaryFinalCostCaseStatement.=" WHEN ".$infoArray['bill_item_id']." THEN (".$finalCost.")";

                $rate = round($finalCost, 2);

                //prepare final cost statement
                $ratesCaseStatement.=" WHEN ".$infoArray['bill_item_id']." THEN (".$rate.")";

                //Calculate Rate After Markup
                if($billMarkupSetting && ($billMarkupSetting['element_markup_enabled'] || $billMarkupSetting['item_markup_enabled']))
                {
                    $rateAfterMarkup = $rate;

                    if($billMarkupSetting['item_markup_enabled'])
                    {
                        $rateAfterMarkup = $rateAfterMarkup + ($rateAfterMarkup * $infoArray['markup_percentage'] / 100);
                    }

                    if($billMarkupSetting['element_markup_enabled'])
                    {
                        $elementMarkupPercentage = array_key_exists($infoArray['bill_element_id'], $elementMarkupResults) ? $elementMarkupResults[$infoArray['bill_element_id']][0] : 0;
                        $rateAfterMarkup = $elementMarkupPercentage != 0 ? $rateAfterMarkup + ($rateAfterMarkup * $elementMarkupPercentage / 100) : $rateAfterMarkup;
                    }

                    switch($billMarkupSetting['rounding_type'])
                    {
                        case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                            $rateAfterMarkup = ceil($rateAfterMarkup);
                            break;
                        case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                            $rateAfterMarkup = floor($rateAfterMarkup);
                            break;
                        case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                            $rateAfterMarkup = round($rateAfterMarkup);
                            break;
                        case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                            $rateAfterMarkup = round(($rateAfterMarkup) * 10) / 10;
                            break;
                        default:
                            $rateAfterMarkup = round($rateAfterMarkup, 2);
                    }
                }
                else
                {
                    $rateAfterMarkup = $rate;
                }

                $itemRatesAndMarkup[$infoArray['bill_item_id']] = array(
                    'element_id' => $infoArray['bill_element_id'],
                    'rate' => $rate,
                    'rate_after_markup' => $rateAfterMarkup,
                    'markup_percentage' => $infoArray['markup_percentage']
                );

                array_push($itemIdsToUpdate, $infoArray['bill_item_id']);
            }

            if(count($results) > 0)
            {
                //Update BuildUpSummaries
                $stmt = $pdo->prepare("UPDATE ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." SET
                total_cost = (CASE bill_item_id".$summaryTotalCostCaseStatement." END),
                final_cost = (CASE bill_item_id".$summaryFinalCostCaseStatement." END) WHERE
                bill_item_id IN (".implode(',', $itemIdsToUpdate).") AND deleted_at IS NULL");

                $stmt->execute();

                //Update BuildUpRates formulated Column
                $stmt = $pdo->prepare("UPDATE ".BillItemFormulatedColumnTable::getInstance()->getTableName()." SET
                value = (CASE relation_id".$summaryFinalCostCaseStatement." END),
                final_value = (CASE relation_id".$summaryFinalCostCaseStatement." END)
                WHERE relation_id IN (".implode(',', $itemIdsToUpdate).") AND
                column_name = '".BillItem::FORMULATED_COLUMN_RATE."' AND deleted_at IS NULL");

                $stmt->execute();
            }

            $con = $this->getTable()->getInstance()->getConnection();

            //Get Quantity Values
            $itemGrandTotals = array();

            if(count($itemRatesAndMarkup) > 0)
            {
                foreach($billColumnSettings as $column)
                {
                    $quantityFieldName = $column['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                    $stmt = $pdo->prepare("SELECT r.bill_item_id, COALESCE(fc.final_value, 0) AS value FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
                        JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." r ON fc.relation_id = r.id
                        WHERE r.bill_item_id IN (".implode(',', $itemIdsToUpdate).") AND r.bill_column_setting_id = ".$column['id']."
                        AND r.include IS TRUE AND fc.column_name = '".$quantityFieldName."'
                        AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

                    $stmt->execute();

                    $quantities = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);

                    $originalTotalCaseStatement = '';
                    $totalQuantityCaseStatement = '';
                    $afterMarkupTotalCaseStatement = '';

                    foreach($itemRatesAndMarkup as $itemId => $item)
                    {
                        if(!array_key_exists($itemId, $itemGrandTotals))
                        {
                            $itemGrandTotals[$itemId]['grand_total'] = 0;
                            $itemGrandTotals[$itemId]['grand_total_quantity'] = 0;
                            $itemGrandTotals[$itemId]['grand_total_after_markup'] = 0;
                        }

                        $quantity = (array_key_exists($itemId, $quantities)) ? $quantities[$itemId][0] : 0;

                        $totalQuantity = $quantity * $column['quantity'];
                        $totalPerUnit = $quantity * $item['rate'];
                        $totalPerUnitAfterMarkup = $quantity * $item['rate_after_markup'];

                        $originalTotal = round($totalPerUnit, 2) * $column['quantity'];
                        $afterMarkupTotal = round($totalPerUnitAfterMarkup, 2) * $column['quantity'];

                        $itemGrandTotals[$itemId]['grand_total'] += $originalTotal;
                        $itemGrandTotals[$itemId]['grand_total_after_markup'] += $afterMarkupTotal;
                        $itemGrandTotals[$itemId]['grand_total_quantity'] += $totalQuantity;

                        $originalTotalCaseStatement.=" WHEN ".$itemId." THEN ".$originalTotal;
                        $afterMarkupTotalCaseStatement.=" WHEN ".$itemId." THEN ".$afterMarkupTotal;
                        $totalQuantityCaseStatement.=" WHEN ".$itemId." THEN ".$totalQuantity;
                    }

                    //Update Per Total Quantity
                    $con->execute("UPDATE ".BillItemTypeReferenceTable::getInstance()->getTableName()."
                        SET total_quantity = (CASE bill_item_id".$totalQuantityCaseStatement." END),
                        grand_total_after_markup = (CASE bill_item_id".$afterMarkupTotalCaseStatement." END),
                        grand_total = (CASE bill_item_id".$originalTotalCaseStatement." END)
                        WHERE bill_item_id IN (".implode(',', $itemIdsToUpdate).") AND bill_column_setting_id = ".$column['id']." AND deleted_at IS NULL AND include IS TRUE");

                }

                $grandTotalQuantityCaseStatement = '';
                $originalGrandTotalCaseStatement = '';
                $afterMarkupGrandTotalCaseStatement = '';

                //Generate GrandTotal Update Statement
                foreach($itemGrandTotals as $itemId => $item)
                {
                    $originalGrandTotalCaseStatement.=" WHEN ".$itemId." THEN ".$item['grand_total'];
                    $grandTotalQuantityCaseStatement.=" WHEN ".$itemId." THEN ".$item['grand_total_quantity'];
                    $afterMarkupGrandTotalCaseStatement.=" WHEN ".$itemId." THEN ".$item['grand_total_after_markup'];
                }

                //Update All Item Grand Total
                $con->execute( "UPDATE ".BillItemTable::getInstance()->getTableName()." AS item
                    SET grand_total_quantity = (CASE id".$grandTotalQuantityCaseStatement." END),
                    grand_total = (CASE id".$originalGrandTotalCaseStatement." END),
                    grand_total_after_markup = (CASE id".$afterMarkupGrandTotalCaseStatement." END)
                    WHERE item.id IN (".implode(',', $itemIdsToUpdate).")");
            }

            $pdo->commit();
        }
        catch(PDOException $e)
        {
            $pdo->rollBack();
            throw $e;
        }

        $this->status = BillType::STATUS_RESOURCE_ANALYSIS_RECALCULATE_ELEMENT;
        $this->save();
    }
}
