<?php

/**
 * StockInInvoiceItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StockInInvoiceItemTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object StockInInvoiceItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('StockInInvoiceItem');
    }

    public static function getInvoicesTotalByProject(ProjectStructure $project)
    {
        $data = array();

        $totals = Doctrine_Query::create()
            ->select('i.id, SUM(COALESCE(siii.total, 0)) as invoice_total')
            ->from('StockInInvoice i')
            ->leftJoin('i.StockInInvoiceItems siii')
            ->where('i.project_structure_id = ?', array( $project->id ))
            ->groupBy('i.id')
            ->fetchArray();

        foreach ( $totals as $total )
        {
            $data[$total['id']] = $total['invoice_total'];
        }

        return $data;
    }

    public static function getResourceItemIdsByStockInInvoice(StockInInvoice $invoice)
    {
        $data  = array();
        $items = self::getItemListingByStockInInvoice($invoice);

        if ( empty( $items ) )
        {
            return $data;
        }

        foreach ( $items as $item )
        {
            $data[$item['resource_item_id']] = $item['resource_item_id'];

            unset( $item );
        }

        return $data;
    }

    public static function getItemListingByStockInInvoice(StockInInvoice $invoice, $inResourceItemIds = null)
    {
        $pdo     = self::getInstance()->getConnection()->getDbh();
        $inQuery = null;

        if ( $inResourceItemIds )
        {
            $inResourceItemIds = json_decode($inResourceItemIds);

            if ( empty($inResourceItemIds) )
            {
                return array();
            }

            $inQuery = 'AND b.resource_item_id IN (' . implode(',', $inResourceItemIds) . ')';
        }

        $stmt = $pdo->prepare("SELECT b.id, b.resource_item_id, b.quantity, b.rates, b.total, b.total_without_tax,
        b.discount_percentage, b.tax_percentage, COALESCE(remark.description, NULL) AS remark, b.remark_id
        FROM " . self::getInstance()->getTableName() . " b
        LEFT JOIN " . RFQItemRemarkTable::getInstance()->getTableName() . " remark ON ( b.remark_id = remark.id )
        WHERE ( b.stock_in_invoice_id = :invoiceId AND b.deleted_at IS NULL {$inQuery})");

        $stmt->execute(array( 'invoiceId' => $invoice->id ));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getHierarchyInvoiceItemListingFromResourceLibraryByStockInItemIds(Array $stockInItemsId, Array $stockInFromDbItems, Array $doItemQuantities, $forPrinting = false)
    {
        $stockInTreeItems = array();
        $results          = self::queryToGetResourceItemHierarchy($stockInItemsId);

        foreach ( $results as $result )
        {
            $stockInItemId      = - 1;
            $quantity           = 0;
            $doQuantity         = 0;
            $rates              = 0;
            $discountPercentage = 0;
            $taxPercentage      = 0;
            $remarkId           = - 1;
            $remarks            = null;
            $totalWithoutTax    = 0;
            $total              = 0;

            if ( isset ( $stockInFromDbItems[$result['id']] ) )
            {
                $stockInItemId      = $stockInFromDbItems[$result['id']]['stockInItemId'];
                $quantity           = $stockInFromDbItems[$result['id']]['quantity'];
                $rates              = $stockInFromDbItems[$result['id']]['rates'];
                $discountPercentage = $stockInFromDbItems[$result['id']]['discount_percentage'];
                $taxPercentage      = $stockInFromDbItems[$result['id']]['tax_percentage'];
                $remarks            = $stockInFromDbItems[$result['id']]['remarks'];
                $remarkId           = $stockInFromDbItems[$result['id']]['stockInItemRemarkId'];
                $totalWithoutTax    = isset( $stockInFromDbItems[$result['id']]['total_without_tax'] ) ? $stockInFromDbItems[$result['id']]['total_without_tax'] : 0;
                $total              = isset( $stockInFromDbItems[$result['id']]['total'] ) ? $stockInFromDbItems[$result['id']]['total'] : 0;
            }

            if ( isset( $doItemQuantities[$result['id']] ) )
            {
                $doQuantity = $doItemQuantities[$result['id']];
            }

            $description = $result['description'];

            if ( !empty( $remarks ) )
            {
                if ( $forPrinting )
                {
                    $description = "{$result['description']} - {$remarks}";
                }
                else
                {
                    $description = \StockInInvoiceItem::remarksFormatter($result['description'], $remarks);
                }
            }

            $stockInTreeItems[] = array(
                'stockInItemId'       => $stockInItemId,
                'id'                  => $result['id'],
                'root_id'             => $result['root_id'],
                'resource_trade_id'   => $result['resource_trade_id'],
                'description'         => $description,
                'type'                => $result['type'],
                'uom'                 => $result['uom'],
                'uom_id'              => $result['uom_id'],
                'level'               => $result['level'],
                'priority'            => $result['priority'],
                'lft'                 => $result['lft'],
                'quantity'            => $quantity,
                'doQuantity'          => $doQuantity,
                'balanceQuantity'     => self::calculateBalanceQuantity($quantity, $doQuantity),
                'rates'               => $rates,
                'discount_percentage' => $discountPercentage,
                'tax_percentage'      => $taxPercentage,
                'total_without_tax'   => $totalWithoutTax,
                'total'               => $total,
                'stockInItemRemarkId' => $remarkId,
                'remarks'             => $remarks,
            );

            unset( $result );
        }

        unset( $results, $stockInItemsId, $stockInFromDbItems );

        return $stockInTreeItems;
    }

    public static function getHierarchyDeliveryOrderItemListingFromResourceLibraryByStockInItemIds(Array $stockInItemsId, Array $stockInFromDbItems)
    {
        $stockInTreeItems = array();
        $results          = self::queryToGetResourceItemHierarchy($stockInItemsId);

        foreach ( $results as $result )
        {
            $stockInItemId   = - 1;
            $qtyId           = - 1;
            $invoiceQuantity = 0;
            $doQuantity      = 0;
            $remarkId        = - 1;
            $remarks         = null;

            if ( isset ( $stockInFromDbItems[$result['id']] ) )
            {
                $stockInItemId   = $stockInFromDbItems[$result['id']]['stockInItemId'];
                $qtyId           = $stockInFromDbItems[$result['id']]['qtyId'];
                $invoiceQuantity = $stockInFromDbItems[$result['id']]['invoiceQuantity'];
                $doQuantity      = $stockInFromDbItems[$result['id']]['doQuantity'];
                $remarks         = $stockInFromDbItems[$result['id']]['remarks'];
                $remarkId        = $stockInFromDbItems[$result['id']]['stockInItemRemarkId'];
            }

            $stockInTreeItems[] = array(
                'resource_trade_id'   => $result['resource_trade_id'],
                'stockInItemId'       => $stockInItemId,
                'qtyId'               => empty( $qtyId ) ? - 1 : $qtyId,
                'id'                  => $result['id'],
                'root_id'             => $result['root_id'],
                'description'         => $result['description'],
                'type'                => $result['type'],
                'uom'                 => $result['uom'],
                'uom_id'              => $result['uom_id'],
                'level'               => $result['level'],
                'priority'            => $result['priority'],
                'lft'                 => $result['lft'],
                'invoiceQuantity'     => $invoiceQuantity,
                'doQuantity'          => $doQuantity,
                'stockInItemRemarkId' => $remarkId,
                'remarks'             => $remarks,
            );

            unset( $result );
        }

        unset( $results, $stockInItemsId, $stockInFromDbItems );

        return $stockInTreeItems;
    }

    public static function deleteLikeResourceLibraryTree(StockInInvoice $invoice, ResourceItem $resourceItem)
    {
        $items = DoctrineQuery::create()
            ->select('i.id')
            ->from('ResourceItem i')
            ->andWhere('i.root_id = ?', $resourceItem->root_id)
            ->andWhere('i.lft >= ? AND i.rgt <= ?', array( $resourceItem->lft, $resourceItem->rgt ))
            ->addOrderBy('i.lft')
            ->fetchArray();

        $affectedItemIds  = array();
        $affectedItemList = array();

        foreach ( $items as $item )
        {
            $affectedItemIds[] = $item['id'];

            array_push($affectedItemList, $item);
        }

        if ( empty( $affectedItemIds ) )
        {
            return $affectedItemList;
        }

        $itemIds = Doctrine_Query::create()
            ->select('i.id')
            ->from('StockInInvoiceItem i')
            ->where('i.stock_in_invoice_id = ?', $invoice->id)
            ->andWhereIn('i.resource_item_id', $affectedItemIds)
            ->fetchArray();

        if ( !empty( $itemIds ) )
        {
            $itemIdsToBeDeleted = array();

            foreach ( $itemIds as $itemId )
            {
                $itemIdsToBeDeleted[$itemId['id']] = $itemId['id'];
            }

            Doctrine_Query::create()
                ->delete('StockInDeliveryOrderItemQuantity i')
                ->whereIn('i.stock_in_invoice_item_id', $itemIdsToBeDeleted)
                ->execute(array());

            Doctrine_Query::create()
                ->delete('StockInInvoiceItem i')
                ->whereIn('i.id', $itemIdsToBeDeleted)
                ->execute(array());
        }

        return $affectedItemList;
    }

    public static function calculateTotalAmount($quantity, $rates)
    {
        return number_format((float) $quantity * $rates, 2, '.', '');
    }

    public static function queryToGetResourceItemHierarchy(Array $resourceItemIds)
    {
        if ( empty($resourceItemIds) )
        {
            return array();
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.root_id, p.description, p.type::text, p.uom_id, p.level, p.priority,
        p.lft, uom.symbol AS uom, rt.priority as rt_priority, rt.id as resource_trade_id, r.id as resource_id
        FROM " . ResourceItemTable::getInstance()->getTableName() . " c
        JOIN " . ResourceItemTable::getInstance()->getTableName() . " p
        ON c.lft BETWEEN p.lft AND p.rgt
        LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
        JOIN " . ResourceTradeTable::getInstance()->getTableName() . " rt on p.resource_trade_id = rt.id AND rt.deleted_at IS NULL
        JOIN " . ResourceTable::getInstance()->getTableName() . " r on rt.resource_id = r.id AND r.deleted_at IS NULL
        WHERE c.root_id = p.root_id AND c.type <> " . ResourceItem::TYPE_HEADER . "
        AND c.id IN (" . implode(', ', $resourceItemIds) . ")
        AND c.deleted_at IS NULL AND p.deleted_at IS NULL
        ORDER BY p.priority, p.lft, p.level ASC");

        $stmt->execute(array());

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return self::orderItemsByResourceAndTrade($items);
    }

    public static function queryToGetResourceItemWithHead(Array $resourceItemIds)
    {
        if ( empty($resourceItemIds) )
        {
            return array();
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.root_id, p.description, p.type::text, p.uom_id, p.level, p.priority,
        p.lft, uom.symbol AS uom, rt.priority as rt_priority, rt.id as resource_trade_id, r.id as resource_id
        FROM " . ResourceItemTable::getInstance()->getTableName() . " p
        LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
        JOIN " . ResourceTradeTable::getInstance()->getTableName() . " rt on p.resource_trade_id = rt.id AND rt.deleted_at IS NULL
        JOIN " . ResourceTable::getInstance()->getTableName() . " r on rt.resource_id = r.id AND r.deleted_at IS NULL
        WHERE p.id IN (" . implode(', ', $resourceItemIds) . ") AND p.deleted_at IS NULL AND p.deleted_at IS NULL
        ORDER BY p.priority, p.lft, p.level ASC");

        $stmt->execute(array());

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return self::orderItemsByResourceAndTrade($items);
    }

    public static function queryToGetResourceItemWithoutHead(Array $resourceItemIds)
    {
        if ( empty($resourceItemIds) )
        {
            return array();
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.root_id, p.description, p.type::text, p.uom_id, p.level, p.priority,
        p.lft, uom.symbol AS uom, rt.priority as rt_priority, rt.id as resource_trade_id, r.id as resource_id
        FROM " . ResourceItemTable::getInstance()->getTableName() . " p
        LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
        JOIN " . ResourceTradeTable::getInstance()->getTableName() . " rt on p.resource_trade_id = rt.id AND rt.deleted_at IS NULL
        JOIN " . ResourceTable::getInstance()->getTableName() . " r on rt.resource_id = r.id AND r.deleted_at IS NULL
        WHERE p.id IN (" . implode(', ', $resourceItemIds) . ") AND p.type <> " . ResourceItem::TYPE_HEADER . "
        AND p.deleted_at IS NULL AND p.deleted_at IS NULL
        ORDER BY p.priority, p.lft, p.level ASC");

        $stmt->execute(array());

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return self::orderItemsByResourceAndTrade($items);
    }

    public static function orderItemsByResourceAndTrade(array $items)
    {
        if ( empty($items) )
        {
            return array();
        }

        $data     = array();
        $tradeIds = array();

        foreach ( $items as $item )
        {
            $tradeIds[$item['resource_trade_id']] = $item['resource_trade_id'];
        }

        foreach ( ResourceTradeTable::getRecordsByIds($tradeIds) as $trade )
        {
            foreach ( $items as $itemKey => $item )
            {
                if ( $item['resource_trade_id'] != $trade['id'] )
                {
                    continue;
                }

                $data[] = $item;

                unset($items[$itemKey]);
            }
        }

        return $data;
    }

    public static function deleteRecordsByStockInInvoice(StockInInvoice $invoice)
    {
        return Doctrine_Query::create()
            ->delete()
            ->from('StockInInvoiceItem')
            ->where('stock_in_invoice_id = ?', array( $invoice->id ))
            ->execute();
    }

    public static function getRecordsFilteredByInvoiceByProjectAndResourceItem(ProjectStructure $project, ResourceItem $resourceItem)
    {
        return Doctrine_Query::create()
            ->select('po.id as po_id, invoice.id as id, invoice.invoice_no as invoice_no,
        invoice.invoice_date as invoice_date, siii.quantity, siii.rates, siii.discount_percentage, siii.tax_percentage,
        siii.total_without_tax, siii.total, ic.id as issued_by_id, pr.name as issued_by, pos.company_id as supplier_id,
        company.name as supplier_name')
            ->from('StockInInvoiceItem siii')
            ->leftJoin('siii.Invoice invoice')
            ->leftJoin('invoice.PurchaseOrder po')
            ->leftJoin('po.PurchaseOrderSupplier pos')
            ->leftJoin('pos.Company company')
            ->leftJoin('invoice.Creator ic')
            ->leftJoin('ic.Profile pr')
            ->where('siii.resource_item_id = ?', array( $resourceItem->id ))
            ->andWhere('invoice.project_structure_id = ?', array( $project->id ))
            ->orderBy('invoice.id DESC')
            ->fetchArray();
    }

    public static function calculateBalanceQuantity($quantity, $doQuantity)
    {
        return $doQuantity - $quantity;
    }

    public static function getTotalCost(ProjectStructure $project, ResourceTrade $resourceTrade, array $notInResourceItemIds = array())
    {
        $data       = array();
        $pdo        = self::getInstance()->getConnection()->getDbh();
        $notInQuery = null;

        if ( !empty( $notInResourceItemIds ) )
        {
            $notInQuery = "AND ri.id NOT IN (" . implode(',', $notInResourceItemIds) . ")";
        }

        $stmt = $pdo->prepare("SELECT DISTINCT ri.id, COALESCE(SUM(b.total), 0) as total_cost
        FROM " . self::getInstance()->getTableName() . " b
        JOIN " . StockInInvoiceTable::getInstance()->getTableName() . " sii
        ON (sii.id = b.stock_in_invoice_id AND sii.deleted_at IS NULL)
        JOIN " . ResourceItemTable::getInstance()->getTableName() . " ri
        ON (ri.id = b.resource_item_id AND ri.deleted_at IS NULL)
        JOIN " . ResourceTradeTable::getInstance()->getTableName() . " rt
        ON (rt.id = ri.resource_trade_id AND rt.deleted_at IS NULL)
        WHERE ( sii.project_structure_id = :projectId AND rt.id = :resourceTradeId AND b.deleted_at IS NULL )
        {$notInQuery}
        GROUP BY ri.id");

        $stmt->execute(array( 'projectId' => $project->id, 'resourceTradeId' => $resourceTrade->id ));

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $results as $result )
        {
            $data[$result['id']] = $result['total_cost'];

            unset( $result );
        }

        unset( $results );

        return $data;
    }

    public static function getInvoiceRemarks(ProjectStructure $project, ResourceTrade $resourceTrade, array $notInResourceItemIds = array())
    {
        $data       = array();
        $pdo        = self::getInstance()->getConnection()->getDbh();
        $notInQuery = null;

        if ( !empty( $notInResourceItemIds ) )
        {
            $notInQuery = "AND ri.id NOT IN (" . implode(',', $notInResourceItemIds) . ")";
        }

        $stmt = $pdo->prepare("SELECT ri.id as resource_item_id, COALESCE(remark.description, NULL) AS remark
        FROM " . self::getInstance()->getTableName() . " b
        JOIN " . StockInInvoiceTable::getInstance()->getTableName() . " sii
        ON (sii.id = b.stock_in_invoice_id AND sii.deleted_at IS NULL)
        JOIN " . ResourceItemTable::getInstance()->getTableName() . " ri
        ON (ri.id = b.resource_item_id AND ri.deleted_at IS NULL)
        JOIN " . ResourceTradeTable::getInstance()->getTableName() . " rt
        ON (rt.id = ri.resource_trade_id AND rt.deleted_at IS NULL)
        LEFT JOIN " . RFQItemRemarkTable::getInstance()->getTableName() . " remark
        ON ( b.remark_id = remark.id )
        WHERE ( sii.project_structure_id = :projectId AND rt.id = :resourceTradeId AND b.deleted_at IS NULL )
        {$notInQuery}");

        $stmt->execute(array( 'projectId' => $project->id, 'resourceTradeId' => $resourceTrade->id ));

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $results as $result )
        {
            if ( empty( $result['remark'] ) )
            {
                unset( $result );

                continue;
            }

            $data[$result['resource_item_id']][] = $result['remark'];

            unset( $result );
        }

        unset( $results );

        return $data;
    }

    public static function getTotalCostWithTaxByItemIds(ProjectStructure $project, array $itemIds)
    {
        $data = array();
        $pdo  = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT ri.id, COALESCE(SUM(b.total), 0) as total_cost
        FROM " . self::getInstance()->getTableName() . " b
        JOIN " . StockInInvoiceTable::getInstance()->getTableName() . " sii
        ON (sii.id = b.stock_in_invoice_id AND sii.deleted_at IS NULL)
        JOIN " . ResourceItemTable::getInstance()->getTableName() . " ri
        ON (ri.id = b.resource_item_id AND ri.deleted_at IS NULL)
        JOIN " . ResourceTradeTable::getInstance()->getTableName() . " rt
        ON (rt.id = ri.resource_trade_id AND rt.deleted_at IS NULL)
        WHERE ( sii.project_structure_id = {$project->id} AND b.deleted_at IS NULL
        AND ri.id IN (" . implode(',', $itemIds) . ") AND ri.deleted_at IS NULL )
        GROUP BY ri.id");

        $stmt->execute(array());

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $results as $result )
        {
            $data[$result['id']] = $result['total_cost'];

            unset( $result );
        }

        unset( $results );

        return $data;
    }

    public static function getTotalCostWithoutTaxByItemIds(ProjectStructure $project, array $itemIds)
    {
        $data = array();
        $pdo  = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT ri.id, COALESCE(SUM(b.total_without_tax), 0) as total_cost_without_tax
        FROM " . self::getInstance()->getTableName() . " b
        JOIN " . StockInInvoiceTable::getInstance()->getTableName() . " sii
        ON (sii.id = b.stock_in_invoice_id AND sii.deleted_at IS NULL)
        JOIN " . ResourceItemTable::getInstance()->getTableName() . " ri
        ON (ri.id = b.resource_item_id AND ri.deleted_at IS NULL)
        JOIN " . ResourceTradeTable::getInstance()->getTableName() . " rt
        ON (rt.id = ri.resource_trade_id AND rt.deleted_at IS NULL)
        WHERE ( sii.project_structure_id = {$project->id} AND b.deleted_at IS NULL
        AND ri.id IN (" . implode(',', $itemIds) . ") AND ri.deleted_at IS NULL )
        GROUP BY ri.id");

        $stmt->execute(array());

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $results as $result )
        {
            $data[$result['id']] = $result['total_cost_without_tax'];

            unset( $result );
        }

        unset( $results );

        return $data;
    }

    public static function getInvoiceRemarksByItemIds(ProjectStructure $project, array $itemIds)
    {
        $data = array();
        $pdo  = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ri.id as resource_item_id, COALESCE(remark.description, NULL) AS remark
        FROM " . self::getInstance()->getTableName() . " b
        JOIN " . StockInInvoiceTable::getInstance()->getTableName() . " sii
        ON (sii.id = b.stock_in_invoice_id AND sii.deleted_at IS NULL)
        JOIN " . ResourceItemTable::getInstance()->getTableName() . " ri
        ON (ri.id = b.resource_item_id AND ri.deleted_at IS NULL)
        JOIN " . ResourceTradeTable::getInstance()->getTableName() . " rt
        ON (rt.id = ri.resource_trade_id AND rt.deleted_at IS NULL)
        LEFT JOIN " . RFQItemRemarkTable::getInstance()->getTableName() . " remark
        ON ( b.remark_id = remark.id )
        WHERE ( sii.project_structure_id = {$project->id} AND b.deleted_at IS NULL
        AND ri.id IN (" . implode(',', $itemIds) . ") AND ri.deleted_at IS NULL )");

        $stmt->execute(array());

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $results as $result )
        {
            if ( empty( $result['remark'] ) )
            {
                unset( $result );

                continue;
            }

            $data[$result['resource_item_id']][] = $result['remark'];

            unset( $result );
        }

        unset( $results );

        return $data;
    }

    public static function formatRemark(array $remarks, $withoutStyling = false)
    {
        if ( $withoutStyling )
        {
            return ' - ' . implode(', ', $remarks);
        }

        return ' - <span style="color: #0000ff;">' . implode(', ', $remarks) . '</span>';
    }

}