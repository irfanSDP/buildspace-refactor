<?php

/**
 * PostContractStandardClaimTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PostContractStandardClaimTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PostContractStandardClaimTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PostContractStandardClaim');
    }

    public static function updateClaimByElement($fieldName, $fieldValue, $elementId, $claimTypeRef, $postContractId, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $fieldValue = (is_numeric($fieldValue)) ? $fieldValue : 0;

        switch($fieldName)
        {
            case PostContractStandardClaim::CLAIM_FIELD_UP_TO_DATE_PERCENTAGE:
                $percentage = ($fieldValue <= 100) ? number_format($fieldValue, 2, '.', '') : 0;
                break;
            case PostContractStandardClaim::CLAIM_FIELD_UP_TO_DATE_AMOUNT:
                
                $elementTotalPerUnit = self::getTotalPerUnitByElementIdAndTypeRef($elementId, $claimTypeRef); 

                $percentage = ($elementTotalPerUnit > 0) ? number_format($fieldValue / $elementTotalPerUnit * 100, 2, '.', '') : 0;

                $percentage = ($percentage <= 100) ? $percentage : 0;

                break;
            default:
                throw new Exception("Error Processing Request", 1);
                break; 
        }

        //Clear all claim current revision By Element
        $stmt = $pdo->prepare( "DELETE FROM ".PostContractStandardClaimTable::getInstance()->getTableName()."
            WHERE bill_item_id IN (
                SELECT item.id FROM ".BillElementTable::getInstance()->getTableName()." element
                LEFT JOIN ".BillItemTable::getInstance()->getTableName()." item ON item.element_id = element.id
                WHERE element.id = ".$elementId." AND item.deleted_at IS NULL AND item.project_revision_deleted_at IS NULL
            ) AND
            claim_type_ref_id = ".$claimTypeRef['id']." AND revision_id = ".$revision['id']);

        $stmt->execute();

        $excludedItemType = array(
            BillItem::TYPE_HEADER,
            BillItem::TYPE_NOID,
            BillItem::TYPE_ITEM_RATE_ONLY,
            BillItem::TYPE_HEADER_N
        );

        $stmt = $pdo->prepare("INSERT INTO ".PostContractStandardClaimTable::getInstance()->getTableName()."
            (bill_item_id, revision_id, claim_type_ref_id, current_percentage, current_amount, up_to_date_amount, up_to_date_percentage, up_to_date_qty)
            SELECT item.id, ".$revision['id'].", ".$claimTypeRef['id'].", (".$percentage." - COALESCE(pc.up_to_date_percentage, 0)) AS current_percentage, ROUND((".$percentage." - COALESCE(pc.up_to_date_percentage, 0)) / 100 * t.total_per_unit ,2) AS current_amount,
            ROUND((".$percentage.") / 100 * t.total_per_unit ,2) AS up_to_date_amount, ".$percentage." AS up_to_date_percentage,
            ROUND((".$percentage.") / 100 * t.qty_per_unit ,2) AS up_to_date_qty
            FROM ".PostContractBillItemRateTable::getInstance()->getTableName()." rate
            LEFT JOIN ".BillItemTable::getInstance()->getTableName()." item ON item.id = rate.bill_item_id
            LEFT JOIN ".BillElementTable::getInstance()->getTableName()." element ON element.id = item.element_id
            LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." t ON t.bill_item_id = rate.bill_item_id
                AND t.bill_column_setting_id = ".$claimTypeRef['bill_column_setting_id']." AND t.post_contract_id = ".$postContractId."
            LEFT JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." pr ON pr.post_contract_id = ".$postContractId." AND pr.version = (".$revision['version']." - 1)
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." pc ON pc.bill_item_id = rate.bill_item_id AND pc.claim_type_ref_id = ".$claimTypeRef['id']." AND pc.revision_id = pr.id
            WHERE element.id = ".$elementId." AND t.include IS TRUE AND t.total_per_unit > 0 AND item.type NOT IN (".implode(',', $excludedItemType).")");

        $stmt->execute();
    }

    public static function getTotalPerUnitByElementIdAndTypeRef( $elementId, $claimTypeRef )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $excludedItemType = array(
            BillItem::TYPE_HEADER,
            BillItem::TYPE_NOID,
            BillItem::TYPE_ITEM_RATE_ONLY,
            BillItem::TYPE_HEADER_N
        );

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(t.total_per_unit),0),2) AS total_per_unit
            FROM ".BillElementTable::getInstance()->getTableName()." element
            LEFT JOIN ".BillItemTable::getInstance()->getTableName()." item ON item.element_id = element.id
            LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." t ON t.bill_item_id = item.id
                AND t.bill_column_setting_id = ".$claimTypeRef['bill_column_setting_id']." AND t.post_contract_id = ".$claimTypeRef['post_contract_id']."
            WHERE element.id = ".$elementId." AND item.type NOT IN (".implode(',', $excludedItemType).")");

        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        return $result['total_per_unit'];
    }

    public static function getOverallTotalByBillElementId(array $billElementIds, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        if(empty($billElementIds))
            return array();

        $stmt = $pdo->prepare("SELECT element.id AS element_id, pt.bill_column_setting_id, COALESCE(SUM(ROUND(pt.qty_per_unit * pi.rate, 2)),0) AS grand_total
            FROM ".PostContractBillItemRateTable::getInstance()->getTableName()." pi
            JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." pctr ON pctr.post_contract_id = pi.post_contract_id
            JOIN ".BillItemTable::getInstance()->getTableName()." i on i.id = pi.bill_item_id
            JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON element.id = i.element_id
            JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pt ON pt.post_contract_id = pi.post_contract_id AND pt.bill_item_id = i.id AND pt.bill_column_setting_id = pctr.bill_column_setting_id
            WHERE pi.post_contract_id = ".$revision['post_contract_id']."
            AND element.id IN (" . implode(',', $billElementIds) . ") AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            AND pt.qty_per_unit <> 0 AND pi.rate <> 0
            AND pt.include IS TRUE
            GROUP BY element.id, pt.bill_column_setting_id");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $data = array();

        foreach($records as $record)
        {
            if(!isset($data[$record['element_id']]))
                $data[$record['element_id']] = array();

            $data[$record['element_id']] += array($record['bill_column_setting_id'] => $record['grand_total']);
        }

        return $data;
    }

    public static function getClaimQuantities(PostContract $postContract, $revisionId = null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        if( ! $revisionId ) $revisionId = (PostContractClaimRevisionTable::getCurrentSelectedProjectRevision($postContract)['id'] ?? -1);

        $relevantFormulatedColumns = array(
            BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT,
            BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY,
            BillBuildUpRateItem::FORMULATED_COLUMN_NUMBER,
        );

        $stmt = $pdo->prepare("SELECT i.bill_item_id, i.resource_item_library_id, fc.column_name, fc.value, fc.final_value 
            FROM " . BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName() . " fc 
            JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " i on i.id = fc.relation_id
            WHERE relation_id IN (
                SELECT i.id FROM " . BillBuildUpRateItemTable::getInstance()->getTableName() . " i 
                JOIN " . PostContractStandardClaimTable::getInstance()->getTableName() . " c ON c.bill_item_id = i.bill_item_id
                JOIN " . PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName() . " ref ON ref.id = c.claim_type_ref_id
                WHERE ref.post_contract_id = {$postContract->id}
                AND c.revision_id =  {$revisionId}
            );");

        $stmt->execute();

        $buildUpRateFormulatedColumns = $stmt->fetchAll(PDO::FETCH_ASSOC|PDO::FETCH_GROUP);

        $stmt = $pdo->prepare("SELECT c.bill_item_id, sum(c.up_to_date_qty) as total_qty, r.resource_item_library_id
                FROM " . PostContractStandardClaimTable::getInstance()->getTableName() . " AS c 
                JOIN " . PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName() . " AS cref ON cref.id = c.claim_type_ref_id
                JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " r on r.bill_item_id = c.bill_item_id
                WHERE cref.post_contract_id = {$postContract->id}
                AND c.revision_id = {$revisionId}
                GROUP BY c.bill_item_id, r.id");

        $stmt->execute();

        $quantities =  $stmt->fetchAll(PDO::FETCH_ASSOC|PDO::FETCH_GROUP);

        // Get Conversion factor.
        $billBuildUpRateSummaries = array();

        if(!empty($quantities))
        {
            $billItemIdString = implode(",",array_keys($quantities));

            $stmt = $pdo->prepare("SELECT s.bill_item_id, s.apply_conversion_factor, COALESCE(NULLIF(s.conversion_factor_amount,0),1) as conversion_factor_amount, s.conversion_factor_operator
                FROM " . BillBuildUpRateSummaryTable::getInstance()->getTableName() . " AS s 
                WHERE s.bill_item_id in ({$billItemIdString})");

            $stmt->execute();

            $results =  $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach($results as $result)
            {
                $billBuildUpRateSummaries[$result['bill_item_id']] = $result;
            }
        }

        $evaluator = new EvalMath(true, true);
        $evaluator->suppress_errors = true;

        $claimedQuantities = array();

        foreach($buildUpRateFormulatedColumns as $billItemId => $billItemFormulatedColumns)
        {
            if(!isset($quantities[$billItemId])) continue;

            foreach($billItemFormulatedColumns as $billItemFormulatedColumn)
            {
                if(!in_array($billItemFormulatedColumn['column_name'], $relevantFormulatedColumns)) continue;

                foreach($quantities[$billItemId] as $index => $resourceQuantity)
                {
                    if($billItemFormulatedColumn['resource_item_library_id'] != $resourceQuantity['resource_item_library_id']) continue;

                    $finalValue = $billItemFormulatedColumn['final_value'];

                    if($billItemFormulatedColumn['column_name'] != BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY)
                    {
                        // If value is 0, use 1 for calculations unless the column is for Quantity, in which case the specified value will be used.
                        $finalValue = ( $finalValue == 0 ) ? 1 : $finalValue;
                    }

                    $quantities[$billItemId][$index]['total_qty'] *= $finalValue;

                    $claimedQuantities[$billItemFormulatedColumn['resource_item_library_id']][$billItemId] = $quantities[$billItemId][$index]['total_qty'];
                }

                if( $billBuildUpRateSummaries[ $billItemId ]['apply_conversion_factor'] ?? false )
                {
                    $exp = ($claimedQuantities[$billItemFormulatedColumn['resource_item_library_id']][$billItemId]).($billBuildUpRateSummaries[ $billItemId ]['conversion_factor_operator']).($billBuildUpRateSummaries[ $billItemId ]['conversion_factor_amount']);

                    $claimedQuantities[$billItemFormulatedColumn['resource_item_library_id']][$billItemId] = $evaluator->evaluate($exp);
                }
            }
        }

        return $claimedQuantities;
    }
}