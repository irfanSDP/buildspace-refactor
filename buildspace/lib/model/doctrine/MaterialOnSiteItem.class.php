<?php

/**
 * MaterialOnSiteItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class MaterialOnSiteItem extends BaseMaterialOnSiteItem {

	public function save(Doctrine_Connection $conn = null)
	{
		// will reset other columns if type changes to type HEAD
		if ( $this->type == ResourceItem::TYPE_HEADER )
		{
			$this->uom_id        = null;
			$this->delivered_qty = 0;
			$this->used_qty      = 0;
			$this->balance_qty   = 0;
			$this->rate          = 0;
			$this->amount        = 0;
		}
		else
		{
			// calculate balance qty
			$this->balance_qty = $this->delivered_qty - $this->used_qty;

			// calculate amount
			$this->amount = $this->rate * $this->balance_qty;
		}

		parent::save($conn);

		$this->MaterialOnSite->updateAmount();
	}

	public function updateRootPriority($priority, $excludeId = null)
	{
		MaterialOnSiteItemTable::updateRootPriority($priority, $this->MaterialOnSite, $excludeId);
	}

	public function getPreviousRoot()
	{
		$rootId = $this->root_id > 0 ? $this->root_id : $this->id;
		$root   = $this->getTable()->find($rootId);

		return $this->getTable()
			->createQuery('i')
			->select('i.id')
			->where('i.root_id = i.id')
			->addWhere('i.material_on_site_id = ?', $this->material_on_site_id)
			->addWhere('i.priority < ?', $root->priority)
			->orderBy('i.priority DESC')
			->limit(1)
			->fetchOne();
	}

	public function indent()
	{
		$indented     = false;
		$previousRoot = $this->getPreviousRoot();

		if ( $this->node->isRoot() and $previousRoot and ( $previousRoot->type == ResourceItem::TYPE_HEADER ) )
		{
			$this->node->moveAsLastChildOf($previousRoot);

			$this->refresh();

			$pdo = $this->getTable()->getConnection()->getDbh();

			$stmt = $pdo->prepare("UPDATE " . $this->getTable()->getTableName() . " SET priority = " . $previousRoot->priority . "
			WHERE root_id = " . $previousRoot->root_id . " AND priority <> " . $previousRoot->priority . "
			AND material_on_site_id = " . $this->material_on_site_id . " AND deleted_at IS NULL");

			$stmt->execute();

			$indented = true;
		}
		else if ( !$this->node->isRoot() and $this->node->hasPrevSibling() and ( $this->node->getPrevSibling()->type == ResourceItem::TYPE_HEADER ) )
		{
			$this->node->moveAsLastChildOf($this->node->getPrevSibling());

			$this->refresh();

			$indented = true;
		}

		return $indented;
	}

	public function outdent()
	{
		if ( !$this->node->isRoot() and ( ( $this->type == ResourceItem::TYPE_HEADER ) or ( $this->type != ResourceItem::TYPE_HEADER and !$this->node->hasNextSibling() ) ) )
		{
			$parent = $this->node->getParent();

			if(!$parent || !$parent->node)
            {
                return false;
            }
			
			$siblings = $this->getTable()
				->createQuery('i')
				->select('i.id')
				->where('i.root_id = ?', $this->root_id)
				->andWhere('i.level = ?', $this->level)
				->andWhere('i.lft BETWEEN ? AND ?', array( $parent->lft, $parent->rgt ))
				->andWhere('i.lft > ?', $this->rgt)
				->addOrderBy('i.lft ASC')
				->execute();

			foreach ( $siblings as $sibling )
			{
				$sibling->node->moveAsLastChildOf($this);

				$this->refresh();
			}

			unset( $siblings );

			if ( !$parent->node->isRoot() )
			{
				$this->node->moveAsNextSiblingOf($parent);
			}
			else
			{
				$this->node->makeRoot($this->id);

				parent::save();

				$this->priority = $parent->priority + 1;

				$this->save();

				$this->updateRootPriority($parent->priority + 1, $this->id);
			}

			$this->refresh();

			return true;
		}

		return false;
	}

	public function moveTo(MaterialOnSiteItem $targetItem, $lastPosition = false)
	{
		$con = $this->getTable()->getConnection();

		try
		{
			$con->beginTransaction();

			if ( $targetItem->node->isRoot() )
			{
				$priority       = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
				$this->priority = $priority;
				$this->save();

				if ( !$this->node->isRoot() and $this->node->isValidNode() )
				{
					$this->node->makeRoot($this->id);
					$this->save();
				}

				if ( !$lastPosition )
				{
					$this->updateRootPriority($priority, $this->id);
				}
			}
			else
			{
				if ( $lastPosition )
				{
					$this->node->moveAsNextSiblingOf($targetItem);
				}
				else
				{
					$this->node->moveAsPrevSiblingOf($targetItem);
				}

				$this->priority = $targetItem->priority;
				$this->save();

				$this->refresh();
			}

			/*
			 * Update priority for all nodes under the family to its root priority.
			 * We exclude this step for case the target item is root node and $lastPosition is false
			 * because the priority already been update by calling updateRootPriority()
			 */
			if ( ( $targetItem->node->isRoot() && $lastPosition ) or !$targetItem->node->isRoot() )
			{
				Doctrine_Query::create()->update('MaterialOnSiteItem i')
					->set('priority', $this->priority)
					->where('i.lft BETWEEN ? AND ?', array( $this->lft, $this->rgt ))
					->andWhere('i.root_id = ?', $this->root_id)
					->andWhere('i.priority <> ?', $this->priority)
					->execute();
			}

			$con->commit();

			return true;
		}
		catch (Exception $e)
		{
			$con->rollback();
			throw $e;
		}
	}

	public function delete(Doctrine_Connection $conn = null)
	{
		if ( $this->type == ResourceItem::TYPE_HEADER )
		{
			Doctrine_Query::create()
				->delete('MaterialOnSiteItem i')
				->where('i.root_id = ?', $this->root_id)
				->andWhere('i.material_on_site_id = ?', $this->material_on_site_id)
				->andWhere('i.lft > ?', $this->lft)
				->andWhere('i.rgt < ?', $this->rgt)
				->execute();
		}

		parent::delete($conn);

		//recalculate left-right values when deleting child nodes
		if ( !$this->node->isRoot() )
		{
			$first = $this->rgt + 1;
			$delta = $this->lft - $this->rgt - 1;

			Utilities::shiftRightLeftNestedSet(get_class($this), $first, $delta, $this->root_id, $conn);
		}

		return array();
	}

}