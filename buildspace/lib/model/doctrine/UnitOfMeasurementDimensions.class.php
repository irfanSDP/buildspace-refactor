<?php

/**
 * UnitOfMeasurementDimensions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class UnitOfMeasurementDimensions extends BaseUnitOfMeasurementDimensions
{
    public function delete(Doctrine_Connection $conn = null)
    {
        if($this->canBeDeleted())
        {
            $priority = $this->priority;
            $uomId = $this->unit_of_measurement_id;

            parent::delete($conn);

            $pdo = $this->getTable()->getConnection()->getDbh();

            $sql = "UPDATE ".$this->getTable()->getTableName()." SET priority = priority - 1 WHERE unit_of_measurement_id = ".$uomId." AND priority > ".$priority;

            $stmt = $pdo->prepare($sql);
            $stmt->execute();
        }
        else
        {
            throw new Exception('Reference with uom id: '.$this->unit_of_measurement_id." and dimension id: ".$this->dimension_id." cannot be deleted");
        }
    }

    public function canBeDeleted()
    {
        return UnitOfMeasurementDimensionsTable::canBeDeletedByUnitOfMeasurementIdAndDimensionId($this->unit_of_measurement_id, $this->dimension_id);
    }

    public function save(Doctrine_Connection $conn = null)
    {
        if($this->isNew() and is_int($this->unit_of_measurement_id))
        {
            $query = $this->getTable()->createQuery('x')
                ->where('x.unit_of_measurement_id = ?', $this->unit_of_measurement_id)
                ->orderBy('x.priority DESC')
                ->limit(1)
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

            $record = $query->fetchOne();

            $this->priority = $record ? $record['priority'] + 1 : 1;
        }

        parent::save($conn);
    }

    public function movePriority($direction)
    {
        switch($direction)
        {
            case 'up':
                $query = $this->getTable()->createQuery('x')
                    ->where('x.unit_of_measurement_id = ?', $this->unit_of_measurement_id)
                    ->andWhere('x.priority < ?', $this->priority)
                    ->andWhere('x.id <> ?', $this->id)
                    ->orderBy('x.priority DESC')
                    ->limit(1);

                $record = $query->fetchOne();

                break;
            case 'down':
                $query = $this->getTable()->createQuery('x')
                    ->where('x.unit_of_measurement_id = ?', $this->unit_of_measurement_id)
                    ->andWhere('x.priority > ?', $this->priority)
                    ->andWhere('x.id <> ?', $this->id)
                    ->orderBy('x.priority ASC')
                    ->limit(1);

                $record = $query->fetchOne();

                break;
            default:
                throw new Exception('Invalid direction');
        }

        if($record)
        {
            $priority = $this->priority;
            $targetPriority = $record->priority;

            $this->priority = $targetPriority*9999;//we have to set priority to some number before we can set it back to the target priority because of the unique constraint in db
            $this->save();

            $record->priority = $priority;
            $record->save();

            $this->priority = $targetPriority;
            $this->save();
        }
    }
}
