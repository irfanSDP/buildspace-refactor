<?php

/**
 * PreliminariesClaimTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PreliminariesClaimTable extends Doctrine_Table
{
	/**
	 * Returns an instance of this class.
	 *
	 * @return object PreliminariesClaimTable
	 */
	public static function getInstance()
	{
		return Doctrine_Core::getTable('PreliminariesClaim');
	}

	public static function getUpToDateAmountByBillId(PostContract $postContract, $billId, PostContractClaimRevision $selectedClaimProjectRevision)
	{
		$billTotals         = 0;
		$upToDateClaimTotal = 0;
		$currentClaimTotal  = 0;

		$elements = DoctrineQuery::create()
		->select('e.id, e.description, e.note, fc.column_name, fc.value, fc.final_value')
		->from('BillElement e')->leftJoin('e.FormulatedColumns fc')
		->where('e.project_structure_id = ?', $billId)
		->addOrderBy('e.priority ASC')
		->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
		->execute();

		if ( count($elements) == 0 )
		{
			return [Utilities::prelimRounding($billTotals), Utilities::prelimRounding($upToDateClaimTotal), Utilities::prelimRounding($currentClaimTotal)];
		}

		$claimProjectRevision = PostContractClaimRevisionTable::getCurrentProjectRevision($postContract);

		// Get Preliminaries Costing
		list(
			$elementBillItems, $initialCostings, $timeBasedCostings, $prevTimeBasedCostings, $workBasedCostings, $prevWorkBasedCostings, $finalCostings, $includeInitialCostings, $includeFinalCostings
		) = PostContractBillItemRateTable::getPrelimElementClaimCosting($selectedClaimProjectRevision, $elements);

		foreach($elements as $key => $element)
		{
			unset($elements[$key]['FormulatedColumns']);

			$elements[$key]['previousClaim-amount'] = 0;
			$elements[$key]['currentClaim-amount']  = 0;
			$elements[$key]['upToDateClaim-amount'] = 0;

			if ( ! isset ($elementBillItems[$element['id']]) )
			{
				continue;
			}

			foreach ( $elementBillItems[$element['id']] as $billItem )
			{
				$billTotals += $billItem['item_total'];

				self::calculateClaimRates($selectedClaimProjectRevision->toArray(), $billItem, $claimProjectRevision, $initialCostings, $finalCostings, $timeBasedCostings, $workBasedCostings, $prevTimeBasedCostings, $prevWorkBasedCostings, $includeInitialCostings, $includeFinalCostings);

				$upToDateClaimTotal += $billItem['upToDateClaim-amount'];

				$currentClaimTotal += $billItem['currentClaim-amount'];

				unset($billItem);
			}
		}

		unset($elements);

		return [Utilities::prelimRounding($billTotals), Utilities::prelimRounding($upToDateClaimTotal), Utilities::prelimRounding($currentClaimTotal)];
	}

	public static function calculateClaimRates($selectedClaimProjectRevision, &$billItem, $claimProjectRevision, $initialCostings, $finalCostings, $timeBasedCostings, $workBasedCostings, $prevTimeBasedCostings, $prevWorkBasedCostings, $includeInitialCostings, $includeFinalCostings)
	{
		$billItem['initial-percentage']             = 0;
		$billItem['initial-amount']                 = 0;
		$billItem['initial-revision_id']            = $claimProjectRevision['id'];

		$billItem['recurring-percentage']           = 0;
		$billItem['recurring-amount']               = 0;

		$billItem['timeBased-percentage']           = 0;
		$billItem['timeBased-amount']               = 0;
		$billItem['timeBased-applied']              = false;
		$billItem['timeBased-revision_id']          = $claimProjectRevision['id'];

		$billItem['workBased-percentage']           = 0;
		$billItem['workBased-amount']               = 0;
		$billItem['workBased-applied']              = false;
		$billItem['workBased-revision_id']          = $claimProjectRevision['id'];

		$billItem['final-percentage']               = 0;
		$billItem['final-amount']                   = 0;
		$billItem['final-revision_id']              = $claimProjectRevision['id'];

		$billItem['previousClaim-amount']           = 0;
		$billItem['previousClaim-percentage']       = 0;

		$billItem['include_initial']                = 'false';
		$billItem['include_final']                  = 'false';
		$billItem['initial_include_at_revision_id'] = $claimProjectRevision['id'];
		$billItem['final_include_at_revision_id']   = $claimProjectRevision['id'];

		if ( array_key_exists($billItem['post_contract_bill_item_rate_id'], $initialCostings) )
		{
			$costing = $initialCostings[$billItem['post_contract_bill_item_rate_id']];

			$billItem['initial-percentage']  = Utilities::prelimRounding($costing['percentage']);
			$billItem['initial-amount']      = Utilities::prelimRounding($costing['amount']);
			$billItem['initial-revision_id'] = $costing['revision_id'];

			unset($costing);
		}

		if ( array_key_exists($billItem['post_contract_bill_item_rate_id'], $finalCostings) )
		{
			$costing = $finalCostings[$billItem['post_contract_bill_item_rate_id']];

			$billItem['final-percentage']  = Utilities::prelimRounding($costing['percentage']);
			$billItem['final-amount']      = Utilities::prelimRounding($costing['amount']);
			$billItem['final-revision_id'] = $costing['revision_id'];

			unset($costing);
		}

		if ( $billItem['item_total'] > 0 )
		{
			$recurringAmt                     = $billItem['item_total'] - $billItem['initial-amount'] - $billItem['final-amount'];
			$billItem['recurring-percentage'] = Utilities::prelimRounding(Utilities::percent($recurringAmt, $billItem['item_total']));
			$billItem['recurring-amount']     = Utilities::prelimRounding($recurringAmt);
		}

		if ( array_key_exists($billItem['post_contract_bill_item_rate_id'], $timeBasedCostings) )
		{
			$costing           = $timeBasedCostings[$billItem['post_contract_bill_item_rate_id']];
			$calculatedCosting = 0;

			if ( $costing['total'] != 0 )
			{
				$calculatedCosting = $costing['total'] * 100;
				$calculatedCosting = Utilities::prelimRounding($calculatedCosting);
			}

			$amount = Utilities::prelimRounding($billItem['recurring-amount'] * ($calculatedCosting / 100));

			$billItem['timeBased-percentage']  = Utilities::prelimRounding(Utilities::percent($amount, $billItem['recurring-amount']));
			$billItem['timeBased-amount']      = $amount;
			$billItem['timeBased-applied']     = true;
			$billItem['timeBased-revision_id'] = $costing['revision_id'];

			unset($calculatedCosting, $amount, $costing);
		}

		if ( array_key_exists($billItem['post_contract_bill_item_rate_id'], $workBasedCostings) )
		{
			$costing           = $workBasedCostings[$billItem['post_contract_bill_item_rate_id']];
			$calculatedCosting = 0;

			if ( $costing['total'] != 0 )
			{
				$calculatedCosting = $costing['total'] * 100;
				$calculatedCosting = Utilities::prelimRounding($calculatedCosting);
			}

			$amount = Utilities::prelimRounding($billItem['recurring-amount'] * ($calculatedCosting / 100));

			$billItem['workBased-percentage']  = Utilities::prelimRounding(Utilities::percent($amount, $billItem['recurring-amount']));
			$billItem['workBased-amount']      = $amount;
			$billItem['workBased-applied']     = true;
			$billItem['workBased-revision_id'] = $costing['revision_id'];

			unset($calculatedCosting, $amount, $costing);
		}

		if ( array_key_exists($billItem['post_contract_bill_item_rate_id'], $prevTimeBasedCostings) )
		{
			$costing           = $prevTimeBasedCostings[$billItem['post_contract_bill_item_rate_id']];
			$calculatedCosting = 0;

			if ( $costing['total'] != 0 )
			{
				$calculatedCosting = $costing['total'] * 100;
				$calculatedCosting = Utilities::prelimRounding($calculatedCosting);
			}

			$amount = Utilities::prelimRounding($billItem['recurring-amount'] * ($calculatedCosting / 100));

			$billItem['previousClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($amount, $billItem['item_total']));
			$billItem['previousClaim-amount']     = $amount;

			unset($calculatedCosting, $amount, $costing);
		}

		if ( array_key_exists($billItem['post_contract_bill_item_rate_id'], $prevWorkBasedCostings) )
		{
			$costing           = $prevWorkBasedCostings[$billItem['post_contract_bill_item_rate_id']];
			$calculatedCosting = 0;

			if ( $costing['total'] != 0 )
			{
				$calculatedCosting = $costing['total'] * 100;
				$calculatedCosting = Utilities::prelimRounding($calculatedCosting);
			}

			$amount = Utilities::prelimRounding($billItem['recurring-amount'] * ($calculatedCosting / 100));

			$billItem['previousClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($amount, $billItem['item_total']));
			$billItem['previousClaim-amount']     = $amount;

			unset($calculatedCosting, $amount, $costing);
		}

		$billItem['upToDateClaim-amount']    = $billItem['timeBased-amount'] + $billItem['workBased-amount'];
		$billItem['currentClaim-amount']     = $billItem['upToDateClaim-amount'] - $billItem['previousClaim-amount'];
		$billItem['currentClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($billItem['currentClaim-amount'], $billItem['item_total']));

		if ( array_key_exists($billItem['post_contract_bill_item_rate_id'], $includeInitialCostings) )
		{
			$include = $includeInitialCostings[$billItem['post_contract_bill_item_rate_id']];

			$billItem['upToDateClaim-amount'] += $billItem['initial-amount'];
			$billItem['include_initial']                = 'true';
			$billItem['initial_include_at_revision_id'] = $include['include_at_revision_id'];

			if ( $selectedClaimProjectRevision['id'] == $include['include_at_revision_id'] )
			{
				$billItem['currentClaim-amount']     = $billItem['currentClaim-amount'] + $billItem['initial-amount'];
				$billItem['currentClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($billItem['currentClaim-amount'], $billItem['item_total']));
			}
			else if ( $selectedClaimProjectRevision['id'] <= $claimProjectRevision['id'] )
			{
				$billItem['previousClaim-amount']     = $billItem['previousClaim-amount'] + $billItem['initial-amount'];
				$billItem['previousClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($billItem['previousClaim-amount'], $billItem['item_total']));
			}
		}

		if ( array_key_exists($billItem['post_contract_bill_item_rate_id'], $includeFinalCostings) )
		{
			$include = $includeFinalCostings[$billItem['post_contract_bill_item_rate_id']];

			$billItem['upToDateClaim-amount'] += $billItem['final-amount'];
			$billItem['include_final']                = 'true';
			$billItem['final_include_at_revision_id'] = $include['include_at_revision_id'];

			if ( $selectedClaimProjectRevision['id'] == $include['include_at_revision_id'] )
			{
				$billItem['currentClaim-amount']     = $billItem['currentClaim-amount'] + $billItem['final-amount'];
				$billItem['currentClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($billItem['currentClaim-amount'], $billItem['item_total']));
			}
			else if ( $selectedClaimProjectRevision['id'] <= $claimProjectRevision['id'] )
			{
				$billItem['previousClaim-amount']     = $billItem['previousClaim-amount'] + $billItem['final-amount'];
				$billItem['previousClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($billItem['previousClaim-amount'], $billItem['item_total']));
			}
		}

		$billItem['upToDateClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($billItem['upToDateClaim-amount'], $billItem['item_total']));
	}
}
