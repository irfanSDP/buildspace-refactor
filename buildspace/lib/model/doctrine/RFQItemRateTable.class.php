<?php

/**
 * RFQItemRateTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class RFQItemRateTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object RFQItemRateTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('RFQItemRate');
    }

    // get supplier's rate and other information if available
    public static function getSupplierRatesByResourceItem(ResourceItem $resourceItem)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT rfqir.id AS id, rfqir.request_for_quotation_item_id, rfqir.request_for_quotation_supplier_id, rfqir.rate,
        COALESCE(rfqirm.description, NULL) as remarks,reg.country as country, subreg.name as state, rfqir.updated_at AS rate_last_updated_at,
        c.id AS company_id, c.name AS company_name, rfqi.id AS request_for_quotation_rate_item_id,
        rfqi.quantity AS request_for_quotation_rate_item_quantity, rfq.id AS request_for_quotation_id,
        rfq.project_structure_id AS project_structure_id, COALESCE(ps.title, '-') AS project_title
        FROM BS_request_for_quotation_item_rates rfqir
        LEFT JOIN ".RFQSupplierTable::getInstance()->getTableName()." rfqs ON ( rfqir.request_for_quotation_supplier_id = rfqs.id )
        LEFT JOIN ".CompanyTable::getInstance()->getTableName()." c ON ( rfqs.company_id = c.id ) AND (c.deleted_at IS NULL)
        LEFT JOIN ".RFQItemTable::getInstance()->getTableName()." rfqi ON ( rfqir.request_for_quotation_item_id = rfqi.id )
        LEFT JOIN ".RFQItemRemarkTable::getInstance()->getTableName()." rfqirm ON ( rfqi.remark_id = rfqirm.id )
        LEFT JOIN ".RFQTable::getInstance()->getTableName()." rfq ON ( rfqi.request_for_quotation_id = rfq.id )
        LEFT JOIN ".ProjectStructureTable::getInstance()->getTableName()." ps ON ( rfq.project_structure_id = ps.id ) AND (ps.deleted_at IS NULL)
        JOIN ".RegionsTable::getInstance()->getTableName()." reg ON ( rfq.region_id = reg.id )
        JOIN ".SubregionsTable::getInstance()->getTableName()." subreg ON ( rfq.sub_region_id = subreg.id )
        WHERE ( rfqi.resource_item_id = :resourceItemId )
        ORDER BY rfqir.updated_at DESC");

        $stmt->execute(array('resourceItemId' => $resourceItem->id));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getSupplierRatesByIdAndRateDisplayType(Array $rfqRatesId, $type)
    {
        $rates = array();

        $records = DoctrineQuery::create()
        ->select('u.id, u.rate')
        ->from('RFQItemRate u')
        ->whereIn('u.id', $rfqRatesId)
        ->fetchArray();

        if ( count($records) == 0 )
        {
            return 0;
        }

        foreach ( $records as $record )
        {
            $rates[] = $record['rate'];
        }

        $evaluator                  = new EvalMath(true, true);
        $evaluator->suppress_errors = true;

        switch($type)
        {
            case ResourceItemSelectedRate::SORT_AVERAGE:
                $rate = $evaluator->evaluate('average('.implode(', ', $rates).')');
                break;

            case ResourceItemSelectedRate::SORT_LOWEST:
                $rate = $evaluator->evaluate('min('.implode(', ', $rates).')');
                break;

            case ResourceItemSelectedRate::SORT_MEDIAN:
                $rate = $evaluator->evaluate('median('.implode(', ', $rates).')');
                break;

            case ResourceItemSelectedRate::SORT_HIGHEST:
                $rate = $evaluator->evaluate('max('.implode(', ', $rates).')');
                break;
        }

        return $rate;
    }

    public static function deleteExistingRateIfAvailableByRFQSupplier(RFQSupplier $supplier)
    {
        $rfqSupplierRateIds = array();
        $pdo                = self::getInstance()->getConnection()->getDbh();

        // get affected supplier rates ID
        $stmt = $pdo->prepare("SELECT id FROM ".self::getInstance()->getTableName()." WHERE request_for_quotation_supplier_id = :rfqSupplierId");

        $stmt->execute(array('rfqSupplierId' => $supplier->id));
        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($results) == 0 )
        {
            return;
        }

        foreach ( $results as $result )
        {
            $rfqSupplierRateIds[] = $result['id'];
        }

        $stmt = $pdo->prepare("DELETE FROM ".ResourceSelectionOfRateRfqItemRateTable::getInstance()->getTableName()." WHERE request_for_quotation_item_rate_id IN (".implode(', ', $rfqSupplierRateIds).")");

        $stmt->execute();

        $stmt = $pdo->prepare("DELETE FROM ".self::getInstance()->getTableName()." WHERE id IN (".implode(', ', $rfqSupplierRateIds).")");

        $stmt->execute();
    }

    public static function insertImportedSupplierRatesFromExcel($currentUser, Array $data)
    {
        $pdo           = self::getInstance()->getConnection()->getDbh();
        $rfqSupplierId = $data['rfqInformation']['rfqSupplierId'];
        $sql_arr       = array();

        foreach ( $data['items'] as $item )
        {
            if ( ! $item['id'] ) continue;

            $sql_arr[] = '(' . $item['id'] . ", " . $rfqSupplierId . ", " . $item['rate-final_value'] . ", NOW(), NOW(), " . $currentUser['id'] . ", " . $currentUser['id'] . ')';
        }

        if ( ! empty($sql_arr) )
        {
            $stmt = $pdo->prepare('INSERT INTO '.self::getInstance()->getTableName().' (request_for_quotation_item_id, request_for_quotation_supplier_id, rate, created_at, updated_at, created_by, updated_by) VALUES '.implode(", ", $sql_arr));
            $stmt->execute();
        }
    }

    public static function getSupplierRatesByItems(array $items)
    {
        $pdo               = self::getInstance()->getConnection()->getDbh();
        $itemIds           = array();
        $selectedRateIds   = array();
        $supplierRatesData = array();
        $selectedRatesData = array();

        if ( empty($items) )
        {
            return array($supplierRatesData, $selectedRatesData);
        }

        foreach ( $items as $tradeItems )
        {
            foreach ( $tradeItems as $tradeItem )
            {
                $itemIds[$tradeItem['id']] = $tradeItem['id'];

                $selectedRateId = $tradeItem['resource_item_selected_rate_id'];

                if ( ! empty($selectedRateId) )
                {
                    $selectedRateIds[$selectedRateId] = $selectedRateId;
                }

                unset( $tradeItem );
            }

            unset( $tradeItems );
        }

        // get supplier rate(s) associated with the item(s)
        $stmt = $pdo->prepare("SELECT rfqir.id AS id, rfqi.resource_item_id, rfqir.rate,
        COALESCE(rfqirm.description, NULL) as remarks,reg.country as country, subreg.name as state,
        rfqir.updated_at AS rate_last_updated_at,
        c.id AS company_id, c.name AS company_name, rfqi.id AS request_for_quotation_rate_item_id,
        rfqi.quantity AS request_for_quotation_rate_item_quantity, rfq.id AS request_for_quotation_id,
        rfq.project_structure_id AS project_structure_id, COALESCE(ps.title, '-') AS project_title
        FROM BS_request_for_quotation_item_rates rfqir
        LEFT JOIN ".RFQSupplierTable::getInstance()->getTableName()." rfqs ON ( rfqir.request_for_quotation_supplier_id = rfqs.id )
        LEFT JOIN ".CompanyTable::getInstance()->getTableName()." c ON ( rfqs.company_id = c.id ) AND (c.deleted_at IS NULL)
        LEFT JOIN ".RFQItemTable::getInstance()->getTableName()." rfqi ON ( rfqir.request_for_quotation_item_id = rfqi.id )
        LEFT JOIN ".RFQItemRemarkTable::getInstance()->getTableName()." rfqirm ON ( rfqi.remark_id = rfqirm.id )
        LEFT JOIN ".RFQTable::getInstance()->getTableName()." rfq ON ( rfqi.request_for_quotation_id = rfq.id )
        LEFT JOIN ".ProjectStructureTable::getInstance()->getTableName()." ps ON ( rfq.project_structure_id = ps.id ) AND (ps.deleted_at IS NULL)
        JOIN ".RegionsTable::getInstance()->getTableName()." reg ON ( rfq.region_id = reg.id )
        JOIN ".SubregionsTable::getInstance()->getTableName()." subreg ON ( rfq.sub_region_id = subreg.id )
        WHERE rfqi.resource_item_id IN (".implode(', ', $itemIds).") ORDER BY rfqir.updated_at DESC");

        $stmt->execute();
        $supplierRates = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $supplierRates as $supplierRate )
        {
            $supplierRatesData[$supplierRate['resource_item_id']][] = $supplierRate;

            unset($supplierRate);
        }

        unset($supplierRates);

        $selectedRFQItemRates = Doctrine_Query::create()
        ->select('p.resource_item_selection_of_rate_id, p.request_for_quotation_item_rate_id')
        ->from('ResourceSelectionOfRateRfqItemRate p')
        ->whereIn('p.resource_item_selection_of_rate_id', $selectedRateIds)
        ->fetchArray();

        foreach ( $selectedRFQItemRates as $selectedRFQItemRate )
        {
            $selectedRatesData[$selectedRFQItemRate['resource_item_selection_of_rate_id']][] = $selectedRFQItemRate['request_for_quotation_item_rate_id'];

            unset($selectedRFQItemRate);
        }

        unset($selectedRFQItemRates);

        return array($supplierRatesData, $selectedRatesData);
    }
}