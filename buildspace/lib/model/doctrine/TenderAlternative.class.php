<?php

/**
 * TenderAlternative
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 *  
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class TenderAlternative extends BaseTenderAlternative
{
    public function getAssignedBills()
    {
        $pdo = TenderAlternativeTable::getInstance()->getConnection()->getDbh();

        $linkedBillIds = [];
        foreach($this->Bills as $bill)
        {
            $linkedBillIds[] = $bill->project_structure_id;
        }

        $bills = [];

        if(!empty($linkedBillIds))
        {
            $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.title, p.type, p.priority, p.lft, p.level, t.type AS bill_type,
            t.status AS bill_status, bls.id AS bill_layout_setting_id, somls.id AS som_bill_layout_setting_id, sorbls.id AS sor_bill_layout_setting_id
            FROM " . ProjectStructureTable::getInstance()->getTableName() . " i
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p
            ON (i.lft BETWEEN p.lft AND p.rgt AND p.deleted_at IS NULL)
            JOIN " . TenderAlternativeBillTable::getInstance()->getTableName() . " x ON i.id = x.project_structure_id
            JOIN " . TenderAlternativeTable::getInstance()->getTableName() . " ta ON ta.id = x.tender_alternative_id
            LEFT JOIN " . BillTypeTable::getInstance()->getTableName() . " t ON (p.id = t.project_structure_id AND t.deleted_at IS NULL)
            LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " cs ON (p.id = cs.project_structure_id AND cs.deleted_at IS NULL)
            LEFT JOIN " . BillLayoutSettingTable::getInstance()->getTableName() . " bls ON (p.id = bls.bill_id AND bls.deleted_at IS NULL)
            LEFT JOIN " . SupplyOfMaterialLayoutSettingTable::getInstance()->getTableName() . " somls ON (p.id = somls.project_structure_id AND somls.deleted_at IS NULL)
            LEFT JOIN " . ScheduleOfRateBillLayoutSettingTable::getInstance()->getTableName() . " sorbls ON (p.id = sorbls.project_structure_id AND sorbls.deleted_at IS NULL)
            WHERE ta.id = " . $this->id . "  AND p.root_id = ".$this->project_structure_id." AND i.id IN (".implode(',', $linkedBillIds).")
            AND i.root_id = p.root_id AND i.type <=  ".ProjectStructure::TYPE_SCHEDULE_OF_RATE_BILL."
            AND i.type <> " . ProjectStructure::TYPE_ROOT . " AND i.type <> " . ProjectStructure::TYPE_LEVEL . "
            AND p.deleted_at IS NULL AND i.deleted_at IS NULL AND ta.deleted_at IS NULL
            ORDER BY p.lft");
            
            $stmt->execute();

            $bills = $stmt->fetchAll(PDO::FETCH_ASSOC);
        }
        
        return $bills;
    }

    public function assignBills(Array $billIds, Doctrine_Connection $con=null)
    {
        if(empty($billIds))
            return;

        $con = $con ? $con : TenderAlternativeTable::getInstance()->getConnection();
        $pdo = $con->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT b.id
        FROM ".ProjectStructureTable::getInstance()->getTableName()." b
        WHERE id IN (".implode(',', $billIds).")
        AND b.type IN (".ProjectStructure::TYPE_BILL.", ".ProjectStructure::TYPE_SUPPLY_OF_MATERIAL_BILL.", ".ProjectStructure::TYPE_SCHEDULE_OF_RATE_BILL.")
        AND b.deleted_at IS NULL");

        $stmt->execute();

        $billIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        
        if(empty($billIds))
            return;
        
        $insertValues  = array();
        $questionMarks = array();

        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

        $stmt = $pdo->prepare("SELECT DISTINCT project_structure_id
        FROM ".TenderAlternativeBillTable::getInstance()->getTableName()."
        WHERE tender_alternative_id = ".$this->id."
        AND project_structure_id IN (".implode(',', $billIds).")");

        $stmt->execute();

        $existingBillIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        foreach($billIds as $idx => $billId)
        {
            if(in_array($billId, $existingBillIds))
            {
                unset($billIds[$idx]);
            }
        }

        unset($existingBillIds);

        if(!empty($billIds))
        {
            foreach($billIds as $billId)
            {
                $data = array(
                    $this->id,
                    intval($billId),
                    date('Y-m-d H:i:s'),
                    date('Y-m-d H:i:s'),
                    $userId,
                    $userId
                );

                $insertValues = array_merge($insertValues, $data);

                $questionMarks[] = '('.implode(',', array_fill(0, count($data), '?')).')';
            }

            if(!empty($insertValues))
            {
                $stmt = $pdo->prepare("INSERT INTO ".TenderAlternativeBillTable::getInstance()->getTableName()."
                    (tender_alternative_id, project_structure_id, created_at, updated_at, created_by, updated_by)
                    VALUES " . implode(',', $questionMarks));

                $stmt->execute($insertValues);
            }
        }
    }

    public function getOverallTotal($withNotListedItems=true)
    {
        $con = TenderAlternativeTable::getInstance()->getConnection();
        $pdo = $con->getDbh();
        
        $withoutNotListedItemSql = (!$withNotListedItems) ? " AND item.type <> ".BillItem::TYPE_ITEM_NOT_LISTED." " : null;
        
        // We'll fetch and SUM the latest grand_total from Bill Item
        $stmt = $pdo->prepare("SELECT COALESCE(SUM(item.grand_total_after_markup),0) AS total_rate_after_markup
            FROM " . BillItemTable::getInstance()->getTableName() . " AS item
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            JOIN " . TenderAlternativeBillTable::getInstance()->getTableName() . " AS x ON x.project_structure_id = bill.id
            JOIN " . TenderAlternativeTable::getInstance()->getTableName() . " ta ON x.tender_alternative_id = ta.id
            WHERE bill.root_id = ".$this->project_structure_id." AND ta.id = ".$this->id."
            AND bill.type = " . ProjectStructure::TYPE_BILL . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            ".$withoutNotListedItemSql."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND bill.deleted_at IS NULL
            AND ta.deleted_at IS NULL
            GROUP BY ta.id");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public function getOverallRationalizedBillTotal()
    {
        $pdo = TenderAlternativeTable::getInstance()->getConnection()->getDbh();

        $rationalizedRates = [
            'project_total' => 0,
            'bill' => []
        ];
        
        $stmt = $pdo->prepare("SELECT b.id, SUM(COALESCE(r.grand_total, 0)) AS total
            FROM ".TenderBillElementRationalizedGrandTotalTable::getInstance()->getTableName()." r
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON e.id = r.bill_element_id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id
            JOIN ".TenderAlternativeBillTable::getInstance()->getTableName()." AS x ON x.project_structure_id = b.id
            JOIN ".TenderAlternativeTable::getInstance()->getTableName()." ta ON ta.id = x.tender_alternative_id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON ta.project_structure_id = p.id
            WHERE ta.id =:tender_alternative_id AND p.id =:project_id AND b.root_id = p.id
            AND b.type =:type AND b.deleted_at IS NULL
            AND e.deleted_at IS NULL AND ta.deleted_at IS NULL AND ta.project_revision_deleted_at IS NULL
            GROUP BY b.id");

        $stmt->execute([
            'tender_alternative_id' => $this->id,
            'project_id' => $this->project_structure_id,
            'type'       => ProjectStructure::TYPE_BILL
        ]);
        
        $rates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $projectTotal = 0;

        foreach($rates as $billId => $rate)
        {
            $projectTotal+=$rate;
            $rationalizedRates['bill'][$billId] = $rate;
        }

        $rationalizedRates['project_total'] = $projectTotal;

        return $rationalizedRates;
    }

    public function canBeDeleted()
    {
        return true;
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        if ( ! $this->canBeDeleted() )
        {
            throw new Exception('This Tender Alternative cannot be deleted.');
        }

        $project = $this->ProjectStructure;
        $projectLatestRevision = $project->getLatestProjectRevision();
        $tenderSetting = $project->TenderSetting;

        if($tenderSetting && !empty($tenderSetting->awarded_company_id) && $this->is_awarded)
        {
            $tenderSetting->awarded_company_id = null;
            $tenderSetting->save($conn);
        }

        if($projectLatestRevision->id == $this->project_revision_id)
        {
            Doctrine_Query::create()
            ->delete('TenderAlternativeBill x')
            ->where('x.tender_alternative_id = ?', $this->id)
            ->execute();
        
            return parent::delete($conn);
        }
        else
        {
            $this->is_awarded                     =  false;
            $this->deleted_at_project_revision_id = $projectLatestRevision->id;
            $this->project_revision_deleted_at    = date('Y-m-d H:i:s');
            
            return $this->save($conn);
        }
    }
}
