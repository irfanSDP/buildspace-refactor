<?php

/**
 * ResourceItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ResourceItem extends BaseResourceItem
{
    const TYPE_HEADER = 1;
    const TYPE_WORK_ITEM = 2;
    const TYPE_NOID = 4;

    const TYPE_HEADER_TEXT = 'HEAD';
    const TYPE_WORK_ITEM_TEXT = 'ITEM';
    const TYPE_NOID_TEXT = 'NOID';

    const FORMULATED_COLUMN_CONSTANT = 'constant';
    const FORMULATED_COLUMN_RATE = 'rate';
    const FORMULATED_COLUMN_WASTAGE = 'wastage';

    public $itemContainerAfterCopy = array();
    public $itemFormulatedColumnContainerAfterCopy = array();

    public function getFormulatedColumnByName($columnName, $hydrate=null)
    {
        return ResourceItemTable::getFormulatedColumnByRelationIdAndColumnName($this->id, $columnName, $hydrate);
    }

    public function getAncestors($includeNode = false)
    {
        return ResourceItemTable::getAncestorsById($this->id, $includeNode);
    }

    /*
     * This method is use when updating type column in resource item.
     * We need to remove all information from it's formulated column and uom if the type is not work item
     * since only work item will have value in formulated column and uom.
     */
    public function updateType($type)
    {
        $affectedItems = array();
        if($type != self::TYPE_WORK_ITEM)
        {
            $affectedItems = $this->deleteFormulatedColumns();

            $pdo = $this->getTable()->getConnection()->getDbh();

            try
            {
                $stmt = $pdo->prepare("UPDATE ".ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName()."
                SET linked = FALSE
                WHERE relation_id IN (SELECT id FROM ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()."
                WHERE resource_item_library_id = ".$this->id." AND deleted_at IS NULL) AND deleted_at IS NULL");

                $stmt->execute();

                $stmt = $pdo->prepare("UPDATE ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()."
                SET resource_item_library_id = NULL, resource_trade_library_id = NULL
                WHERE resource_item_library_id = ".$this->id." AND deleted_at IS NULL");

                $stmt->execute();

                $stmt = $pdo->prepare("UPDATE ".BQLibraryBuildUpRateFormulatedColumnTable::getInstance()->getTableName()."
                SET linked = FALSE
                WHERE relation_id IN (SELECT id FROM ".BQLibraryBuildUpRateItemTable::getInstance()->getTableName()."
                WHERE resource_item_library_id = ".$this->id." AND deleted_at IS NULL) AND deleted_at IS NULL");

                $stmt->execute();

                $stmt = $pdo->prepare("UPDATE ".BQLibraryBuildUpRateItemTable::getInstance()->getTableName()."
                SET resource_item_library_id = NULL, resource_trade_library_id = NULL
                WHERE resource_item_library_id = ".$this->id." AND deleted_at IS NULL");

                $stmt->execute();
            }
            catch(Exception $e)
            {
                throw $e;
            }

            $this->uom_id = NULL;
        }

        $this->type = (integer)$type;

        $this->save();

        return $affectedItems;
    }

    public function save(Doctrine_Connection $conn = null)
    {
        parent::save($conn);

        if($this->deleted_at == NULL && $this->type == self::TYPE_WORK_ITEM)
        {
            $pdo = $this->getTable()->getConnection()->getDbh();

            ResourceItemTable::updateTimeStamp($this);

            $uomId = $this->uom_id > 0 ? $this->uom_id : 'NULL';

            try
            {
                $stmt = $pdo->prepare("UPDATE ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()."
                SET description = :description, uom_id = ".$uomId."
                WHERE resource_item_library_id = ".$this->id." AND deleted_at IS NULL");

                $stmt->execute(array(
                    'description' => $this->description
                ));

                $stmt = $pdo->prepare("UPDATE ".BQLibraryBuildUpRateItemTable::getInstance()->getTableName()."
                SET description = :description, uom_id = ".$uomId."
                WHERE resource_item_library_id = ".$this->id." AND deleted_at IS NULL");

                $stmt->execute(array(
                    'description' => $this->description
                ));
            }
            catch(Exception $e)
            {
                throw $e;
            }
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        //we need to update any related column from formulated columns before deleting it
        $items = DoctrineQuery::create()->select('*')
            ->from('ResourceItem i')
            ->andWhere('i.root_id = ?',$this->root_id)
            ->andWhere('i.lft >= ? AND i.rgt <= ?', array($this->lft, $this->rgt))
            ->addOrderBy('i.lft')
            ->execute();

        $affectedItemList = array();

        foreach($items as $item)
        {
            $affectedItems = $item->deleteFormulatedColumns($conn);
            array_push($affectedItemList, $affectedItems);
        }

        /*
         * unlink resource item that being used in SOR build up rates
         */
        $this->unlinkRelatedScheduleOfRateBuildUpRates();

        /*
         * unlink resource item that being used in BQ Library build up rates
         */
        $this->unlinkRelatedBQLibraryBuildUpRates();

        if($this->type == ResourceItem::TYPE_HEADER)
        {
            Doctrine_Query::create()
                ->delete('ResourceItem i')
                ->where('i.root_id = ?', $this->root_id)
                ->andWhere('i.resource_trade_id = ?', $this->resource_trade_id)
                ->andWhere('i.lft > ?', $this->lft)
                ->andWhere('i.rgt < ?', $this->rgt)
                ->execute();
        }

        parent::delete($conn);

        //recalculate left-right values when deleting child nodes
        if(!$this->node->isRoot())
        {
            $first = $this->rgt + 1;
            $delta = $this->lft - $this->rgt - 1;

            Utilities::shiftRightLeftNestedSet(get_class($this), $first, $delta, $this->root_id, $conn);
        }

        return $affectedItemList;
    }

    public function deleteFormulatedColumns(Doctrine_Connection $conn = null)
    {
        $resourceItemIds = array();
        $affectedItems = array();
        $formulatedColumnIds = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            foreach($this->FormulatedColumns as $formulatedColumn)
            {
                $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                if(is_array($nodes))
                {
                    foreach($nodes as $node)
                    {
                        $referencedNode = Doctrine_Core::getTable('ResourceItemFormulatedColumn')->find($node['node_from']);

                        if($referencedNode)
                        {
                            $pattern = '/\b(R'.$this->id.')\b/i';
                            $value = preg_replace($pattern, '#REF!', $referencedNode->value);

                            $referencedNode->setFormula($value);

                            $referencedNode->save();

                            $resourceItemIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                        }
                    }
                }

                $formulatedColumn->delete($conn);

                $formulatedColumnIds[] = $formulatedColumn->id;
            }

            if(count($formulatedColumnIds) > 0)
            {
                //now we can remove all edges after we've updated related nodes
                Doctrine_Query::create()
                    ->delete('ResourceItemEdge e')
                    ->whereIn('e.node_from', $formulatedColumnIds)
                    ->execute();

                Doctrine_Query::create()
                    ->delete('ResourceItemEdge e')
                    ->whereIn('e.node_to', $formulatedColumnIds)
                    ->execute();
            }

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
        }

        foreach($resourceItemIds as $resourceItemId)
        {
            $affectedItem = array();
            $resourceItem = $this->getTable()->find($resourceItemId);

            $affectedItem['id'] = $resourceItem->id;

            foreach($resourceItem->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedItem[$columnName."-final_value"] = $formulatedColumn->final_value;
                $affectedItem[$columnName."-value"] = $formulatedColumn->value;
                $affectedItem[$columnName.'-has_cell_reference'] = false;
                $affectedItem[$columnName.'-has_formula'] = $formulatedColumn->hasFormula();
            }

            array_push($affectedItems, $affectedItem);
        }

        return $affectedItems;
    }

    public function checkRelatedScheduleOfRateBuildUpRates()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT id FROM ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()."
        WHERE resource_item_library_id IN (SELECT i.id FROM ".$this->getTable()->getTableName()." i
        WHERE i.root_id = ".$this->root_id." AND i.lft >= ".$this->lft." AND i.rgt <= ".$this->rgt." ORDER BY i.lft) AND deleted_at IS NULL");

        $stmt->execute();

        return $stmt->rowCount();
    }

    public function unlinkRelatedBQLibraryBuildUpRates()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        try
        {
            $stmt = $pdo->prepare("UPDATE ".BQLibraryBuildUpRateFormulatedColumnTable::getInstance()->getTableName()."
            SET linked = FALSE
            WHERE relation_id IN (SELECT id FROM ".BQLibraryBuildUpRateItemTable::getInstance()->getTableName()."
            WHERE resource_item_library_id IN (SELECT i.id FROM ".$this->getTable()->getTableName()." i
            WHERE i.root_id = ".$this->root_id." AND i.lft >= ".$this->lft." AND i.rgt <= ".$this->rgt." ORDER BY i.lft)
            AND deleted_at IS NULL) AND deleted_at IS NULL");

            $stmt->execute();

            $stmt = $pdo->prepare("UPDATE ".BQLibraryBuildUpRateItemTable::getInstance()->getTableName()."
            SET resource_item_library_id = NULL, resource_trade_library_id = NULL
            WHERE resource_item_library_id IN (SELECT i.id FROM ".$this->getTable()->getTableName()." i
            WHERE i.root_id = ".$this->root_id." AND i.lft >= ".$this->lft." AND i.rgt <= ".$this->rgt." ORDER BY i.lft) AND deleted_at IS NULL");

            $stmt->execute();
        }
        catch(Exception $e)
        {
            throw $e;
        }
    }

    public function unlinkRelatedScheduleOfRateBuildUpRates()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        try
        {
            $stmt = $pdo->prepare("UPDATE ".ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName()."
            SET linked = FALSE
            WHERE relation_id IN (SELECT id FROM ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()."
            WHERE resource_item_library_id IN (SELECT i.id FROM ".$this->getTable()->getTableName()." i
            WHERE i.root_id = ".$this->root_id." AND i.lft >= ".$this->lft." AND i.rgt <= ".$this->rgt." ORDER BY i.lft)
            AND deleted_at IS NULL) AND deleted_at IS NULL");

            $stmt->execute();

            $stmt = $pdo->prepare("UPDATE ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()."
            SET resource_item_library_id = NULL, resource_trade_library_id = NULL
            WHERE resource_item_library_id IN (SELECT i.id FROM ".$this->getTable()->getTableName()." i
            WHERE i.root_id = ".$this->root_id." AND i.lft >= ".$this->lft." AND i.rgt <= ".$this->rgt." ORDER BY i.lft) AND deleted_at IS NULL");

            $stmt->execute();
        }
        catch(Exception $e)
        {
            throw $e;
        }
    }

    public function moveTo(ResourceItem $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($targetItem->node->isRoot())
            {
                $priority       = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
                $this->priority = $priority;
                $this->save();

                if(!$this->node->isRoot() and $this->node->isValidNode())
                {
                    $this->node->makeRoot($this->id);
                    $this->save();
                }

                if(!$lastPosition)
                {
                    $this->updateRootPriority($priority, $this->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $this->node->moveAsNextSiblingOf($targetItem);
                }
                else
                {
                    $this->node->moveAsPrevSiblingOf($targetItem);
                }

                $this->priority = $targetItem->priority;
                $this->save();

                $this->refresh();
            }

            /*
             * Update priority for all nodes under the family to its root priority.
             * We exclude this step for case the target item is root node and $lastPosition is false
             * because the priority already been update by calling updateRootPriority()
             */
            if(($targetItem->node->isRoot() && $lastPosition) or !$targetItem->node->isRoot())
            {
                Doctrine_Query::create()->update('ResourceItem i')
                    ->set('priority', $this->priority)
                    ->where('i.lft BETWEEN ? AND ?', array($this->lft, $this->rgt))
                    ->andWhere('i.root_id = ?', $this->root_id)
                    ->andWhere('i.priority <> ?', $this->priority)
                    ->execute();
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyTo(ResourceItem $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($this->node->hasChildren())
            {
                $children = Doctrine_Core::getTable('ResourceItem')
                    ->createQuery('i')
                    ->select('i.id, i.description, i.uom_id, i.resource_trade_id, i.type, i.level')
                    ->where('i.root_id = ?', $this->root_id)
                    ->addWhere('i.lft > ? AND i.rgt < ?', array($this->lft, $this->rgt))
                    ->orderBy('i.lft ASC')
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY)
                    ->execute();
            }
            else
            {
                $children = false;
            }

            $cloneItem = new ResourceItem();
            $cloneItem->description = $this->description;
            $cloneItem->type = $this->type;
            $cloneItem->resource_trade_id = $this->resource_trade_id;
            $cloneItem->uom_id = $this->uom_id;

            if($targetItem->node->isRoot())
            {
                $priority = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
                $cloneItem->priority = $priority;
                $cloneItem->save($con);

                $cloneItem->getTable()->getTree()->createRoot($cloneItem);

                if(!$lastPosition)
                {
                    $this->updateRootPriority($priority, $cloneItem->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $cloneItem->node->insertAsNextSiblingOf($targetItem);
                }
                else
                {
                    $cloneItem->node->insertAsPrevSiblingOf($targetItem);
                }

                $cloneItem->priority = $targetItem->priority;
                $cloneItem->save($con);
            }

            $cloneItem->refresh();

            array_push($this->itemContainerAfterCopy, array(
                'id' => $cloneItem->id,
                'origin' => $this->id
            ));

            if($children)
            {
                $this->_loadNestedSetData($children, $this, $cloneItem);
            }

            $cloneItem->copyFormulatedColumnsFromItem($this, $this);

            $this->updateItemRowLinkingAfterCopy();

            $con->commit();

            $cloneItem->refresh(true);

            return $cloneItem;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function indent()
    {
        $indented = false;
        $previousRoot = $this->getPreviousRoot();

        if($this->node->isRoot() and $previousRoot and ($previousRoot->type == ResourceItem::TYPE_HEADER))
        {
            $this->node->moveAsLastChildOf($previousRoot);
            $this->refresh();

            $pdo = $this->getTable()->getConnection()->getDbh();

            $stmt = $pdo->prepare("UPDATE ".$this->getTable()->getTableName()." SET priority = ".$previousRoot->priority."
            WHERE root_id = ".$previousRoot->root_id." AND priority <> ".$previousRoot->priority."
            AND resource_trade_id = ".$this->resource_trade_id." AND deleted_at IS NULL");

            $stmt->execute();

            $indented = true;
        }
        else if(!$this->node->isRoot() and $this->node->hasPrevSibling() and ($this->node->getPrevSibling()->type == ResourceItem::TYPE_HEADER))
        {
            $this->node->moveAsLastChildOf($this->node->getPrevSibling());

            $this->refresh();

            $indented = true;
        }

        return $indented;
    }

    public function outdent()
    {
        if(!$this->node->isRoot() and (($this->type == ResourceItem::TYPE_HEADER) or ($this->type != ResourceItem::TYPE_HEADER and !$this->node->hasNextSibling())))
        {
            $parent = $this->node->getParent();

            if(!$parent || !$parent->node)
            {
                return false;
            }
            
            $siblings = $this->getTable()
                ->createQuery('i')
                ->select('i.id')
                ->where('i.root_id = ?',$this->root_id)
                ->andWhere('i.level = ?', $this->level)
                ->andWhere('i.lft BETWEEN ? AND ?', array($parent->lft, $parent->rgt))
                ->andWhere('i.lft > ?', $this->rgt)
                ->addOrderBy('i.lft ASC')
                ->execute();

            foreach($siblings as $sibling)
            {
                $sibling->node->moveAsLastChildOf($this);

                $this->refresh();
            }

            unset($siblings);

            if(!$parent->node->isRoot())
            {
                $this->node->moveAsNextSiblingOf($parent);
            }
            else
            {
                $this->node->makeRoot($this->id);

                parent::save();

                $this->priority = $parent->priority + 1;

                $this->save();

                $this->updateRootPriority($parent->priority + 1, $this->id);
            }

            $this->refresh();

            return true;
        }
        else
        {
            return false;
        }
    }

    public function getPreviousRoot()
    {
        $rootId = $this->root_id > 0 ? $this->root_id : $this->id;
        $root = $this->getTable()->find($rootId);

        return $this->getTable()
            ->createQuery('i')
            ->select('i.id')
            ->where('i.root_id = i.id')
            ->addWhere('i.resource_trade_id = ?', $this->resource_trade_id)
            ->addWhere('i.priority < ?', $root->priority)
            ->orderBy('i.priority DESC')
            ->limit(1)
            ->fetchOne();
    }

    public function updateRootPriority($priority, $excludeId=null)
    {
        ResourceItemTable::updateRootPriority($priority, $this->resource_trade_id, $excludeId);
    }

    /*
     * A long boring comment for this method can be found in ScheduleOfRateItem class
     */
    public function copyFormulatedColumnsFromItem(ResourceItem $resourceItem, $containerScope)
    {
        $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('ResourceItem');
        $edgeTable = Doctrine_Core::getTable('ResourceItemEdge');

        foreach($formulatedColumnConstants as $constant)
        {
            $formulatedColumn = $resourceItem->getFormulatedColumnByName($constant);
            if($formulatedColumn)
            {
                $cloneFormulatedColumn = $formulatedColumn->copy();
                $cloneFormulatedColumn->relation_id = $this->id;
                $cloneFormulatedColumn->save();

                array_push($containerScope->itemFormulatedColumnContainerAfterCopy, array(
                    'id' => $cloneFormulatedColumn->id,
                    'origin' => $formulatedColumn->id
                ));

                $edgeTable->getConnection()->fetchAssoc("INSERT INTO ".$edgeTable->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                    SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".$edgeTable->getTableName()." AS old
                    WHERE old.node_from = ".$formulatedColumn->id." AND old.deleted_at IS NULL");
            }
        }
    }

    public function updateItemRowLinkingAfterCopy()
    {
        if(count($this->itemFormulatedColumnContainerAfterCopy) > 0)
        {
            $formulatedColumnIdList = array();
            $formulatedColumnOriginList = array();

            foreach($this->itemFormulatedColumnContainerAfterCopy as $list)
            {
                array_push($formulatedColumnIdList, $list['id']);
                array_push($formulatedColumnOriginList, $list['origin']);
            }

            $records = DoctrineQuery::create()->select('e.id, e.node_from, e.node_to')
                ->from('ResourceItemEdge e')
                ->whereIn('e.node_from', $formulatedColumnIdList)
                ->andWhereIn('e.node_to', $formulatedColumnOriginList)
                ->addOrderBy('e.node_from ASC')
                ->execute();

            foreach($records as $record)
            {
                $nodeFrom = $record->NodeFrom;
                if($nodeFrom->hasCellReference())
                {
                    $value = $nodeFrom->value;
                    foreach($this->itemContainerAfterCopy as $list)
                    {
                        $pattern = '/\b(R'.$list['origin'].')\b/i';
                        $value = preg_replace($pattern, 'R'.$list['id'], $value);
                    }
                    $nodeFrom->value = $value;
                    $nodeFrom->save();
                }
                unset($nodeFrom);
            }

            $this->itemFormulatedColumnContainerAfterCopy = array();
            $this->itemContainerAfterCopy = array();
        }
    }

    private function _loadNestedSetData($nestedSetData, ResourceItem $containerScope, ResourceItem $parent=null)
    {
        $nestedSetData = array_reverse($nestedSetData, true);

        foreach($nestedSetData as $nestedSet)
        {
            $children = array();
            $originResourceItem = $this->getTable()->find($nestedSet['id']);
            unset($nestedSet['id']);

            if(array_key_exists('__children', $nestedSet))
            {
                $children = (array) $nestedSet['__children'];
                unset($nestedSet['__children']);
            }

            $obj = new ResourceItem();

            foreach($nestedSet as $key => $value)
            {
                $func = 'set' . Doctrine_Inflector::classify($key);
                $obj->$func($value);
            }

            $parent->node->addChild($obj);

            $obj->priority = $parent->priority;
            $obj->save();

            array_push($containerScope->itemContainerAfterCopy, array(
                'id' => $obj->id,
                'origin' => $originResourceItem->id
            ));

            $obj->copyFormulatedColumnsFromItem($originResourceItem, $containerScope);

            if(is_array($children) and !empty($children))
            {
                $this->_loadNestedSetData($children, $containerScope, $obj);
            }
        }
    }

    public function updateBuildUpRateFromAnalysis($val, $columnName, $project, $filterByValue=false, $originalVal=0)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $filterByValueSql = $filterByValue ? "AND ifc.final_value = ".$originalVal." " : "";

        $stmt = $pdo->prepare("SELECT bur.id AS bur_id,
            bur.bill_item_id AS bill_item_id,
            e.id AS bill_element_id,
            ifc.id AS ifc_id,
            sum.markup AS summary_markup,
            sum.rounding_type AS summary_rounding_type,
            sum.conversion_factor_amount AS summary_conversion_factor_amount,
            sum.conversion_factor_operator AS summary_conversion_factor_operator,
            sum.apply_conversion_factor AS summary_apply_conversion_factor FROM
            ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." AS ifc JOIN
            ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur ON ifc.relation_id = bur.id JOIN
            ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." AS sum ON bur.bill_item_id = sum.bill_item_id JOIN
            ".BillItemTable::getInstance()->getTableName()." AS i ON sum.bill_item_id = i.id JOIN
            ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id JOIN
            ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
            WHERE s.root_id = ".$project->id." AND bur.resource_item_library_id = ".$this->id."
            AND ifc.column_name = '".$columnName."' ".$filterByValueSql."
            AND ifc.deleted_at IS NULL AND bur.deleted_at IS NULL AND sum.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            AND i.deleted_at IS NULL AND e.deleted_at IS NULL ORDER BY bur.resource_item_library_id");

        $stmt->execute();

        $formulatedColumnIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 3);

        if(count($formulatedColumnIds) > 0)
        {
            $stmt->execute();
            $billBuildUpRateItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);
            $implodedBillBuildUpRateItemIds = implode(",", $billBuildUpRateItemIds);

            $stmt->execute();
            $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 1);
            $implodedBillItemIds = implode(",", $billItemIds);

            /*
             * update build up rate value
             */
            DoctrineQuery::create()
                ->update('BillBuildUpRateFormulatedColumn')
                ->set('value', '?', $val)
                ->set('final_value', '?', $val)
                ->whereIn('id', $formulatedColumnIds)
                ->andWhere('deleted_at IS NULL')
                ->execute();

            /*
             * Update build up rate total and line total
             */
            BillBuildUpRateItemTable::calculateTotalAndLineTotalByIdString($implodedBillBuildUpRateItemIds);

            /*
            * Insert into recalculate bill item table so we can track the affected bil items and do recalculation
            * after analysis updates.
            */
            $stmt = $pdo->prepare("INSERT INTO ".RecalculateBillItemTable::getInstance()->getTableName()."
                (bill_item_id, type, created_at, updated_at)
                SELECT i.id, ".RecalculateBillItem::TYPE_RESOURCE_ANALYSIS.", NOW(), NOW() FROM ".BillItemTable::getInstance()->getTableName()." AS i WHERE
                i.id IN (".$implodedBillItemIds.") AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND
                NOT EXISTS (SELECT 1 FROM ".RecalculateBillItemTable::getInstance()->getTableName()." AS r
                WHERE r.bill_item_id = i.id AND r.type = ".RecalculateBillItem::TYPE_RESOURCE_ANALYSIS.")");

            $stmt->execute();

            /*
             * Update bill status
             */
            $stmt = $pdo->prepare("UPDATE ".BillTypeTable::getInstance()->getTableName()." SET status = ".BillType::STATUS_RESOURCE_ANALYSIS_RECALCULATE_ITEM." WHERE
                    project_structure_id IN (SELECT DISTINCT e.project_structure_id FROM ".BillElementTable::getInstance()->getTableName()." e JOIN
                    ".BillItemTable::getInstance()->getTableName()." i ON e.id = i.element_id JOIN
                    ".BillBuildUpRateItemTable::getInstance()->getTableName()." bur ON i.id = bur.bill_item_id JOIN
                    ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." fc ON bur.id = fc.relation_id WHERE fc.id IN (".implode(",", $formulatedColumnIds).")
                    AND fc.deleted_at IS NULL AND bur.deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL)");

            $stmt->execute();
        }
    }

    public function getItemRowLinkingStatus()
    {
        $hasRowLinking             = false;
        $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('ResourceItem');

        foreach ( $formulatedColumnConstants as $formulatedColumnConstant )
        {
            $formulatedColumn = ResourceItemFormulatedColumnTable::getInstance()->getByRelationIdAndColumnName($this->id, $formulatedColumnConstant);

            $referencedNodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumnConstant);

            foreach($referencedNodes as $k => $referencedNode)
            {
                if ($node = ResourceItemFormulatedColumnTable::getInstance()->find($referencedNode['node_from']))
                {
                    $hasRowLinking = true;
                    break;
                }

                unset($referencedNodes[$k], $referencedNode);
            }

            if ( $hasRowLinking )
            {
                break;
            }
        }

        return $hasRowLinking;
    }
}