<?php

/**
 * DebitCreditNoteClaimItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 *  
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class DebitCreditNoteClaimItem extends BaseDebitCreditNoteClaimItem
{
    public function updatePriority($isOperationAdd)
    {
        $entries = DoctrineQuery::create()->select('ci.id, ci.priority')
            ->from('DebitCreditNoteClaimItem ci')
            ->where('ci.id != ?', $this->id)
            ->andWhere('ci.debit_credit_note_claim_id = ?', $this->debit_credit_note_claim_id)
            ->andWhere('ci.priority >= ?', $this->priority)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->execute();
            
        $pdo = DebitCreditNoteClaimItemTable::getInstance()->getConnection()->getDbh();

        foreach($entries as $entry)
        {   
            $priority = $isOperationAdd ? ($entry['priority'] + 1) : ($entry['priority'] - 1);
            $stmt = $pdo->prepare("UPDATE " . DebitCreditNoteClaimItemTable::getInstance()->getTableName() . " SET priority=:priority WHERE id=:id;");
            $stmt->bindParam(':id', $entry['id'], PDO::PARAM_INT);
            $stmt->bindParam(':priority', $priority, PDO::PARAM_INT);
            $stmt->execute();
        }
    }

    public static function getRecordsWithoutDescription(ProjectStructure $projectStructure, ClaimCertificate $claimCertificate)
    {
        $pdo  = DebitCreditNoteClaimItemTable::getInstance()->getConnection()->getDbh();

        $query = "SELECT ag.id AS account_group_id, ag.name AS account_group, c.id AS claim_id, c.description AS claim_description, COUNT(ci.id) AS count
                  FROM bs_debit_credit_note_claims c
                  INNER JOIN bs_account_groups ag ON ag.id = c.account_group_id 
                  INNER JOIN bs_debit_credit_note_claim_items ci ON ci.debit_credit_note_claim_id = c.id
                  WHERE c.project_structure_id = {$projectStructure->id}
                  AND c.claim_certificate_id = {$claimCertificate->id}
                  AND c.deleted_at IS NULL
                  AND ci.deleted_at IS NULL
                  AND ci.account_code_id IS NULL
                  GROUP BY ag.id, c.id
                  ORDER BY ag.id ASC, c.id ASC;";

        $stmt = $pdo->prepare($query);
            
        $stmt->execute();
            
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}
