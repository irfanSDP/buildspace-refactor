<?php

/**
 * NewPostContractFormInformationTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class NewPostContractFormInformationTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object NewPostContractFormInformationTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('NewPostContractFormInformation');
    }

    public static function saveSubPackageWorks($id, array $works)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        // Flush previous Sub Package Works.
        $stmt = $pdo->prepare("DELETE FROM ".NewPostContractFormInformationSubPackageWorkTable::getInstance()->getTableName()." p
                WHERE p.new_post_contract_form_information_id = ".$id);

        $stmt->execute();

        // Save new Sub Package Works.
        foreach($works as $workType => $workId)
        {
            if(is_null($workId)) continue;

            $stmt = $pdo->prepare('INSERT INTO '.NewPostContractFormInformationSubPackageWorkTable::getInstance()->getTableName().'
                (new_post_contract_form_information_id, sub_package_work_id, sub_package_work_type) VALUES ('.$id.', '.$workId.', '. $workType.') RETURNING id');

            $stmt->execute();
        }
    }

    public static function getSubPackageWork($newPostContractFormId, $workType)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT works.* FROM " . NewPostContractFormInformationSubPackageWorkTable::getInstance()->getTableName() . " pivot
            JOIN " . SubPackageWorksTable::getInstance()->getTableName() . " works on works.id = pivot.sub_package_work_id
            WHERE pivot.new_post_contract_form_information_id = " . $newPostContractFormId . "
            AND pivot.sub_package_work_type = " . $workType . " 
            LIMIT 1");

        $stmt->execute();

        $data = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return $data[0] ?? null;
    }

    public static function getNextFormNumber(ProjectStructure $project, $formType)
    {
        if(is_null($project->MainInformation->eproject_origin_id)) return 1;

        $projectFamilyIds = array( $project->id );

        foreach(ProjectStructureTable::getSiblingProjects($project) as $siblingProject)
        {
            $projectFamilyIds[] = $siblingProject->id;
        }

        $maxNumber = DoctrineQuery::create()
            ->select('MAX(i.form_number) as max_number')
            ->from('NewPostContractFormInformation i')
            ->where('type = ?', $formType)
            ->andWhereIn('i.project_structure_id', $projectFamilyIds)
            ->fetchArray();

        return ( $maxNumber[0]['max_number'] + 1 );
    }
}