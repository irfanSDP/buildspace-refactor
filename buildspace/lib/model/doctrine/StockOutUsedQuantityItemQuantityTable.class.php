<?php

/**
 * StockOutUsedQuantityItemQuantityTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StockOutUsedQuantityItemQuantityTable extends Doctrine_Table {
    /**
     * Returns an instance of this class.
     *
     * @return object StockOutUsedQuantityItemQuantityTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('StockOutUsedQuantityItemQuantity');
    }

    public static function getResourceItemsTreeStructure(StockOutUsedQuantity $usedQuantity)
    {
        $data              = array();
        $resourceItemIds   = array();
        $usedQuantities    = array();
        $usedQuantityItems = self::getAffectedResourceItems($usedQuantity);

        if ( empty( $usedQuantityItems ) )
        {
            return $data;
        }

        foreach ( $usedQuantityItems as $usedQuantityItem )
        {
            $resourceItemIds[] = $usedQuantityItem['resource_item_id'];

            $usedQuantities[$usedQuantityItem['resource_item_id']] = array(
                'id'       => $usedQuantityItem['id'],
                'quantity' => $usedQuantityItem['quantity'],
            );

            unset( $usedQuantityItem );
        }

        unset( $usedQuantityItems );

        $newDOQuantities = StockInDeliveryOrderItemQuantityTable::getOverAllItemQuantitiesFilterByResourceItemIdByProject($usedQuantity->Project, $resourceItemIds);
        $newSOQuantities = StockOutUsedQuantityItemQuantityTable::getOverAllItemQuantitiesFilterByResourceItemIdByProject($usedQuantity->Project, $resourceItemIds);
        $results         = StockInInvoiceItemTable::queryToGetResourceItemHierarchy($resourceItemIds);

        foreach ( $results as $key => $result )
        {
            $usedQuantityId    = - 1;
            $quantity          = 0;
            $doQuantity        = 0;
            $soQuantity        = 0;
            $availableQuantity = 0;

            if ( isset( $usedQuantities[$result['id']] ) )
            {
                $usedQuantityId = $usedQuantities[$result['id']]['id'];
                $quantity       = $usedQuantities[$result['id']]['quantity'];

                if ( isset($newDOQuantities[$result['id']]) )
                {
                    $doQuantity = $newDOQuantities[$result['id']];
                }

                if ( isset($newSOQuantities[$result['id']]) )
                {
                    $soQuantity = $newSOQuantities[$result['id']];
                }

                $availableQuantity = $doQuantity - $soQuantity;
            }

            $results[$key]['quantity']                    = number_format($quantity, 2, '.', '');
            $results[$key]['available_quantity']          = number_format($availableQuantity, 2, '.', '');
            $results[$key]['stock_used_quantity_item_id'] = $usedQuantityId;
            $results[$key]['uom_symbol']                  = $result['uom'];
        }

        return $results;
    }

    public static function deleteLikeResourceLibraryTree(StockOutUsedQuantity $usedQuantity, ResourceItem $resourceItem)
    {
        $affectedItemIds[] = $resourceItem->id;

        if ( $resourceItem->type == ResourceItem::TYPE_HEADER )
        {
            $items = Doctrine_Query::create()
                ->select('i.id')
                ->from('ResourceItem i')
                ->where('i.root_id = ?', $resourceItem->root_id)
                ->andWhere('i.resource_trade_id = ?', $resourceItem->resource_trade_id)
                ->andWhere('i.lft > ?', $resourceItem->lft)
                ->andWhere('i.rgt < ?', $resourceItem->rgt)
                ->execute();

            foreach ( $items as $item )
            {
                $affectedItemIds[] = $item['id'];
            }
        }

        Doctrine_Query::create()
            ->delete('StockOutUsedQuantityItemQuantity i')
            ->where('i.stock_out_used_quantity_id = ?', $usedQuantity->id)
            ->andWhereIn('i.resource_item_id', array_unique($affectedItemIds))
            ->execute(array());
    }

    public static function getAffectedResourceItems(StockOutUsedQuantity $usedQuantity)
    {
        return Doctrine_Query::create()
            ->select('i.id, i.resource_item_id, i.quantity')
            ->from('StockOutUsedQuantityItemQuantity i')
            ->where('i.stock_out_used_quantity_id = ?', array( $usedQuantity->id ))
            ->fetchArray();
    }

    public static function deleteByStockUsedQuantity(StockOutUsedQuantity $usedQuantity)
    {
        Doctrine_Query::create()
            ->delete('StockOutUsedQuantityItemQuantity i')
            ->where('i.stock_out_used_quantity_id = ?', array( $usedQuantity->id ))
            ->execute(array());
    }

    public static function getOverAllItemQuantitiesFilterByResourceItemIdByProject(ProjectStructure $project, array $resourceItemIds = array())
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $newSOQuantities    = array();
        $stockOutQuantities = $project->StockOutQuantities;
        $inQuery            = '';

        if ( $stockOutQuantities->count() > 0 )
        {
            $stockOutIds = array();

            foreach ( $stockOutQuantities as $stockOutQuantity )
            {
                $stockOutIds[] = $stockOutQuantity->id;

                unset( $stockOutQuantity );
            }

            unset( $stockOutQuantities );

            if ( ! empty($resourceItemIds) )
            {
                $inQuery = "AND souqi.resource_item_id IN (".implode(',', $resourceItemIds).")";
            }

            // will get available DO's Item Quantity associated with current Project
            $stmt = $pdo->prepare("SELECT souqi.resource_item_id, COALESCE(SUM(souqi.quantity), 0) as so_quantity
            FROM " . StockOutUsedQuantityItemQuantityTable::getInstance()->getTableName() . " souqi
            JOIN " . StockOutUsedQuantityTable::getInstance()->getTableName() . " souq
            ON (souq.id = souqi.stock_out_used_quantity_id AND souq.deleted_at IS NULL)
            WHERE souq.id IN (" . implode(',', $stockOutIds) . ") AND souqi.deleted_at IS NULL {$inQuery}
            GROUP BY souqi.resource_item_id");

            $stmt->execute();

            $soQuantities = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach ( $soQuantities as $soQuantity )
            {
                $newSOQuantities[$soQuantity['resource_item_id']] = $soQuantity['so_quantity'];

                unset( $soQuantity );
            }

            unset( $soQuantities );
        }

        return $newSOQuantities;
    }

    public static function getRecordsFilteredByDeliveryOrderByProjectAndResourceItem(ProjectStructure $project, ResourceItem $resourceItem)
    {
        return Doctrine_Query::create()
            ->select('sido.id as id, sido.running_number as running_number, sido.stock_out_date as stock_out_date,
        sidoiq.quantity as quantity, c.id as creator_id, p.name as creator_name')
            ->from('StockOutUsedQuantityItemQuantity sidoiq')
            ->leftJoin('sidoiq.StockOutUsedQuantity sido')
            ->leftJoin('sido.Creator c')
            ->leftJoin('c.Profile p')
            ->where('sido.project_structure_id = ?', array( $project->id ))
            ->andWhere('sidoiq.resource_item_id = ?', array( $resourceItem->id ))
            ->orderBy('sido.id DESC')
            ->fetchArray();
    }
}