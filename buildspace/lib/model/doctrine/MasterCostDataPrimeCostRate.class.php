<?php

/**
 * MasterCostDataPrimeCostRate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 *  
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class MasterCostDataPrimeCostRate extends BaseMasterCostDataPrimeCostRate
{
    CONST ITEM_LEVEL_1 = 1;
    CONST ITEM_LEVEL_2 = 2;
    CONST ITEM_LEVEL_3 = 3;

    public function delete(Doctrine_Connection $conn = null)
    {
        parent::delete($conn);
        $this->deleteDescendantsAndSelf();
        $this->recalculateSiblingPriorities();
    }

    protected function recalculateSiblingPriorities()
    {
        $parentClause = "parent_id = {$this->parent_id}";

        if( ! $this->parent_id )
        {
            $parentClause = "parent_id IS NULL";
        }

        Doctrine_Manager::getInstance()->getCurrentConnection()
            ->fetchAssoc("UPDATE {$this->getTable()->getTableName()} SET priority = priority-1 WHERE master_cost_data_id = {$this->master_cost_data_id} AND {$parentClause} AND priority > {$this->priority} AND deleted_at IS NULL");
    }

    protected function deleteDescendantsAndSelf()
    {
        $allIds = MasterCostDataPrimeCostRateTable::getDescendantIds([$this->id]);

        $allIds[] = $this->id;

        $implodedDescendantId = implode(',', $allIds);

        Doctrine_Manager::getInstance()->getCurrentConnection()
            ->fetchAssoc("UPDATE ".MasterCostDataPrimeCostRateTable::getInstance()->getTableName()." SET deleted_at = NOW() WHERE id in ({$implodedDescendantId}) AND deleted_at IS NULL");
    }

    public function inUse()
    {
        return $this->descendantsHaveValues() || $this->descendantsLinkedToBillItem();
    }

    protected function descendantsHaveValues(){

        $allIds = MasterCostDataPrimeCostRateTable::getDescendantIds([ $this->id ]);

        $allIds[] = $this->id;

        $pdo = MasterCostDataPrimeCostRateTable::getInstance()->getConnection()->getDbh();

        $implodedMasterItemIds = implode(',', $allIds);

        $statement = "SELECT COUNT(i.id)
        FROM " . CostDataPrimeCostRateTable::getInstance()->getTableName() . " i
        JOIN " . MasterCostDataPrimeCostRateTable::getInstance()->getTableName() . " m on m.id = i.master_cost_data_prime_cost_rate_id
        WHERE m.id in ({$implodedMasterItemIds})
        AND (i.approved_value != 0 OR i.awarded_value != 0)
        AND m.deleted_at IS NULL";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        $numberOfUsedItems = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $numberOfUsedItems > 0;
    }

    protected function descendantsLinkedToBillItem()
    {
        $allIds = MasterCostDataPrimeCostRateTable::getDescendantIds([ $this->id ]);

        $allIds[] = $this->id;

        $pdo = MasterCostDataPrimeCostRateTable::getInstance()->getConnection()->getDbh();

        $implodedMasterItemIds = implode(',', $allIds);

        $statement = "SELECT COUNT(pivot.id)
        FROM " . BillItemCostDataPrimeCostRateTable::getInstance()->getTableName() . " pivot
        JOIN " . CostDataPrimeCostRateTable::getInstance()->getTableName() . " i on i.id = pivot.cost_data_prime_cost_rate_id
        JOIN " . MasterCostDataPrimeCostRateTable::getInstance()->getTableName() . " m on m.id = i.master_cost_data_prime_cost_rate_id
        WHERE m.id in ({$implodedMasterItemIds})
        AND m.deleted_at IS NULL";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        $numberOfLinks = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $numberOfLinks > 0;
    }

    public function itemUpdate($attribute, $value)
    {
        if( $attribute == 'uom_id' && $value == -1 ) $value = null;

        $this->{$attribute} = $value;
        $this->save();
    }
}
