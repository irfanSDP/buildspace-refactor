<?php

/**
 * CostDataPrimeCostSumItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CostDataPrimeCostSumItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return CostDataPrimeCostSumItemTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('CostDataPrimeCostSumItem');
    }

    public static function getItem(CostData $costData, MasterCostDataPrimeCostSumItem $masterItem)
    {
        $costDataItem = DoctrineQuery::create()->select('i.id')
            ->from('CostDataPrimeCostSumItem i')
            ->where('i.cost_data_id = ?', $costData->id)
            ->andWhere('i.master_cost_data_prime_cost_sum_item_id = ?', $masterItem->id)
            ->limit(1)
            ->fetchOne();

        if( ! $costDataItem )
        {
            $costDataItem = new CostDataPrimeCostSumItem();
            $costDataItem->cost_data_id = $costData->id;
            $costDataItem->master_cost_data_prime_cost_sum_item_id = $masterItem->id;
        }

        return $costDataItem;
    }

    public static function setValue(CostData $costData, MasterCostDataPrimeCostSumItem $masterItem, $attribute, $value)
    {
        $costDataItem = self::getItem($costData, $masterItem);

        $costDataItem->{$attribute} = $value;
        $costDataItem->save();

        return $costDataItem;
    }

    public static function getValues(CostData $costData, array $masterItemIds)
    {
        if(empty($masterItemIds)) return array();

        $masterItemIds = implode(',', $masterItemIds);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT mi.id, COALESCE(i.approved_cost, 0) AS approved_cost, COALESCE(i.awarded_cost,0) AS awarded_cost, COALESCE(i.conversion_factor, 1) as conversion_factor, i.awarded_nominated_sub_contractor, i.awarded_date
        FROM ".MasterCostDataPrimeCostSumItemTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataPrimeCostSumItemTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_prime_cost_sum_item_id and i.cost_data_id = {$costData->id}
        WHERE mi.id in ({$masterItemIds})
        AND mi.deleted_at IS NULL");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $items = Utilities::setAttributeAsKey($items, 'id');

        return $items;
    }

    public static function setItemVisibility(CostData $costData, $masterItemIds, $setVisible)
    {
        foreach($masterItemIds as $masterItemId)
        {
            $item = self::getItem($costData, Doctrine_Core::getTable('MasterCostDataPrimeCostSumItem')->find($masterItemId));

            $item->show = $setVisible;
            $item->save();
        }
    }

    public static function getItemList(CostData $costData)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT mi.id, mi.description
        FROM ".MasterCostDataPrimeCostSumItemTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataPrimeCostSumItemTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_prime_cost_sum_item_id and i.cost_data_id = {$costData->id}
        WHERE mi.master_cost_data_id = {$costData->master_cost_data_id} 
        AND i.show IS NOT FALSE
        AND mi.deleted_at IS NULL
        ORDER BY mi.priority ASC");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function itemValuesAreDerived(CostData $costData, array $masterItemIds)
    {
        $results = array();

        foreach($masterItemIds as $masterItemId)
        {
            $linkedBillItems = BillItemCostDataPrimeCostSumItemTable::getLinkedBillItems($costData, Doctrine_Core::getTable('MasterCostDataPrimeCostSumItem')->find($masterItemId));

            $results[$masterItemId]['awarded_cost'] = ( count($linkedBillItems) > 0 );
        }

        return $results;
    }

    public static function getLatestUpdateDetails(CostData $costData)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $statement = "SELECT mi.id, i.updated_at, i.updated_by, cp.name as updater_name
        FROM ".MasterCostDataPrimeCostSumItemTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataPrimeCostSumItemTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_prime_cost_sum_item_id and i.cost_data_id = :costDataId
        LEFT JOIN ".sfGuardUserTable::getInstance()->getTableName()." u on u.id = i.updated_by
        LEFT JOIN ".sfGuardUserProfileTable::getInstance()->getTableName()." cp ON cp.user_id = u.id
        WHERE i.cost_data_id = :costDataId
        AND i.show IS NOT FALSE
        AND mi.deleted_at IS NULL
        ORDER BY i.updated_by DESC;";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array( 'costDataId' => $costData->id ));

        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    public static function updateProjectCostDataItemValues(array $projectIds)
    {
        if(empty($projectIds)) return;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT i.id
            FROM " . BillItemTable::getInstance()->getTableName() . " i
            JOIN " . BillElementTable::getInstance()->getTableName() . " e on e.id = i.element_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b on b.id = e.project_structure_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p on p.id = b.root_id
            WHERE p.id in (" . implode(',', $projectIds) . ")
            AND p.deleted_at IS NULL
            AND b.deleted_at IS NULL
            AND e.deleted_at IS NULL
            AND i.deleted_at IS NULL
            AND i.project_revision_deleted_at IS NULL");

        $stmt->execute();

        $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        if(empty($billItemIds)) return;

        $stmt = $pdo->prepare("SELECT cd.id AS cost_data_id, i.master_cost_data_prime_cost_sum_item_id
            FROM " . self::getInstance()->getTableName() . " i
            JOIN " . MasterCostDataPrimeCostSumItemTable::getInstance()->getTableName() . " mi ON mi.id = i.master_cost_data_prime_cost_sum_item_id
            JOIN " . CostDataTable::getInstance()->getTableName() . " cd ON cd.id = i.cost_data_id
            WHERE i.id IN (
                SELECT ref.cost_data_prime_cost_sum_item_id
                FROM " . BillItemCostDataPrimeCostSumItemTable::getInstance()->getTableName() . " ref
                WHERE ref.bill_item_id IN (" . implode(',', $billItemIds) . ")
            )
            AND cd.deleted_at IS NULL
            AND i.deleted_at IS NULL
            AND mi.deleted_at IS NULl;");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $costDataObjects                 = array();
        $masterCostDataPrimeCostSumItems = array();

        foreach($records as $record)
        {
            if(!array_key_exists($record['cost_data_id'], $costDataObjects)) $costDataObjects[$record['cost_data_id']] = Doctrine_Core::getTable('CostData')->find($record['cost_data_id']);

            if(!array_key_exists($record['master_cost_data_prime_cost_sum_item_id'], $masterCostDataPrimeCostSumItems)) $masterCostDataPrimeCostSumItems[$record['master_cost_data_prime_cost_sum_item_id']] = Doctrine_Core::getTable('MasterCostDataPrimeCostSumItem')->find($record['master_cost_data_prime_cost_sum_item_id']);

            $costData           = $costDataObjects[$record['cost_data_id']];
            $masterCostDataItem = $masterCostDataPrimeCostSumItems[$record['master_cost_data_prime_cost_sum_item_id']];

            BillItemCostDataPrimeCostSumItemTable::itemValueUpdate($costData, $masterCostDataItem);
        }
    }
}