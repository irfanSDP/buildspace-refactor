<?php

/**
 * PurchaseOrderTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PurchaseOrderTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PurchaseOrderTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PurchaseOrder');
    }

    public static function generateDropDownSelectionsByProject(ProjectStructure $projectStructure)
    {
        $data = array();

        $purchaseOrders = Doctrine_Query::create()
        ->from('PurchaseOrder po')
        ->where('po.project_structure_id = ?', array($projectStructure->id))
        ->orderBy('po.id DESC')
        ->execute();

        foreach ( $purchaseOrders as $purchaseOrder )
        {
            $data[] = array(
                'id'   => (string) $purchaseOrder->id,
                'name' => $purchaseOrder->getGeneratedReferenceNumber(),
            );

            unset($purchaseOrder);
        }

        unset($purchaseOrders);

        return array(
            'identifier' => 'id',
            'label'      => 'name',
            'items'      => $data
        );
    }

    public static function getLatestPurchaseByProject(ProjectStructure $projectStructure)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT b.id AS id, b.project_structure_id AS project_structure_id, b.prefix AS prefix,
        b.po_count AS po_count, b.region_id AS region_id, b.sub_region_id AS sub_region_id,
        b.created_at AS created_at, b.updated_at AS updated_at, b.created_by AS created_by,
        b.updated_by AS updated_by
        FROM ".self::getInstance()->getTableName()." b
        WHERE ( b.project_structure_id = :id )
        ORDER BY b.id DESC LIMIT 1");

        $stmt->execute(array('id' => $projectStructure->id));

        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    public static function getPreviousRecordByProjectId($projectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare('SELECT po.id FROM '.PurchaseOrderProjectTable::getInstance()->getTableName().' s
        JOIN '.self::getInstance()->getTableName().' po ON (po.id = s.purchase_order_id AND po.deleted_at IS NULL)
        WHERE s.project_structure_id = '.$projectId.' AND s.deleted_at IS NULL ORDER BY po.id DESC LIMIT 1');

        $stmt->execute();

        $poId = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        if ( ! $poId )
        {
            return false;
        }

        return self::getInstance()->find($poId);
    }

    public static function getProjectsThatHasPurchaseOrderRecord()
    {
        $data       = array();
        $projectIds = array();
        $pdo        = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare('SELECT DISTINCT p.id, p.title FROM '.self::getInstance()->getTableName().' po
        JOIN '.ProjectStructureTable::getInstance()->getTableName().' p ON (p.id = po.project_structure_id AND p.deleted_at IS NULL)
        WHERE po.deleted_at IS NULL ORDER BY p.id DESC');

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $records as $project )
        {
            $projectIds[$project['id']] = $project['id'];

            unset($project);
        }

        unset($records);

        if (empty($projectIds))
        {
            return $data;
        }

        $projects = DoctrineQuery::create()
        ->select('p.id, p.title, m.status, r.country, sr.name, p.created_at, cb.id as creator_id, pr.name')
        ->from('ProjectStructure p')
        ->leftJoin('p.MainInformation m')
        ->leftJoin('m.Regions r')
        ->leftJoin('m.Subregions sr')
        ->leftJoin('p.Creator cb')
        ->leftJoin('cb.Profile pr')
        ->whereIn('p.id', $projectIds)
        ->addOrderBy('p.id DESC')
        ->fetchArray();

        foreach ( $projects as $project )
        {
            $data[] = array(
                'id'         => $project['id'],
                'title'      => $project['title'],
                'status'     => ProjectMainInformation::getProjectStatusById($project['MainInformation']['status']),
                'status_id'  => $project['MainInformation']['status'],
                'state'      => ( $project['MainInformation']['Subregions']['name'] ) ? $project['MainInformation']['Subregions']['name'] : "N/A",
                'country'    => ( $project['MainInformation']['Regions']['country'] ) ? $project['MainInformation']['Regions']['country'] : "N/A",
                'created_by' => ( $project['Creator']['Profile']['name'] ) ? $project['Creator']['Profile']['name'] : '-',
                'created_at' => date('d/m/Y H:i', strtotime($project['created_at'])),
            );

            unset($project);
        }

        unset($projects);

        return $data;
    }
}