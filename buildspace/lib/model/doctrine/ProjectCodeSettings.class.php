<?php

/**
 * ProjectCodeSettings
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 *  
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProjectCodeSettings extends BaseProjectCodeSettings
{
    const TYPE_PARENT_SUBSIDIARY = 1;
    const TYPE_PHASE_SUBSIDIARY = 2;

    public static function createEntry(ProjectStructure $project)
    {
        $hasProjectCodeSettingsRecords = $project->ProjectCodeSettings->count() > 0;

        if($hasProjectCodeSettingsRecords) return;

        $projectSubsidiary = $project->MainInformation->getEProjectProject()->Subsidiary;
        $parentsOfProjectSubsidiary = $projectSubsidiary->getParentsOfSubsidiary();

        if($parentsOfProjectSubsidiary)
        {
            foreach($parentsOfProjectSubsidiary as $parentSubsidiary)
            {
                $record = new self;
                $record->project_structure_id = $project->id;
                $record->eproject_subsidiary_id = $parentSubsidiary->id;
                $record->subsidiary_code = $parentSubsidiary->identifier;
                $record->type = self::TYPE_PARENT_SUBSIDIARY;
                $record->save();
            }
        }

        $record = new self;
        $record->project_structure_id = $project->id;
        $record->eproject_subsidiary_id = $projectSubsidiary->id;
        $record->subsidiary_code = $projectSubsidiary->identifier;
        $record->type = self::TYPE_PHASE_SUBSIDIARY;
        $record->save();
    }

    public static function getProjectCodeSettingRecord(ProjectStructure $project, $eprojectSubsidiaryid)
    {
        $query = DoctrineQuery::create()
                    ->select('*')
                    ->from('ProjectCodeSettings pcs')
                    ->where('pcs.project_structure_id = ?', $project->id)
                    ->andWhere('pcs.eproject_subsidiary_id = ?', $eprojectSubsidiaryid)
                    ->andWhere('pcs.deleted_at is null');

        return $query->fetchOne(); 
    }
}