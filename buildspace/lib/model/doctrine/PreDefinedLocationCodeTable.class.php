<?php

/**
 * PreDefinedLocationCodeTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PreDefinedLocationCodeTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PreDefinedLocationCodeTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PreDefinedLocationCode');
    }

    public static function getAssignedCodesByProjectId($projectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT c.id, c.name, c.root_id, c.priority, c.lft, c.rgt, c.level
            FROM " . self::getInstance()->getTableName() . " c
            JOIN " . LocationAssignmentTable::getInstance()->getTableName() . " l ON c.id = l.pre_defined_location_code_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.id = l.bill_item_id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON i.element_id = e.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b ON e.project_structure_id = b.id
            WHERE b.root_id = " . intval($projectId) . " AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            AND e.deleted_at IS NULL AND b.deleted_at IS NULL
            AND c.deleted_at IS NULL
            ORDER BY c.priority, c.lft, c.level");

        $stmt->execute();

        $locationAssignments = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $rootIds = array();
        foreach($locationAssignments as $locationAssignment)
        {
            $rootIds[] = $locationAssignment['root_id'];
        }

        $rootIds = array_unique($rootIds);
        $ancestors = array();

        if(!empty($rootIds))
        {
            $stmt = $pdo->prepare("SELECT DISTINCT p.root_id, p.id, p.name, p.root_id, p.priority, p.lft, p.rgt, p.level
            FROM " . self::getInstance()->getTableName() . " p
            WHERE p.root_id IN (".implode(',', $rootIds).") AND p.deleted_at IS NULL
            AND (p.rgt - p.lft) > 1
            ORDER BY p.priority, p.lft, p.level");

            $stmt->execute();

            $ancestors = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);
        }

        $locationCodes = array();

        foreach($locationAssignments as $locationAssignment)
        {
            if(array_key_exists($locationAssignment['root_id'], $ancestors))
            {
                foreach($ancestors[$locationAssignment['root_id']] as $ancestor)
                {
                    if($ancestor['level'] == ($locationAssignment['level']))
                        continue;

                    if($locationAssignment['lft'] > $ancestor['lft'] and $locationAssignment['rgt'] < $ancestor['rgt'])
                    {
                        $locationCodes[$locationAssignment['id']][] = $ancestor;
                    }
                }
            }

            $locationCodes[$locationAssignment['id']][] = $locationAssignment;
        }

        return $locationCodes;
    }

    public static function updateRootPriority($priority, $excludeId = null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sqlUpdateRoot = "UPDATE " . self::getInstance()->getTableName() . " SET priority = priority + 1
            WHERE priority >=" . $priority . " AND id = root_id";

        if ( $excludeId and $excludeId > 0 )
        {
            $sqlUpdateRoot .= " AND id <> " . $excludeId;
        }

        $sqlUpdateRoot .= " AND deleted_at IS NULL";

        $stmt = $pdo->prepare($sqlUpdateRoot);

        $stmt->execute();

        //update children priority same as root priority
        $stmt = $pdo->prepare("UPDATE " . self::getInstance()->getTableName() . " AS i SET priority = r.priority
            FROM " . self::getInstance()->getTableName() . " AS r
            WHERE i.root_id = r.id AND i.id <> r.id AND i.priority <> r.priority
            AND i.deleted_at IS NULL AND r.deleted_at IS NULL");

        $stmt->execute();
    }

    public static function canBeDeletedById($id)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COUNT(l.id)
        FROM ".LocationAssignmentTable::getInstance()->getTableName()." l
        JOIN ".PreDefinedLocationCodeTable::getInstance()->getTableName()." c ON l.pre_defined_location_code_id = c.id
        JOIN ".PreDefinedLocationCodeTable::getInstance()->getTableName()." p ON c.lft BETWEEN p.lft AND p.rgt
        WHERE c.root_id = p.root_id AND p.id = ".$id."
        AND c.deleted_at IS NULL AND p.deleted_at IS NULL");

        $stmt->execute();

        $count = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        if($count > 0) return false;

        // New Post Contract Form Information check.
        $pdo  = self::getInstance()->getConnection()->getDbh();
        $stmt = $pdo->prepare("SELECT COUNT(id) FROM " . NewPostContractFormInformationTable::getInstance()->getTableName() . " WHERE pre_defined_location_code_id = " . $id);
        $stmt->execute();

        $count = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        if($count > 0) return false;

        return true;
    }
}