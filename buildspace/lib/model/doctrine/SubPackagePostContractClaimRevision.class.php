<?php

/**
 * SubPackagePostContractClaimRevision
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SubPackagePostContractClaimRevision extends BaseSubPackagePostContractClaimRevision
{
    const ORIGINAL_BILL_VERSION = 1;

    public function save(Doctrine_Connection $conn = null)
    {
        $isNew = $this->isNew() ? true : false;

        // array to store information for time based and work based claim
        $timeBasedInfos = array();
        $workBasedInfos = array();

        if ( $isNew AND $this->version > self::ORIGINAL_BILL_VERSION )
        {
            $pdo = $this->getTable()->getConnection()->getDbh();

            // set the previous revision's current_selected_revision status to false
            $sql = "UPDATE ".SubPackagePostContractClaimRevisionTable::getInstance()->getTableName()." SET current_selected_revision = false, locked_status = true WHERE (sub_package_id = :sub_package_id)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute(array('sub_package_id' => $this->sub_package_id));

            // get last latest revision id
            $lastLatestRevision = SubPackagePostContractClaimRevisionTable::getCurrentProjectRevision($this->SubPackage);

            // get the data that will be cloned for work based and time based claim for preliminaries grid if available
            $timeBasedInfos = SubPackagePreliminariesTimeBasedClaimTable::getRecordsByLastRevision($lastLatestRevision);
            $workBasedInfos = SubPackagePreliminariesWorkBasedClaimTable::getRecordsByLastRevision($lastLatestRevision);

            $this->current_selected_revision = true;
        }

        parent::save();

        if ( $isNew AND $this->version > self::ORIGINAL_BILL_VERSION )
        {
            $this->refresh(true);

            SubPackagePreliminariesTimeBasedClaimTable::insertRecordsByNewRevision($this, $timeBasedInfos);
            SubPackagePreliminariesWorkBasedClaimTable::insertRecordsByNewRevision($this, $workBasedInfos);

            SubPackagePostContractStandardClaimTable::cloneStandardClaimRevision($this->SubPackage->ProjectStructure->PostContract, $this->SubPackage, $this);
        }
    }
}
