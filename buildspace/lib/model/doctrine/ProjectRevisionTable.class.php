<?php

/**
 * ProjectRevisionTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProjectRevisionTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ProjectRevisionTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ProjectRevision');
    }

    public static function getOriginalProjectRevisionFromBillId($billId, $hydrate=null)
    {
        $query = self::getInstance()->createQuery('br')
        ->select('br.*')
        ->where('br.project_structure_id = ?', $billId)
        ->andWhere('br.version = ?', ProjectRevision::ORIGINAL_BILL_VERSION)
        ->orderBy('br.id DESC')
        ->limit(1);

        if ($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getLatestProjectRevisionFromBillId($billId, $hydrate=null)
    {
        $query = self::getInstance()->createQuery('br')
        ->select('br.*')
        ->where('br.project_structure_id = ?', $billId)
        ->orderBy('br.id DESC')
        ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getLatestLockedProjectRevisionFromBillId($billId, $hydrate=null)
    {
        $query = self::getInstance()->createQuery('br')
        ->select('br.*')
        ->where('br.project_structure_id = ?', $billId)
        ->andWhere('br.locked_status IS TRUE')
        ->orderBy('br.id DESC')
        ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getCurrentSelectedProjectRevisionFromBillId($billId, $hydrate=null)
    {
        $query = self::getInstance()->createQuery('br')
        ->select('br.*')
        ->where('br.project_structure_id = ?', $billId)
        ->andWhere('br.current_selected_revision = ?', true)
        ->orderBy('br.id DESC')
        ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getCurrentlyEditingProjectRevisionFromBillId($billId, $hydrate=null)
    {
        $query = self::getInstance()->createQuery('br')
        ->select('br.*')
        ->where('br.project_structure_id = ?', $billId)
        ->andWhere('br.locked_status IS FALSE')
        ->orderBy('br.id DESC')
        ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function updateProjectRevisionStatusToLocked(ProjectStructure $project)
    {
        Doctrine_Query::create()
            ->update('ProjectRevision')
            ->set('locked_status', '?', true)
            ->whereIn('project_structure_id', $project->id)
            ->execute();
    }

    /**
     * Get the rates and totals of all revisions.
     *
     * @param $bill
     * @param $tendererIds
     *
     * @return array
     */
    public static function getRatesAndTotalsRevisions($bill, $tendererIds)
    {
        $project = Doctrine_Core::getTable('ProjectStructure')->find($bill->root_id);

        $estimateRateRevisions = array();
        $estimateTotalRevisions = array();
        $tendererRateRevisions = array();
        $tendererTotalRevisions = array();

        foreach(self::getRevisions($project, true) as $revisionNumber => $revision)
        {
            $revisionObject = ProjectRevisionTable::getInstance()->find($revision['id']);

            // Estimate Rate Revisions.
            $estimateRateRevisions[ $revisionNumber ] = BillItemRateLogTable::getBillItemRatesByProjectAndRevision($project, $revisionObject);
            $estimateTotalRevisions[ $revisionNumber ] = BillItemRateLogTable::getBillItemGrandTotalByProjectAndRevision($project, $revisionObject);

            // Tenderer Rate Revisions.
            if( empty( $tendererIds ) )
            {
                continue;
            }
            foreach($tendererIds as $tendererId)
            {
                $tendererRateRevisions[ $tendererId ][ $revisionNumber ] = TenderBillItemRateLogTable::getBillItemRatesByCompanyIdProjectIdAndRevision(CompanyTable::getInstance()->find($tendererId), $project, $revisionObject);
                $tendererTotalRevisions[ $tendererId ][ $revisionNumber ] = TenderBillItemRateLogTable::getBillItemGrandTotalByCompanyIdProjectIdAndRevision(CompanyTable::getInstance()->find($tendererId), $project, $revisionObject);
            }
        }

        return array(
            $estimateRateRevisions,
            $estimateTotalRevisions,
            $tendererRateRevisions,
            $tendererTotalRevisions,
        );
    }

    /**
     * Returns an array of all items which are no longer included in the current revision of billItems.
     *
     * @param $billItemsIncludingDeleted
     * @param $billItemsExcludingDeleted
     *
     * @return array
     */
    public static function getDeletedItemIds(array $billItemsIncludingDeleted, array $billItemsExcludingDeleted)
    {
        $deletedItemIds = array();
        foreach($billItemsIncludingDeleted as $possiblyDeletedBillItem)
        {
            $exists = false;

            foreach($billItemsExcludingDeleted as $currentBillItem)
            {
                if( $currentBillItem['id'] == $possiblyDeletedBillItem['id'] )
                {
                    $exists = true;
                    break;
                }
            }

            if( ! $exists )
            {
                $deletedItemIds[] = $possiblyDeletedBillItem['id'];
            }
        }

        return $deletedItemIds;
    }

    public static function getEstimateElementGrandTotalRevisions(ProjectStructure $bill)
    {
        $project = Doctrine_Core::getTable('ProjectStructure')->find($bill->root_id);
        $projectRevisions = self::getRevisions($project);

        $grandTotals = array();
        foreach($projectRevisions as $revisionNumber => $revision)
        {
            $revisionObject = ProjectRevisionTable::getInstance()->find($revision['id']);
            $grandTotals[ $revisionNumber ] = BillItemRateLogTable::getElementGrandTotalByBillAndRevision($bill, $revisionObject);
        }

        return $grandTotals;
    }

    public static function getTendererElementGrandTotalRevisions(ProjectStructure $bill, array $tendererIds)
    {
        $project = Doctrine_Core::getTable('ProjectStructure')->find($bill->root_id);
        $projectRevisions = self::getRevisions($project);

        $grandTotals = array();
        foreach($projectRevisions as $revisionNumber => $revision)
        {
            $revisionObject = ProjectRevisionTable::getInstance()->find($revision['id']);
            foreach($tendererIds as $tendererId)
            {
                $grandTotals[ $tendererId ][ $revisionNumber ] = TenderBillItemRateLogTable::getElementGrandTotalByCompanyIdBillIdAndRevision(CompanyTable::getInstance()->find($tendererId), $bill, $revisionObject);
            }
        }

        return $grandTotals;
    }

    public static function getEstimateBillGrandTotalRevisions(ProjectStructure $project)
    {
        $projectRevisions = self::getRevisions($project);

        $grandTotals = array();
        foreach($projectRevisions as $revisionNumber => $revision)
        {
            $revisionObject = ProjectRevisionTable::getInstance()->find($revision['id']);
            $grandTotals[ $revisionNumber ] = BillItemRateLogTable::getBillTotalAmountByProjectAndRevision($project, $revisionObject);
        }

        return $grandTotals;
    }

    public static function getTendererBillGrandTotalRevisions(ProjectStructure $project, array $tendererIds)
    {
        $projectRevisions = self::getRevisions($project);

        $grandTotals = array();
        foreach($projectRevisions as $revisionNumber => $revision)
        {
            $revisionObject = ProjectRevisionTable::getInstance()->find($revision['id']);
            foreach($tendererIds as $tendererId)
            {
                $grandTotals[ $tendererId ][ $revisionNumber ] = TenderBillItemRateLogTable::getBillTotalAmountByCompanyIdProjectIdAndRevision(CompanyTable::getInstance()->find($tendererId), $project, $revisionObject);
            }
        }

        return $grandTotals;
    }

    /**
     * Returns the revisions of a project,
     * excluding the current version.
     *
     * @param ProjectStructure $project
     * @param bool             $includeCurrentRevision
     *
     * @return mixed
     */
    public static function getRevisions(ProjectStructure $project, $includeCurrentRevision = false)
    {
        $projectRevisions = $project->getProjectRevisions()->toArray();

        if( ! $includeCurrentRevision ) array_pop($projectRevisions);

        return $projectRevisions;
    }
}