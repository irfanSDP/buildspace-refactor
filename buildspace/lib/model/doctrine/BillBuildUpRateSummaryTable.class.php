<?php

/**
 * BillBuildUpRateSummaryTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillBuildUpRateSummaryTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BillBuildUpRateSummaryTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillBuildUpRateSummary');
    }

    public static function getByBillItemId($id, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('BillBuildUpRateSummary s')
            ->where('s.bill_item_id = ?', $id)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }
    /*
     * This method ONLY updates build up summary values. Supposedly any updates on build up summary
     * will affect values in bill items, bill elements and project breakdown. Those updates won't be call
     * here since we don't want to over process everything in one method. So make sure after calling this
     * method, to call function like BillItemTable::updateBillItemTotalColumns if you want to update
     * bill item/element values.
     */
    public static function updateBuildUpSummaryCost(Array $infoArray)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        try
        {
            $pdo->beginTransaction();

            $sql = "UPDATE ".BillBuildUpRateSummaryTable::getInstance()->getTableName()."
            SET total_cost = (SELECT COALESCE(SUM(b.line_total),0)
            FROM ".BillBuildUpRateItemTable::getInstance()->getTableName()." b
            WHERE b.bill_item_id = ".BillBuildUpRateSummaryTable::getInstance()->getTableName().".bill_item_id AND b.deleted_at IS NULL) WHERE
            bill_item_id = ".$infoArray['bill_item_id']." AND deleted_at IS NULL RETURNING total_cost";

            $stmt = $pdo->prepare($sql);
            $stmt->execute();

            $totalCost = $stmt->fetchColumn();

            $conversionFactorAmount = $infoArray['summary_conversion_factor_amount'];
            $operator = $infoArray['summary_conversion_factor_operator'];

            if($infoArray['summary_apply_conversion_factor'])
            {
                $exp = $totalCost.$operator.$conversionFactorAmount;

                $evaluator = new EvalMath(true, true);
                $evaluator->suppress_errors = true;
                $evaluatedValue = $evaluator->evaluate($exp);

                $totalCost = $evaluatedValue ? $evaluatedValue : 0;
            }

            $markupPrice = $totalCost * ($infoArray['summary_markup'] / 100);
            $finalCost = $totalCost + $markupPrice;

            switch($infoArray['summary_rounding_type'])
            {
                case BillBuildUpRateSummary::ROUNDING_TYPE_UPWARD:
                    $finalCost  = ceil($finalCost);
                    break;
                case BillBuildUpRateSummary::ROUNDING_TYPE_DOWNWARD:
                    $finalCost  =  floor($finalCost);
                    break;
                case BillBuildUpRateSummary::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                    $finalCost  =  round($finalCost);
                    break;
                case BillBuildUpRateSummary::ROUNDING_TYPE_NEAREST_TENTH:
                    $finalCost  =  round($finalCost * 10) / 10;
                    break;
                default:
                    $finalCost  =  number_format($finalCost, 2, '.', '');
            }

            $sql = "UPDATE ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." SET final_cost = ".$finalCost." WHERE
            bill_item_id = ".$infoArray['bill_item_id']." AND final_cost <> ".$finalCost." AND deleted_at IS NULL";

            $stmt = $pdo->prepare($sql);

            $stmt->execute();

            $sql = "UPDATE ".BillItemFormulatedColumnTable::getInstance()->getTableName()." SET value = :final_cost_text, final_value = :final_cost WHERE relation_id = ".$infoArray['bill_item_id']." AND column_name = :column_name AND deleted_at IS NULL";

            $stmt = $pdo->prepare($sql);

            $stmt->execute(array(
                'final_cost_text' => $finalCost,
                'final_cost' => $finalCost,
                'column_name' => BillItem::FORMULATED_COLUMN_RATE
            ));

            //update grand total qty
            $sql = "UPDATE ".BillItemTable::getInstance()->getTableName()." SET
            grand_total_quantity = (SELECT COALESCE(SUM(r.total_quantity), 0) FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()."
            AS r LEFT JOIN ".BillColumnSettingTable::getInstance()->getTableName()." AS c ON r.bill_column_setting_id = c.id
            WHERE r.bill_item_id = ".$infoArray['bill_item_id']." AND r.include IS TRUE AND r.deleted_at IS NULL AND c.deleted_at IS NULL)
            WHERE id = ".$infoArray['bill_item_id']."";

            $stmt = $pdo->prepare($sql);
            $stmt->execute();

            //update grand total
            $sql = "UPDATE ".BillItemTable::getInstance()->getTableName()." SET
            grand_total = (SELECT COALESCE(SUM(ifc.final_value * i.grand_total_quantity), 0) FROM ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS ifc
            LEFT JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON ifc.relation_id = i.id
            WHERE i.id = ".$infoArray['bill_item_id']." AND ifc.column_name = '".BillItem::FORMULATED_COLUMN_RATE."' AND ifc.final_value <> 0
            AND i.deleted_at IS NULL AND ifc.deleted_at IS NULL)
            WHERE id = ".$infoArray['bill_item_id']."";

            $stmt = $pdo->prepare($sql);
            $stmt->execute();

            //update markup amount columns since any changes on total qty or original grand total will affect markup amount (base on markup percentage)
            BillItemTable::updateMarkupAmountByBillItemId($infoArray['bill_item_id']);

            $pdo->commit();
        }
        catch(PDOException $e)
        {
            $pdo->rollBack();
            throw $e;
        }
    }
}