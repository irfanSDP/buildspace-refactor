<?php

/**
 * PostContractRemeasurementBuildUpQuantityItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PostContractRemeasurementBuildUpQuantityItem extends BasePostContractRemeasurementBuildUpQuantityItem
{

	const OMISSION_TYPE_TEXT = 'omission';
	const ADDITION_TYPE_TEXT = 'addition';

	public function getSignText()
	{
		return PostContractRemeasurementBuildUpQuantityItemTable::getSignTextBySign($this->sign);
	}

	public function getFormulatedColumnByName($columnName, $hydrate=null)
	{
		return PostContractRemeasurementBuildUpQuantityItemTable::getFormulatedColumnByRelationIdAndColumnName($this->id, $columnName, $hydrate);
	}

	public function calculateTotal()
	{
		$formulatedColumnNames = $this->getTable()->getFormulatedColumnNames($this->PostContractBillItemRate->BillItem->UnitOfMeasurement);

		$query = DoctrineQuery::create()
		->select('COUNT(id) as count, MULTIPLY(c.final_value) AS value')
		->from('PostContractRemeasurementBuildUpQuantityFormulatedColumn c')
		->where('c.relation_id = ?', $this->id)
		->andWhereIn('c.column_name', $formulatedColumnNames)
		->andWhere('c.final_value IS NOT NULL')
		->andWhere('c.deleted_at IS NULL')
		->limit(1)
		->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

		$result = $query->fetchOne();
		$total  = 0;

		if ($result['count'] > 0)
		{
			$total = $this->sign == BillBuildUpQuantityItem::SIGN_POSITIVE ? abs($result['value']) : abs($result['value']) * -1;
		}

		if($this->total != $total)
		{
			$this->total = $total;
			$this->save();
		}

		return $this->total;
	}

	public function delete(Doctrine_Connection $conn = null)
	{
		$buildUpQuantityItemIds       = array();
		$affectedBuildUpQuantityItems = array();
		$formulatedColumnIds          = array();
		$nodes                        = null;

		$conn = $conn ? $conn : $this->getTable()->getConnection();

		try
		{
			$conn->beginTransaction();

			foreach($this->FormulatedColumns as $formulatedColumn)
			{
				$nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

				if(is_array($nodes))
				{
					foreach($nodes as $node)
					{
						$referencedNode = Doctrine_Core::getTable('PostContractRemeasurementBuildUpQuantityFormulatedColumn')->find($node['node_from']);

						if($referencedNode)
						{
							$value = $itemId = str_ireplace('r'.$this->id, '#REF!', $referencedNode->value);
							$referencedNode->setFormula($value);

							$referencedNode->save();

							$buildUpQuantityItemIds[$referencedNode->relation_id] = $referencedNode->relation_id;
						}
					}
				}

				Doctrine_Manager::getInstance()->getCurrentConnection()
				->fetchAssoc("UPDATE ".$formulatedColumn->getTable()->getTableName()." SET
				deleted_at = NOW()
				WHERE id = ".$formulatedColumn->id);

				$formulatedColumnIds[] = $formulatedColumn->id;
			}

			if(count($formulatedColumnIds) > 0)
			{
				//now we can remove all edges after we've updated related nodes
				$query = Doctrine_Query::create()
					->delete('PostContractRemeasurementBuildUpQuantityEdge e')
					->whereIn('e.node_from', $formulatedColumnIds);
				$query->execute();

				$query = Doctrine_Query::create()
					->delete('PostContractRemeasurementBuildUpQuantityEdge e')
					->whereIn('e.node_to', $formulatedColumnIds);
				$query->execute();
			}

			parent::delete($conn);

			$conn->commit();
		}
		catch(Exception $e)
		{
			$conn->rollback();
			throw $e;
		}

		foreach($buildUpQuantityItemIds as $buildUpQuantityItemId)
		{
			$affectedBuildUpQuantityItem = array();
			$buildUpQuantityItem = $this->getTable()->find($buildUpQuantityItemId);

			$affectedBuildUpQuantityItem['id'] = $buildUpQuantityItem->id;
			$affectedBuildUpQuantityItem['total'] = $buildUpQuantityItem->calculateTotal();

			foreach($buildUpQuantityItem->FormulatedColumns as $formulatedColumn)
			{
				$columnName = $formulatedColumn->column_name;
				$affectedBuildUpQuantityItem[$columnName."-final_value"] = $formulatedColumn->final_value;
				$affectedBuildUpQuantityItem[$columnName."-value"] = $formulatedColumn->value;
				$affectedBuildUpQuantityItem[$columnName.'-has_cell_reference'] = $formulatedColumn->hasCellReference();
				$affectedBuildUpQuantityItem[$columnName.'-has_formula'] = $formulatedColumn->hasFormula();
			}

			array_push($affectedBuildUpQuantityItems, $affectedBuildUpQuantityItem);
		}

		return $affectedBuildUpQuantityItems;
	}

	public function moveTo($priority, $lastPosition=false)
	{
		$priority = $lastPosition ? $priority+1 : $priority;

		$con = $this->getTable()->getConnection();

		try
		{
			$con->beginTransaction();

			$this->priority = $priority;
			$this->save();

			if(!$lastPosition)
			{
				$this->updatePriority($priority, $this->id);
			}

			$con->commit();

			return true;
		}
		catch(Exception $e)
		{
			$con->rollback();
			throw $e;
		}
	}

	public function copyTo($targetItem, $lastPosition=false)
	{
		$con = $this->getTable()->getConnection();

		try
		{
			$con->beginTransaction();

			$priorityToUpdate = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;

			$cloneItem = $this->copy();
			$cloneItem->priority = $priorityToUpdate;
			$cloneItem->save($con);

			if(!$lastPosition)
			{
				$this->updatePriority($priorityToUpdate, $cloneItem->id);
			}

			$cloneItem->copyFormulatedColumnsFromItem($this);

			$con->commit();

			$cloneItem->refresh(true);

			return $cloneItem;
		}
		catch(Exception $e)
		{
			$con->rollback();
			throw $e;
		}
	}

	public function copyFormulatedColumnsFromItem(PostContractRemeasurementBuildUpQuantityItem $item)
	{
		$formulatedColumnNames = PostContractRemeasurementBuildUpQuantityItemTable::getFormulatedColumnNames($this->PostContractBillItemRate->BillItem->UnitOfMeasurement);
		$edgeTable = Doctrine_Core::getTable('PostContractRemeasurementBuildUpQuantityEdge');

		foreach($formulatedColumnNames as $columnName)
		{
			$formulatedColumn = $item->getFormulatedColumnByName($columnName);
			if($formulatedColumn)
			{
				$cloneFormulatedColumn = $formulatedColumn->copy();
				$cloneFormulatedColumn->relation_id = $this->id;
				$cloneFormulatedColumn->save();

				$sql = "INSERT INTO ".$edgeTable->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
						SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".$edgeTable->getTableName()." AS old
						WHERE old.node_from = ".$formulatedColumn->id." AND old.deleted_at IS NULL";

				$edgeTable->getConnection()->fetchAssoc($sql);
			}
		}
	}

	private function updatePriority($priority, $excludeId)
	{
		$query = DoctrineQuery::create()
		->select('i.id')
		->from('PostContractRemeasurementBuildUpQuantityItem i')
		->where('i.post_contract_bill_item_rate_id = ?', $this->post_contract_bill_item_rate_id)
		->andWhere('i.bill_column_setting_id = ?', $this->bill_column_setting_id)
		->andWhere('i.type = ? ', $this->type)
		->andWhere('i.priority >= ?',$priority)
		->addOrderBy('i.priority ASC');

		$records = $query->execute();

		$priorityToUpdate = $priority + 1;

		foreach($records as $record)
		{
			if($record->id != $excludeId){
				$record->priority = $priorityToUpdate;
				$record->save();
			}
			$priorityToUpdate++;
		}
	}
}
