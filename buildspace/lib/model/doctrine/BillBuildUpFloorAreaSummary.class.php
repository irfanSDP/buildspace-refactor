<?php

/**
 * BillBuildUpFloorAreaSummary
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BillBuildUpFloorAreaSummary extends BaseBillBuildUpFloorAreaSummary
{

    const ROUNDING_TYPE_DISABLED = 1;
    const ROUNDING_TYPE_UPWARD = 2;
    const ROUNDING_TYPE_DOWNWARD = 4;
    const ROUNDING_TYPE_NEAREST_WHOLE_NUMBER = 8;
    const ROUNDING_TYPE_NEAREST_TENTH = 16;

    public function calculateTotalFloorArea()
    {
        $result = DoctrineQuery::create()->select('SUM(b.total) as total')
            ->from('BillBuildUpFloorAreaItem b')
            ->andWhere('b.bill_column_setting_id = ?', $this->bill_column_setting_id)
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $totalFloorArea = $result['total'] ? $result['total'] : 0;

        if($totalFloorArea != $this->total_floor_area)
        {
            $this->total_floor_area = $totalFloorArea;
            $this->save();
        }

        return $this->total_floor_area;
    }

    public function getTotalFloorAreaAfterConversion()
    {
        $finalFloorArea = $this->calculateTotalFloorArea();
        $conversionFactorAmount = $this->conversion_factor_amount;
        $operator = $this->conversion_factor_operator;

        if($this->apply_conversion_factor)
        {
            $exp = $finalFloorArea.$operator.$conversionFactorAmount;

            $evaluator = new EvalMath(true, true);
            $evaluator->suppress_errors = true;
            $evaluatedValue = $evaluator->evaluate($exp);

            $finalFloorArea = $evaluatedValue ? $evaluatedValue : 0;
        }

        switch($this->rounding_type)
        {
            case self::ROUNDING_TYPE_UPWARD:
                $finalFloorArea  = ceil($finalFloorArea);
                break;
            case self::ROUNDING_TYPE_DOWNWARD:
                $finalFloorArea  =  floor($finalFloorArea);
                break;
            case self::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                $finalFloorArea  =  round($finalFloorArea);
                break;
            case self::ROUNDING_TYPE_NEAREST_TENTH:
                $finalFloorArea  =  round($finalFloorArea * 10) / 10;
                break;
            default:
                $finalFloorArea  =  number_format($finalFloorArea, 2, '.', '');
        }
        

        if($finalFloorArea != $this->final_floor_area)
        {
            $this->final_floor_area = $finalFloorArea;
            $this->save();
        }

        return $this->final_floor_area;
    }

    public function save(Doctrine_Connection $conn = null)
    {
        //reset all conversion factor information when it's disabled
        if($this->apply_conversion_factor === 'false')
        {
            $this->conversion_factor_amount = 0;
            $this->conversion_factor_operator = Constants::ARITHMETIC_OPERATOR_ADDITION;
        }

        $isNew = $this->isNew();

        parent::save($conn);

        if($this->deleted_at == NULL and !$isNew)
        {
            $this->refresh();

            // update billColumnSetting Flag has buildUp
            $billColumnSetting = $this->BillColumnSetting;

            $billColumnSetting->total_floor_area_m2 = $this->final_floor_area;
            $billColumnSetting->total_floor_area_ft2 = $this->final_floor_area;
            $billColumnSetting->floor_area_has_build_up = true;
            $billColumnSetting->save($conn);
        }
    }
}
