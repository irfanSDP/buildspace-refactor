<?php

/**
 * SubPackageUnitInformationTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SubPackageUnitInformationTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object SubPackageUnitInformationTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('SubPackageUnitInformation');
    }

    public static function getOrNew($billColumnSettingId, $counter)
    {
        $typeItem = DoctrineQuery::create()
            ->select('t.id, t.bill_column_setting_id, t.counter')
            ->from('SubPackageUnitInformation t')
            ->where('t.bill_column_setting_id = ? AND t.counter = ?', array( $billColumnSettingId, $counter ))
            ->fetchOne();

        if ( !$typeItem )
        {
            $typeItem                         = new SubPackageUnitInformation();
            $typeItem->bill_column_setting_id = $billColumnSettingId;
            $typeItem->counter                = $counter;

            $typeItem->save();
        }

        return $typeItem;
    }

    public static function getUnits($projectStructureId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT s.id, s.tender_origin_id, info.counter
            FROM " . SubPackageUnitInformationTable::getInstance()->getTableName() . " info
            JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " s ON s.id = info.bill_column_setting_id
            WHERE s.project_structure_id = ".$projectStructureId."
            ORDER BY info.id ASC");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $units = array();

        foreach($items as $item)
        {
            if(!array_key_exists($item['id'], $units)) $units[$item['id']] = array('tender_origin_id' => $item['tender_origin_id'], 'billColumnSettingUnits' => array());

            $units[$item['id']]['billColumnSettingUnits'][] = $item['counter'];
        }

        return $units;
    }

    public static function flushUnits($billColumnSettingId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM ".self::getInstance()->getTableName()." t WHERE t.bill_column_setting_id = ".$billColumnSettingId);

        $stmt->execute();
    }
}