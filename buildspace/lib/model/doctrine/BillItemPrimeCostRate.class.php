<?php

/**
 * BillItemPrimeCostRate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BillItemPrimeCostRate extends BaseBillItemPrimeCostRate
{
    public function save(Doctrine_Connection $conn = null)
    {
        $isNew = $this->isNew();

        parent::save($conn);

        if($this->deleted_at == NULL and !$isNew)
        {
            $pdo = $this->getTable()->getConnection()->getDbh();
            
            //get (editor) pc rate items that are needed to be updated (supply rate not tele with original bill items supply rate)
            $stmt = $pdo->prepare("SELECT info.id
            FROM ".BillItemTable::getInstance()->getTableName()." i 
            JOIN ".EditorBillItemInfoTable::getInstance()->getTableName()." info ON i.id = info.bill_item_id
            JOIN ".EditorBillItemPrimeCostRateTable::getInstance()->getTableName()." epc ON info.id = epc.bill_item_info_id
            WHERE i.id = ".$this->bill_item_id."
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            AND epc.supply_rate <> ".$this->supply_rate);
            
            $stmt->execute();
            
            $editorPCRateItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

            if(!empty($editorPCRateItemIds))
            {                
                $records = DoctrineQuery::create()
                ->from('EditorBillItemPrimeCostRate pc')
                ->whereIn('pc.bill_item_info_id', $editorPCRateItemIds)
                ->execute();

                $editorPCRateItemIds = null;
                unset($editorPCRateItemIds);

                foreach($records as $record)
                {
                    $wastageAmount = $this->supply_rate * ($record->wastage_percentage / 100);
                    $profitAmount = ($this->supply_rate + $wastageAmount + $record->labour_for_installation + $record->other_cost) * ($record->profit_percentage / 100);

                    $record->supply_rate = $this->supply_rate;
                    $record->wastage_amount = $wastageAmount;
                    $record->profit_amount = $profitAmount;
                    $record->total = $this->supply_rate + $wastageAmount + $record->labour_for_installation + $record->other_cost + $profitAmount;

                    $record->save($conn);
                }
            }
        }
    }
}
