<?php

/**
 * Company
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Company extends BaseCompany
{
    public function getEProjectCompany()
    {
        return Doctrine_Query::create()
            ->from('EProjectCompany c')
            ->where('c.reference_id = ?',$this->reference_id)
            ->fetchOne();
    }

    public function preDelete($event)
    {
        if ( count($this->RequestForQuotations) OR count($this->SubPackages) OR count($this->AwardedSubPackages) OR count($this->SubPackageCompany) OR count($this->AwardedTenders) OR count($this->TenderCompany) )
        {
            throw new Exception('Cannot be deleted due to currently is being used in other modules.');
        }

        parent::preDelete($event);
    }

    public function getSubPackageTotalBySubPackageId($subPackageId)
    {
        return CompanyTable::getSubPackageTotalBySubPackageIdAndCompanyId($subPackageId, $this->id);
    }

    public function getTenderTotalByProjectId($projectId)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(b.grand_total), 0) AS total
        FROM ".TenderCompanyTable::getInstance()->getTableName()." xref
        JOIN ".TenderBillElementGrandTotalTable::getInstance()->getTableName()." b ON b.tender_company_id = xref.id
        WHERE xref.company_id = ".$this->id." AND xref.project_structure_id = ".$projectId." AND b.grand_total <> 0");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public function getTenderTotalByTenderAlternative(TenderAlternative $tenderAlternative)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(b.grand_total), 0) AS total
        FROM ".TenderCompanyTable::getInstance()->getTableName()." xref
        JOIN ".TenderBillElementGrandTotalTable::getInstance()->getTableName()." b ON b.tender_company_id = xref.id
        JOIN " . BillElementTable::getInstance()->getTableName() . " e ON b.bill_element_id = e.id
        JOIN ".TenderAlternativeBillTable::getInstance()->getTableName()." tax ON e.project_structure_id = tax.project_structure_id
        JOIN ".TenderAlternativeTable::getInstance()->getTableName()." ta ON tax.tender_alternative_id = ta.id
        WHERE xref.company_id = ".$this->id." AND xref.project_structure_id = ".$tenderAlternative->project_structure_id." AND b.grand_total <> 0
        AND ta.id = ".$tenderAlternative->id." AND ta.deleted_at IS NULL AND ta.project_revision_deleted_at IS NULL
        AND e.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public function getEditorBillItems(BillElement $element)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $bill = $element->ProjectStructure;

        $rates                            = array();
        $quantityPerUnitByColumns         = array();
        $billItemTypeReferences           = array();
        $billItemTypeRefFormulatedColumns = array();

        $stmt = $pdo->prepare("SELECT i.id, i.description, i.type, i.lft, i.level,
            COALESCE(info.grand_total_quantity, 0) AS grand_total_quantity, COALESCE(info.grand_total, 0) AS grand_total,
            i.bill_ref_element_no, i.bill_ref_page_no, i.bill_ref_char, uom.id AS uom_id, uom.symbol AS uom_symbol,
            i.note, i.project_revision_id, i.project_revision_deleted_at, r.version,
            pc.supply_rate AS pc_supply_rate, pc.wastage_percentage AS pc_wastage_percentage,
            pc.wastage_amount AS pc_wastage_amount, pc.labour_for_installation AS pc_labour_for_installation,
            pc.other_cost AS pc_other_cost, pc.profit_percentage AS pc_profit_percentage,
            pc.profit_amount AS pc_profit_amount, pc.total AS pc_total
            FROM " . BillItemTable::getInstance()->getTableName() . " i
            LEFT JOIN " . EditorBillItemInfoTable::getInstance()->getTableName() . " info ON info.bill_item_id = i.id AND info.company_id = ".$this->id."
            LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON i.uom_id = uom.id AND uom.deleted_at IS NULL
            LEFT JOIN " . EditorBillItemPrimeCostRateTable::getInstance()->getTableName() . " pc ON info.id = pc.bill_item_info_id
            JOIN " . ProjectRevisionTable::getInstance()->getTableName() . " r ON i.project_revision_id = r.id
            WHERE i.element_id = " . $element->id . " AND r.project_structure_id = ".$bill->root_id." AND r.locked_status IS TRUE
            AND i.deleted_at IS NULL AND r.deleted_at IS NULL
            ORDER BY i.priority, i.lft, i.level");

        $stmt->execute();

        $billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("SELECT itm.id, ifc.relation_id, ifc.final_value, ifc.value, ifc.linked
            FROM " . EditorBillItemFormulatedColumnTable::getInstance()->getTableName() . " ifc
            JOIN " . EditorBillItemInfoTable::getInstance()->getTableName() . " i ON i.id = ifc.relation_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " itm ON itm.id = i.bill_item_id
            WHERE i.company_id = ".$this->id." AND ifc.column_name = '".BillItem::FORMULATED_COLUMN_RATE."'
            AND itm.element_id = " . $element->id . " AND itm.deleted_at IS NULL
            AND ifc.final_value <> 0 AND ifc.deleted_at IS NULL");

        $stmt->execute();

        $rates = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_UNIQUE|PDO::FETCH_ASSOC);

        $billItemIds = Utilities::arrayValueRecursive('id', $billItems);

        $implodedItemIds = null;

        if (!empty($billItems) and is_array($billItemIds) and !empty($billItemIds))
        {
            $implodedItemIds = implode(',', $billItemIds);

            foreach ( $bill->BillColumnSettings as $column )
            {
                $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                $stmt = $pdo->prepare($s = "SELECT r.bill_item_id, COALESCE(fc.final_value, 0) AS value
                FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
                JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
                WHERE r.bill_item_id IN (" . $implodedItemIds . ") AND r.bill_column_setting_id = " . $column->id . "
                AND r.include IS TRUE AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0
                AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

                //sfContext::getInstance()->getLogger()->err("Debug-> {$s}");

                $stmt->execute();

                $originalQuantities = $stmt->fetchAll(PDO::FETCH_COLUMN | PDO::FETCH_GROUP);

                $quantityPerUnitByColumns[$column->id] = $originalQuantities;

                $stmt = $pdo->prepare("SELECT r.id, r.bill_item_id, r.include, r.total_quantity
                    FROM " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r
                    WHERE r.bill_item_id IN (" . $implodedItemIds . ") AND r.bill_column_setting_id = " . $column->id . "
                    AND r.deleted_at IS NULL");

                $stmt->execute();

                $billItemTypeRefs = $stmt->fetchAll(PDO::FETCH_ASSOC);

                $billItemTypeRefIds = count($billItemTypeRefs) > 0 ? new SplFixedArray(count($billItemTypeRefs)) : null;

                foreach ( $billItemTypeRefs as $idx => $billItemTypeReference )
                {
                    if ( !array_key_exists($column->id, $billItemTypeReferences) )
                    {
                        $billItemTypeReferences[$column->id] = array();
                    }

                    $billItemTypeReferences[$column->id][$billItemTypeReference['bill_item_id']] = $billItemTypeReference;

                    $billItemTypeRefIds[$idx] = $billItemTypeReference['id'];
                }

                if ( $billItemTypeRefIds instanceof SplFixedArray )
                {
                    $stmt = $pdo->prepare("SELECT fc.relation_id, fc.value, fc.final_value, fc.column_name
                        FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
                        WHERE fc.relation_id IN (" . implode(',', $billItemTypeRefIds->toArray()) . ")
                        AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0 AND fc.deleted_at IS NULL"
                    );

                    $stmt->execute();

                    $billItemTypeRefFormulatedColumnFetch = $stmt->fetchAll(PDO::FETCH_ASSOC);

                    foreach ( $billItemTypeRefFormulatedColumnFetch as $fc )
                    {
                        if ( !array_key_exists($fc['relation_id'], $billItemTypeRefFormulatedColumns) )
                        {
                            $billItemTypeRefFormulatedColumns[$fc['relation_id']] = array();
                        }

                        array_push($billItemTypeRefFormulatedColumns[$fc['relation_id']], $fc);

                        unset( $fc );
                    }

                    unset( $billItemTypeRefFormulatedColumnFetch );
                }

                unset( $billItemTypeRefs );

                //this is to fix issue when weirdly the LS qty for the editor wasn't set to 1 T1063
                $column->setEditorBillItemTypeReferenceQtyForLS($this, $element);
            }
        }

        $stmt = $pdo->prepare("SELECT t.id, t.bill_column_setting_id, i.bill_item_id, itm.type AS bill_item_type, t.quantity_per_unit, t.total_quantity, t.grand_total
            FROM " . EditorBillItemTypeReferenceTable::getInstance()->getTableName() . " t
            JOIN " . EditorBillItemInfoTable::getInstance()->getTableName() . " i ON i.id = t.bill_item_info_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " itm ON itm.id = i.bill_item_id
            WHERE i.company_id = ".$this->id." AND itm.element_id = " . $element->id . "
            AND itm.deleted_at IS NULL");

        $stmt->execute();

        $editorBillItemTypeRefRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $editorBillItemTypeReferences = [];

        foreach ( $editorBillItemTypeRefRecords as $record )
        {
            if ( !array_key_exists($record['bill_column_setting_id'], $editorBillItemTypeReferences) )
            {
                $editorBillItemTypeReferences[$record['bill_column_setting_id']] = [];
            }

            $editorBillItemTypeReferences[$record['bill_column_setting_id']][$record['bill_item_id']] = $record;
        }

        $stmt = $pdo->prepare("SELECT i.bill_item_id, i.description, i.uom_id AS uom_id, uom.symbol AS uom_symbol
        FROM " . EditorBillItemNotListedTable::getInstance()->getTableName() . " i
        JOIN " . BillItemTable::getInstance()->getTableName() . " itm ON itm.id = i.bill_item_id
        LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON i.uom_id = uom.id AND uom.deleted_at IS NULL
        WHERE i.company_id = ".$this->id." AND itm.element_id = " . $element->id . "
        AND itm.deleted_at IS NULL");

        $stmt->execute();

        $editorNotListedItems = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_UNIQUE|PDO::FETCH_ASSOC);

        return [$billItems, $rates, $quantityPerUnitByColumns, $billItemTypeReferences, $billItemTypeRefFormulatedColumns, $editorBillItemTypeReferences, $editorNotListedItems];
    }

    /*
     * this function is to reset tenderer bill item (except not listed item) qty to the original bill item qty.
     * The orignal item qty might change during tendering and it needs to be recalibrate with the EditorBillItemTypeReference table
     * This will also solve issue where users change between Qty 1/2 (remeasurement) in original bills
     */
    public function recalibrateEditorItemQty(BillElement $element)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();
        $bill = $element->ProjectStructure;

        $stmt = $pdo->prepare("SELECT i.id FROM " . BillItemTable::getInstance()->getTableName() . " i
            JOIN " . ProjectRevisionTable::getInstance()->getTableName() . " r ON i.project_revision_id = r.id
            WHERE i.element_id = " . $element->id . "
            AND i.type <> ".BillItem::TYPE_HEADER." AND i.type <> ".BillItem::TYPE_NOID." AND i.type <> ".BillItem::TYPE_HEADER_N."  AND i.type <> ".BillItem::TYPE_ITEM_NOT_LISTED."
            AND r.project_structure_id = ".$bill->root_id." AND r.locked_status IS TRUE
            AND i.deleted_at IS NULL AND r.deleted_at IS NULL
            ORDER BY i.priority, i.lft, i.level");

        $stmt->execute();

        $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        $billItemTypeReferences = [];
        $quantityPerUnitByColumns = [];

        if(!empty($billItemIds))
        {
            $implodedItemIds = implode(',', $billItemIds);

            foreach ( $bill->BillColumnSettings as $column )
            {
                $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                $stmt = $pdo->prepare($s = "SELECT r.bill_item_id, COALESCE(fc.final_value, 0) AS value
                FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
                JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
                WHERE r.bill_item_id IN (" . $implodedItemIds . ") AND r.bill_column_setting_id = " . $column->id . "
                AND r.include IS TRUE AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0
                AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

                $stmt->execute();

                $originalQuantities = $stmt->fetchAll(PDO::FETCH_COLUMN | PDO::FETCH_GROUP);

                $quantityPerUnitByColumns[$column->id] = $originalQuantities;

                $stmt = $pdo->prepare("SELECT r.id, r.bill_item_id, r.include, r.total_quantity
                    FROM " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r
                    WHERE r.bill_item_id IN (" . $implodedItemIds . ") AND r.bill_column_setting_id = " . $column->id . "
                    AND r.deleted_at IS NULL");

                $stmt->execute();

                $billItemTypeRefs = $stmt->fetchAll(PDO::FETCH_ASSOC);

                foreach ( $billItemTypeRefs as $idx => $billItemTypeReference )
                {
                    if ( !array_key_exists($column->id, $billItemTypeReferences) )
                    {
                        $billItemTypeReferences[$column->id] = [];
                    }

                    $billItemTypeReferences[$column->id][$billItemTypeReference['bill_item_id']] = $billItemTypeReference;
                }
            }
        }
        
        $stmt = $pdo->prepare("SELECT t.id, t.bill_column_setting_id, i.id AS item_info_id, i.bill_item_id, itm.type AS bill_item_type, t.quantity_per_unit, t.total_quantity, t.grand_total
            FROM " . EditorBillItemTypeReferenceTable::getInstance()->getTableName() . " t
            JOIN " . EditorBillItemInfoTable::getInstance()->getTableName() . " i ON i.id = t.bill_item_info_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " itm ON itm.id = i.bill_item_id
            WHERE i.company_id = ".$this->id." AND itm.element_id = " . $element->id . "
            AND itm.deleted_at IS NULL");

        $stmt->execute();

        $editorBillItemTypeRefRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $recalibrate = false;
        $recalibrateData = [];
        
        foreach($editorBillItemTypeRefRecords as $record )
        {
            if($record['bill_item_type'] != BillItem::TYPE_ITEM_NOT_LISTED && array_key_exists($record['bill_column_setting_id'], $billItemTypeReferences) && array_key_exists($record['bill_item_id'], $billItemTypeReferences[$record['bill_column_setting_id']]))
            {
                $billItemTypeRef = $billItemTypeReferences[$record['bill_column_setting_id']][$record['bill_item_id']];

                if ( array_key_exists($record['bill_column_setting_id'], $quantityPerUnitByColumns) && array_key_exists($record['bill_item_id'], $quantityPerUnitByColumns[$record['bill_column_setting_id']]) &&
                ($billItemTypeRef['total_quantity'] != $record['total_quantity'] || $quantityPerUnitByColumns[$record['bill_column_setting_id']][$record['bill_item_id']][0] != $record['quantity_per_unit']))
                {
                    if(!array_key_exists($record['item_info_id'], $recalibrateData))
                    {
                        $recalibrateData[$record['item_info_id']] = [];
                    }

                    $recalibrateData[$record['item_info_id']][$record['id']] = [
                        'quantity_per_unit' => $quantityPerUnitByColumns[$record['bill_column_setting_id']][$record['bill_item_id']][0],
                        'total_quantity' => $billItemTypeRef['total_quantity']
                    ];

                    $recalibrate = true;
                }
            }
        }

        unset($billItemIds, $quantityPerUnitByColumns, $editorBillItemTypeRefRecords);

        if($recalibrate)
        {
            $stmt = $pdo->prepare("SELECT i.id, ifc.relation_id, ifc.final_value
            FROM " . EditorBillItemFormulatedColumnTable::getInstance()->getTableName() . " ifc
            JOIN " . EditorBillItemInfoTable::getInstance()->getTableName() . " i ON i.id = ifc.relation_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " itm ON itm.id = i.bill_item_id
            WHERE i.company_id = ".$this->id." AND ifc.column_name = '".BillItem::FORMULATED_COLUMN_RATE."'
            AND itm.element_id = " . $element->id . "
            AND i.id IN (".implode(',', array_keys($recalibrateData)).") AND itm.deleted_at IS NULL
            AND ifc.final_value <> 0 AND ifc.deleted_at IS NULL");

            $stmt->execute();

            $rates = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_UNIQUE|PDO::FETCH_ASSOC);

            $editorTypeRefParams = [
                'quantity_per_unit' =>[],
                'total_quantity' => [],
                'grand_total' => []
            ];

            foreach($recalibrateData as $billItemInfoId => $record)
            {
                $itemInfoGrandTotal = 0;
                $itemInfoGrandTotalQty = 0;
                foreach($record as $editorTypeRefId => $data)
                {
                    $editorTypeRefParams['quantity_per_unit'][$editorTypeRefId] = $data['quantity_per_unit'];
                    $editorTypeRefParams['total_quantity'][$editorTypeRefId] = $data['total_quantity'];
                    $editorTypeRefParams['grand_total'][$editorTypeRefId] = (array_key_exists($billItemInfoId, $rates)) ? $rates[$billItemInfoId]['final_value'] * $data['total_quantity'] : 0;
                }
            }

            unset($recalibrateData, $rates);

            try
            {
                $pdo->beginTransaction();

                $sql = Utilities::bulkUpdateSqlGenerator($editorTypeRefParams, EditorBillItemTypeReferenceTable::getInstance()->getTableName(), 'id');
                $stmt = $pdo->prepare($sql);
                $stmt->execute();

                $pdo->commit();
            }
            catch (Exception $e)
            {
                $pdo->rollBack();
                return false;
            }

            return EditorBillItemInfoTable::recalculateGrandTotalQtyByCompany($this, $element);
        }

        return false;
    }

    public function setInitialEditorBillItemsGrandTotalByProject(ProjectStructure $project)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT bill.id, pc.bill_item_id, pc.supply_rate
        FROM ".BillItemPrimeCostRateTable::getInstance()->getTableName()." pc
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON pc.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." bill ON e.project_structure_id = bill.id
        WHERE bill.root_id = ".$project->id." AND bill.type = ".ProjectStructure::TYPE_BILL." AND i.type = ".BillItem::TYPE_ITEM_PC_RATE."
        AND i.id NOT IN (SELECT info.bill_item_id
            FROM ".EditorBillItemInfoTable::getInstance()->getTableName()." info
            JOIN ".EditorBillItemPrimeCostRateTable::getInstance()->getTableName()." epc ON epc.bill_item_info_id = info.id
            JOIN ".BillItemTable::getInstance()->getTableName()." i2 ON info.bill_item_id = i2.id
            JOIN ".BillElementTable::getInstance()->getTableName()." e2 ON i2.element_id = e2.id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." bill2 ON e2.project_structure_id = bill2.id
            WHERE info.company_id = ".$this->id." AND bill2.root_id = ".$project->id."
            AND bill2.type = ".ProjectStructure::TYPE_BILL." AND i2.type = ".BillItem::TYPE_ITEM_PC_RATE."
            AND i2.deleted_at IS NULL AND e2.deleted_at IS NULL AND bill2.deleted_at IS NULL)
        AND pc.deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL AND bill.deleted_at IS NULL");

        $stmt->execute();

        $pcRateItemsWithoutEditorBillInfo = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        foreach($pcRateItemsWithoutEditorBillInfo as $billId => $pcRateItems)
        {
            $bill = Doctrine_Core::getTable('ProjectStructure')->find($billId);

            foreach($pcRateItems as $pcRateItem)
            {
                $billItemInfo = new EditorBillItemInfo();
                $billItemInfo->bill_item_id = $pcRateItem['bill_item_id'];
                $billItemInfo->company_id = $this->id;

                $billItemInfo->save();

                foreach ( $bill->BillColumnSettings as $column )
                {
                    $billItemTypeRef       = BillItemTypeReferenceTable::getByItemIdAndColumnId($pcRateItem['bill_item_id'], $column->id, Doctrine_Core::HYDRATE_ARRAY);
                    $editorBillItemTypeRef = EditorBillItemTypeReferenceTable::getByItemIdAndColumnId($billItemInfo->id, $column->id);

                    if ( !$editorBillItemTypeRef )
                    {
                        $quantity      = 0;
                        $totalQuantity = 0;

                        if($billItemTypeRef)
                        {
                            $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                            $fc            = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef['id'], $quantityFieldName, Doctrine_Core::HYDRATE_ARRAY);
                            $quantity      = $fc ? $fc['final_value'] : 0;
                            $totalQuantity = $billItemTypeRef['total_quantity'];
                        }

                        $editorBillItemTypeRef = new EditorBillItemTypeReference();
                        $editorBillItemTypeRef->bill_item_info_id = $billItemInfo->id;
                        $editorBillItemTypeRef->bill_column_setting_id = $column->id;
                        $editorBillItemTypeRef->quantity_per_unit = $quantity;
                        $editorBillItemTypeRef->total_quantity = $totalQuantity;
                    }

                    $editorBillItemTypeRef->save();
                }

                $editorPrimeCostRate =  new EditorBillItemPrimeCostRate();
                $editorPrimeCostRate->bill_item_info_id = $billItemInfo;
                $editorPrimeCostRate->supply_rate = $pcRateItem['supply_rate'];
                $editorPrimeCostRate->total = $pcRateItem['supply_rate'];

                $editorPrimeCostRate->save();
            }
        }

        $stmt = $pdo->prepare("SELECT bill.id, i.id AS bill_item_id, fc.final_value
        FROM ".BillItemFormulatedColumnTable::getInstance()->getTableName()." fc
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON fc.relation_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." bill ON e.project_structure_id = bill.id
        WHERE fc.column_name = '".BillItem::FORMULATED_COLUMN_RATE."' AND bill.root_id = ".$project->id."
        AND bill.type = ".ProjectStructure::TYPE_BILL." AND i.type = ".BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE."
        AND i.id NOT IN (SELECT info.bill_item_id
            FROM ".EditorBillItemInfoTable::getInstance()->getTableName()." info
            JOIN ".BillItemTable::getInstance()->getTableName()." i2 ON info.bill_item_id = i2.id
            JOIN ".BillElementTable::getInstance()->getTableName()." e2 ON i2.element_id = e2.id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." bill2 ON e2.project_structure_id = bill2.id
            WHERE info.company_id = ".$this->id." AND bill2.root_id = ".$project->id."
            AND bill2.type = ".ProjectStructure::TYPE_BILL." AND i2.type = ".BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE."
            AND i2.deleted_at IS NULL AND e2.deleted_at IS NULL AND bill2.deleted_at IS NULL)
        AND fc.deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL AND bill.deleted_at IS NULL");

        $stmt->execute();

        $lumpSumExcludeItemsWithoutEditorBillInfo = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        foreach($lumpSumExcludeItemsWithoutEditorBillInfo as $billId => $lumpSumExcludeItems)
        {
            $bill = Doctrine_Core::getTable('ProjectStructure')->find($billId);

            foreach($lumpSumExcludeItems as $lumpSumExcludeItem)
            {
                $billItemInfo = new EditorBillItemInfo();
                $billItemInfo->bill_item_id = $lumpSumExcludeItem['bill_item_id'];
                $billItemInfo->company_id = $this->id;

                $billItemInfo->save();

                foreach ( $bill->BillColumnSettings as $column )
                {
                    $billItemTypeRef       = BillItemTypeReferenceTable::getByItemIdAndColumnId($lumpSumExcludeItem['bill_item_id'], $column->id, Doctrine_Core::HYDRATE_ARRAY);
                    $editorBillItemTypeRef = EditorBillItemTypeReferenceTable::getByItemIdAndColumnId($billItemInfo->id, $column->id);

                    if ( !$editorBillItemTypeRef )
                    {
                        $quantity      = 0;
                        $totalQuantity = 0;

                        if($billItemTypeRef)
                        {
                            $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                            $fc            = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef['id'], $quantityFieldName, Doctrine_Core::HYDRATE_ARRAY);
                            $quantity      = $fc ? $fc['final_value'] : 0;
                            $totalQuantity = $billItemTypeRef['total_quantity'];
                        }

                        $editorBillItemTypeRef = new EditorBillItemTypeReference();
                        $editorBillItemTypeRef->bill_item_info_id = $billItemInfo->id;
                        $editorBillItemTypeRef->bill_column_setting_id = $column->id;
                        $editorBillItemTypeRef->quantity_per_unit = $quantity;
                        $editorBillItemTypeRef->total_quantity = $totalQuantity;
                    }

                    $editorBillItemTypeRef->save();
                }

                $formulatedColumn = EditorBillItemFormulatedColumnTable::getInstance()->getByRelationIdAndColumnName($billItemInfo->id, BillItem::FORMULATED_COLUMN_RATE);

                $formulatedColumn->setFormula($lumpSumExcludeItem['final_value']);

                $formulatedColumn->linked = false;

                $formulatedColumn->save();

                $formulatedColumn->refresh();

                $billItemInfo->updateBillItemTotalColumns();
            }
        }
    }

    /* This Function return Array of Element Sum By Element Id */
    public function getTotalItemRateByAndBillColumnSettingIdGroupByElement(ProjectStructure $bill, BillColumnSetting $billColumnSetting)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        //Get Sum of original Quantity and Sum of After Markup By Column Setting
        $stmt = $pdo->prepare("SELECT element.id, COALESCE(SUM(type.grand_total),0) AS grand_total
            FROM " . BillElementTable::getInstance()->getTableName() . " AS element
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON item.element_id = element.id
            JOIN " . EditorBillItemInfoTable::getInstance()->getTableName() . " info ON info.bill_item_id = item.id
            LEFT JOIN " . EditorBillItemTypeReferenceTable::getInstance()->getTableName() . " AS type ON type.bill_item_info_id = info.id
            WHERE item.project_revision_deleted_at IS NULL AND info.company_id = ".$this->id."
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND type.bill_column_setting_id = " . $billColumnSetting->id . "
            AND element.project_structure_id = " . $bill->id . " AND element.deleted_at IS NULL
            AND item.deleted_at IS NULL GROUP BY element.id ORDER BY element.id");

        $stmt->execute();

        $elementToRates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        /* fetch and loop element */
        $elements = DoctrineQuery::create()
            ->select('e.id')
            ->from('BillElement e')
            ->where('e.project_structure_id = ?', $bill->id)
            ->addOrderBy('e.priority ASC')
            ->fetchArray();

        $grandTotalElement = 0;

        foreach ( $elements as $element )
        {
            if ( array_key_exists($element['id'], $elementToRates) )
            {
                $grandTotalElement += $elementToRates[$element['id']];
            }
            else
            {
                $elementToRates[$element['id']] = 0;
            }

            unset( $element );
        }

        unset( $elements );

        return [
            'elementToRates'    => $elementToRates,
            'grandTotalElement' => $grandTotalElement
        ];
    }

    public function getElementGrandTotalByBillIdGroupByElement($billId)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT element.id, COALESCE(SUM(info.grand_total),0) AS grand_total
            FROM " . BillElementTable::getInstance()->getTableName() . " as element
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON item.element_id = element.id
            JOIN " . EditorBillItemInfoTable::getInstance()->getTableName() . " info ON info.bill_item_id = item.id
            WHERE item.project_revision_deleted_at IS NULL AND info.company_id = ".$this->id."
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND element.project_structure_id = " . $billId . "
            AND item.deleted_at IS NULL AND info.grand_total <> 0
            AND element.deleted_at IS NULL GROUP BY element.id ORDER BY element.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public function getEditorOverallTotalByBillId($billId)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        // We'll fetch and SUM the latest grand_total from Bill Item
        $stmt = $pdo->prepare("SELECT COALESCE(SUM(info.grand_total),0) AS total_rate
            FROM " . EditorBillItemInfoTable::getInstance()->getTableName() . " info
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON info.bill_item_id = item.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            WHERE info.company_id = ".$this->id." AND element.project_structure_id = " . $billId . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public function getEditorOverallTotalForProject($projectId)
    {
        $con = $this->getTable()->getConnection();
        $pdo = $con->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(info.grand_total),0) AS total_rate
            FROM " . EditorBillItemInfoTable::getInstance()->getTableName() . " info
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON info.bill_item_id = item.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            WHERE info.company_id = ".$this->id." AND bill.root_id = " . $projectId . " AND bill.type = " . ProjectStructure::TYPE_BILL . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL AND element.deleted_at IS NULL AND bill.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public function getEditorOverallTotalForProjectWithoutPrimeCostAndProvisionalBill($projectId)
    {
        $con = $this->getTable()->getConnection();
        $pdo = $con->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(info.grand_total),0) AS total_rate
            FROM " . EditorBillItemInfoTable::getInstance()->getTableName() . " info
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON info.bill_item_id = item.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            JOIN " . BillTypeTable::getInstance()->getTableName() . " bt ON bt.project_structure_id = bill.id
            WHERE info.company_id = ".$this->id." AND bill.root_id = ".$projectId."
            AND bill.type = " . ProjectStructure::TYPE_BILL . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND bt.type <> " . BillType::TYPE_PRIMECOST."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND bill.deleted_at IS NULL
            AND bt.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public function getOverallTotalForTenderAlternatives(ProjectStructure $project)
    {
        $con = $this->getTable()->getConnection();
        $pdo = $con->getDbh();

        $stmt = $pdo->prepare("SELECT ta.id, COALESCE(SUM(info.grand_total),0) AS total
            FROM " . EditorBillItemInfoTable::getInstance()->getTableName() . " info
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON info.bill_item_id = item.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS p ON bill.root_id = p.id
            JOIN " . ProjectRevisionTable::getInstance()->getTableName() . " AS r ON r.project_structure_id = p.id
            JOIN " . TenderAlternativeTable::getInstance()->getTableName() . " AS ta ON ta.project_structure_id = p.id AND ta.project_revision_id = r.id
            JOIN " . TenderAlternativeBillTable::getInstance()->getTableName() . " AS tax ON tax.tender_alternative_id = ta.id AND tax.project_structure_id = bill.id
            WHERE info.company_id = ".$this->id." AND p.id = " . $project->id . " AND bill.type = " . ProjectStructure::TYPE_BILL . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND ta.deleted_at IS NULL AND ta.project_revision_deleted_at IS NULL
            AND r.deleted_at IS NULL AND r.locked_status IS TRUE AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL AND element.deleted_at IS NULL AND bill.deleted_at IS NULL AND p.deleted_at IS  NULL
            GROUP BY ta.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public function getEditorProjectInformationByProject(ProjectStructure $project)
    {
        return DoctrineQuery::create()->select('*')
            ->from('EditorProjectInformation i')
            ->where('i.project_structure_id = ?', $project->id)
            ->andWhere('i.company_id = ?', $this->id)
            ->limit(1)
            ->fetchOne();
    }

    public function getEditorBillItemInfoByBillItem(BillItem $billItem)
    {
        return DoctrineQuery::create()
            ->from('EditorBillItemInfo i')
            ->where('i.bill_item_id = ?', $billItem->id)
            ->andWhere('i.company_id = ?', $this->id)
            ->limit(1)
            ->fetchOne();
    }

    public function getEditorBillItemNotListedByBillItem(BillItem $billItem)
    {
        return DoctrineQuery::create()
            ->from('EditorBillItemNotListed i')
            ->where('i.bill_item_id = ?', $billItem->id)
            ->andWhere('i.company_id = ?', $this->id)
            ->limit(1)
            ->fetchOne();
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('EProjectCompany', array(
            'local' => 'reference_id',
            'foreign' => 'reference_id'));
    }
}
