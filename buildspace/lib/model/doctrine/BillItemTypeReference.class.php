<?php

/**
 * BillItemTypeReference
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BillItemTypeReference extends BaseBillItemTypeReference
{
    const FORMULATED_COLUMN_QTY_PER_UNIT               = 'quantity_per_unit';
    const FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT = 'quantity_per_unit_remeasurement';

    const GRAND_TOTAL                                  = 'grand_total';
    const GRAND_TOTAL_AFTER_MARKUP                     = 'grand_total_after_markup';

    public $itemContainerAfterCopy = array();
    public $itemFormulatedColumnContainerAfterCopy = array();

    public function getFormulatedColumnByName($columnName)
    {
        return BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($this->id, $columnName);
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $isNew = $this->isNew();
        $affectedItemList = null;

        parent::save($conn);

        if($this->deleted_at == NULL and !$isNew and !$this->include)
        {
            $this->resetValues();
            $affectedBillItemTypeReferences = $this->deleteFormulatedColumns($conn);
            $affectedItemList['affected_bill_item_type_references'] = $affectedBillItemTypeReferences;

            return $affectedItemList;
        }
    }

    public function deleteFormulatedColumns(Doctrine_Connection $conn = null)
    {
        $billItemTypeRefIds = array();
        $affectedItems = array();
        $formulatedColumnIds = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            foreach($this->FormulatedColumns as $formulatedColumn)
            {
                $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                if(is_array($nodes))
                {
                    foreach($nodes as $node)
                    {
                        if($referencedNode = Doctrine_Core::getTable('BillItemTypeReferenceFormulatedColumn')->find($node['node_from']))
                        {
                            $pattern = '/\b(R'.$this->id.')\b/i';
                            $value = preg_replace($pattern, '#REF!', $referencedNode->value);

                            $referencedNode->setFormula($value);

                            $referencedNode->save();

                            $billItemTypeRefIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                        }
                    }
                }

                $formulatedColumn->delete($conn);

                $formulatedColumnIds[] = $formulatedColumn->id;
            }

            if(count($formulatedColumnIds) > 0)
            {
                //now we can remove all edges after we've updated related nodes
                Doctrine_Query::create()
                    ->delete('BillItemTypeReferenceEdge e')
                    ->whereIn('e.node_from', $formulatedColumnIds)
                    ->execute();

                Doctrine_Query::create()
                    ->delete('BillItemTypeReferenceEdge e')
                    ->whereIn('e.node_to', $formulatedColumnIds)
                    ->execute();
            }

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
            throw $e;
        }

        $elementMarkupPercentage = $this->BillItem->Element->getFormulatedColumnByName(BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE, Doctrine_Core::HYDRATE_ARRAY);
        $elementMarkupPercentage = $elementMarkupPercentage ? $elementMarkupPercentage['final_value'] : 0;

        foreach($billItemTypeRefIds as $billItemTypeRefId)
        {
            $affectedItem = array();
            $billItemTypeRef = Doctrine_Core::getTable('BillItemTypeReference')->find($billItemTypeRefId);

            $billItemTypeRef->quantity_per_unit_difference = 0;
            $billItemTypeRef->save();

            $affectedBillItem = $billItemTypeRef->BillItem;
            $affectedBillItem->updateBillItemTotalColumns();
            $affectedBillItem->refresh();

            $column = $billItemTypeRef->BillColumnSetting;
            $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;
            $billMarkupSetting = $column->ProjectStructure->BillMarkupSetting;

            $rateAfterMarkup = BillItemTable::calculateRateAfterMarkupById($affectedBillItem->id, array(
                'bill_markup_enabled' => $billMarkupSetting->bill_markup_enabled,
                'bill_markup_percentage' => $billMarkupSetting->bill_markup_percentage,
                'element_markup_enabled' => $billMarkupSetting->element_markup_enabled,
                'element_markup_percentage' => $elementMarkupPercentage,
                'item_markup_enabled' => $billMarkupSetting->item_markup_enabled,
                'rounding_type' => $billMarkupSetting->rounding_type
            ));

            $affectedItem['id'] = $affectedBillItem->id;
            $affectedItem['grand_total_quantity']  =  $affectedBillItem->grand_total_quantity;
            $affectedItem['grand_total'] = $affectedBillItem->grand_total;
            $affectedItem['grand_total_after_markup'] = $affectedBillItem->getGrandTotalAfterMarkup();

            $quantity = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRefId, $quantityFieldName, Doctrine_Core::HYDRATE_ARRAY);
            $totalPerUnit = $quantity ? $rateAfterMarkup * $quantity['final_value'] : 0;
            $total = $totalPerUnit * $column->quantity;

            $affectedItem[$column->id.'-quantity_per_unit_difference'] = $billItemTypeRef->quantity_per_unit_difference;
            $affectedItem[$column->id.'-total_quantity'] = $billItemTypeRef->total_quantity;
            $affectedItem[$column->id.'-total_per_unit'] = $totalPerUnit;
            $affectedItem[$column->id.'-total'] = $total;

            foreach($billItemTypeRef->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedItem[$column->id.'-'.$columnName.'-final_value'] = $formulatedColumn->final_value;
                $affectedItem[$column->id.'-'.$columnName.'-value'] = $formulatedColumn->value;
            }

            array_push($affectedItems, $affectedItem);
            unset($billItemTypeRef, $formulatedColumn);
        }

        return $affectedItems;
    }

    public function deleteFormulatedColumnByColumnName($columnName, Doctrine_Connection $conn = null)
    {
        $billItemTypeRefIds = array();
        $affectedItems = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $formulatedColumn = $this->getFormulatedColumnByName($columnName);

            if($formulatedColumn)
            {
                $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                if(is_array($nodes))
                {
                    foreach($nodes as $node)
                    {
                        if($referencedNode = Doctrine_Core::getTable('BillItemTypeReferenceFormulatedColumn')->find($node['node_from']))
                        {
                            $pattern = '/\b(R'.$this->id.')\b/i';
                            $value = preg_replace($pattern, '#REF!', $referencedNode->value);

                            $referencedNode->setFormula($value);

                            $referencedNode->save();

                            $billItemTypeRefIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                        }
                    }
                }

                $formulatedColumnId = $formulatedColumn->id;
                $stmt = $conn->getDbh()->prepare("DELETE FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." WHERE
                relation_id = ".$this->id." AND column_name = '".$columnName."'");

                $stmt->execute();

                $this->resetValues();

                //now we can remove all edges after we've updated related nodes
                $stmt = $conn->getDbh()->prepare("DELETE FROM ".BillItemTypeReferenceEdgeTable::getInstance()->getTableName()." WHERE
                node_from = ".$formulatedColumnId);
                $stmt->execute();

                $stmt = $conn->getDbh()->prepare("DELETE FROM ".BillItemTypeReferenceEdgeTable::getInstance()->getTableName()." WHERE
                node_to = ".$formulatedColumnId);
                $stmt->execute();
            }
        }
        catch(Exception $e)
        {
            throw $e;
        }

        $elementMarkupPercentage = $this->BillItem->Element->getFormulatedColumnByName(BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE, Doctrine_Core::HYDRATE_ARRAY);
        $elementMarkupPercentage = $elementMarkupPercentage ? $elementMarkupPercentage['final_value'] : 0;

        foreach($billItemTypeRefIds as $billItemTypeRefId)
        {
            $affectedItem = array();
            $billItemTypeRef = Doctrine_Core::getTable('BillItemTypeReference')->find($billItemTypeRefId);

            $billItemTypeRef->quantity_per_unit_difference = 0;
            $billItemTypeRef->save();

            $affectedBillItem = $billItemTypeRef->BillItem;
            $affectedBillItem->updateBillItemTotalColumns();
            $affectedBillItem->refresh();

            $column = $billItemTypeRef->BillColumnSetting;
            $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;
            $billMarkupSetting = $column->ProjectStructure->BillMarkupSetting;

            $rateAfterMarkup = BillItemTable::calculateRateAfterMarkupById($affectedBillItem->id, array(
                'bill_markup_enabled' => $billMarkupSetting->bill_markup_enabled,
                'bill_markup_percentage' => $billMarkupSetting->bill_markup_percentage,
                'element_markup_enabled' => $billMarkupSetting->element_markup_enabled,
                'element_markup_percentage' => $elementMarkupPercentage,
                'item_markup_enabled' => $billMarkupSetting->item_markup_enabled,
                'rounding_type' => $billMarkupSetting->rounding_type
            ));

            $affectedItem['id'] = $affectedBillItem->id;
            $affectedItem['grand_total_quantity']  =  $affectedBillItem->grand_total_quantity;
            $affectedItem['grand_total'] = $affectedBillItem->grand_total;
            $affectedItem['grand_total_after_markup'] = $affectedBillItem->getGrandTotalAfterMarkup();

            $quantity = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRefId, $quantityFieldName, Doctrine_Core::HYDRATE_ARRAY);
            $totalPerUnit = $quantity ? $rateAfterMarkup * $quantity['final_value'] : 0;
            $total = $totalPerUnit * $column->quantity;

            $affectedItem[$column->id.'-quantity_per_unit_difference'] = $billItemTypeRef->quantity_per_unit_difference;
            $affectedItem[$column->id.'-total_quantity'] = $billItemTypeRef->total_quantity;
            $affectedItem[$column->id.'-total_per_unit'] = $totalPerUnit;
            $affectedItem[$column->id.'-total'] = $total;

            foreach($billItemTypeRef->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedItem[$column->id.'-'.$columnName.'-final_value'] = $formulatedColumn->final_value;
                $affectedItem[$column->id.'-'.$columnName.'-value'] = $formulatedColumn->value;
            }

            array_push($affectedItems, $affectedItem);
            unset($billItemTypeRef, $formulatedColumn);
        }

        return $affectedItems;
    }

    /*
    * This method is used to reset/zero out amount columns
    */
    public function resetValues()
    {
        Doctrine_Query::create()
            ->update('BillItemTypeReference r')
            ->set('r.quantity_per_unit_difference', 'NULL')
            ->set('r.total_quantity', 0)
            ->set('r.grand_total', 0)
            ->set('r.grand_total_after_markup', 0)
            ->where('r.id = ?', $this->id)
            ->execute();
    }

    public function updateTypeTotal()
    {
        $table = $this->getTable();

        $billColumnSetting = $this->BillColumnSetting->toArray();
        $billMarkupSetting = $this->BillColumnSetting->ProjectStructure->BillMarkupSetting->toArray();

        $elementMarkupPercentage = 0;

        //Get Element Markup if enabled
        if($billMarkupSetting['element_markup_enabled'])
        {
            $con = $table::getInstance()->getConnection();

            $result = $con->fetchAssoc("SELECT COALESCE(c.final_value, 0) as value FROM ".BillElementFormulatedColumnTable::getInstance()->getTableName()." c
                JOIN ".BillElementTable::getInstance()->getTableName()." e ON c.relation_id = e.id
                WHERE e.id = ".$this->BillItem->element_id." AND c.column_name = '".BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
                AND c.deleted_at IS NULL AND c.final_value <> 0 AND e.deleted_at IS NULL");

            if(count($result) > 0)
                $elementMarkupPercentage = $result[0]['value'];
        }

        return $table::updateTypeTotalByBillColumnSettingAndItemId($this->bill_item_id, $billColumnSetting, array(
            'bill_markup_enabled'       => $billMarkupSetting['bill_markup_enabled'],
            'bill_markup_percentage'    => $billMarkupSetting['bill_markup_percentage'],
            'element_markup_enabled'    => $billMarkupSetting['element_markup_enabled'],
            'element_markup_percentage' => $elementMarkupPercentage,
            'item_markup_enabled'       => $billMarkupSetting['item_markup_enabled'],
            'rounding_type'             => $billMarkupSetting['rounding_type']
        ));
    }

    public function updateTotalQuantity($columnName, $quantity)
    {
        $billColumnSettingQuantity = $this->BillColumnSetting->quantity;

        $updateEditorTotal = false;

        switch($columnName)
        {
            case BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT:
                if($this->BillColumnSetting->use_original_quantity)
                {
                    $totalQuantity = $quantity * $billColumnSettingQuantity;
                    $updateEditorTotal = ($this->BillItem->type != BillItem::TYPE_ITEM_NOT_LISTED && $this->BillItem->isAddendumItem());
                }
                else
                {
                    if($remeasurementFormulatedColumn = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($this->id, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT))
                    {
                        $totalQuantity = $remeasurementFormulatedColumn->final_value * $billColumnSettingQuantity;

                    }
                    else
                    {
                        $totalQuantity = 0;
                    }
                }
                break;
            case BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT:
                if(!$this->BillColumnSetting->use_original_quantity)
                {
                    $totalQuantity = $quantity * $billColumnSettingQuantity;
                    $updateEditorTotal = ($this->BillItem->type != BillItem::TYPE_ITEM_NOT_LISTED && $this->BillItem->isAddendumItem());
                }
                else
                {
                    if($originalQtyFormulatedColumn = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($this->id, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT))
                    {
                        $totalQuantity = $originalQtyFormulatedColumn->final_value * $billColumnSettingQuantity;
                    }
                    else
                    {
                        $totalQuantity = 0;
                    }
                }
                break;
            default:
                break;
        }
        //update total qty
        $this->total_quantity = number_format($totalQuantity, 5,'.','');
        $this->save();

        if($updateEditorTotal)
        {
            $this->updateEditorBillItemTypeReferences($quantity);
        }
    }

    public function updateEditorBillItemTypeReferences($quantityPerUnit)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("UPDATE ".EditorBillItemTypeReferenceTable::getInstance()->getTableName()." r1
        SET quantity_per_unit = ".$quantityPerUnit.", total_quantity= ".$this->total_quantity."
        FROM ".EditorBillItemInfoTable::getInstance()->getTableName()." info
        JOIN ".BillItemTable::getInstance()->getTableName()." bi ON info.bill_item_id = bi.id
        WHERE info.bill_item_id = ".$this->bill_item_id." AND r1.bill_item_info_id = info.id
        AND r1.bill_column_setting_id = ".$this->bill_column_setting_id."
        AND bi.type <> ".BillItem::TYPE_ITEM_NOT_LISTED."
        AND bi.deleted_at IS NULL AND bi.deleted_at_project_revision_id IS NULL");

        $stmt->execute();

        $stmt = $pdo->prepare("UPDATE ".EditorBillItemTypeReferenceTable::getInstance()->getTableName()." r1
        SET grand_total = r1.total_quantity * fc.final_value
        FROM ".EditorBillItemInfoTable::getInstance()->getTableName()." info
        JOIN ".EditorBillItemFormulatedColumnTable::getInstance()->getTableName()." fc ON fc.relation_id = info.id
        JOIN ".BillItemTable::getInstance()->getTableName()." bi ON info.bill_item_id = bi.id
        WHERE info.bill_item_id = ".$this->bill_item_id." AND r1.bill_item_info_id = info.id
        AND r1.bill_column_setting_id = ".$this->bill_column_setting_id."
        AND bi.type <> ".BillItem::TYPE_ITEM_NOT_LISTED."
        AND bi.deleted_at IS NULL AND bi.deleted_at_project_revision_id IS NULL");

        $stmt->execute();

        $stmt = $pdo->prepare("UPDATE ".EditorBillItemInfoTable::getInstance()->getTableName()." AS info
        SET grand_total_quantity = t.sum_grand_total_qty, grand_total = t.sum_grand_total
        FROM
        (
            SELECT info.id, COALESCE(SUM(r.total_quantity), 0) sum_grand_total_qty, COALESCE(SUM(r.grand_total), 0) sum_grand_total
            FROM ".EditorBillItemTypeReferenceTable::getInstance()->getTableName()." r
            JOIN ".EditorBillItemInfoTable::getInstance()->getTableName()." info ON r.bill_item_info_id = info.id
            JOIN ".BillItemTable::getInstance()->getTableName()." bi ON info.bill_item_id = bi.id
            WHERE info.bill_item_id = ".$this->bill_item_id."
            AND bi.type <> ".BillItem::TYPE_ITEM_NOT_LISTED."
            AND bi.deleted_at IS NULL AND bi.deleted_at_project_revision_id IS NULL
            GROUP BY info.id
        ) t
        WHERE t.id = info.id");

        $stmt->execute();
    }

    public function copyFormulatedColumnsFromBillItemTypeReference(BillItemTypeReference $originBillItemTypeReference, $columnName)
    {
        array_push($this->itemContainerAfterCopy, array(
            'id' => $this->id,
            'origin' => $originBillItemTypeReference->id
        ));

        if($originFormulatedColumn = $originBillItemTypeReference->getFormulatedColumnByName($columnName))
        {
            $cloneFormulatedColumn = $this->getFormulatedColumnByName($columnName);

            $cloneFormulatedColumn = $cloneFormulatedColumn ? $cloneFormulatedColumn : new BillItemTypeReferenceFormulatedColumn();

            $cloneFormulatedColumn->column_name = $originFormulatedColumn->column_name;
            $cloneFormulatedColumn->linked = $originFormulatedColumn->linked;
            $cloneFormulatedColumn->has_build_up = $originFormulatedColumn->has_build_up;
            $cloneFormulatedColumn->value = $originFormulatedColumn->value;
            $cloneFormulatedColumn->final_value = $originFormulatedColumn->final_value;
            $cloneFormulatedColumn->relation_id = $this->id;

            $cloneFormulatedColumn->save();

            $this->updateTotalQuantity($columnName, $cloneFormulatedColumn->final_value);

            array_push($this->itemFormulatedColumnContainerAfterCopy, array(
                'id' => $cloneFormulatedColumn->id,
                'origin' => $originFormulatedColumn->id
            ));

            BillItemTypeReferenceEdgeTable::getInstance()->getConnection()->fetchAssoc("INSERT INTO ".BillItemTypeReferenceEdgeTable::getInstance()->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".BillItemTypeReferenceEdgeTable::getInstance()->getTableName()." AS old
                WHERE old.node_from = ".$originFormulatedColumn->id." AND old.deleted_at IS NULL");

            $this->updateItemRowLinkingAfterCopy();
        }
    }

    private function updateItemRowLinkingAfterCopy()
    {
        if(count($this->itemFormulatedColumnContainerAfterCopy) > 0)
        {
            $formulatedColumnIdList = array();
            $formulatedColumnOriginList = array();

            foreach($this->itemFormulatedColumnContainerAfterCopy as $list)
            {
                array_push($formulatedColumnIdList, $list['id']);
                array_push($formulatedColumnOriginList, $list['origin']);
            }

            $records = DoctrineQuery::create()->select('e.id, e.node_from, e.node_to')
                ->from('BillItemTypeReferenceEdge e')
                ->whereIn('e.node_from', $formulatedColumnIdList)
                ->andWhereIn('e.node_to', $formulatedColumnOriginList)
                ->addOrderBy('e.node_from ASC')
                ->execute();

            foreach($records as $record)
            {
                $nodeFrom = $record->NodeFrom;
                if($nodeFrom->hasCellReference())
                {
                    $value = $nodeFrom->value;
                    foreach($this->itemContainerAfterCopy as $list)
                    {
                        $pattern = '/\b(R'.$list['origin'].')\b/i';
                        $value = preg_replace($pattern, 'R'.$list['id'], $value);
                    }
                    $nodeFrom->value = $value;
                    $nodeFrom->save();
                }
                unset($nodeFrom);
            }

            $this->itemFormulatedColumnContainerAfterCopy = array();
            $this->itemContainerAfterCopy = array();
        }
    }
}
