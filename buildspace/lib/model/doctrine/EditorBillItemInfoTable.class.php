<?php

/**
 * EditorBillItemInfoTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EditorBillItemInfoTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return EditorBillItemInfoTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EditorBillItemInfo');
    }

    public static function resetEditorBillItems($billItemIds)
    {
        if(is_array($billItemIds) && !empty($billItemIds))
        {
            $pdo = self::getInstance()->getConnection()->getDbh();

            $stmt = $pdo->prepare("UPDATE ".self::getInstance()->getTableName()."
            SET grand_total = 0, grand_total_quantity = 0
            WHERE bill_item_id IN (" . implode(', ', $billItemIds) . ")");
            $stmt->execute();

            $sql = "SELECT id FROM ".self::getInstance()->getTableName()." WHERE bill_item_id IN (" . implode(', ', $billItemIds) . ")";

            $stmt = $pdo->prepare("DELETE FROM ".EditorBillItemFormulatedColumnTable::getInstance()->getTableName()."
            WHERE relation_id IN (" . $sql . ")");
            $stmt->execute();

            $stmt = $pdo->prepare("DELETE FROM ".EditorBillItemTypeReferenceTable::getInstance()->getTableName()."
            WHERE bill_item_info_id IN (" . $sql . ")");
            $stmt->execute();
        }
    }

    public static function recalculateGrandTotalQtyByCompany(Company $company,BillElement $element)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT t.id, i.id AS item_info_id, i.bill_item_id, itm.type AS bill_item_type, t.quantity_per_unit, t.total_quantity, t.grand_total
            FROM " . EditorBillItemTypeReferenceTable::getInstance()->getTableName() . " t
            JOIN " . EditorBillItemInfoTable::getInstance()->getTableName() . " i ON i.id = t.bill_item_info_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " itm ON itm.id = i.bill_item_id
            WHERE i.company_id = ".$company->id." AND itm.element_id = " . $element->id . "
            AND itm.deleted_at IS NULL");

        $stmt->execute();

        $editorBillItemTypeRefRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if(empty($editorBillItemTypeRefRecords))
        {
            return false;
        }

        $recordsToUpdate = [
            'grand_total_quantity'=> [],
            'grand_total' => []
        ];

        foreach($editorBillItemTypeRefRecords as $record)
        {
            if(!array_key_exists($record['item_info_id'], $recordsToUpdate['grand_total_quantity']))
            {
                $recordsToUpdate['grand_total_quantity'][$record['item_info_id']] = 0;
            }

            if(!array_key_exists($record['item_info_id'], $recordsToUpdate['grand_total']))
            {
                $recordsToUpdate['grand_total'][$record['item_info_id']] = 0;
            }

            $recordsToUpdate['grand_total_quantity'][$record['item_info_id']] += $record['total_quantity'];
            $recordsToUpdate['grand_total'][$record['item_info_id']] += $record['grand_total'];
        }

        try
        {
            $pdo->beginTransaction();

            $sql = Utilities::bulkUpdateSqlGenerator($recordsToUpdate, self::getInstance()->getTableName(), 'id');
            $stmt = $pdo->prepare($sql);
            $stmt->execute();

            $pdo->commit();

            return true;
        }
        catch (Exception $e)
        {
            $pdo->rollBack();
            return false;
        }
    }
}
