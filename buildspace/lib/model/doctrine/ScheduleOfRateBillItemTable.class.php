<?php

/**
 * ScheduleOfRateBillItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ScheduleOfRateBillItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ScheduleOfRateBillItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ScheduleOfRateBillItem');
    }

    public static function createItemFromLastRow($previousItem, $elementId, $fieldName = null, $fieldValue = null)
    {
        $item = new ScheduleOfRateBillItem();

        $item->element_id = $elementId;

        if ( $fieldName )
        {
            $columns = array_keys(self::getInstance()->getColumns());
            if (in_array($fieldName, $columns))
            {
                $fieldValue = ( $fieldName == 'uom_id' and $fieldValue == - 1 ) ? null : $fieldValue;
                $item->{'set' . sfInflector::camelize($fieldName)}($fieldValue);
            }
        }

        if ( $fieldName != 'type' )
        {
            $item->type = ScheduleOfRateBillItem::TYPE_WORK_ITEM;
        }

        $asRoot   = true;
        $priority = 0;

        if ( $previousItem )
        {
            if ( $previousItem->node->isRoot() )
            {
                $priority = $previousItem->priority + 1;
            }
            else
            {
                $asRoot = false;
                $item->node->insertAsNextSiblingOf($previousItem);

                $priority = $previousItem->priority;
            }
        }

        $item->priority = $priority;
        $item->save();

        if ( $asRoot )
        {
            $item->getTable()->getTree()->createRoot($item);

            $item->updateRootPriority($priority, $item->id);
        }

        return $item;
    }

    public static function createItem(ScheduleOfRateBillItem $nextItem)
    {
        $item             = new ScheduleOfRateBillItem();
        $item->element_id = $nextItem->element_id;
        $item->type       = ScheduleOfRateBillItem::TYPE_WORK_ITEM;

        if ( $nextItem->node->isRoot() )
        {
            $priority = $nextItem->priority;

            $item->priority = $priority;

            $item->save();

            $node = $item->node;

            if ( $node->isValidNode() )
            {
                $node->makeRoot($item->id);
            }
            else
            {
                $item->getTable()->getTree()->createRoot($item);
            }

            $item->updateRootPriority($priority, $item->id);
        }
        else
        {
            $item->node->insertAsPrevSiblingOf($nextItem);
            $item->priority = $nextItem->priority;
        }

        $item->save();

        return $item;
    }

    public static function updateRootPriority($priority, $elementId, $excludeId = null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sqlUpdateRoot = "UPDATE " . self::getInstance()->getTableName() . " SET priority = priority + 1
            WHERE element_id =" . $elementId . " AND priority >=" . $priority . " AND id = root_id";

        if ( $excludeId and $excludeId > 0 )
        {
            $sqlUpdateRoot .= " AND id <> " . $excludeId;
        }

        $sqlUpdateRoot .= " AND deleted_at IS NULL";

        $stmt = $pdo->prepare($sqlUpdateRoot);

        $stmt->execute();

        //update children priority same as root priority
        $stmt = $pdo->prepare("UPDATE " . self::getInstance()->getTableName() . " AS i SET priority = r.priority
            FROM " . self::getInstance()->getTableName() . " AS r
            WHERE i.root_id = r.id AND i.id <> r.id AND i.priority <> r.priority AND i.element_id = " . $elementId . "
            AND i.deleted_at IS NULL");

        $stmt->execute();
    }

    /**
     * Returns the element ids of all the items.
     *
     * @param $itemIds
     *
     * @return mixed
     */
    public function getElementIds($itemIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $ids = implode(',', $itemIds);
        $ids = empty( $ids ) ? "NULL" : $ids;

        $stmt = $pdo->prepare("select
              distinct(element_id)
              from " . self::getInstance()->getTableName() . "
              where id in (" . $ids . ")
              ");
        $stmt->execute();

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $elementIds = array();
        foreach($results as $result)
        {
            array_push($elementIds, $result['element_id']);
        }

        return $elementIds;
    }

    /**
     * Returns all items and headers by element id.
     *
     * @param      $elementId
     * @param      $itemIds
     * @param bool $includeNonSelectedHeaders
     *
     * @return array
     */
    public function getMatchingItemsByElementId($elementId, $itemIds, $includeNonSelectedHeaders = true)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $itemIdsStmt = implode(',', $itemIds);
        $itemIdsStmt = empty( $itemIdsStmt ) ? "NULL" : $itemIdsStmt;

        if( $includeNonSelectedHeaders )
        {
            $stmt = "select
                    distinct
                    items.id as item_id,
                    items.description as description,
                    items.type as type,
                    items.element_id as element_id,
                    items.uom_id as uom_id,
                    items.estimation_rate as estimation_rate,
                    items.lft as lft,
                    items.rgt as rgt,
                    items.root_id as root_id,
                    items.level as level,
                    uom.symbol as uom_symbol
                from " . ScheduleOfRateBillItemTable::getInstance()->getTableName() . " itemsJoin
                join " . ScheduleOfRateBillItemTable::getInstance()->getTableName() . " items on (itemsJoin.lft between items.lft and items.rgt)
                left join " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom on uom.id = items.uom_id
                where items.element_id = " . $elementId . "
                and itemsJoin.id in (" . $itemIdsStmt . ")
                and itemsJoin.root_id = items.root_id
                and itemsJoin.deleted_at is null
                and items.deleted_at is null
                order by items.lft asc
                ";
        }
        else
        {
            $stmt = "select
                    items.id as item_id,
                    items.description as description,
                    items.type as type,
                    items.element_id as element_id,
                    items.uom_id as uom_id,
                    items.estimation_rate as estimation_rate,
                    items.lft as lft,
                    items.rgt as rgt,
                    items.root_id as root_id,
                    items.level as level,
                    uom.symbol as uom_symbol
                from " . ScheduleOfRateBillItemTable::getInstance()->getTableName() . " items
                left join " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom on uom.id = items.uom_id
                where items.element_id = " . $elementId . "
                and items.id in (" . $itemIdsStmt . ")
                and items.deleted_at is null
                order by items.lft asc
                ";
        }

        $stmt = $pdo->prepare($stmt);

        $stmt->execute();

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $items = array();
        foreach($results as $result)
        {
            $item = array();
            $item['id'] = $result['item_id'];
            $item['description'] = $result['description'];
            $item['type'] = $result['type'];
            $item['element_id'] = $result['element_id'];
            $item['uom_id'] = $result['uom_id'];
            $item['uom_symbol'] = $result['uom_symbol'];
            $item['estimation_rate'] = $result['estimation_rate'];
            $item['lft'] = $result['lft'];
            $item['rgt'] = $result['rgt'];
            $item['root_id'] = $result['root_id'];
            $item['level'] = $result['level'];

            array_push($items, $item);
            unset( $item );
        }

        return $items;
    }

    /**
     * Returns the contractor rates for the items.
     *
     * @param $itemIds
     * @param $tendererIds
     *
     * @return array
     */
    public function getContractorRates($itemIds, $tendererIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $contractorRates = array();

        if( count($tendererIds) && count($itemIds) )
        {
            foreach($tendererIds as $tendererId)
            {
                $stmt = $pdo->prepare("select
                        items.id as item_id,
                        COALESCE(tender_items.contractor_rate, 0) as contractor_rate
                    from " . ScheduleOfRateBillItemTable::getInstance()->getTableName() . " items
                    left join " . TenderScheduleOfRateTable::getInstance()->getTableName() . " tender_items on tender_items.schedule_of_rate_bill_item_id = items.id
                    left join " . TenderCompanyTable::getInstance()->getTableName() . " tender_companies on tender_items.tender_company_id = tender_companies.id
                    left join " . CompanyTable::getInstance()->getTableName() . " companies on companies.id = tender_companies.company_id
                    where items.id in (" . implode(',', $itemIds) . ")
                    and companies.id = " . $tendererId . "
                    and items.deleted_at is null
                    order by items.lft asc
                    ");

                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

                $itemRates = array();
                foreach($results as $item)
                {
                    $itemRates[ $item['item_id'] ] = $item['contractor_rate'];
                }
                $contractorRates[ $tendererId ] = $itemRates;
            }
        }

        return $contractorRates;
    }

    /**
     * Adds contractor rates to items and
     * flags min and max cost.
     *
     * @param $items
     * @param $contractorRates
     * @param $tendererIds
     */
    public static function addContractorRates($items, $contractorRates, $tendererIds)
    {
        foreach($items as $key => $item)
        {
            foreach($contractorRates as $contractorId => $rates)
            {
                foreach($rates as $itemId => $contractorRate)
                {
                    if( $item['id'] == $itemId )
                    {
                        $items[ $key ][ $contractorId . '-rate-value' ] = $contractorRate;

                        // To Flag min and max costs.
                        $itemRates[ $contractorId ] = $contractorRate;
                    }
                }
            }

            // Flag min and max costs
            if( ! empty( $itemRates ) && ( count($tendererIds) >= 2 ) && ( $item['type'] == ScheduleOfRateBillItem::TYPE_WORK_ITEM ) )
            {
                $contractorIdsWithHighestRate = array_keys($itemRates, max($itemRates));
                $contractorIdsWithLowestRate = array_keys($itemRates, min($itemRates));

                // We only set highest and lowest cost flags if it is uniquely max/min.
                // (i.e. if there are more than one 'highest', we do not set it at all).
                if( count($contractorIdsWithHighestRate) == 1 )
                {
                    $items[ $key ][ $contractorIdsWithHighestRate[0] . '-highest_cost' ] = true;
                }
                if( count($contractorIdsWithLowestRate) == 1 )
                {
                    $items[ $key ][ $contractorIdsWithLowestRate[0] . '-lowest_cost' ] = true;
                }
            }
        }

        return $items;
    }
}