<?php

/**
 * ScheduleOfRateBuildUpRateResourceTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ScheduleOfRateBuildUpRateResourceTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ScheduleOfRateBuildUpRateResourceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ScheduleOfRateBuildUpRateResource');
    }

    public static function isResourceFromLibraryExists($resourceLibraryId, $scheduleOfRateItemId)
    {
        $query = DoctrineQuery::create()->select('r.id')
            ->from('ScheduleOfRateBuildUpRateResource r')
            ->where('r.schedule_of_rate_item_id = ?', $scheduleOfRateItemId)
            ->andWhere('r.resource_library_id = ?', $resourceLibraryId)
            ->andWhere('r.deleted_at IS NULL')
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

        return $query->count() > 0 ? true : false;
    }

    public static function getByResourceLibraryIdAndScheduleOfRateItemId($resourceLibraryId, $scheduleOfRateItemId, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('r.*')
            ->from('ScheduleOfRateBuildUpRateResource r')
            ->where('r.schedule_of_rate_item_id = ?', $scheduleOfRateItemId)
            ->andWhere('r.resource_library_id = ?', $resourceLibraryId)
            ->andWhere('r.deleted_at IS NULL')
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getResourceByItemIds(array $itemIds)
    {
        $data = array();

        $resourceTrades = DoctrineQuery::create()
        ->select('r.id, r.schedule_of_rate_item_id, r.name, r.resource_library_id')
        ->from('ScheduleOfRateBuildUpRateResource r')
        ->whereIn('r.schedule_of_rate_item_id', $itemIds)
        ->addOrderBy('r.id ASC')
        ->fetchArray();

        foreach ( $resourceTrades as $resourceTrade )
        {
            $data[$resourceTrade['schedule_of_rate_item_id']][] = $resourceTrade;

            unset($resourceTrade);
        }

        return $data;
    }

    public static function getExistingRecordFromScheduleOfRateBuildUpRateResource($sorItemId, $buildUpRateResourceId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT r.id, r.name, r.resource_library_id FROM ".ScheduleOfRateBuildUpRateResourceTable::getInstance()->getTableName()." r WHERE r.id = ".$buildUpRateResourceId." AND r.deleted_at IS NULL");
        $stmt->execute();

        $resource = $stmt->fetch(PDO::FETCH_ASSOC);

        if ( ! $resource )
        {
            throw new Exception('ScheduleOfRateBuildUpRateResource must be available in order to import Build Up Rates.');
        }

        $stmt = $pdo->prepare("SELECT t.id, t.name, t.schedule_of_rate_item_id, t.resource_library_id FROM ".self::getInstance()->getTableName()." t WHERE t.schedule_of_rate_item_id = ".$sorItemId." AND t.resource_library_id = ".$resource['resource_library_id']." AND t.deleted_at IS NULL");

        $stmt->execute();

        $sorBuildUpRateResource = $stmt->fetch(PDO::FETCH_ASSOC);

        if ( $sorBuildUpRateResource )
        {
            return $sorBuildUpRateResource;
        }

        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

        $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (name, schedule_of_rate_item_id, resource_library_id, created_at, updated_at, created_by, updated_by) VALUES ('".pg_escape_string($resource['name'])."', ".$sorItemId.", ".$resource['resource_library_id'].", NOW(), NOW(), ".$userId.", ".$userId.") RETURNING id, name, schedule_of_rate_item_id, resource_library_id");
        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
}