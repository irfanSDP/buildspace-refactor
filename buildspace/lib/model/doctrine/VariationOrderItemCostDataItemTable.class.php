<?php

/**
 * VariationOrderItemCostDataItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class VariationOrderItemCostDataItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return VariationOrderItemCostDataItemTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('VariationOrderItemCostDataItem');
    }

    public static function sync(CostData $costData, MasterCostDataItem $masterItem, $selectedItemIds, $deselectedItemIds)
    {
        self::unlink($costData, $masterItem, $deselectedItemIds);

        self::link($costData, $masterItem, $selectedItemIds);

        $item = CostDataItemTable::getItem($costData, $masterItem);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $statement = "UPDATE " . CostDataItemTable::getInstance()->getTableName() . " i
                SET variation_order_cost = :cost
                WHERE i.id = :itemId";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array(
            'cost'   => self::getSumOfLinkedItems($costData, $masterItem),
            'itemId' => $item['id']
        ));

        $item->updateRelativesCost(array( CostDataItem::COLUMN_VARIATION_ORDER_COST ));
    }

    protected static function unlink(CostData $costData, MasterCostDataItem $masterItem, $deselectedItemIds)
    {
        if( count($deselectedItemIds) <= 0 ) return;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $item = CostDataItemTable::getItem($costData, $masterItem);

        $implodedDeselectedItemIds = implode(',', $deselectedItemIds);

        if( $item->exists() )
        {
            $statement = "DELETE FROM " . self::getInstance()->getTableName() . " pivot
                WHERE pivot.cost_data_item_id = :itemId
                AND pivot.variation_order_item_id in ({$implodedDeselectedItemIds})";

            $stmt = $pdo->prepare($statement);

            $stmt->execute(array( 'itemId' => $item['id'] ));
        }
    }

    protected static function link(CostData $costData, MasterCostDataItem $masterItem, array $selectedItemIds)
    {
        $item = CostDataItemTable::getItem($costData, $masterItem);

        if($item->isNew()) $item->save();

        $linkedItemIds = array_column(self::getLinkedItems($costData, $masterItem), 'variation_order_item_id');

        $newlySelectedItemIds = array_diff($selectedItemIds, $linkedItemIds);

        foreach($newlySelectedItemIds as $itemId)
        {
            $pivotRecord = new VariationOrderItemCostDataItem();
            $pivotRecord->variation_order_item_id = $itemId;
            $pivotRecord->cost_data_item_id = $item->id;
            $pivotRecord->save();
        }
    }

    public static function getDescendantsAndSelfLinkedItems(CostData $costData, array $masterItemIds)
    {
        if(empty($masterItemIds)) return array();

        $pdo = self::getInstance()->getConnection()->getDbh();

        $descendantIdsByMasterItemId = array();

        $descendantIds = array();

        foreach($masterItemIds as $masterItemId)
        {
            $descendantIdsByMasterItemId[$masterItemId] = MasterCostDataItemTable::getDescendantIds([$masterItemId]);

            $descendantIdsByMasterItemId[$masterItemId][] = $masterItemId;

            $descendantIds = array_merge($descendantIds, $descendantIdsByMasterItemId[$masterItemId]);
        }

        $statement = "SELECT mi.id as master_cost_data_item_id, pivot.cost_data_item_id, i.id as variation_order_item_id, vo.id as variation_order_id, p.id as project_id
            FROM ".self::getInstance()->getTableName()." pivot
            JOIN " . CostDataItemTable::getInstance()->getTableName() . " ci ON ci.id = pivot.cost_data_item_id
            JOIN " . MasterCostDataItemTable::getInstance()->getTableName() . " mi ON mi.id = ci.master_cost_data_item_id
            JOIN " . VariationOrderItemTable::getInstance()->getTableName() . " i on i.id = pivot.variation_order_item_id
            JOIN " . VariationOrderTable::getInstance()->getTableName() . " vo on vo.id = i.variation_order_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p on p.id = vo.project_structure_id
            WHERE ci.cost_data_id = {$costData->id}
            AND mi.id IN (" . implode(',', $descendantIds) . ")";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $data = array();

        foreach($descendantIdsByMasterItemId as $itemId => $descendantIds)
        {
            if(!array_key_exists($itemId, $data)) $data[$itemId] = array();

            foreach($records as $key => $record)
            {
                if(!in_array($record['master_cost_data_item_id'], $descendantIds)) continue;

                unset($record['master_cost_data_item_id'], $record['cost_data_item_id']);

                $data[$itemId][] = $record;

                unset($records[$key]);
            }
        }

        return $data;
    }

    public static function getLinkedItems(CostData $costData, MasterCostDataItem $masterItem)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $item = CostDataItemTable::getItem($costData, $masterItem);

        if($item->isNew()) return array();

        $statement = "SELECT i.id as variation_order_item_id, vo.id as variation_order_id, p.id as project_id 
            FROM ".self::getInstance()->getTableName()." pivot
            JOIN " . VariationOrderItemTable::getInstance()->getTableName() . " i on i.id = pivot.variation_order_item_id
            JOIN " . VariationOrderTable::getInstance()->getTableName() . " vo on vo.id = i.variation_order_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p on p.id = vo.project_structure_id
            WHERE pivot.cost_data_item_id = :itemId
            AND vo.is_approved = TRUE
	        AND p.deleted_at IS NULL
	        AND vo.deleted_at IS NULL
	        AND i.deleted_at IS NULL";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array( 'itemId' => $item['id'] ));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getSumOfLinkedItems(CostData $costData, MasterCostDataItem $masterItem)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $item = CostDataItemTable::getItem($costData, $masterItem);

        $linkedItems = self::getLinkedItems($costData, $masterItem);

        if($item->isNew() || empty($linkedItems)) return 0;

        $linkedItemIds = Utilities::arrayValueRecursive('variation_order_item_id', $linkedItems);

        $statement = "SELECT ROUND(COALESCE(SUM((i.total_unit * i.addition_quantity * i.rate) - (i.total_unit * i.omission_quantity * i.rate))), 2) AS nett_omission_addition
        FROM ".self::getInstance()->getTableName()." pivot
        JOIN ".VariationOrderItemTable::getInstance()->getTableName()." i on i.id = pivot.variation_order_item_id
        JOIN ".VariationOrderTable::getInstance()->getTableName()." vo on vo.id = i.variation_order_id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p on p.id = vo.project_structure_id
        WHERE pivot.cost_data_item_id = :itemId
        AND i.id in (" . implode(',', $linkedItemIds) . ")
        AND vo.is_approved = TRUE
        AND vo.deleted_at IS NULL
        AND vo.deleted_at IS NULL
        AND i.deleted_at IS NULL;";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array( 'itemId' => $item['id'] ));

        return $stmt->fetch(PDO::FETCH_COLUMN,0);
    }
}