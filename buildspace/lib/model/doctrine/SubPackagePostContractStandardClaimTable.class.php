<?php

/**
 * SubPackagePostContractStandardClaimTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SubPackagePostContractStandardClaimTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object SubPackagePostContractStandardClaimTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('SubPackagePostContractStandardClaim');
    }

    public static function getTotalClaimRateGroupByElement($billId, PostContractStandardClaimTypeReference $typeRef, $revision, $subPackageId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT element.id, COALESCE(SUM(pcr.up_to_date_amount),0) AS prev_amount,
            COALESCE(SUM(cr.up_to_date_amount),0) AS up_to_date_amount,
            COALESCE(SUM(cr.up_to_date_qty),0) AS up_to_date_qty,
            COALESCE(SUM(cr.current_amount),0) AS current_amount,
            COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0) AS total_per_unit,
            CASE
                WHEN
                    COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0) = 0 then 0
                ELSE
                    ROUND((COALESCE(SUM(pcr.up_to_date_amount),0) / COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0)) * 100, 2)
            END AS prev_percentage,
            CASE
                WHEN
                    COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0) = 0 then 0
                ELSE
                    ROUND((COALESCE(SUM(cr.up_to_date_amount),0) / COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0)) * 100, 2)
            END AS up_to_date_percentage,
            CASE
                WHEN
                    COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0) = 0 then 0
                ELSE
                    ROUND((COALESCE(SUM(cr.current_amount),0) / COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0)) * 100, 2)
            END AS current_percentage
            FROM " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " si
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " i on i.id = si.bill_item_id
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON element.id = i.element_id
            LEFT JOIN " . SubPackagePostContractClaimRevisionTable::getInstance()->getTableName() . " pr
            ON pr.sub_package_id = " . $revision['sub_package_id'] . " AND pr.version = (" . $revision['version'] . " - 1)
            LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " cr
            ON cr.bill_item_id = si.bill_item_id AND cr.claim_type_ref_id = " . $typeRef->id . " AND cr.revision_id = " . $revision['id'] . "
            LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " pcr
            ON pcr.bill_item_id = si.bill_item_id AND pcr.claim_type_ref_id = " . $typeRef->id . " AND pcr.revision_id = pr.id
            LEFT JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pt
            ON pt.post_contract_id = " . $typeRef->post_contract_id . "
            AND pt.bill_item_id = si.bill_item_id AND pt.bill_column_setting_id = " . $typeRef->bill_column_setting_id . "
            WHERE element.project_structure_id = " . $billId . " AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            AND pt.include IS TRUE AND si.sub_package_id = " . $subPackageId . " GROUP BY element.id ORDER BY element.id");

        $stmt->execute(array());

        return $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
    }

    public static function getTotalClaimRateByElementId($elementId, PostContractStandardClaimTypeReference $typeRef, $revision, $subPackageId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT element.id, ROUND(COALESCE(SUM(pcr.up_to_date_amount),0),2) AS prev_amount,
            ROUND((COALESCE(SUM(pcr.up_to_date_amount),0) / SUM(ROUND(pt.qty_per_unit * si.rate, 2)) * 100),2) AS prev_percentage,
            ROUND(COALESCE(SUM(cr.up_to_date_amount),0),2) AS up_to_date_amount,
            ROUND((COALESCE(SUM(cr.up_to_date_amount),0) / SUM(ROUND(pt.qty_per_unit * si.rate, 2)) * 100),2) AS up_to_date_percentage,
            ROUND(COALESCE(SUM(cr.up_to_date_qty),0),2) AS up_to_date_qty,
            ROUND(COALESCE(SUM(cr.current_amount),0),2) AS current_amount,
            ROUND((COALESCE(SUM(cr.current_amount),0) / SUM(ROUND(pt.qty_per_unit * si.rate, 2)) * 100),2) AS current_percentage,
            ROUND(COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0),2) AS total_per_unit
            FROM " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " si
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " i on i.id = si.bill_item_id
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON element.id = i.element_id
            LEFT JOIN " . SubPackagePostContractClaimRevisionTable::getInstance()->getTableName() . " pr
            ON pr.sub_package_id = " . $revision['sub_package_id'] . " AND pr.version = (" . $revision['version'] . " - 1)
            LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " cr
            ON cr.bill_item_id = si.bill_item_id AND cr.claim_type_ref_id = " . $typeRef->id . " AND cr.revision_id = " . $revision['id'] . "
            LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " pcr
            ON pcr.bill_item_id = si.bill_item_id AND pcr.claim_type_ref_id = " . $typeRef->id . " AND pcr.revision_id = pr.id
            LEFT JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pt
            ON pt.post_contract_id = " . $typeRef->post_contract_id . " AND pt.bill_item_id = si.bill_item_id
            AND pt.bill_column_setting_id = " . $typeRef->bill_column_setting_id . "
            WHERE element.id = " . $elementId . " AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            AND pt.include IS TRUE AND si.sub_package_id = " . $subPackageId . "
            GROUP BY element.id ORDER BY element.id");

        $stmt->execute(array());

        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    public static function updateClaimByElement($fieldName, $fieldValue, $elementId, $claimTypeRef, $subPackageId, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $fieldValue = ( is_numeric($fieldValue) ) ? $fieldValue : 0;

        switch ($fieldName)
        {
            case SubPackagePostContractStandardClaim::CLAIM_FIELD_UP_TO_DATE_PERCENTAGE:
                $percentage = ( $fieldValue <= 100 ) ? number_format($fieldValue, 2, '.', '') : 0;
                break;
            case SubPackagePostContractStandardClaim::CLAIM_FIELD_UP_TO_DATE_AMOUNT:

                $elementTotalPerUnit = self::getTotalPerUnitByElementIdAndTypeRef($elementId, $claimTypeRef, $subPackageId);

                $percentage = ( $elementTotalPerUnit > 0 ) ? number_format($fieldValue / $elementTotalPerUnit * 100, 2, '.', '') : 0;

                $percentage = ( $percentage <= 100 ) ? $percentage : 0;

                break;
            default:
                throw new Exception("Error Processing Request", 1);
                break;
        }

        //Clear all claim current revision By Element
        $stmt = $pdo->prepare("DELETE FROM " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . "
            WHERE bill_item_id IN (
                SELECT item.id FROM " . BillElementTable::getInstance()->getTableName() . " element
                JOIN " . BillItemTable::getInstance()->getTableName() . " item ON item.element_id = element.id
                JOIN " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " si ON si.bill_item_id = item.id
                WHERE si.sub_package_id  = " . $subPackageId . " AND element.id = " . $elementId . "
            ) AND
            claim_type_ref_id = " . $claimTypeRef['id'] . " AND revision_id = " . $revision['id']);

        $stmt->execute();

        $excludedItemType = array(
            BillItem::TYPE_HEADER,
            BillItem::TYPE_NOID,
            BillItem::TYPE_ITEM_RATE_ONLY,
            BillItem::TYPE_HEADER_N
        );

        $stmt = $pdo->prepare("INSERT INTO " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . "
            (bill_item_id, revision_id, claim_type_ref_id, current_percentage, current_amount, up_to_date_amount, up_to_date_percentage, up_to_date_qty)
            SELECT item.id AS bill_item_id, " . $revision['id'] . " AS revision_id, " . $claimTypeRef['id'] . " AS claim_type_ref_id, (" . $percentage . " - COALESCE(pc.up_to_date_percentage, 0)) AS current_percentage, ROUND((" . $percentage . " - COALESCE(pc.up_to_date_percentage, 0)) / 100 * ROUND(t.qty_per_unit * rate.rate, 2) ,2) AS current_amount,
            ROUND((" . $percentage . ") / 100 * ROUND(t.qty_per_unit * rate.rate, 2), 2) AS up_to_date_amount, " . $percentage . " AS up_to_date_percentage,
            ROUND((" . $percentage . ") / 100 * t.qty_per_unit ,2) AS up_to_date_qty
            FROM " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " rate
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " item ON item.id = rate.bill_item_id
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " element ON element.id = item.element_id
            LEFT JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " t ON t.bill_item_id = rate.bill_item_id
                AND t.bill_column_setting_id = " . $claimTypeRef['bill_column_setting_id'] . " AND t.post_contract_id = " . $claimTypeRef['post_contract_id'] . "
            LEFT JOIN " . SubPackagePostContractClaimRevisionTable::getInstance()->getTableName() . " pr ON pr.sub_package_id = " . $subPackageId . " AND pr.version = (" . $revision['version'] . " - 1)
            LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " pc ON pc.bill_item_id = rate.bill_item_id AND pc.claim_type_ref_id = " . $claimTypeRef['id'] . " AND pc.revision_id = pr.id
            WHERE element.id = " . $elementId . " AND rate.sub_package_id = " . $subPackageId . " AND t.include IS TRUE AND ROUND(t.qty_per_unit * rate.rate, 2) > 0 AND item.type NOT IN (" . implode(',', $excludedItemType) . ")");

        $stmt->execute();
    }

    public static function getTotalPerUnitByElementIdAndTypeRef($elementId, $claimTypeRef, $subPackageId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $excludedItemType = array(
            BillItem::TYPE_HEADER,
            BillItem::TYPE_NOID,
            BillItem::TYPE_ITEM_RATE_ONLY,
            BillItem::TYPE_HEADER_N
        );

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(t.qty_per_unit * rate.rate),0),2) AS total_per_unit
            FROM " . BillElementTable::getInstance()->getTableName() . " element
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " item ON item.element_id = element.id
            LEFT JOIN " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " rate ON rate.bill_item_id = item.id
            LEFT JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " t ON t.bill_item_id = item.id
                AND t.bill_column_setting_id = " . $claimTypeRef['bill_column_setting_id'] . " AND t.post_contract_id = " . $claimTypeRef['post_contract_id'] . "
            WHERE rate.sub_package_id = " . $subPackageId . " AND item.deleted_at IS NULL AND element.id = " . $elementId . "
                AND item.type NOT IN (" . implode(',', $excludedItemType) . ")");

        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        return $result['total_per_unit'];
    }

    public static function getTotalClaimRateGroupByTypeRef($billId, $revision, $postContractId, $subPackageId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT type_ref.id, COALESCE(SUM(cr.up_to_date_amount),0) AS up_to_date_amount, COALESCE(SUM(cr.up_to_date_qty),0) AS up_to_date_qty,
            COALESCE(SUM(ROUND(pt.qty_per_unit * rate.rate, 2)),0) AS total_per_unit
            FROM " . BillColumnSettingTable::getInstance()->getTableName() . " cs
            LEFT JOIN " . PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName() . " type_ref ON type_ref.bill_column_setting_id = cs.id
            LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " cr ON cr.claim_type_ref_id = type_ref.id AND cr.revision_id = " . $revision['id'] . "
            LEFT JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pt ON pt.post_contract_id = type_ref.post_contract_id AND pt.bill_column_setting_id = type_ref.bill_column_setting_id AND pt.bill_item_id = cr.bill_item_id
            LEFT JOIN " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " rate ON rate.bill_item_id = cr.bill_item_id
            WHERE cs.project_structure_id = " . $billId . " AND cs.deleted_at IS NULL AND rate.sub_package_id = " . $subPackageId . " AND type_ref.post_contract_id = " . $postContractId . "
            GROUP BY type_ref.id ORDER BY type_ref.id");

        $stmt->execute(array());

        return $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
    }

    public static function cloneUpToDateAmountByIdAndRevision(SubPackage $subPackage, $revision, $typeItemFrom, $typeItemTo)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        //Clear all claim current revision
        $stmt = $pdo->prepare("DELETE FROM " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . "
            WHERE claim_type_ref_id = " . $typeItemTo['id'] . " AND revision_id = " . $revision['id']);

        $stmt->execute();

        $stmt = $pdo->prepare("INSERT INTO " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . "
            (bill_item_id, revision_id, claim_type_ref_id, current_percentage, current_amount, up_to_date_amount, up_to_date_percentage, up_to_date_qty)
            SELECT c.bill_item_id, " . $revision['id'] . " AS revision_id, " . $typeItemTo['id'] . " AS claim_type_ref_id,
            (COALESCE(c.up_to_date_percentage, 0) - COALESCE(pc.up_to_date_percentage, 0)) AS current_percentage,
            (COALESCE(c.up_to_date_amount, 0) - COALESCE(pc.up_to_date_amount, 0)) AS current_amount, COALESCE(c.up_to_date_amount, 0) AS up_to_date_amount,
            COALESCE(c.up_to_date_percentage, 0) AS up_to_date_percentage, COALESCE(c.up_to_date_qty, 0) AS up_to_date_qty
            FROM " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " c
            LEFT JOIN " . SubPackagePostContractClaimRevisionTable::getInstance()->getTableName() . " pr ON pr.sub_package_id = " . $subPackage->id . " AND pr.version = (" . $revision['version'] . " - 1)
            LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " pc ON pc.bill_item_id = c.bill_item_id AND pc.claim_type_ref_id = " . $typeItemTo['id'] . " AND pc.revision_id = pr.id
            WHERE c.revision_id = " . $revision['id'] . " AND c.claim_type_ref_id = " . $typeItemFrom['id']);

        $stmt->execute();
    }

    public static function cloneStandardClaimRevision(PostContract $postContract, SubPackage $subPackage, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $previousVersion = SubPackagePostContractClaimRevisionTable::getPreviousProjectRevision($subPackage, $revision->version);

        $stmt = $pdo->prepare("INSERT INTO " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . "
            (revision_id, claim_type_ref_id, bill_item_id, up_to_date_amount, up_to_date_percentage, up_to_date_qty)
            SELECT " . $revision->id . " AS revision_id, c.claim_type_ref_id, c.bill_item_id, c.up_to_date_amount, c.up_to_date_percentage, c.up_to_date_qty
            FROM " . PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName() . " type_ref
            LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " c ON c.claim_type_ref_id = type_ref.id
            WHERE type_ref.post_contract_id = " . $postContract->id . " AND c.revision_id = " . $previousVersion['id']);

        $stmt->execute(array());
    }

    public static function getUpToDateAmountByBillId($billId, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT element.project_structure_id, ROUND(COALESCE(SUM(cr.up_to_date_amount),0),2) AS up_to_date_amount
            FROM " . BillElementTable::getInstance()->getTableName() . " element
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = element.id AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " cr ON cr.bill_item_id = i.id AND cr.revision_id = " . $revision['id'] . "
            WHERE element.project_structure_id = " . $billId . " AND element.deleted_at IS NULL GROUP BY element.project_structure_id");

        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        return $result['up_to_date_amount'];
    }

    public static function getOverallTotalByBillId($billId, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0) AS grand_total
            FROM " . SubPackageTable::getInstance()->getTableName() . " sp
            JOIN " . PostContractTable::getInstance()->getTableName() . " pc ON pc.project_structure_id = sp.project_structure_id
            JOIN " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " stype ON stype.sub_package_id = sp.id
            JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pt ON pt.post_contract_id = pc.id
            AND pt.bill_column_setting_id = stype.bill_column_setting_id
            JOIN " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " si
            ON si.bill_item_id = pt.bill_item_id AND si.sub_package_id = " . $revision['sub_package_id'] . "
            JOIN " . BillItemTable::getInstance()->getTableName() . " i on i.id = si.bill_item_id
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON element.id = i.element_id
            WHERE sp.id = " . $revision['sub_package_id'] . " AND element.project_structure_id = " . $billId . " AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL AND pt.include IS TRUE");

        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        return $result['grand_total'];
    }

    public static function getOverallTotalByBillElementId(array $billElementIds, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        if(empty($billElementIds))
            return array();

        $stmt = $pdo->prepare("SELECT element.id AS element_id, pt.bill_column_setting_id AS bill_column_setting_id, COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0) AS grand_total
            FROM " . SubPackageTable::getInstance()->getTableName() . " sp
            JOIN " . PostContractTable::getInstance()->getTableName() . " pc ON pc.project_structure_id = sp.project_structure_id
            JOIN " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " stype ON stype.sub_package_id = sp.id
            JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pt ON pt.post_contract_id = pc.id
            AND pt.bill_column_setting_id = stype.bill_column_setting_id
            JOIN " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " si
            ON si.bill_item_id = pt.bill_item_id AND si.sub_package_id = " . $revision['sub_package_id'] . "
            JOIN " . BillItemTable::getInstance()->getTableName() . " i on i.id = si.bill_item_id
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON element.id = i.element_id
            WHERE sp.id = " . $revision['sub_package_id'] . " AND element.id IN (" . implode(',', $billElementIds) . ") AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL AND pt.include IS TRUE GROUP BY element.id, pt.bill_column_setting_id");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $data = array();

        foreach($records as $record)
        {
            if(!isset($data[$record['element_id']]))
                $data[$record['element_id']] = array();

            $data[$record['element_id']] += array($record['bill_column_setting_id'] => $record['grand_total']);
        }

        return $data;
    }

    public static function getTotalClaimRateByTypeAndElementIds(ProjectStructure $bill, array $elementIds, PostContractStandardClaimTypeReference $typeRef, $revision, SubPackage $subPackage)
    {
        $pdo     = self::getInstance()->getConnection()->getDbh();
        $sqlCond = ( count($elementIds) ) ? "AND element.id IN (" . implode(',', $elementIds) . ")" : '';

        $data = array(
            'prev_amount'       => 0,
            'up_to_date_amount' => 0,
            'up_to_date_qty'    => 0,
            'current_amount'    => 0,
            'total_per_unit'    => 0,
        );

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(pcr.up_to_date_amount),0) AS prev_amount ,
        COALESCE(AVG(pcr.up_to_date_percentage),0) AS prev_percentage,
        COALESCE(SUM(cr.up_to_date_amount),0) AS up_to_date_amount,
        COALESCE(AVG(cr.up_to_date_percentage),0) AS up_to_date_percentage,
        COALESCE(SUM(cr.up_to_date_qty),0) AS up_to_date_qty,
        COALESCE(SUM(cr.current_amount),0) AS current_amount,
        COALESCE(AVG(cr.current_percentage),0) AS current_percentage,
        COALESCE(SUM(ROUND(pt.qty_per_unit * si.rate, 2)),0) AS total_per_unit
        FROM " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " si
        LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " i on i.id = si.bill_item_id
        LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON element.id = i.element_id
        LEFT JOIN " . SubPackagePostContractClaimRevisionTable::getInstance()->getTableName() . " pr
        ON pr.sub_package_id = " . $revision['sub_package_id'] . " AND pr.version = (" . $revision['version'] . " - 1)
        LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " cr
        ON cr.bill_item_id = si.bill_item_id AND cr.claim_type_ref_id = " . $typeRef->id . " AND cr.revision_id = " . $revision['id'] . "
        LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " pcr
        ON pcr.bill_item_id = si.bill_item_id AND pcr.claim_type_ref_id = " . $typeRef->id . " AND pcr.revision_id = pr.id
        LEFT JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pt
        ON pt.post_contract_id = " . $typeRef->post_contract_id . " AND pt.bill_item_id = si.bill_item_id
        AND pt.bill_column_setting_id = " . $typeRef->bill_column_setting_id . "
        WHERE element.project_structure_id = " . $bill->id . " " . $sqlCond . "
        AND element.deleted_at IS NULL AND pt.include IS TRUE AND si.sub_package_id = " . $subPackage->id . "
        GROUP BY element.id ORDER BY element.id");

        $stmt->execute(array());

        $typeRefToClaims = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $typeRefToClaims as $typeRefToClaim )
        {
            $data['prev_amount'] += $typeRefToClaim['prev_amount'];
            $data['up_to_date_amount'] += $typeRefToClaim['up_to_date_amount'];
            $data['up_to_date_qty'] += $typeRefToClaim['up_to_date_qty'];
            $data['current_amount'] += $typeRefToClaim['current_amount'];
            $data['total_per_unit'] += $typeRefToClaim['total_per_unit'];

            unset( $typeRefToClaim );
        }

        $data['prev_percentage']       = ( $data['prev_amount'] == 0 ) ? 0 : Utilities::percent($data['prev_amount'], $data['total_per_unit']);
        $data['up_to_date_percentage'] = ( $data['up_to_date_amount'] == 0 ) ? 0 : Utilities::percent($data['up_to_date_amount'], $data['total_per_unit']);
        $data['current_percentage']    = ( $data['current_amount'] == 0 ) ? 0 : Utilities::percent($data['current_amount'], $data['total_per_unit']);

        return $data;
    }

}