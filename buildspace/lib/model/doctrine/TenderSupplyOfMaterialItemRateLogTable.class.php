<?php

/**
 * TenderSupplyOfMaterialItemRateLogTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TenderSupplyOfMaterialItemRateLogTable extends Doctrine_Table
{

    /**
     * Returns an instance of this class.
     *
     * @return object TenderSupplyOfMaterialItemRateLogTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TenderSupplyOfMaterialItemRateLog');
    }

    public static function insertIntoLog(TenderSupplyOfMaterialRate $tenderSupplyOfMaterialRate, $con=null)
    {
        $data[] = array(
            'tender_company_id'          => $tenderSupplyOfMaterialRate->tender_company_id,
            'supply_of_material_item_id' => $tenderSupplyOfMaterialRate->supply_of_material_item_id,
            'supply_rate'                => $tenderSupplyOfMaterialRate->supply_rate,
            'contractor_supply_rate'     => $tenderSupplyOfMaterialRate->contractor_supply_rate,
            'estimated_qty'              => $tenderSupplyOfMaterialRate->estimated_qty,
            'percentage_of_wastage'      => $tenderSupplyOfMaterialRate->percentage_of_wastage,
            'difference'                 => $tenderSupplyOfMaterialRate->difference,
            'amount'                     => $tenderSupplyOfMaterialRate->amount
        );

        self::insertBatchLog($data, "MANUAL");
    }

    public static function insertBatchLog(Array $records, $type = "IMPORT")
    {
        $companyIds = array();
        $itemIds = array();

        foreach($records as $record)
        {
            if(!array_key_exists($record['tender_company_id'], $companyIds))
            {
                $companyIds[$record['tender_company_id']] = $record['tender_company_id'];
            }

            if(!array_key_exists($record['supply_of_material_item_id'], $itemIds))
            {
                $itemIds[$record['supply_of_material_item_id']] = $record['supply_of_material_item_id'];
            }
        }

        if($companyIds and $itemIds)
        {
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
            $userId = is_integer($userId) ? $userId : 'NULL';

            $pdo = self::getInstance()->getConnection()->getDbh();

            $stmt = $pdo->prepare("SELECT supply_of_material_item_id, MAX(changes_count) FROM ".self::getInstance()->getTableName()."
            WHERE tender_company_id IN (".implode(',', array_keys($companyIds)).")
            AND supply_of_material_item_id IN (".implode(',', array_keys($itemIds)).")
            GROUP BY tender_company_id, supply_of_material_item_id");

            $stmt->execute();

            $itemLogs = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

            $sqlValues = array();

            foreach($records as $record)
            {
                $changesCount = array_key_exists($record['supply_of_material_item_id'], $itemLogs) ? $itemLogs[$record['supply_of_material_item_id']] + 1 : 1;

                $sqlValues[] = "(".$record['tender_company_id'].", ".$record['supply_of_material_item_id'].", ".$record['supply_rate'].", ".$record['contractor_supply_rate'].", ".$record['estimated_qty'].", ".$record['percentage_of_wastage'].", ".$record['difference'].", ".$record['amount'].", ".$changesCount.", '".$type."', NOW(), NOW(), ".$userId.", ".$userId.")";
            }

            $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (tender_company_id, supply_of_material_item_id, supply_rate, contractor_supply_rate, estimated_qty, percentage_of_wastage, difference, amount, changes_count, type, created_at, updated_at, created_by, updated_by)
            VALUES ".implode(',', $sqlValues));

            $stmt->execute();
        }
    }

}