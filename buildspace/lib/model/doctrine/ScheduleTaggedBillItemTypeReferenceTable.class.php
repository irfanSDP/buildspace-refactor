<?php

/**
 * ScheduleTaggedBillItemTypeReferenceTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ScheduleTaggedBillItemTypeReferenceTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ScheduleTaggedBillItemTypeReferenceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ScheduleTaggedBillItemTypeReference');
    }

    public static function getClaimItem($scheduleTaggedBillItemTypeReference)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $subPackageId = $scheduleTaggedBillItemTypeReference->ScheduleTaskItemBillItem->ScheduleTaskItem->ProjectSchedule->sub_package_id;
        $billItemId   = $scheduleTaggedBillItemTypeReference->ScheduleTaskItemBillItem->bill_item_id;

        if( $subPackageId > 0 )
        {
            $revision = SubPackagePostContractClaimRevisionTable::getCurrentProjectRevision($scheduleTaggedBillItemTypeReference->ScheduleTaskItemBillItem->ScheduleTaskItem->ProjectSchedule->SubPackage, false);

            $postContractId = $scheduleTaggedBillItemTypeReference->ScheduleTaskItemBillItem->ScheduleTaskItem->ProjectSchedule->ProjectStructure->PostContract->id;
            $billId         = $scheduleTaggedBillItemTypeReference->ScheduleTaskItemBillItem->BillItem->Element->project_structure_id;

            $stmt = $pdo->prepare("SELECT t.id, type_ref.id AS type_ref_id
                    FROM " . ScheduleTaskItemBillItemTable::getInstance()->getTableName() . " ti
                    JOIN " . ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName() . " t ON t.schedule_task_item_bill_item_id = ti.id
                    JOIN " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " stype ON t.sub_package_type_reference_id = stype.id
                    JOIN " . PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName() . " type_ref ON type_ref.bill_column_setting_id = stype.bill_column_setting_id AND type_ref.counter = stype.counter
                    JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " cs ON cs.id = stype.bill_column_setting_id
                    LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " cr ON cr.bill_item_id = ti.bill_item_id AND cr.claim_type_ref_id = type_ref.id AND cr.revision_id = " . $revision['id'] . "
                    WHERE ti.id = " . $scheduleTaggedBillItemTypeReference->schedule_task_item_bill_item_id . "
                    AND t.id = " . $scheduleTaggedBillItemTypeReference->id . " AND t.standard_type_reference_id IS NULL
                    AND stype.sub_package_id = " . $subPackageId . " AND type_ref.post_contract_id = " . $postContractId . "
                    AND cs.id = " . $scheduleTaggedBillItemTypeReference->ScheduleTaskItemBillItem->bill_column_setting_id . " AND cs.project_structure_id = " . $billId . "
                    ORDER BY t.id ASC");

            $stmt->execute();

            $postContractTypeRefId = $stmt->fetchColumn(1);

            $claimItem = DoctrineQuery::create()->select('*')
                ->from('SubPackagePostContractStandardClaim c')
                ->where('c.claim_type_ref_id = ? AND c.bill_item_id = ? AND c.revision_id = ? ',
                    array( $postContractTypeRefId, $billItemId, $revision->id ))
                ->fetchOne();

            if( ! $claimItem )
            {
                $claimItem = new SubPackagePostContractStandardClaim();
                $claimItem->setClaimTypeRefId($postContractTypeRefId);
                $claimItem->setBillItemId($billItemId);
                $claimItem->setRevisionId($revision->id);
            }
        }
        else
        {
            $revision = PostContractClaimRevisionTable::getCurrentProjectRevision($scheduleTaggedBillItemTypeReference->ScheduleTaskItemBillItem->ScheduleTaskItem->ProjectSchedule->ProjectStructure->PostContract, false);

            $claimItem = DoctrineQuery::create()->select('*')
                ->from('PostContractStandardClaim c')
                ->where('c.claim_type_ref_id = ? AND c.bill_item_id = ? AND c.revision_id = ? ',
                    array( $scheduleTaggedBillItemTypeReference->standard_type_reference_id,
                        $billItemId,
                        $revision->id ))
                ->fetchOne();

            if( ! $claimItem )
            {
                $claimItem = new PostContractStandardClaim();
                $claimItem->setClaimTypeRefId($scheduleTaggedBillItemTypeReference->standard_type_reference_id);
                $claimItem->setBillItemId($billItemId);
                $claimItem->setRevisionId($revision->id);
            }
        }

        return $claimItem;
    }
}