<?php

/**
 * TenderAlternativeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TenderAlternativeTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return TenderAlternativeTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TenderAlternative');
    }

    public static function getBillsOriginalAmountByTenderAlternatives(ProjectStructure $project)
    {
        $con = self::getInstance()->getConnection();
        $pdo = $con->getDbh();
        
        // We'll fetch and SUM the latest grand_total from Bill Item
        $stmt = $pdo->prepare("SELECT ta.id, COALESCE(SUM(item.grand_total),0) AS total
            FROM " . BillItemTable::getInstance()->getTableName() . " AS item
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            JOIN " . TenderAlternativeBillTable::getInstance()->getTableName() . " AS x ON x.project_structure_id = bill.id
            JOIN " . TenderAlternativeTable::getInstance()->getTableName() . " ta ON x.tender_alternative_id = ta.id
            WHERE bill.root_id = ".$project->id." AND ta.project_structure_id = ".$project->id."
            AND bill.type = " . ProjectStructure::TYPE_BILL . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND bill.deleted_at IS NULL
            AND ta.deleted_at IS NULL
            GROUP BY ta.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getOverallTotalForTenderAlternatives(ProjectStructure $project, $withNotListedItems=true)
    {
        $con = self::getInstance()->getConnection();
        $pdo = $con->getDbh();
        
        $withoutNotListedItemSql = (!$withNotListedItems) ? " AND item.type <> ".BillItem::TYPE_ITEM_NOT_LISTED." " : null;
        
        // We'll fetch and SUM the latest grand_total from Bill Item
        $stmt = $pdo->prepare("SELECT ta.id, COALESCE(SUM(item.grand_total_after_markup),0) AS total_rate_after_markup
            FROM " . BillItemTable::getInstance()->getTableName() . " AS item
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            JOIN " . TenderAlternativeBillTable::getInstance()->getTableName() . " AS x ON x.project_structure_id = bill.id
            JOIN " . TenderAlternativeTable::getInstance()->getTableName() . " ta ON x.tender_alternative_id = ta.id
            WHERE bill.root_id = ".$project->id." AND ta.project_structure_id = ".$project->id."
            AND bill.type = " . ProjectStructure::TYPE_BILL . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            ".$withoutNotListedItemSql."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND bill.deleted_at IS NULL
            AND ta.deleted_at IS NULL
            GROUP BY ta.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getEditorOverallTotalForTenderAlternatives(ProjectStructure $project, Company $company, $withNotListedItems=true)
    {
        $con = self::getInstance()->getConnection();
        $pdo = $con->getDbh();
        
        $withoutNotListedItemSql = (!$withNotListedItems) ? " AND item.type <> ".BillItem::TYPE_ITEM_NOT_LISTED." " : null;
        
        // We'll fetch and SUM the latest grand_total from Bill Item
        $stmt = $pdo->prepare("SELECT ta.id, COALESCE(SUM(info.grand_total),0) AS total_rate
            FROM " . EditorBillItemInfoTable::getInstance()->getTableName() . " info
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON info.bill_item_id = item.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            JOIN " . TenderAlternativeBillTable::getInstance()->getTableName() . " AS x ON x.project_structure_id = bill.id
            JOIN " . TenderAlternativeTable::getInstance()->getTableName() . " ta ON x.tender_alternative_id = ta.id
            WHERE info.company_id = ".$company->id." AND bill.root_id = ".$project->id."
            AND ta.project_structure_id = ".$project->id." AND bill.type = " . ProjectStructure::TYPE_BILL . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            ".$withoutNotListedItemSql."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND bill.deleted_at IS NULL
            AND ta.deleted_at IS NULL
            GROUP BY ta.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getOverallTotalForTenderAlternativesWithoutPrimeCostAndProvisionalBill(ProjectStructure $project)
    {
        $con = self::getInstance()->getConnection();
        $pdo = $con->getDbh();

        $stmt = $pdo->prepare("SELECT ta.id, COALESCE(SUM(item.grand_total_after_markup),0) AS total_rate_after_markup
            FROM " . BillItemTable::getInstance()->getTableName() . " AS item
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            JOIN " . BillTypeTable::getInstance()->getTableName() . " bt ON bt.project_structure_id = bill.id
            JOIN " . TenderAlternativeBillTable::getInstance()->getTableName() . " AS x ON x.project_structure_id = bt.project_structure_id
            JOIN " . TenderAlternativeTable::getInstance()->getTableName() . " ta ON x.tender_alternative_id = ta.id
            WHERE bill.root_id = ".$project->id." AND ta.project_structure_id = ".$project->id."
            AND bill.type = " . ProjectStructure::TYPE_BILL . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND bt.type <> " . BillType::TYPE_PRIMECOST."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND bill.deleted_at IS NULL
            AND bt.deleted_at IS NULL
            AND ta.deleted_at IS NULL
            GROUP BY ta.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getEditorOverallTotalForTenderAlternativesWithoutPrimeCostAndProvisionalBill(ProjectStructure $project, Company $company)
    {
        $con = self::getInstance()->getConnection();
        $pdo = $con->getDbh();

        $stmt = $pdo->prepare("SELECT ta.id, COALESCE(SUM(info.grand_total),0) AS total_rate
            FROM " . EditorBillItemInfoTable::getInstance()->getTableName() . " info
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON info.bill_item_id = item.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            JOIN " . BillTypeTable::getInstance()->getTableName() . " bt ON bt.project_structure_id = bill.id
            JOIN " . TenderAlternativeBillTable::getInstance()->getTableName() . " AS x ON x.project_structure_id = bt.project_structure_id
            JOIN " . TenderAlternativeTable::getInstance()->getTableName() . " ta ON x.tender_alternative_id = ta.id
            WHERE info.company_id = ".$company->id." AND bill.root_id = ".$project->id."
            AND ta.project_structure_id = ".$project->id." AND bill.type = " . ProjectStructure::TYPE_BILL . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND bt.type <> " . BillType::TYPE_PRIMECOST."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND bill.deleted_at IS NULL
            AND bt.deleted_at IS NULL
            AND ta.deleted_at IS NULL
            GROUP BY ta.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getSupplyOfMaterialAmountForTenderAlternatives(ProjectStructure $project)
    {
        $con = self::getInstance()->getConnection();
        $pdo = $con->getDbh();
        
        $stmt = $pdo->prepare("SELECT ta.id, COALESCE(SUM(item.amount),0) AS total_amount
            FROM " . SupplyOfMaterialItemTable::getInstance()->getTableName() . " AS item
            JOIN " . SupplyOfMaterialElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            JOIN " . TenderAlternativeBillTable::getInstance()->getTableName() . " AS x ON x.project_structure_id = bill.id
            JOIN " . TenderAlternativeTable::getInstance()->getTableName() . " ta ON x.tender_alternative_id = ta.id
            WHERE bill.root_id = ".$project->id." AND ta.project_structure_id = ".$project->id."
            AND bill.type = " . ProjectStructure::TYPE_SUPPLY_OF_MATERIAL_BILL . "
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND bill.deleted_at IS NULL
            AND ta.deleted_at IS NULL
            GROUP BY ta.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }
}