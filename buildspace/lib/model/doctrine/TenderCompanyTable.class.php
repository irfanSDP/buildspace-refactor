<?php

/**
 * TenderCompanyTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TenderCompanyTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object TenderCompanyTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TenderCompany');
    }

    public static function flushBillElementRatesByTenderCompanyId($tenderCompanyId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM " . TenderBillElementGrandTotalTable::getInstance()->getTableName() . " p WHERE p.tender_company_id = " . $tenderCompanyId);

        $stmt->execute();
    }

    public static function flushBillItemRatesByTenderCompanyId($tenderCompanyId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM " . TenderBillItemRateTable::getInstance()->getTableName() . " p WHERE p.tender_company_id = " . $tenderCompanyId);

        $stmt->execute();
    }

    public static function flushBillItemRatesByTenderCompanyIdAndItemType($tenderCompanyId, Array $itemType)
    {
        if ( !count($itemType) )
        {
            return;
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM " . TenderBillItemRateTable::getInstance()->getTableName() . " p
            WHERE p.id IN (
            SELECT rate.id FROM " . TenderBillItemRateTable::getInstance()->getTableName() . " rate
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.id = rate.bill_item_id
            WHERE i.type IN (" . implode(',', $itemType) . ") AND p.tender_company_id = " . $tenderCompanyId . ")");

        $stmt->execute();
    }

    public static function flushBillItemNotListedByTenderCompanyId($tenderCompanyId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM " . TenderBillItemNotListedTable::getInstance()->getTableName() . " p WHERE p.tender_company_id = " . $tenderCompanyId);

        $stmt->execute();
    }

    public static function updateAllShowStatusByProjectId($projectId, $showStatus)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("UPDATE " . TenderCompanyTable::getInstance()->getTableName() . " tc SET show = :show
        WHERE tc.project_structure_id = :project_structure_id");

        $stmt->execute(array(
            'project_structure_id' => $projectId,
            'show'                 => $showStatus
        ));
    }

    public static function updateAllShowStatusByCompanyIdsAndProjectId(Array $companyIds, $projectId, $showStatus)
    {
        if(!empty($companyIds))
        {
            $pdo = self::getInstance()->getConnection()->getDbh();

            $stmt = $pdo->prepare("UPDATE " . TenderCompanyTable::getInstance()->getTableName() . " tc SET show = :show
            WHERE tc.project_structure_id = :project_structure_id AND company_id IN (" . implode(',', $companyIds) . ")");

            $stmt->execute(array(
                'project_structure_id' => $projectId,
                'show'                 => $showStatus
            ));
        }
    }

    public static function getAllDisplayedContractorRatesByElementId($elementId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT e.id, p.root_id FROM " . BillElementTable::getInstance()->getTableName() . " e
        LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.id = e.project_structure_id
        WHERE e.id = :element_id");

        $stmt->execute(array(
            'element_id' => $elementId
        ));

        $element   = $stmt->fetch(PDO::FETCH_ASSOC);
        $projectId = $element['root_id'];

        $stmt = $pdo->prepare("SELECT  tc.id, tc.company_id, tc.project_structure_id FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        WHERE tc.project_structure_id = :project_structure_id AND tc.show IS TRUE");

        $stmt->execute(array(
            'project_structure_id' => $projectId
        ));

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $companyRates = array();

        foreach ( $tenderCompanies as $tenderCompany )
        {
            $stmt = $pdo->prepare("SELECT r.bill_item_id, r.tender_company_id, r.rate, r.grand_total FROM " . BillElementTable::getInstance()->getTableName() . " e
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id AND i.deleted_at IS NULL
            LEFT JOIN " . TenderBillItemRateTable::getInstance()->getTableName() . " r ON r.bill_item_id = i.id
            WHERE e.id = :element_id AND r.tender_company_id = :tc_id");

            $stmt->execute(array(
                'tc_id'      => $tenderCompany['id'],
                'element_id' => $elementId
            ));

            $companyRates[$tenderCompany['company_id']] = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
        }

        return $companyRates;
    }

    public static function getSelectedContractorRatesByElementId($elementId)
    {
        $pdo          = self::getInstance()->getConnection()->getDbh();
        $companyRates = array();

        $stmt = $pdo->prepare("SELECT e.id, p.root_id FROM " . BillElementTable::getInstance()->getTableName() . " e
        LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.id = e.project_structure_id
        WHERE e.id = :element_id");

        $stmt->execute(array(
            'element_id' => $elementId
        ));

        $element   = $stmt->fetch(PDO::FETCH_ASSOC);
        $projectId = $element['root_id'];

        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, tc.project_structure_id FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        JOIN " . TenderSettingTable::getInstance()->getTableName() . " ts ON (ts.awarded_company_id = tc.company_id AND ts.project_structure_id = tc.project_structure_id AND ts.deleted_at IS NULL)
        WHERE tc.project_structure_id = :project_structure_id AND tc.show IS TRUE LIMIT 1");

        $stmt->execute(array(
            'project_structure_id' => $projectId
        ));

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $tenderCompanies as $tenderCompany )
        {
            $stmt = $pdo->prepare("SELECT r.bill_item_id, r.tender_company_id, r.rate, r.grand_total FROM " . BillElementTable::getInstance()->getTableName() . " e
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id AND i.deleted_at IS NULL
            LEFT JOIN " . TenderBillItemRateTable::getInstance()->getTableName() . " r ON r.bill_item_id = i.id
            WHERE e.id = :element_id AND r.tender_company_id = :tc_id");

            $stmt->execute(array(
                'tc_id'      => $tenderCompany['id'],
                'element_id' => $elementId
            ));

            $companyRates[$tenderCompany['company_id']] = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
        }

        return $companyRates;
    }

    public static function getContractorRatesByElementIdAndContractorIds($elementId, $contractorIds)
    {
        $pdo           = self::getInstance()->getConnection()->getDbh();
        $contractorIds = json_decode($contractorIds, true);
        $companyRates  = array();

        if ( count($contractorIds) == 0 )
        {
            return $companyRates;
        }

        $stmt = $pdo->prepare("SELECT e.id, p.root_id FROM " . BillElementTable::getInstance()->getTableName() . " e
        LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.id = e.project_structure_id
        WHERE e.id = :element_id");

        $stmt->execute(array(
            'element_id' => $elementId
        ));

        $element   = $stmt->fetch(PDO::FETCH_ASSOC);
        $projectId = $element['root_id'];

        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, tc.project_structure_id FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        WHERE tc.company_id IN (" . implode(', ', $contractorIds) . ") AND tc.project_structure_id = {$projectId}");

        $stmt->execute(array());

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $tenderCompanies as $tenderCompany )
        {
            $stmt = $pdo->prepare("SELECT r.bill_item_id, r.tender_company_id, r.rate, r.grand_total FROM " . BillElementTable::getInstance()->getTableName() . " e
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id AND i.deleted_at IS NULL
            LEFT JOIN " . TenderBillItemRateTable::getInstance()->getTableName() . " r ON r.bill_item_id = i.id
            WHERE e.id = :element_id AND r.tender_company_id = :tc_id");

            $stmt->execute(array(
                'tc_id'      => $tenderCompany['id'],
                'element_id' => $elementId
            ));

            $companyRates[$tenderCompany['company_id']] = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
        }

        return $companyRates;
    }

    public static function getBillAmountByContractorIdAndProjectId($contractorId, $projectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $companyRates = array(
            'project_total' => 0,
            'bills'         => array()
        );

        $stmt = $pdo->prepare("SELECT e.project_structure_id, SUM(COALESCE(r.grand_total, 0)) AS total FROM " . BillElementTable::getInstance()->getTableName() . " e
            LEFT JOIN " . TenderBillElementGrandTotalTable::getInstance()->getTableName() . " r ON r.bill_element_id = e.id
            JOIN " . TenderCompanyTable::getInstance()->getTableName() . " tc ON r.tender_company_id = tc.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b ON e.project_structure_id = b.id
            WHERE b.root_id = " . $projectId . " AND b.type = " . ProjectStructure::TYPE_BILL . " AND b.deleted_at IS NULL
            AND tc.company_id = " . $contractorId . " AND tc.project_structure_id = " . $projectId . " AND e.deleted_at IS NULL
            GROUP BY e.project_structure_id");

        $stmt->execute();

        $rates = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        foreach ( $rates as $billId => $rate )
        {
            $companyRates['project_total'] += $rate[0]['total'];
            $companyRates['bills'][$billId] = $rate[0]['total'];
        }

        return $companyRates;
    }

    public static function getElementsAmountByContractorIdAndBillId($contractorId, $billId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $elementGrandTotal = array(
            'bill_total' => 0,
            'elements'   => array()
        );

        $stmt = $pdo->prepare("SELECT e.id, COALESCE(r.grand_total, 0) AS grand_total
            FROM " . BillElementTable::getInstance()->getTableName() . " e
            LEFT JOIN " . TenderBillElementGrandTotalTable::getInstance()->getTableName() . " r ON r.bill_element_id = e.id
            JOIN " . TenderCompanyTable::getInstance()->getTableName() . " tc ON r.tender_company_id = tc.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b ON e.project_structure_id = b.id AND tc.project_structure_id = b.root_id
            WHERE b.id = " . $billId . " AND b.type = " . ProjectStructure::TYPE_BILL . " AND b.deleted_at IS NULL
            AND tc.company_id = " . $contractorId . " AND e.deleted_at IS NULL ORDER BY e.priority ASC");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        foreach ( $records as $elementId => $grandTotal )
        {
            $elementGrandTotal['bill_total'] += $grandTotal;
            $elementGrandTotal['elements'][$elementId] = $grandTotal;
        }

        return $elementGrandTotal;
    }

    public static function getAllDisplayedContractorBillAmountByProjectId($projectId, $tenderAlternativeId=null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        //Get Bill Ids
        if($tenderAlternativeId)
        {
            $billSql = "SELECT b.id
            FROM " . ProjectStructureTable::getInstance()->getTableName() . " p
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b ON b.root_id = p.id
            JOIN " . TenderAlternativeTable::getInstance()->getTableName() . " ta ON ta.project_structure_id = p.id
            JOIN " . TenderAlternativeBillTable::getInstance()->getTableName() . " x ON x.tender_alternative_id = ta.id AND x.project_structure_id = b.id
            WHERE p.id = :project_structure_id AND b.type = :type AND ta.id = ".$tenderAlternativeId."
            AND p.deleted_at IS NULL AND b.deleted_at IS NULL
            AND ta.deleted_at IS NULL AND ta.project_revision_deleted_at IS NULL";
        }
        else
        {
            $billSql = "SELECT p.id FROM " . ProjectStructureTable::getInstance()->getTableName() . " p
            WHERE p.root_id = :project_structure_id AND p.type = :type AND p.deleted_at IS NULL";
        }

        $stmt = $pdo->prepare($billSql);

        $stmt->execute(array(
            'project_structure_id' => $projectId,
            'type'                 => ProjectStructure::TYPE_BILL
        ));

        $billIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, tc.project_structure_id FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        WHERE tc.project_structure_id = :project_structure_id AND tc.show IS TRUE");

        $stmt->execute(array(
            'project_structure_id' => $projectId
        ));

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $companyRates = array();

        foreach ( $tenderCompanies as $tenderCompany )
        {
            if ( count($billIds) )
            {
                $companyRates[$tenderCompany['company_id']] = array(
                    'project_total' => 0,
                    'bill'          => array()
                );

                $stmt = $pdo->prepare("SELECT e.project_structure_id, SUM(COALESCE(r.grand_total, 0)) AS total FROM " . BillElementTable::getInstance()->getTableName() . " e
                LEFT JOIN " . TenderBillElementGrandTotalTable::getInstance()->getTableName() . " r ON r.bill_element_id = e.id  AND r.tender_company_id = :tc_id
                WHERE e.project_structure_id IN (" . implode(',', $billIds) . ") GROUP BY e.project_structure_id");

                $stmt->execute(array(
                    'tc_id' => $tenderCompany['id']
                ));

                $rates = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

                foreach ( $rates as $billId => $rate )
                {
                    $companyRates[$tenderCompany['company_id']]['project_total'] += $rate[0]['total'];
                    $companyRates[$tenderCompany['company_id']]['bill'][$billId] = $rate[0]['total'];
                }
            }
        }

        return $companyRates;
    }

    public static function getSelectedContractorBillAmountByProjectId(ProjectStructure $rootProject, Array $projects)
    {
        $pdo        = self::getInstance()->getConnection()->getDbh();
        $projectIds = array();

        foreach ( $projects as $project )
        {
            $projectIds[] = $project['id'];
        }

        //Get Bill Ids
        $stmt = $pdo->prepare("SELECT p.id FROM " . ProjectStructureTable::getInstance()->getTableName() . " p WHERE p.id IN (" . implode(', ', $projectIds) . ") AND p.type = " . ProjectStructure::TYPE_BILL . " AND p.deleted_at IS NULL");

        $stmt->execute(array());

        $billIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        // Get Selected Tender Company
        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, tc.project_structure_id FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        JOIN " . TenderSettingTable::getInstance()->getTableName() . " ts ON (ts.awarded_company_id = tc.company_id AND ts.project_structure_id = tc.project_structure_id AND ts.deleted_at IS NULL)
        WHERE tc.project_structure_id = " . $rootProject->root_id . " AND tc.show IS TRUE LIMIT 1");

        $stmt->execute(array());

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $companyRates = array();

        foreach ( $tenderCompanies as $tenderCompany )
        {
            if ( count($billIds) )
            {
                $companyRates[$tenderCompany['company_id']] = array(
                    'project_total' => 0,
                    'bill'          => array()
                );

                $stmt = $pdo->prepare("SELECT e.project_structure_id, SUM(COALESCE(r.grand_total, 0)) AS total FROM " . BillElementTable::getInstance()->getTableName() . " e
                    LEFT JOIN " . TenderBillElementGrandTotalTable::getInstance()->getTableName() . " r ON r.bill_element_id = e.id AND r.tender_company_id = " . $tenderCompany['id'] . "
                    WHERE e.project_structure_id IN (" . implode(',', $billIds) . ") GROUP BY e.project_structure_id");

                $stmt->execute(array());

                $rates = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

                foreach ( $rates as $billId => $rate )
                {
                    $companyRates[$tenderCompany['company_id']]['project_total'] += $rate[0]['total'];
                    $companyRates[$tenderCompany['company_id']]['bill'][$billId] = $rate[0]['total'];
                }
            }
        }

        return $companyRates;
    }

    public static function getAllContractorBillAmountByProjectIdAndContractors(ProjectStructure $rootProject, Array $projects, $contractorIds)
    {
        $pdo          = self::getInstance()->getConnection()->getDbh();
        $projectIds   = array();
        $companyRates = array();

        if ( count($contractorIds) == 0 )
        {
            return $companyRates;
        }

        foreach ( $projects as $project )
        {
            $projectIds[] = $project['id'];
        }

        //Get Bill Ids
        $stmt = $pdo->prepare("SELECT p.id FROM " . ProjectStructureTable::getInstance()->getTableName() . " p WHERE p.id IN (" . implode(', ', $projectIds) . ") AND p.type = " . ProjectStructure::TYPE_BILL . " AND p.deleted_at IS NULL");

        $stmt->execute(array());

        $billIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        // Get All Assigned Tender Company
        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, tc.project_structure_id FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        WHERE tc.company_id IN (" . implode(', ', $contractorIds) . ") AND tc.project_structure_id = {$rootProject->root_id}");

        $stmt->execute(array());

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $tenderCompanies as $tenderCompany )
        {
            if ( count($billIds) )
            {
                $companyRates[$tenderCompany['company_id']] = array(
                    'project_total' => 0,
                    'bill'          => array()
                );

                $stmt = $pdo->prepare("SELECT e.project_structure_id, SUM(COALESCE(r.grand_total, 0)) AS total FROM " . BillElementTable::getInstance()->getTableName() . " e
                    LEFT JOIN " . TenderBillElementGrandTotalTable::getInstance()->getTableName() . " r ON r.bill_element_id = e.id AND r.tender_company_id = " . $tenderCompany['id'] . "
                    WHERE e.project_structure_id IN (" . implode(',', $billIds) . ") GROUP BY e.project_structure_id");

                $stmt->execute(array());

                $rates = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

                foreach ( $rates as $billId => $rate )
                {
                    $companyRates[$tenderCompany['company_id']]['project_total'] += $rate[0]['total'];
                    $companyRates[$tenderCompany['company_id']]['bill'][$billId] = $rate[0]['total'];
                }
            }
        }

        return $companyRates;
    }

    public static function getAllDisplayedContractorElementGrandTotalByProjectAndBillId($projectId, $billId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        //Get Bill Ids
        $stmt = $pdo->prepare("SELECT e.id FROM " . BillElementTable::getInstance()->getTableName() . " e
        WHERE e.project_structure_id = :project_structure_id AND e.deleted_at IS NULL");

        $stmt->execute(array(
            'project_structure_id' => $billId
        ));

        $elementIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        //Get Tender Company List
        $stmt = $pdo->prepare("SELECT  tc.id, tc.company_id, tc.project_structure_id FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        WHERE tc.project_structure_id = :project_structure_id AND tc.show IS TRUE");

        $stmt->execute(array(
            'project_structure_id' => $projectId
        ));

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $companyRates = array();

        foreach ( $tenderCompanies as $tenderCompany )
        {
            if ( count($elementIds) )
            {
                $companyRates[$tenderCompany['company_id']] = array(
                    'bill_total' => 0,
                    'element'    => array()
                );

                $stmt = $pdo->prepare("SELECT r.bill_element_id, r.grand_total AS total FROM " . TenderBillElementGrandTotalTable::getInstance()->getTableName() . " r
                WHERE r.tender_company_id = :tc_id AND r.bill_element_id IN (" . implode(',', $elementIds) . ")");

                $stmt->execute(array(
                    'tc_id' => $tenderCompany['id']
                ));

                $rates = $stmt->fetchAll(PDO::FETCH_ASSOC);

                foreach ( $rates as $billId => $rate )
                {
                    $companyRates[$tenderCompany['company_id']]['bill_total'] += $rate['total'];
                    $companyRates[$tenderCompany['company_id']]['element'][$rate['bill_element_id']] = $rate['total'];
                }
            }
        }

        return $companyRates;
    }

    public static function getSelectedContractorElementGrandTotalByBillAndElements(ProjectStructure $bill, Array $elements)
    {
        $pdo        = self::getInstance()->getConnection()->getDbh();
        $elementIds = array();

        foreach ( $elements as $element )
        {
            $elementIds[] = $element['id'];
        }

        // Get Selected Tender Company
        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, tc.project_structure_id FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        JOIN " . TenderSettingTable::getInstance()->getTableName() . " ts ON (ts.awarded_company_id = tc.company_id AND ts.project_structure_id = tc.project_structure_id AND ts.deleted_at IS NULL)
        WHERE tc.project_structure_id = " . $bill->root_id . " AND tc.show IS TRUE LIMIT 1");

        $stmt->execute(array());

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $companyRates = array();

        foreach ( $tenderCompanies as $tenderCompany )
        {
            if ( count($elementIds) )
            {
                $companyRates[$tenderCompany['company_id']] = array(
                    'bill_total' => 0,
                    'element'    => array()
                );

                $stmt = $pdo->prepare("SELECT r.bill_element_id, r.grand_total AS total FROM " . TenderBillElementGrandTotalTable::getInstance()->getTableName() . " r
                WHERE r.tender_company_id = " . $tenderCompany['id'] . " AND r.bill_element_id IN (" . implode(',', $elementIds) . ")");

                $stmt->execute(array());

                $rates = $stmt->fetchAll(PDO::FETCH_ASSOC);

                foreach ( $rates as $billId => $rate )
                {
                    $companyRates[$tenderCompany['company_id']]['bill_total'] += $rate['total'];
                    $companyRates[$tenderCompany['company_id']]['element'][$rate['bill_element_id']] = $rate['total'];
                }
            }
        }

        return $companyRates;
    }

    public static function getContractorElementGrandTotalByBillAndElementsAndTenderers(ProjectStructure $bill, Array $elements, $contractorIds)
    {
        $pdo           = self::getInstance()->getConnection()->getDbh();
        $contractorIds = json_decode($contractorIds, true);
        $elementIds    = array();
        $companyRates  = array();

        if ( count($contractorIds) == 0 )
        {
            return $companyRates;
        }

        foreach ( $elements as $element )
        {
            $elementIds[] = $element['id'];
        }

        // Get All Assigned Tender Company
        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, tc.project_structure_id FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        WHERE tc.company_id IN (" . implode(', ', $contractorIds) . ") AND tc.project_structure_id = {$bill->root_id}");

        $stmt->execute(array());

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $tenderCompanies as $tenderCompany )
        {
            if ( count($elementIds) )
            {
                $companyRates[$tenderCompany['company_id']] = array(
                    'bill_total' => 0,
                    'element'    => array()
                );

                $stmt = $pdo->prepare("SELECT r.bill_element_id, r.grand_total AS total FROM " . TenderBillElementGrandTotalTable::getInstance()->getTableName() . " r
                WHERE r.tender_company_id = " . $tenderCompany['id'] . " AND r.bill_element_id IN (" . implode(',', $elementIds) . ")");

                $stmt->execute(array());

                $rates = $stmt->fetchAll(PDO::FETCH_ASSOC);

                foreach ( $rates as $billId => $rate )
                {
                    $companyRates[$tenderCompany['company_id']]['bill_total'] += $rate['total'];
                    $companyRates[$tenderCompany['company_id']]['element'][$rate['bill_element_id']] = $rate['total'];
                }
            }
        }

        return $companyRates;
    }

    public static function getByProjectIdAndCompanyId($projectId, $companyId, $hydrate = null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('TenderCompany xref')
            ->where('xref.project_structure_id = ?', $projectId)
            ->andWhere('xref.company_id = ?', $companyId)
            ->limit(1);

        if ( !is_null($hydrate) )
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function refreshBillItemRatesByTenderCompanyIdAndProjectId($projectId, $tenderCompanyId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

        $stmt = $pdo->prepare("SELECT c.id , c.id, c.quantity, c.name, c.use_original_quantity
            FROM " . ProjectStructureTable::getInstance()->getTableName() . " s
            LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = s.id AND c.deleted_at IS NULL
            WHERE s.root_id = " . $projectId . " AND s.id <> " . $projectId . " AND s.deleted_at IS NULL");

        $stmt->execute();

        $projectColumnSettings = array_map('reset', $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC));

        /* Get Item PC Rates */
        $stmt = $pdo->prepare("SELECT pc.tender_bill_item_rate_id, pc.supply_rate, pc.wastage_percentage, pc.wastage_amount,
            pc.labour_for_installation, pc.other_cost, pc.profit_percentage, pc.profit_amount, pc.total
            FROM " . TenderBillItemPrimeCostRateTable::getInstance()->getTableName() . " pc
            JOIN " . TenderBillItemRateTable::getInstance()->getTableName() . " r ON r.id = pc.tender_bill_item_rate_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.id = r.bill_item_id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.id = i.element_id AND e.deleted_at IS NULL
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.id = e.project_structure_id AND p.deleted_at IS NULL
            WHERE p.root_id = " . $projectId . " AND p.id <> " . $projectId . " AND p.deleted_at IS NULL");

        $stmt->execute();

        $tenderItemPCRates = array_map('reset', $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP));

        /* Get Item Lump Sump Percent */
        $stmt = $pdo->prepare("SELECT ls.tender_bill_item_rate_id, ls.rate, ls.percentage, ls.amount
            FROM " . TenderBillItemLumpSumPercentageTable::getInstance()->getTableName() . " ls
            JOIN " . TenderBillItemRateTable::getInstance()->getTableName() . " r ON r.id = ls.tender_bill_item_rate_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.id = r.bill_item_id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.id = i.element_id AND e.deleted_at IS NULL
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.id = e.project_structure_id AND p.deleted_at IS NULL
            WHERE p.root_id = " . $projectId . " AND p.id <> " . $projectId . " AND p.deleted_at IS NULL");

        $stmt->execute();

        $tenderItemLSPercent = array_map('reset', $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP));

        /* Start Query */
        $excludedItemType = array( BillItem::TYPE_HEADER, BillItem::TYPE_HEADER_N );

        $sqlFieldCond = '(
            CASE i.type WHEN ' . BillItem::TYPE_ITEM_NOT_LISTED . ' THEN
                CASE COALESCE(inl_qty.final_value, 0)
                WHEN 0
                THEN 0
                ELSE COALESCE(inl_qty.final_value, 0)
                END
            ELSE
                COALESCE(fc.final_value, 0)
                END
            ) AS value,
            (CASE i.type WHEN ' . BillItem::TYPE_ITEM_NOT_LISTED . ' THEN
                inl_qty.bill_column_setting_id
            ELSE
                type.bill_column_setting_id
            END) AS bill_column_setting_id';

        $nlTable = "LEFT JOIN " . TenderBillItemNotListedTable::getInstance()->getTableName() . " inl ON inl.id = r.tender_bill_item_not_listed_id AND r.bill_item_id = inl.bill_item_id AND inl.tender_company_id = r.tender_company_id
                    LEFT JOIN " . TenderBillItemNotListedQuantityTable::getInstance()->getTableName() . " inl_qty ON inl_qty.tender_bill_item_not_listed_id = inl.id";

        $stmt = $pdo->prepare("SELECT DISTINCT i.id, i.element_id, i.type, i.priority, i.lft, i.level,
            r.id AS prev_rate_id, COALESCE(r.rate, 0) AS rate, r.tender_bill_item_not_listed_id,
            " . $sqlFieldCond . "
            FROM " . BillItemTable::getInstance()->getTableName() . " i
            LEFT JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " type ON  type.bill_item_id = i.id AND type.deleted_at IS NULL AND type.include IS TRUE
            LEFT JOIN " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc ON fc.relation_id = type.id AND fc.deleted_at IS NULL AND COALESCE(fc.final_value, 0) <> 0 AND fc.column_name = '" . BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT . "'
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.id = i.element_id AND e.deleted_at IS NULL
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.id = e.project_structure_id AND p.deleted_at IS NULL
            LEFT JOIN " . TenderBillItemRateTable::getInstance()->getTableName() . " r ON r.bill_item_id = i.id AND r.tender_company_id = " . $tenderCompanyId . " AND COALESCE(r.rate, 0) <> 0
            " . $nlTable . "
            WHERE p.root_id = " . $projectId . " AND i.type NOT IN (" . implode(',', $excludedItemType) . ")
            AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL ORDER BY i.priority, i.lft, i.level");

        $stmt->execute();

        $billItems = $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP);

        $importStmt = new sfImportExcelStatementGenerator();

        $importStmt->createInsert(TenderBillItemRateTable::getInstance()->getTableName(), array(
            'tender_company_id',
            'bill_item_id',
            'tender_bill_item_not_listed_id',
            'rate',
            'grand_total',
            'created_at',
            'updated_at',
            'created_by',
            'updated_by'
        ));

        $elementGrandTotal = array();

        foreach ( $billItems as $itemId => $quantities )
        {
            $rate            = 0;
            $grandTotal      = 0;
            $prevItemId      = null;
            $itemType        = null;
            $itemNotListedId = null;

            foreach ( $quantities as $k => $qty )
            {
                if ( !array_key_exists($qty['element_id'], $elementGrandTotal) )
                {
                    $elementGrandTotal[$qty['element_id']] = array(
                        'grand_total' => 0
                    );
                }

                $rate            = $qty['rate'];
                $prevItemId      = $qty['prev_rate_id'];
                $itemType        = $qty['type'];
                $itemNotListedId = $qty['tender_bill_item_not_listed_id'];

                $columnQty = !empty($qty['bill_column_setting_id']) ? $projectColumnSettings[$qty['bill_column_setting_id']]['quantity'] : 0;

                $grandTotalPerUnit = number_format($qty['value'] * $rate, 2, '.', '');

                $grandTotal += $grandTotalPerUnit * $columnQty;

                $elementGrandTotal[$qty['element_id']]['grand_total'] += $grandTotalPerUnit * $columnQty;
            }

            if (!empty($rate))
            {
                $importStmt->addRecord(array( $tenderCompanyId, $itemId, $itemNotListedId, $rate, $grandTotal, 'NOW()', 'NOW()', $userId, $userId ), $prevItemId);
            }

            unset( $quantities );
        }

        unset( $billItems );

        TenderCompanyTable::flushBillElementRatesByTenderCompanyId($tenderCompanyId);
        TenderCompanyTable::flushBillItemRatesByTenderCompanyId($tenderCompanyId);

        $importStmt->save();

        $previousItemIdToNewId = $importStmt->returningIds;

        /*Update TenderPCRate*/
        if ( !empty($tenderItemPCRates) && !empty($previousItemIdToNewId) )
        {
            $importStmt->createInsert(TenderBillItemPrimeCostRateTable::getInstance()->getTableName(), array(
                'tender_bill_item_rate_id', 'supply_rate', 'wastage_percentage', 'wastage_amount',
                'labour_for_installation', 'other_cost', 'profit_percentage', 'profit_amount', 'total',
                'created_at', 'updated_at', 'created_by', 'updated_by' ));

            $doSave = false;

            foreach ( $tenderItemPCRates as $prevItemId => $item )
            {
                if(isset($previousItemIdToNewId[$prevItemId]))
                {
                    $importStmt->addRecord(array(
                        $previousItemIdToNewId[$prevItemId], $item['supply_rate'], $item['wastage_percentage'],
                        $item['wastage_amount'], $item['labour_for_installation'], $item['other_cost'],
                        $item['profit_percentage'], $item['profit_amount'], $item['total'], 'NOW()',
                        'NOW()', $userId, $userId));

                    $doSave = true;
                }
            }

            if($doSave)
                $importStmt->save();
        }

        /*Update Item LS Percent*/
        if ( !empty($tenderItemLSPercent) && !empty($previousItemIdToNewId) )
        {
            $importStmt->createInsert(TenderBillItemLumpSumPercentageTable::getInstance()->getTableName(), array(
                'tender_bill_item_rate_id', 'rate', 'percentage', 'amount',
                'created_at', 'updated_at', 'created_by', 'updated_by' ));

            $doSave = false;

            foreach ( $tenderItemLSPercent as $prevItemId => $item )
            {
                if(isset($previousItemIdToNewId[$prevItemId]))
                {
                    $importStmt->addRecord(array(
                        $previousItemIdToNewId[$prevItemId], $item['rate'], $item['percentage'], $item['amount'],
                        'NOW()', 'NOW()', $userId, $userId ));

                    $doSave = true;
                }
            }

            if($doSave)
                $importStmt->save();
        }

        /* Update Element GrandTotal */
        if ( count($elementGrandTotal) )
        {
            $importStmt->createInsert(TenderBillElementGrandTotalTable::getInstance()->getTableName(), array(
                'tender_company_id',
                'bill_element_id',
                'grand_total',
                'created_at',
                'updated_at',
                'created_by',
                'updated_by'
            ));

            foreach ( $elementGrandTotal as $elementId => $grandTotal )
            {
                $importStmt->addRecord(array( $tenderCompanyId, $elementId, $grandTotal['grand_total'], 'NOW()', 'NOW()', $userId, $userId ));
            }

            $importStmt->save();
        }
    }

    public static function getContractorSingleUnitElementGrandTotalByBillAndElementsAndTenderers(ProjectStructure $bill, Array $elements, $contractorIds)
    {
        $pdo           = self::getInstance()->getConnection()->getDbh();
        $contractorIds = is_array($contractorIds) ? $contractorIds : json_decode($contractorIds, true);
        $elementIds    = array();
        $companiesIds  = array();
        $companyRates  = array();

        foreach ( $elements as $element )
        {
            $elementIds[] = $element['id'];
        }

        if ( count($contractorIds) === 0 )
        {
            return $companyRates;
        }

        if ( !count($elementIds) )
        {
            return $companyRates;
        }

        // Get All Assigned Tender Company
        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, tc.project_structure_id
        FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        WHERE tc.company_id IN (" . implode(', ', $contractorIds) . ") AND tc.project_structure_id = {$bill->root_id}");

        $stmt->execute(array());

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $tenderCompanies as $tenderCompany )
        {
            $companiesIds[$tenderCompany['company_id']] = $tenderCompany['id'];
        }

        if ( !count($companiesIds) )
        {
            return $companyRates;
        }

        $stmt = $pdo->prepare("SELECT tbir.tender_company_id, e.id as bill_element_id, tbir.bill_item_id, tbir.rate as rate
        FROM " . TenderBillItemRateTable::getInstance()->getTableName() . " tbir
        JOIN " . BillItemTable::getInstance()->getTableName() . " i ON
        (i.id = tbir.bill_item_id AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL)
        JOIN " . BillElementTable::getInstance()->getTableName() . " e ON (i.element_id = e.id)
        WHERE tbir.tender_company_id IN (" . implode(',', $companiesIds) . ") AND e.id IN (" . implode(',', $elementIds) . ")");

        $stmt->execute(array());

        $rates = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $rates as $billId => $rate )
        {
            $companyId = array_search($rate['tender_company_id'], $companiesIds);

            $companyRates[$companyId][$rate['bill_element_id']][$rate['bill_item_id']] = $rate['rate'];
        }

        return $companyRates;
    }

    public static function getDisplayedContractorSupplyOfMaterialsByElementId($elementId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT  tc.id, tc.company_id, tc.project_structure_id
        FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.root_id = tc.project_structure_id
        JOIN " . SupplyOfMaterialElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = p.id
        WHERE e.id = ".$elementId." AND tc.show IS TRUE");

        $stmt->execute();

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $companyRates = array();

        foreach ( $tenderCompanies as $tenderCompany )
        {
            $stmt = $pdo->prepare("SELECT r.supply_of_material_item_id, r.tender_company_id, r.supply_rate, r.contractor_supply_rate, r.estimated_qty, r.percentage_of_wastage, r.difference, r.amount
            FROM " . SupplyOfMaterialElementTable::getInstance()->getTableName() . " e
            LEFT JOIN " . SupplyOfMaterialItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id AND i.deleted_at IS NULL
            LEFT JOIN " . TenderSupplyOfMaterialRateTable::getInstance()->getTableName() . " r ON r.supply_of_material_item_id = i.id
            WHERE e.id = ".$elementId." AND r.tender_company_id = ".$tenderCompany['id']);

            $stmt->execute();

            $companyRates[$tenderCompany['company_id']] = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
        }

        return $companyRates;
    }

    public static function getAllDisplayedContractorSupplyOfMaterialElementGrandTotalByBillId($billId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, e.id AS element_id, SUM(COALESCE(r.amount, 0)) AS total
        FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.root_id = tc.project_structure_id
        JOIN " . SupplyOfMaterialElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = p.id
        JOIN " . SupplyOfMaterialItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id AND i.deleted_at IS NULL
        JOIN " . TenderSupplyOfMaterialRateTable::getInstance()->getTableName() . " r ON r.supply_of_material_item_id = i.id AND r.tender_company_id = tc.id
        WHERE p.id = ".$billId." AND tc.show IS TRUE GROUP BY tc.id, tc.company_id, e.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getAllDisplayedContractorSupplyOfMaterialAmountByProjectId($projectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, p.id AS bill_id, SUM(COALESCE(r.amount, 0)) AS total
        FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.root_id = tc.project_structure_id
        JOIN " . SupplyOfMaterialElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = p.id
        JOIN " . SupplyOfMaterialItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id AND i.deleted_at IS NULL
        JOIN " . TenderSupplyOfMaterialRateTable::getInstance()->getTableName() . " r ON r.supply_of_material_item_id = i.id
        WHERE p.root_id = ".$projectId." AND r.tender_company_id = tc.id AND tc.show IS TRUE GROUP BY tc.id, tc.company_id, p.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getAllDisplayedContractorScheduleOfRateBillElementGrandTotalByBillId($billId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, e.id AS element_id, SUM(COALESCE(r.contractor_rate, 0)) AS total
        FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.root_id = tc.project_structure_id
        JOIN " . ScheduleOfRateBillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = p.id
        JOIN " . ScheduleOfRateBillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id AND i.deleted_at IS NULL
        JOIN " . TenderScheduleOfRateTable::getInstance()->getTableName() . " r ON r.schedule_of_rate_bill_item_id = i.id AND r.tender_company_id = tc.id
        WHERE p.id = ".$billId." AND tc.show IS TRUE GROUP BY tc.id, tc.company_id, e.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getDisplayedContractorScheduleOfRatesByElementId($elementId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT  tc.id, tc.company_id, tc.project_structure_id
        FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.root_id = tc.project_structure_id
        JOIN " . ScheduleOfRateBillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = p.id
        WHERE e.id = ".$elementId." AND tc.show IS TRUE");

        $stmt->execute();

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $companyRates = array();

        foreach ( $tenderCompanies as $tenderCompany )
        {
            $stmt = $pdo->prepare("SELECT r.schedule_of_rate_bill_item_id, r.tender_company_id, r.estimation_rate, r.contractor_rate, r.difference
            FROM " . ScheduleOfRateBillElementTable::getInstance()->getTableName() . " e
            LEFT JOIN " . ScheduleOfRateBillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id AND i.deleted_at IS NULL
            LEFT JOIN " . TenderScheduleOfRateTable::getInstance()->getTableName() . " r ON r.schedule_of_rate_bill_item_id = i.id
            WHERE e.id = ".$elementId." AND r.tender_company_id = ".$tenderCompany['id']);

            $stmt->execute();

            $companyRates[$tenderCompany['company_id']] = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
        }

        return $companyRates;
    }

    public static function getAllDisplayedContractorScheduleOfRateBillAmountByProjectId($projectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id, p.id AS bill_id, SUM(COALESCE(r.contractor_rate, 0)) AS total
        FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.root_id = tc.project_structure_id
        JOIN " . ScheduleOfRateBillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = p.id
        JOIN " . ScheduleOfRateBillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id AND i.deleted_at IS NULL
        JOIN " . TenderScheduleOfRateTable::getInstance()->getTableName() . " r ON r.schedule_of_rate_bill_item_id = i.id
        WHERE p.root_id = ".$projectId." AND r.tender_company_id = tc.id AND tc.show IS TRUE GROUP BY tc.id, tc.company_id, p.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function updateCompanyRemarks($projectId, $companyId, $remarks)
    {
        $record = self::getRecordByProjectAndCompany($projectId, $companyId);

        $record->remarks = $remarks;

        return $record->save();
    }

    public static function getRecordByProjectAndCompany($projectId, $companyId)
    {
        return DoctrineQuery::create()->select('*')
            ->from('TenderCompany tc')
            ->where('tc.project_structure_id = ?', $projectId)
            ->andWhere('tc.company_id = ?', $companyId)
            ->fetchOne();
    }

    public static function getDisplayedContractorSupplyOfMaterialItemRates(array $itemIds, array $tendererIds)
    {
        if(empty($itemIds) || empty($tendererIds)) return array();

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT tc.id, tc.company_id
        FROM " . TenderCompanyTable::getInstance()->getTableName() . " tc
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON p.root_id = tc.project_structure_id
        JOIN " . SupplyOfMaterialElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = p.id
        JOIN " . SupplyOfMaterialItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
        WHERE i.id IN (".implode(',', $itemIds).")
        AND tc.company_id IN (".implode(',', $tendererIds).")
        AND tc.show IS TRUE");

        $stmt->execute();

        $tenderCompanies = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $companyRates = array();

        foreach ( $tenderCompanies as $tenderCompany )
        {
            $stmt = $pdo->prepare("SELECT r.supply_of_material_item_id, r.tender_company_id, r.supply_rate, r.contractor_supply_rate, r.estimated_qty, r.percentage_of_wastage, r.difference, r.amount
            FROM " . SupplyOfMaterialElementTable::getInstance()->getTableName() . " e
            LEFT JOIN " . SupplyOfMaterialItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id AND i.deleted_at IS NULL
            LEFT JOIN " . TenderSupplyOfMaterialRateTable::getInstance()->getTableName() . " r ON r.supply_of_material_item_id = i.id
            WHERE i.id IN (".implode(',', $itemIds).")
            AND r.tender_company_id = ".$tenderCompany['id']."
            AND i.deleted_at IS NULL
            AND e.deleted_at IS NULL");

            $stmt->execute();

            $companyRates[$tenderCompany['company_id']] = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
        }

        return $companyRates;
    }
}
