<?php

/**
 * BillSettingTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillSettingTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BillSettingTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillSetting');
    }

    public static function updateAllBuildUpQuantityRoundingbyBillId($billId, $billColumnSettings, $newRoundingType, $billMarkupSetting)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $typeToColumnCaseStatement = " WHEN ".BillBuildUpQuantityItem::QUANTITY_PER_UNIT_ORIGINAL." THEN '".BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT."'";
        $typeToColumnCaseStatement.=" WHEN ".BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT." THEN '".BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT."'";

        $billColumnSettingIds = array();

        foreach($billColumnSettings as $billColumnSetting)
        {
            array_push($billColumnSettingIds, $billColumnSetting['id']);
        }

        $summaryIds = array();
        $formulatedColumnIds = array();
        $formulatedColumnIdsToAffectedNode = array();
        $billItemIds = array();
        $itemRatesAndMarkup = array();

        $finalQuantityCaseStatement = '';
        $formulatedColumnQtyCaseStatement = '';

        //Get List Of Item Affected by Rounding Change
        $stmt = $pdo->prepare("SELECT item.id, item.element_id, COALESCE(ifc.final_value, 0) as rate, COALESCE(markup.final_value, 0) as markup_percentage, summary.*, type_fc.id as type_fc_id, type_fc.column_name, type.id as type_id FROM  ".BillBuildUpQuantitySummaryTable::getInstance()->getTableName()." AS summary
                LEFT JOIN ".BillItemTable::getInstance()->getTableName()." AS item ON item.id = summary.bill_item_id
                LEFT JOIN ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS ifc ON ifc.relation_id = item.id AND ifc.deleted_at IS NULL AND ifc.column_name = '".BillItem::FORMULATED_COLUMN_RATE."'
                LEFT JOIN ".BillItemFormulatedColumnTable::getInstance()->getTableName()." markup ON markup.relation_id = item.id AND markup.deleted_at IS NULL AND markup.column_name = '".BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
                LEFT JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON element.id = item.element_id
                LEFT JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." as type ON type.bill_item_id = item.id AND type.bill_column_setting_id = summary.bill_column_setting_id
                LEFT JOIN ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." type_fc ON type_fc.relation_id = type.id
                AND type_fc.column_name = (CASE summary.type".$typeToColumnCaseStatement." END)
                WHERE element.project_structure_id = ".$billId." AND summary.bill_column_setting_id IN (".implode(',', $billColumnSettingIds).") AND summary.deleted_at IS NULL AND item.deleted_at IS NULL");

        $stmt->execute();

        $affectedItemsList = $stmt->fetchAll(PDO::FETCH_ASSOC|PDO::FETCH_GROUP);

        foreach($affectedItemsList as $itemId => $summaries)
        {
            foreach($summaries as $summary)
            {
            	$scheduleOfQtyTotal = BillItemTable::getScheduleOfQuantitiesTotalAmountByItemIdAndColumnSettingId($itemId, $summary['bill_column_setting_id'], $summary['type']);
            	
                $finalQuantity = $summary['total_quantity'] + $scheduleOfQtyTotal;

                if($summary['apply_conversion_factor'])
                {
                    $exp = $finalQuantity.$summary['conversion_factor_operator'].$summary['conversion_factor_amount'];

                    $evaluator = new EvalMath(true, true);
                    $evaluator->suppress_errors = true;
                    $evaluatedValue = $evaluator->evaluate($exp);
                    $finalQuantity = $evaluatedValue ? $evaluatedValue : 0;
                }

                switch($newRoundingType)
                {
                    case BillSetting::ROUNDING_TYPE_UPWARD:
                        $sql = 'CEIL('.$finalQuantity.')';
                        break;
                    case BillSetting::ROUNDING_TYPE_DOWNWARD:
                        $sql = 'FLOOR('.$finalQuantity.')';
                        break;
                    case BillSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                        $sql = 'ROUND('.$finalQuantity.')';
                        break;
                    case BillSetting::ROUNDING_TYPE_NEAREST_TENTH:
                        $sql = 'ROUND('.$finalQuantity.' * 10) / 10';
                        break;
                    default:
                        $sql = 'ROUND('.$finalQuantity.', 2)';
                }

                $finalQuantityCaseStatement.=" WHEN ".$summary['id']." THEN (".$sql.")";
                
                if($summary['type_fc_id'])
                {
                    $formulatedColumnQtyCaseStatement.= " WHEN ".$summary['type_fc_id']." THEN (".$sql.")";

                    array_push($formulatedColumnIds, $summary['type_fc_id']);
                }

                $affected_nodes = BillItemTypeReferenceFormulatedColumnTable::getInstance()->getNodesRelatedByRelationIdAndColumnName($summary['type_fc_id'], $summary['column_name']);

                if(count($affected_nodes)) 
                {
                    $formulatedColumnIdsToAffectedNode[$summary['type_fc_id']] = $affected_nodes;
                }

                $itemRatesAndMarkup[$summary['bill_item_id']] = array(
                    'element_id' => $summary['element_id'],
                    'rate' => number_format($summary['rate'], 2, '.' ,''),
                    'markup_percentage' => $summary['markup_percentage']
                );

                array_push($summaryIds, $summary['id']);
            }
            array_push($billItemIds, $itemId);
        }

        $con = self::getInstance()->getConnection();

        //update All Summaries Value
        if(count($summaryIds) > 0)
        {
            $con->execute("UPDATE ".BillBuildUpQuantitySummaryTable::getInstance()->getTableName()." 
                SET rounding_type = ".$newRoundingType.",
                final_quantity = (CASE id".$finalQuantityCaseStatement." END) 
                WHERE id IN (".implode(',', $summaryIds).")");
        }

        if(count($formulatedColumnIds) > 0)
        {
            //Update Formulated Column Value
            $con->execute("UPDATE ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." 
                SET value = (CASE id".$formulatedColumnQtyCaseStatement." END), 
                final_value = (CASE id".$formulatedColumnQtyCaseStatement." END) 
                WHERE id IN (".implode(',', $formulatedColumnIds).")");
        }

        if(count($formulatedColumnIdsToAffectedNode))
        {
            foreach($formulatedColumnIdsToAffectedNode as $nodeToId => $affectedNodes)
            {
                foreach($affectedNodes as $affectedNode)
                {
                    $formulatedColumn = BillItemTypeReferenceFormulatedColumnTable::getInstance()->find($affectedNode['node_from']);
                    
                    $formulatedColumn->setFormula($formulatedColumn->value);

                    $formulatedColumn->save();

                    $formulatedColumn->BillItemTypeReference->BillItem->updateBillItemTotalColumns();

                    unset($formulatedColumn);
                }

                unset($affectedNodes);
            }
        }

        unset($formulatedColumnIdsToAffectedNode);

        $elementMarkupResults = array();

        //Get Element Markup Percentage
        if($billMarkupSetting['element_markup_enabled'])
        {
            $stmt = $pdo->prepare("SELECT e.id, COALESCE(c.final_value, 0) as value FROM ".BillElementFormulatedColumnTable::getInstance()->getTableName()." c
                JOIN ".BillElementTable::getInstance()->getTableName()." e ON c.relation_id = e.id
                WHERE e.project_structure_id = ".$billId." AND c.column_name = '".BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
                AND c.deleted_at IS NULL AND e.deleted_at IS NULL");

            $stmt->execute();

            $elementMarkupResults = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);   
        }

        //Get Quantity Values
        $itemGrandTotals = array();

        if(count($itemRatesAndMarkup) > 0)
        {
            foreach($billColumnSettings as $column)
            {
                $quantityFieldName = $column['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                $stmt = $pdo->prepare("SELECT r.bill_item_id, COALESCE(fc.final_value, 0) AS value FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
                    JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." r ON fc.relation_id = r.id
                    WHERE r.bill_item_id IN (".implode(',', $billItemIds).") AND r.bill_column_setting_id = ".$column['id']."
                    AND r.include IS TRUE AND fc.column_name = '".$quantityFieldName."'
                    AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

                $stmt->execute();

                $quantities = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);

                $originalTotalCaseStatement = '';
                $totalQuantityCaseStatement = '';
                $afterMarkupTotalCaseStatement = '';

                foreach($itemRatesAndMarkup as $itemId => $item)
                {
                    if(!array_key_exists($itemId, $itemGrandTotals)){
                        $itemGrandTotals[$itemId]['grand_total'] = 0;
                        $itemGrandTotals[$itemId]['grand_total_quantity'] = 0;
                        $itemGrandTotals[$itemId]['grand_total_after_markup'] = 0;
                        $itemGrandTotals[$itemId]['rate_after_markup'] = '';
                    }

                    $quantity = (array_key_exists($itemId, $quantities)) ? $quantities[$itemId][0] : 0;

                    $totalQuantity = $quantity * $column['quantity'];
                    $totalPerUnit = number_format($quantity * $item['rate'], 2, '.' ,'');
                    $originalTotal = number_format($totalPerUnit * $column['quantity'], 2, '.' ,'');

                    $itemGrandTotals[$itemId]['grand_total']+=$originalTotal;
                    $itemGrandTotals[$itemId]['grand_total_quantity']+=$totalQuantity;

                    //Calculate Rate After Markup
                    if($billMarkupSetting && ($billMarkupSetting['element_markup_enabled'] || $billMarkupSetting['item_markup_enabled']))
                    {
                        $rateAfterMarkup = $item['rate'];

                        if($billMarkupSetting['item_markup_enabled'])
                        {
                            $rateAfterMarkup = $rateAfterMarkup + ($rateAfterMarkup * $item['markup_percentage'] / 100);
                        }

                        if($billMarkupSetting['element_markup_enabled'])
                        {
                            $elementMarkupPercentage = array_key_exists($item['element_id'], $elementMarkupResults) ? $elementMarkupResults[$item['element_id']][0] : 0;
                            $rateAfterMarkup = ($elementMarkupPercentage > 0) ? $rateAfterMarkup + ($rateAfterMarkup * $elementMarkupPercentage / 100) : $rateAfterMarkup;
                        }

                        switch($billMarkupSetting['rounding_type'])
                        {
                            case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                                $rateAfterMarkup = ceil($rateAfterMarkup);
                                break;
                            case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                                $rateAfterMarkup = floor($rateAfterMarkup);
                                break;
                            case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                                $rateAfterMarkup = round($rateAfterMarkup);
                                break;
                            case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                                $rateAfterMarkup = round($rateAfterMarkup * 10) / 10;
                                break;
                            default:
                                $rateAfterMarkup = number_format($rateAfterMarkup, 2, '.' ,'');
                        }
                    }
                    else
                    {
                        $rateAfterMarkup = $item['rate'];
                    }

                    $itemGrandTotals[$itemId]['rate_after_markup'] = $rateAfterMarkup;
                    $totalPerUnitAfterMarkup = number_format($quantity * $rateAfterMarkup, 2, '.' ,'');
                    $totalAfterMarkup = number_format($totalPerUnitAfterMarkup * $column['quantity'], 2, '.' ,'');

                    $itemGrandTotals[$itemId]['grand_total_after_markup']+=$totalAfterMarkup;

                    $originalTotalCaseStatement.=" WHEN ".$itemId." THEN ".$originalTotal;
                    $totalQuantityCaseStatement.=" WHEN ".$itemId." THEN ".$totalQuantity;
                    $afterMarkupTotalCaseStatement.=" WHEN ".$itemId." THEN ".$totalAfterMarkup;
                }
                //Update Per Total Quantity
                $con->execute("UPDATE ".BillItemTypeReferenceTable::getInstance()->getTableName()." 
                    SET total_quantity = (CASE bill_item_id".$totalQuantityCaseStatement." END),
                    grand_total_after_markup = (CASE bill_item_id".$afterMarkupTotalCaseStatement." END),
                    grand_total = (CASE bill_item_id".$originalTotalCaseStatement." END) 
                    WHERE bill_item_id IN (".implode(',', $billItemIds).") AND bill_column_setting_id = ".$column['id']." AND deleted_at IS NULL AND include IS TRUE");

            }

            $grandTotalQuantityCaseStatement = '';
            $originalGrandTotalCaseStatement = '';
            $afterMarkupGrandTotalCaseStatement = '';

            //Generate GrandTotal Update Statement
            foreach($itemGrandTotals as $itemId => $item)
            {
                $originalGrandTotalCaseStatement.=" WHEN ".$itemId." THEN ".$item['grand_total'];
                $grandTotalQuantityCaseStatement.=" WHEN ".$itemId." THEN ".$item['grand_total_quantity'];
                $afterMarkupGrandTotalCaseStatement.=" WHEN ".$itemId." THEN ".$item['grand_total_after_markup'];
            }

            //Update All Item Grand Total
            $con->execute("UPDATE ".BillItemTable::getInstance()->getTableName()." AS item
                SET grand_total_quantity = (CASE id".$grandTotalQuantityCaseStatement." END),
                grand_total = (CASE id".$originalGrandTotalCaseStatement." END),
                grand_total_after_markup = (CASE id".$afterMarkupGrandTotalCaseStatement." END)
                WHERE item.id IN (".implode(',', $billItemIds).")");
        }

    }


    public static function updateAllBuildUpRateRoundingByBillId($billId, $billColumnSettings, $newRoundingType, $billMarkupSetting)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT item.id as item_id, item.element_id as element_id, ifc.id as ifc_id, ifc.has_build_up, ifc.column_name, COALESCE(ifc.final_value, 0) as rate, COALESCE(markup.final_value, 0) as markup_percentage, summary.*
                FROM  ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." AS summary
                LEFT JOIN ".BillItemTable::getInstance()->getTableName()." AS item ON item.id = summary.bill_item_id
                LEFT JOIN ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS ifc ON ifc.relation_id = item.id AND ifc.deleted_at IS NULL AND ifc.column_name = '".BillItem::FORMULATED_COLUMN_RATE."'
                LEFT JOIN ".BillItemFormulatedColumnTable::getInstance()->getTableName()." markup ON markup.relation_id = item.id AND markup.deleted_at IS NULL AND markup.column_name = '".BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
                LEFT JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON element.id = item.element_id
                WHERE element.project_structure_id = ".$billId." AND summary.deleted_at IS NULL AND item.deleted_at IS NULL");

        $stmt->execute();

        //Get Affected Item List
        $affectedItemsList = $stmt->fetchAll(PDO::FETCH_ASSOC);

        //Get Element Markup Percentage
        if($billMarkupSetting['element_markup_enabled'])
        {
            $stmt = $pdo->prepare("SELECT e.id, COALESCE(c.final_value, 0) as value FROM ".BillElementFormulatedColumnTable::getInstance()->getTableName()." c
                JOIN ".BillElementTable::getInstance()->getTableName()." e ON c.relation_id = e.id
                WHERE e.project_structure_id = ".$billId." AND c.column_name = '".BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
                AND c.deleted_at IS NULL AND e.deleted_at IS NULL");

            $stmt->execute();

            $elementMarkupResults = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);   
        }

        $finalCostCaseStatement = '';
        $formulatedColumnRateCaseStatement = '';
        $billItemIds = array();
        $summaryIds = array();
        $formulatedColumnIds = array();
        $formulatedColumnIdsToAffectedNode = array();
        $itemRatesAndMarkup = array();

        foreach($affectedItemsList as $summary)
        {
            $finalCost = $summary['total_cost'];

            if($summary['has_build_up'])
            {
                if($summary['apply_conversion_factor'])
                {
                    $exp = $finalCost.$summary['conversion_factor_operator'].$summary['conversion_factor_amount'];

                    $evaluator = new EvalMath(true, true);
                    $evaluator->suppress_errors = true;
                    $evaluatedValue = $evaluator->evaluate($exp);
                    $finalCost = $evaluatedValue ? $evaluatedValue : 0;
                }

                switch($newRoundingType)
                {
                    case BillSetting::ROUNDING_TYPE_UPWARD:
                        $finalCost = ceil($finalCost);
                        break;
                    case BillSetting::ROUNDING_TYPE_DOWNWARD:
                        $finalCost = floor($finalCost);
                        break;
                    case BillSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                        $finalCost = round($finalCost);
                        break;
                    case BillSetting::ROUNDING_TYPE_NEAREST_TENTH:
                        $finalCost = round($finalCost * 10) / 10;
                        break;
                    default:
                        $finalCost = number_format($finalCost, 2, '.' ,'');
                }

                $finalCostCaseStatement.=" WHEN ".$summary['id']." THEN (".$finalCost.")";

                if($summary['ifc_id'])
                {
                    $formulatedColumnRateCaseStatement.= " WHEN ".$summary['ifc_id']." THEN (".$finalCost.")";

                    array_push($formulatedColumnIds, $summary['ifc_id']);
                }

                $affected_nodes = BillItemFormulatedColumnTable::getInstance()->getNodesRelatedByRelationIdAndColumnName($summary['ifc_id'], $summary['column_name']);

                if(count($affected_nodes)) 
                {
                    $formulatedColumnIdsToAffectedNode[$summary['ifc_id']] = $affected_nodes;
                }

                $rate = $finalCost;

                if($billMarkupSetting && ($billMarkupSetting['element_markup_enabled'] || $billMarkupSetting['item_markup_enabled']))
                {
                    $rateAfterMarkup = $rate;

                    if($billMarkupSetting['item_markup_enabled'])
                    {
                        $rateAfterMarkup = $rateAfterMarkup + ($rateAfterMarkup * $summary['markup_percentage'] / 100);
                    }

                    if($billMarkupSetting['element_markup_enabled'])
                    {
                        $elementMarkupPercentage = array_key_exists($summary['element_id'], $elementMarkupResults) ? $elementMarkupResults[$summary['element_id']][0] : 0;
                        $rateAfterMarkup = ($elementMarkupPercentage > 0) ? $rateAfterMarkup + ($rateAfterMarkup * $elementMarkupPercentage / 100) : $rateAfterMarkup;
                    }

                    switch($billMarkupSetting['rounding_type'])
                    {
                        case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                            $rateAfterMarkup = ceil($rateAfterMarkup);
                            break;
                        case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                            $rateAfterMarkup = floor($rateAfterMarkup);
                            break;
                        case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                            $rateAfterMarkup = round($rateAfterMarkup);
                            break;
                        case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                            $rateAfterMarkup = round($rateAfterMarkup * 10) / 10;
                            break;
                        default:
                            $rateAfterMarkup = number_format($rateAfterMarkup, 2, '.' ,'');
                    }
                }
                else
                {
                    $rateAfterMarkup = $rate;
                }

                $itemRatesAndMarkup[$summary['item_id']] = array(
                    'element_id' => $summary['element_id'],
                    'rate' => $rate,
                    'rate_after_markup' => $rateAfterMarkup,
                    'markup_percentage' => $summary['markup_percentage']
                );

                array_push($billItemIds, $summary['item_id']);
            }
            array_push($summaryIds, $summary['id']);
        }

        $con = self::getInstance()->getConnection();

        //update All Summaries Value
        if(count($affectedItemsList) > 0)
        {
            $con->execute("UPDATE ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." 
                SET rounding_type = ".$newRoundingType.",
                final_cost = (CASE id".$finalCostCaseStatement." END) 
                WHERE id IN (".implode(',', $summaryIds).")");
        }

        if(count($formulatedColumnIds) > 0)
        {
            //Update Formulated Column Value
            $con->execute("UPDATE ".BillItemFormulatedColumnTable::getInstance()->getTableName()." 
                SET value = (CASE id".$formulatedColumnRateCaseStatement." END), 
                final_value = (CASE id".$formulatedColumnRateCaseStatement." END) 
                WHERE id IN (".implode(',', $formulatedColumnIds).")");
        }

        if(count($formulatedColumnIdsToAffectedNode))
        {
            foreach($formulatedColumnIdsToAffectedNode as $nodeToId => $affectedNodes)
            {
                foreach($affectedNodes as $affectedNode)
                {
                    $formulatedColumn = BillItemFormulatedColumnTable::getInstance()->find($affectedNode['node_from']);
                    
                    $formulatedColumn->setFormula($formulatedColumn->value);

                    $formulatedColumn->save();

                    $formulatedColumn->BillItem->updateBillItemTotalColumns();

                    unset($formulatedColumn);
                }

                unset($affectedNodes);
            }
        }

        unset($formulatedColumnIdsToAffectedNode);

        //Get Quantity Values
        $itemGrandTotals = array();

        if(count($itemRatesAndMarkup) > 0)
        {
            foreach($billColumnSettings as $column)
            {
                $quantityFieldName = $column['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                $stmt = $pdo->prepare("SELECT r.bill_item_id, COALESCE(fc.final_value, 0) AS value FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
                    JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." r ON fc.relation_id = r.id
                    WHERE r.bill_item_id IN (".implode(',', $billItemIds).") AND r.bill_column_setting_id = ".$column['id']."
                    AND r.include IS TRUE AND fc.column_name = '".$quantityFieldName."'
                    AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

                $stmt->execute();

                $quantities = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);

                $originalTotalCaseStatement = '';
                $totalQuantityCaseStatement = '';
                $afterMarkupTotalCaseStatement = '';

                foreach($itemRatesAndMarkup as $itemId => $item)
                {
                    if(!array_key_exists($itemId, $itemGrandTotals)){
                        $itemGrandTotals[$itemId]['grand_total'] = 0;
                        $itemGrandTotals[$itemId]['grand_total_after_markup'] = 0;
                        $itemGrandTotals[$itemId]['grand_total_quantity'] = 0;
                    }

                    $quantity = (array_key_exists($itemId, $quantities)) ? $quantities[$itemId][0] : 0;

                    $totalQuantity = $quantity * $column['quantity'];
                    $totalPerUnit = number_format($quantity * $item['rate'], 2, '.' ,'');
                    $totalPerUnitAfterMarkup = number_format($quantity * $item['rate_after_markup'], 2, '.' ,'');
                    $originalTotal = number_format($totalPerUnit * $column['quantity'], 2, '.' ,'');
                    $totalAfterMarkup = number_format($totalPerUnitAfterMarkup * $column['quantity'], 2, '.' ,'');

                    $itemGrandTotals[$itemId]['grand_total']+=$originalTotal;
                    $itemGrandTotals[$itemId]['grand_total_after_markup']+=$totalAfterMarkup;
                    $itemGrandTotals[$itemId]['grand_total_quantity']+=$totalQuantity;

                    $originalTotalCaseStatement.=" WHEN ".$itemId." THEN ".$originalTotal;
                    $totalQuantityCaseStatement.=" WHEN ".$itemId." THEN ".$totalQuantity;
                    $afterMarkupTotalCaseStatement.=" WHEN ".$itemId." THEN ".$totalAfterMarkup;
                }

                //Update Per Total Quantity
                $con->execute("UPDATE ".BillItemTypeReferenceTable::getInstance()->getTableName()." 
                    SET total_quantity = (CASE bill_item_id".$totalQuantityCaseStatement." END),
                    grand_total_after_markup = (CASE bill_item_id".$afterMarkupTotalCaseStatement." END),
                    grand_total = (CASE bill_item_id".$originalTotalCaseStatement." END) 
                    WHERE bill_item_id IN (".implode(',', $billItemIds).") AND bill_column_setting_id = ".$column['id']." AND deleted_at IS NULL AND include IS TRUE");

            }

            $grandTotalQuantityCaseStatement = '';
            $originalGrandTotalCaseStatement = '';
            $afterMarkupGrandTotalCaseStatement = '';

            //Generate GrandTotal Update Statement
            foreach($itemGrandTotals as $itemId => $item)
            {
                $originalGrandTotalCaseStatement.=" WHEN ".$itemId." THEN ".$item['grand_total'];
                $grandTotalQuantityCaseStatement.=" WHEN ".$itemId." THEN ".$item['grand_total_quantity'];
                $afterMarkupGrandTotalCaseStatement.=" WHEN ".$itemId." THEN ".$item['grand_total_after_markup'];
            }

            //Update All Item Grand Total
            $con->execute("UPDATE ".BillItemTable::getInstance()->getTableName()." AS item
                SET grand_total_quantity = (CASE id".$grandTotalQuantityCaseStatement." END),
                grand_total = (CASE id".$originalGrandTotalCaseStatement." END),
                grand_total_after_markup = (CASE id".$afterMarkupGrandTotalCaseStatement." END)
                WHERE item.id IN (".implode(',', $billItemIds).")");
        }
        
    }
}