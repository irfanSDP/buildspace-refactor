<?php

/**
 * MasterCostDataItemColumnTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class MasterCostDataItemColumnTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return MasterCostDataItemColumnTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('MasterCostDataItemColumn');
    }

    public static function getColumnDefinitions()
    {
        return array(
            MasterCostDataItemColumn::COLUMN_UNIT_AND_QUANTITY,
            MasterCostDataItemColumn::COLUMN_TOTAL_ACRES,
            MasterCostDataItemColumn::COLUMN_GROSS_FLOOR_AREA,
            MasterCostDataItemColumn::COLUMN_NETT_FLOOR_AREA,
        );
    }

    public static function getItemColumn(MasterCostDataItem $item, $field)
    {
        $itemColumn = DoctrineQuery::create()->select('c.id')
            ->from('MasterCostDataItemColumn c')
            ->where('c.master_cost_data_item_id = ?', $item->id)
            ->andWhere('c.column_name = ?', $field)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->execute();

        return $itemColumn[0];
    }

    public static function getColumnIds(array $itemIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $itemIds = implode(',', $itemIds);

        $statement = "SELECT c.id FROM ".self::getInstance()->getTableName()." c
        WHERE c.master_cost_data_item_id in ({$itemIds})";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_COLUMN,0);
    }

    public static function getItemAndColumn(array $itemIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $itemIds = implode(',', $itemIds);

        $statement = "SELECT c.master_cost_data_item_id, c.id, c.column_name FROM ".self::getInstance()->getTableName()." c
        WHERE c.master_cost_data_item_id in ({$itemIds})";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC|PDO::FETCH_GROUP);

        $output = array();

        foreach($results as $itemId => $columnObjects)
        {
            foreach($columnObjects as $columnObject)
            {
                $output[$itemId][$columnObject['column_name']] = $columnObject['id'];
            }
        }

        return $output;
    }

    public static function getChildItemColumnsVisibility(MasterCostDataItem $parentItem)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $childrenIds = MasterCostDataItemTable::getChildrenIds([ $parentItem->id ]);

        $data = array();

        if( ! empty( $childrenIds ) )
        {
            $implodedChildrenIds = implode(',', $childrenIds);

            $statement = "SELECT c.column_name, bool_and(c.show)
            FROM " . self::getInstance()->getTableName() . " c
            WHERE c.master_cost_data_item_id in ({$implodedChildrenIds})
            AND c.deleted_at IS NULL
            GROUP BY c.column_name";

            $stmt = $pdo->prepare($statement);

            $stmt->execute();

            $data = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
        }

        foreach(self::getColumnDefinitions() as $columnName)
        {
            if( ! array_key_exists($columnName, $data) ) $data[ $columnName ] = true;
        }

        return $data;
    }

    public static function setChildItemColumnVisibility(MasterCostDataItem $parentItem, $columnName, $setVisible)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $childrenIds = MasterCostDataItemTable::getChildrenIds([$parentItem->id]);

        if(empty($childrenIds)) false;

        $implodedChildrenIds = implode(',', $childrenIds);

        $statement = "UPDATE " . self::getInstance()->getTableName() . "
            SET show = :show
            WHERE master_cost_data_item_id in ({$implodedChildrenIds})
            AND column_name = :columnName";

        $stmt = $pdo->prepare($statement);

        return $stmt->execute(array('show' => $setVisible ? 'true' : 'false', 'columnName' => $columnName));
    }
}