<?php

/**
 * PostContractClaimClaimItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PostContractClaimClaimItem extends BasePostContractClaimClaimItem
{
	public function updateCurrentQuantity($value)
    {
        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);
        $totalQty      = $this->PostContractClaimItem->quantity;
        $rate           = $this->PostContractClaimItem->rate;
        $originalAmount = $totalQty * $rate; 

        if($this->PostContractClaimItem->PostContractClaim->type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            if($this->PostContractClaimItem->PostContractClaimMaterialOnSite)
            {
                if(! $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount == 0)
                {
                    $finalAmount = $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount;
                }
            }
        }

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if($previousUpToDateQuantity + $value > $totalQty)
        {
            $currentQuantity = $value - (($previousUpToDateQuantity + $value) - $totalQty);
        }
        else
        {
            $currentQuantity = $value;
        }

        $currentQuantity   = round($currentQuantity, 2);
        $claimAmount       = round($rate * $currentQuantity, 2);
        $currentAmount     = $claimAmount; 
        $currentPercentage = round(($currentQuantity / $totalQty) * 100, 2);

        if(isset($finalAmount) && $finalAmount != 0)
        {
            $currentAmount     = round(($finalAmount / $originalAmount) * $claimAmount, 2);
            $currentPercentage = round(($currentAmount / $finalAmount) * 100, 2);
        }

        $this->current_quantity   = $currentQuantity;
        $this->current_percentage = $currentPercentage;
        $this->current_amount     = $currentAmount;

        $this->up_to_date_quantity   = round($previousUpToDateQuantity + $currentQuantity, 2);
        $this->up_to_date_percentage = round($previousUpToDatePercentage + $currentPercentage, 2);
        $this->up_to_date_amount     = round($previousUpToDateAmount + $currentAmount, 2);
    }

    public function updateCurrentAmount($value)
    {
        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);
	    $totalQty      = $this->PostContractClaimItem->quantity;
	    $rate          = $this->PostContractClaimItem->rate;
	    $amount        = $totalQty * $rate; 

        if($this->PostContractClaimItem->PostContractClaim->type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            if($this->PostContractClaimItem->PostContractClaimMaterialOnSite)
            {
                if(! $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount == 0)
                {
                    $amount = $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount;
                }
            }
        }

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if($previousUpToDateAmount + $value > $amount)
        {
            $currentAmount = $value - (($previousUpToDateAmount + $value) - $amount);
        }
        else
        {
            $currentAmount = $value;
        }

        $currentQuantity = ($rate != 0) ? round($currentAmount / $rate, 2) : 0;
        $currentPercentage = round($currentAmount / $amount * 100, 2);

        $this->current_quantity   = $currentQuantity;
        $this->current_percentage = $currentPercentage;
        $this->current_amount     = $currentAmount;

        $this->up_to_date_quantity   = round($previousUpToDateQuantity + $currentQuantity, 2);
        $this->up_to_date_percentage = round($previousUpToDatePercentage + $currentPercentage, 2);
        $this->up_to_date_amount     = round($previousUpToDateAmount + $currentAmount, 2);
    }

    public function updateCurrentPercentage($value)
    {
        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);
        $totalQty      = $this->PostContractClaimItem->quantity;
	    $rate          = $this->PostContractClaimItem->rate;
	    $amount        = $totalQty * $rate; 

        if($this->PostContractClaimItem->PostContractClaim->type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            if($this->PostContractClaimItem->PostContractClaimMaterialOnSite)
            {
                if(! $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount == 0)
                {
                    $amount = $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount;
                }
            }
        }

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if($previousUpToDatePercentage + $value > 100)
        {
            $currentPercentage = $value - (($previousUpToDatePercentage + $value) - 100);
        }
        else
        {
            $currentPercentage = $value;
        }

        $currentPercentage = round($currentPercentage, 2);
        $currentAmount     = round($currentPercentage / 100 * $amount, 2);
        $currentQuantity   = ($rate != 0) ? round($currentAmount / $rate, 2) : 0;

        $this->current_quantity   = $currentQuantity;
        $this->current_percentage = $currentPercentage;
        $this->current_amount     = $currentAmount;

        $this->up_to_date_quantity   = round($previousUpToDateQuantity + $currentQuantity, 2);
        $this->up_to_date_percentage = round($previousUpToDatePercentage + $currentPercentage, 2);
        $this->up_to_date_amount     = round($previousUpToDateAmount + $currentAmount, 2);
    }

    public function updateUpToDateQuantity($value)
    {
        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);
        $totalQty      = $this->PostContractClaimItem->quantity;
        $rate           = $this->PostContractClaimItem->rate;
        $originalAmount = $totalQty * $rate; 

        if($this->PostContractClaimItem->PostContractClaim->type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            if($this->PostContractClaimItem->PostContractClaimMaterialOnSite)
            {
                if(! $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount == 0)
                {
                    $finalAmount = $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount;
                }
            }
        }

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if($value > $totalQty)
        {
            $upToDateQuantity = $totalQty;
        }
        else
        {
            $upToDateQuantity = $value;
        }

        $upToDateQuantity   = round($upToDateQuantity, 2);
        $claimAmount        = round($rate * $upToDateQuantity, 2);
        $upToDateAmount     = $claimAmount; 
        $upToDatePercentage = round(($upToDateQuantity / $totalQty) * 100, 2);

        if(isset($finalAmount) && $finalAmount != 0)
        {
            $upToDateAmount = round(($finalAmount / $originalAmount) * $claimAmount, 2);
            $upToDatePercentage = round(($upToDateAmount / $finalAmount) * 100, 2);
        }

        $this->up_to_date_quantity   = $upToDateQuantity;
        $this->up_to_date_percentage = $upToDatePercentage;
        $this->up_to_date_amount     = $upToDateAmount;

        $this->current_quantity   = round($upToDateQuantity - $previousUpToDateQuantity, 2);
        $this->current_percentage = round($upToDatePercentage - $previousUpToDatePercentage, 2);
        $this->current_amount     = round($upToDateAmount - $previousUpToDateAmount, 2);
    }

    public function updateUpToDateAmount($value)
    {
        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);
        $totalQty      = $this->PostContractClaimItem->quantity;
	    $rate          = $this->PostContractClaimItem->rate;
	    $amount        = $totalQty * $rate; 

        if($this->PostContractClaimItem->PostContractClaim->type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            if($this->PostContractClaimItem->PostContractClaimMaterialOnSite)
            {
                if(! $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount == 0)
                {
                    $amount = $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount;
                }
            }
        }

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if($value > $amount)
        {
            $upToDateAmount = $amount;
        }
        else
        {
            $upToDateAmount = $value;
        }

        $upToDateQuantity = ($rate != 0) ? round($upToDateAmount / $rate, 2) : 0;
        $upToDatePercentage = round($upToDateAmount / $amount * 100, 2);

        $this->up_to_date_quantity   = $upToDateQuantity;
        $this->up_to_date_percentage = $upToDatePercentage;
        $this->up_to_date_amount     = $upToDateAmount;

        $this->current_quantity   = round($upToDateQuantity - $previousUpToDateQuantity, 2);
        $this->current_percentage = round($upToDatePercentage - $previousUpToDatePercentage, 2);
        $this->current_amount     = round($upToDateAmount - $previousUpToDateAmount, 2);
    }

    public function updateUpToDatePercentage($value)
    {
        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);
        $totalQty      = $this->PostContractClaimItem->quantity;
	    $rate          = $this->PostContractClaimItem->rate;
	    $amount        = $totalQty * $rate; 

        if($this->PostContractClaimItem->PostContractClaim->type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            if($this->PostContractClaimItem->PostContractClaimMaterialOnSite)
            {
                if(! $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount == 0)
                {
                    $amount = $this->PostContractClaimItem->PostContractClaimMaterialOnSite->final_amount;
                }
            }
        }

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if($value > 100)
        {
            $upToDatePercentage = 100;
        }
        else
        {
            $upToDatePercentage = $value;
        }

        $upToDatePercentage = round($upToDatePercentage, 2);
        $upToDateAmount     = round($upToDatePercentage / 100 * $amount, 2);
        $upToDateQuantity   = ($rate != 0) ? round($upToDateAmount / $rate, 2) : 0;

        $this->up_to_date_quantity   = $upToDateQuantity;
        $this->up_to_date_percentage = $upToDatePercentage;
        $this->up_to_date_amount     = $upToDateAmount;

        $this->current_quantity   = round($upToDateQuantity - $previousUpToDateQuantity, 2);
        $this->current_percentage = round($upToDatePercentage - $previousUpToDatePercentage, 2);
        $this->current_amount     = round($upToDateAmount - $previousUpToDateAmount, 2);
    }

    public function getPreviousClaimItem($hydrate = null)
    {
        $previousClaim = $this->PostContractClaimClaim->getPreviousClaim(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $query = Doctrine_Query::create()->select('i.*')
                ->from('PostContractClaimClaimItem i')
                ->where('i.post_contract_claim_claim_id = ?',$previousClaim['id'])
                ->andWhere('i.post_contract_claim_item_id = ?', $this->post_contract_claim_item_id)
                ->limit(1);

            if($hydrate)
            {
                $query->setHydrationMode($hydrate);
            }

            return $query->fetchOne();
        }

        return false;
    }
}
