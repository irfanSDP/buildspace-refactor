<?php

/**
 * VariationOrderBuildUpQuantityItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class VariationOrderBuildUpQuantityItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object VariationOrderBuildUpQuantityItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('VariationOrderBuildUpQuantityItem');
    }

    public static function getTypeText($constant)
    {
        switch($constant)
        {
            case VariationOrderBuildUpQuantityItem::TYPE_ADDITIONAL_QTY:
                return VariationOrderBuildUpQuantityItem::TYPE_ADDITIONAL_TEXT;
            case VariationOrderBuildUpQuantityItem::TYPE_OMISSION_QTY:
                return VariationOrderBuildUpQuantityItem::TYPE_OMISSION_TEXT;
            default:
                throw new Exception('Invalid Type');
        }
    }

    public static function getSignTextBySign($sign)
    {
        switch($sign)
        {
            case VariationOrderBuildUpQuantityItem::SIGN_POSITIVE:
                return VariationOrderBuildUpQuantityItem::SIGN_POSITIVE_TEXT;
            case VariationOrderBuildUpQuantityItem::SIGN_NEGATIVE:
                return VariationOrderBuildUpQuantityItem::SIGN_NEGATIVE_TEXT;
            default:
                throw new Exception('invalid sign');
        }
    }

    public static function getFormulatedColumnNames(UnitOfMeasurement $unitOfMeasurement)
    {
        $columnNames = array();

        foreach($unitOfMeasurement->Dimensions as $dimension)
        {
            $columnNames[] = $dimension->id.'-dimension_column';
        }

        array_push($columnNames, VariationOrderBuildUpQuantityItem::FORMULATED_COLUMN_FACTOR);

        return $columnNames;
    }

    public static function getFormulatedColumnByRelationIdAndColumnName($id, $columnName, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('VariationOrderBuildUpQuantityFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?', $columnName)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getBuildUpItemsByVOItemIds(array $voItemIds)
    {
        $data = array();

        $buildUpItems = DoctrineQuery::create()
        ->select('i.id, i.variation_order_item_id, i.type, i.description, i.sign, i.total, ifc.column_name, ifc.value, ifc.final_value')
        ->from('VariationOrderBuildUpQuantityItem i')
        ->leftJoin('i.FormulatedColumns ifc')
        ->whereIn('i.variation_order_item_id', $voItemIds)
        ->addOrderBy('i.priority ASC')
        ->fetchArray();

        foreach ( $buildUpItems as $buildUpItem )
        {
            $data[$buildUpItem['type']][$buildUpItem['variation_order_item_id']][] = $buildUpItem;

            unset($buildUpItem);
        }

        unset($buildUpItems);

        return $data;
    }
}