<?php

/**
 * RFQItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class RFQItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object RFQItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('RFQItem');
    }

    public static function getItemListingByRFQId($rfqId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sql = "SELECT b.id, b.request_for_quotation_id, b.resource_item_id, b.quantity, b.remark_id,  COALESCE(b2.id, -1) AS remark_id, COALESCE(b2.description, NULL) AS remark
        FROM ".RFQItemTable::getInstance()->getTableName()." b
        LEFT JOIN ".RFQItemRemarkTable::getInstance()->getTableName()." b2 ON ( b.remark_id = b2.id )
        WHERE ( b.request_for_quotation_id = :rfqId )";
        $stmt = $pdo->prepare($sql);
        $stmt->execute(array('rfqId' => $rfqId));

        $rfqItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return $rfqItems;
    }

    public static function getItemAndRatesListingByRFQAndSupplier(RFQ $rfq, RFQSupplier $supplier)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sql = "SELECT b.id, b.request_for_quotation_id, b.resource_item_id, b.quantity, b2.id AS remark_id, COALESCE(b2.description, NULL) AS remark, COALESCE(b3.id, -1) AS rate_id, COALESCE(b3.rate, 0) AS rate
        FROM ".RFQItemTable::getInstance()->getTableName()." b
        LEFT JOIN ".RFQItemRemarkTable::getInstance()->getTableName()." b2 ON ( b.remark_id = b2.id )
        LEFT JOIN ".RFQItemRateTable::getInstance()->getTableName()." b3 ON ((b.id = b3.request_for_quotation_item_id AND b3.request_for_quotation_supplier_id = :supplierId))
        WHERE ( b.request_for_quotation_id = :rfqId )";
        $stmt = $pdo->prepare($sql);
        $stmt->execute(array('supplierId' => $supplier->id, 'rfqId' => $rfq->id));

        $rfqItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return $rfqItems;
    }

    public static function deleteLikeResourceLibraryTree(RFQ $rfq, ResourceItem $resourceItem)
    {
        //we need to update any related column from formulated columns before deleting it
        $items = DoctrineQuery::create()
        ->select('i.id')
        ->from('ResourceItem i')
        ->andWhere('i.root_id = ?',$resourceItem->root_id)
        ->andWhere('i.lft >= ? AND i.rgt <= ?', array($resourceItem->lft, $resourceItem->rgt))
        ->addOrderBy('i.lft')
        ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        $affectedItemIds  = array();
        $affectedItemList = array();

        foreach($items as $item)
        {
            $affectedItemIds[] = $item['id'];
            array_push($affectedItemList, $item);
        }

        if (count($affectedItemIds) > 0)
        {
            $query = Doctrine_Query::create()
            ->delete('RFQItem i')
            ->where('i.request_for_quotation_id = ?', $rfq->id)
            ->andWhereIn('i.resource_item_id', $affectedItemIds)
            ->execute(array());
        }

        return $affectedItemList;
    }

    public static function getHierarchyItemListingFromResourceLibraryByRFQItemIds(Array $rfqItemsId, Array $rfqFromDbItems)
    {
        $implodedItemIds = implode(', ', $rfqItemsId);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $sql = "SELECT DISTINCT p.id, p.root_id, p.description, p.type::text, p.uom_id, p.level, p.priority,
        p.lft, p.rgt, uom.symbol AS uom, rt.priority as rt_priority, r.id as resource_id
        FROM ".ResourceItemTable::getInstance()->getTableName()." c
        JOIN ".ResourceItemTable::getInstance()->getTableName()." p
        ON c.lft BETWEEN p.lft AND p.rgt
        LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." rt on p.resource_trade_id = rt.id AND rt.deleted_at IS NULL
        JOIN ".ResourceTable::getInstance()->getTableName()." r on rt.resource_id = r.id AND r.deleted_at IS NULL
        WHERE c.root_id = p.root_id AND c.type <> ".ResourceItem::TYPE_HEADER."
        AND c.id IN (".$implodedItemIds.")
        AND c.deleted_at IS NULL AND p.deleted_at IS NULL
        ORDER BY r.id, rt.priority, p.priority, p.lft, p.level ASC";

        $stmt = $pdo->prepare($sql);
        $stmt->execute(array());

        $results      = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $rfqTreeItems = array();

        foreach ( $results as $result )
        {
            if ( isset ($rfqFromDbItems[$result['id']]) )
            {
                $rfqItemId       = $rfqFromDbItems[$result['id']]['rfqItemId'];
                $quantity        = $rfqFromDbItems[$result['id']]['quantity'];
                $rfqItemRemarkId = $rfqFromDbItems[$result['id']]['rfqItemRemarkId'];
                $remarks         = $rfqFromDbItems[$result['id']]['remarks'];
            }
            else
            {
                $rfqItemId       = -1;
                $quantity        = 0;
                $rfqItemRemarkId = -1;
                $remarks         = NULL;
            }

            $rfqTreeItems[] = array(
                'rfqItemId'       => $rfqItemId,
                'id'              => $result['id'],
                'root_id'         => $result['root_id'],
                'description'     => $result['description'],
                'type'            => $result['type'],
                'uom_id'          => $result['uom_id'],
                'uom'             => $result['uom'],
                'level'           => $result['level'],
                'priority'        => $result['priority'],
                'lft'             => $result['lft'],
                'rgt'             => $result['rgt'],
                'quantity'        => $quantity,
                'rfqItemRemarkId' => $rfqItemRemarkId,
                'remarks'         => $remarks,
            );
        }

        unset($results, $rfqItemsId, $rfqFromDbItems);

        return $rfqTreeItems;
    }

    public static function getResourceItemIdsTaggedByProject(ProjectStructure $projectStructure)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare('SELECT DISTINCT rfqi.resource_item_id FROM '.self::getInstance()->getTableName().' rfqi
        JOIN '.RFQTable::getInstance()->getTableName().' rfq ON rfq.id = rfqi.request_for_quotation_id
        WHERE rfq.project_structure_id = '.$projectStructure->id);

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_COLUMN, 0);
    }
}