<?php

/**
 * ProjectStructureTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProjectStructureTable extends Doctrine_Table {
    /**
     * Returns an instance of this class.
     *
     * @return object ProjectStructureTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ProjectStructure');
    }

    public static function generateProjectUniqueIdbyProjectId($projectId, $created_at, $created_by)
    {
        $buildspaceUniqueId = sfConfig::get('app_register_buildspace_id');

        $information = array( $buildspaceUniqueId, $projectId, $created_at, $created_by );

        return base64_encode(implode('-', $information));
    }

    public static function generateTenderOriginId($buildspaceId, $originId, $projectId)
    {
        $idString = implode('-', array( $projectId, $originId ));

        return $idsString = implode('-', array( $buildspaceId, $idString ));
    }

    public static function generateSubPackageOriginId($buildspaceId, $originId, $projectId, $subPackageId)
    {
        $idString = implode('-', array( $projectId, $originId, $subPackageId ));

        return $idsString = implode('-', array( $buildspaceId, $idString ));
    }

    public static function extractOriginId($originId)
    {
        if ( $originId == '' || $originId == null )
        {
            return false;
        }

        $arrayOfIds = explode('-', $originId);

        return array(
            'buildspace_id'  => $arrayOfIds[0],
            'project_id'     => $arrayOfIds[1],
            'origin_id'      => $arrayOfIds[2],
            'sub_package_id' => ( array_key_exists(3, $arrayOfIds) ) ? $arrayOfIds[3] : false
        );
    }

    public static function getContractSumByProjectId($projectId, $estimationRate=true, $withNotListedItems=true)
    {
        $project = self::getInstance()->find($projectId);

        if($project->MainInformation->status == ProjectMainInformation::STATUS_POSTCONTRACT)
        {
            return PostContractTable::getOverallTotalByProjectId($projectId);
        }

        $hasTenderAlternatives = !empty($project->getTenderAlternatives(true));
        $awardedTenderAlternative = null;

        if($hasTenderAlternatives)
        {
            $awardedTenderAlternative = $project->getAwardedTenderAlternative(true);
        }

        if($estimationRate)
        {
            if($hasTenderAlternatives)
            {
                $overallTotalByTenderAlternatives = TenderAlternativeTable::getOverallTotalForTenderAlternatives($project, $withNotListedItems);
                return ($awardedTenderAlternative && array_key_exists($awardedTenderAlternative['id'], $overallTotalByTenderAlternatives)) ? $overallTotalByTenderAlternatives[$awardedTenderAlternative['id']] : round(0, 2);
            }
            else
            {
                return self::getOverallTotalForProject($projectId, $withNotListedItems);
            }
        }

        if( $project->MainInformation->status == ProjectMainInformation::STATUS_IMPORT )
        {
            $rationalizedRates = TenderBillItemRationalizedRatesTable::getOverallBillTotalByProject($project->id);

            return $rationalizedRates['project_total'];
        }

        return self::getAwardedContractorProjectOverallTotal($project, $withNotListedItems);
    }

    public static function getAwardedContractorProjectOverallTotal(ProjectStructure $project, $withNotListedItems=true)
    {
        $awardedCompany = $project->getSelectedContractor();

        $hasTenderAlternatives = !empty($project->getTenderAlternatives(true));
        $awardedTenderAlternative = null;
        $tenderAlternativeJoinSql = "";
        $tenderAlternativeWhereSql = "";

        if($hasTenderAlternatives)
        {
            $awardedTenderAlternative = $project->getAwardedTenderAlternative(true);
            if(!$awardedTenderAlternative)
            {
                return round(0, 2);
            }

            $tenderAlternativeJoinSql = " JOIN ".TenderAlternativeTable::getInstance()->getTableName()." ta ON ta.project_structure_id = p.id
            JOIN ".TenderAlternativeBillTable::getInstance()->getTableName()." tax ON tax.project_structure_id = bill.id AND tax.tender_alternative_id = ta.id";

            $tenderAlternativeWhereSql = " AND ta.id = ".$awardedTenderAlternative['id']." AND ta.deleted_at IS NULL AND ta.project_revision_deleted_at IS NULL ";
        }

        if(!$awardedCompany) return round(0, 2);

        $withoutNotListedItemSql = null;
        if(!$withNotListedItems)
        {
            $withoutNotListedItemSql = " AND item.type <> ".BillItem::TYPE_ITEM_NOT_LISTED." ";
        }

        $con = self::getInstance()->getConnection();
        $pdo = $con->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(r.grand_total),0) AS total_sum
        FROM " . TenderBillItemRateTable::getInstance()->getTableName() . " AS r
        JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON r.bill_item_id = item.id
        JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS p ON p.id = bill.root_id
        ".$tenderAlternativeJoinSql."
        JOIN " . TenderCompanyTable::getInstance()->getTableName(). " AS tc ON tc.id = r.tender_company_id AND tc.project_structure_id = p.id
        WHERE p.id = " . $project->id . " AND tc.company_id = ".$awardedCompany->id."
        AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
        ".$withoutNotListedItemSql." ".$tenderAlternativeWhereSql."
        AND r.grand_total <> 0
        AND item.project_revision_deleted_at IS NULL AND item.deleted_at IS NULL
        AND element.deleted_at IS NULL
        AND bill.deleted_at IS NULL AND bill.type = " . ProjectStructure::TYPE_BILL);

        $stmt->execute();

        return $stmt->fetchColumn();
    }

    public static function getOverallTotalForProject($projectId, $withNotListedItems=true)
    {
        $con = self::getInstance()->getConnection();
        $pdo = $con->getDbh();
        
        $withoutNotListedItemSql = (!$withNotListedItems) ? " AND item.type <> ".BillItem::TYPE_ITEM_NOT_LISTED." " : null;
        
        // We'll fetch and SUM the latest grand_total from Bill Item
        $stmt = $pdo->prepare("SELECT COALESCE(SUM(item.grand_total_after_markup),0) AS total_rate_after_markup
            FROM " . BillItemTable::getInstance()->getTableName() . " AS item
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON element.project_structure_id = bill.id
            WHERE bill.root_id = ".$projectId."
            AND bill.type = " . ProjectStructure::TYPE_BILL . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            ".$withoutNotListedItemSql."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND bill.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetchColumn();
    }

    public static function getOverallTotalForProjectWithoutPrimeCostAndProvisionalBill($projectId)
    {
        $con = self::getInstance()->getConnection();

        //Get BillIds
        $billIds = $con->fetchColumn("SELECT bill.id FROM " . ProjectStructureTable::getInstance()->getTableName() . " AS bill
            JOIN " . BillTypeTable::getInstance()->getTableName() . " t ON t.project_structure_id = bill.id
            WHERE bill.root_id = " . $projectId . " AND bill.deleted_at IS NULL AND bill.type = '" . ProjectStructure::TYPE_BILL . "'
            AND t.type <> " . BillType::TYPE_PRIMECOST);

        if ( count($billIds) > 0 )
        {
            // We'll fetch and SUM the latest grand_total from Bill Item
            $totalRateAfterMarkup = $con->fetchAssoc("SELECT COALESCE(SUM(item.grand_total_after_markup),0) AS total_rate_after_markup
                FROM " . BillItemTable::getInstance()->getTableName() . " AS item
                LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
                WHERE element.project_structure_id IN (" . implode(',', $billIds) . ")
                AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
                AND item.project_revision_deleted_at IS NULL
                AND item.deleted_at IS NULL
                AND element.deleted_at IS NULL");

            return $totalRateAfterMarkup[0]['total_rate_after_markup'];
        }

        return 0;
    }

    public static function getOverallTotalByBillId($billId, $billColumnSettings = array())
    {
        //Later to remove bill Column Settings After refactor any modules using this function
        return $total = self::getAllElementSumByBillId($billId);
    }

    public static function getOverallOriginalTotalByBillId($billId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        // We'll fetch and SUM the latest grand_total from Bill Item
        $stmt = $pdo->prepare("SELECT COALESCE(SUM(item.grand_total),0) AS total_rate
            FROM " . BillItemTable::getInstance()->getTableName() . " AS item
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            WHERE element.project_structure_id = " . $billId . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL");

        $stmt->execute();

        $originalTotalRate = $stmt->fetch(PDO::FETCH_ASSOC);

        return $originalTotalRate['total_rate'];
    }

    public static function getOverallTotalAfterMarkupByBillId($billId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        // We'll fetch and SUM the latest grand_total from Bill Item
        $stmt = $pdo->prepare("SELECT COALESCE(SUM(item.grand_total_after_markup),0) AS total_rate_after_markup
            FROM " . BillItemTable::getInstance()->getTableName() . " AS item
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            WHERE element.project_structure_id = " . $billId . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL");

        $stmt->execute();

        $totalRateAfterMarkup = $stmt->fetch(PDO::FETCH_ASSOC);

        return $totalRateAfterMarkup['total_rate_after_markup'];
    }

    public static function getOverallTotalAfterMarkupByProject(ProjectStructure $project)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        // We'll fetch and SUM the latest grand_total from Bill Item
        $stmt = $pdo->prepare("SELECT bill.id, COALESCE(SUM(item.grand_total_after_markup),0) AS total_rate_after_markup
            FROM ".BillItemTable::getInstance()->getTableName()." AS item
            JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON item.element_id = element.id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." AS bill ON element.project_structure_id = bill.id
            WHERE bill.root_id = " . $project->id . "
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND bill.deleted_at IS NULL
            AND item.project_revision_deleted_at IS NULL
            AND item.deleted_at IS NULL
            AND element.deleted_at IS NULL
            GROUP BY bill.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getRecalculatedOverallOriginalTotalByBillId($billId)
    {
        $bill  = self::getInstance()->find($billId);
        $pdo   = self::getInstance()->getConnection()->getDbh();
        $total = 0;

        foreach ( $bill->BillColumnSettings as $billColumnSetting )
        {
            $quantityColumnName = $billColumnSetting->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

            $stmt = $pdo->prepare("SELECT COALESCE(SUM(rate.final_value * type_fc.final_value),0) AS total_rate FROM " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS rate
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON rate.relation_id = item.id
            LEFT JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " AS type ON type.bill_item_id = item.id
            LEFT JOIN " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " AS type_fc ON type_fc.relation_id = type.id
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON item.element_id = element.id
            WHERE element.project_structure_id = :bill_id AND rate.column_name = :rate_column_name AND type.bill_column_setting_id = :bill_column_setting_id AND type_fc.column_name = :quantity_column_name
            AND rate.final_value IS NOT NULL AND rate.final_value <> 0 AND rate.deleted_at IS NULL
            AND item.project_revision_deleted_at IS NULL AND item.deleted_at IS NULL AND type.deleted_at IS NULL
            AND type_fc.deleted_at IS NULL AND type_fc.final_value IS NOT NULL AND type_fc.final_value <> 0
            AND element.deleted_at IS NULL");

            $stmt->execute(array(
                'bill_id'                => $billId,
                'rate_column_name'       => BillItem::FORMULATED_COLUMN_RATE,
                'bill_column_setting_id' => $billColumnSetting->id,
                'quantity_column_name'   => $quantityColumnName
            ));

            $originalTotalRate = $stmt->fetch(PDO::FETCH_ASSOC);

            $total += $originalTotalRate['total_rate'] * $billColumnSetting->quantity;

            unset( $billColumnSetting );
        }

        return $total;
    }

    /*
     * Get All Element And Calculate Grand Total By Bill
     */
    public static function getAllElementSumByBillId($billId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        /* Prepare necessary data to query */
        $bill = DoctrineQuery::create()->select('p.id, m.bill_markup_enabled, m.bill_markup_percentage, m.element_markup_enabled, m.item_markup_enabled, m.rounding_type')
            ->from('ProjectStructure p')->leftJoin('p.BillMarkupSetting m')
            ->where('p.id = ?', $billId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $billMarkupSetting = $bill['BillMarkupSetting']; // Fetch Bill Markup Setting

        if ( $billMarkupSetting && $billMarkupSetting['item_markup_enabled'] )
        {
            $sqlWithMarkup = "item.grand_total + COALESCE(ifc.final_value, 0)";

            switch ($billMarkupSetting['rounding_type'])
            {
                case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                    $sqlWithMarkup = 'CEIL(' . $sqlWithMarkup . ')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                    $sqlWithMarkup = 'FLOOR(' . $sqlWithMarkup . ')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                    $sqlWithMarkup = 'ROUND(' . $sqlWithMarkup . ')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                    $sqlWithMarkup = 'ROUND((' . $sqlWithMarkup . ') * 10) / 10';
                    break;
                default:
                    $sqlWithMarkup = 'ROUND(' . $sqlWithMarkup . ', 2)';
            }

            $rateSql = "SELECT element.id, COALESCE(SUM( " . $sqlWithMarkup . " ),0) AS total_rate  FROM
                " . BillItemTable::getInstance()->getTableName() . " AS item LEFT JOIN
                " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS ifc ON ifc.relation_id = item.id AND ifc.column_name = '" . BillItem::FORMULATED_COLUMN_MARKUP_AMOUNT . "'
                AND ifc.final_value IS NOT NULL AND ifc.final_value <> 0 AND ifc.deleted_at IS NULL
                LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " as element ON element.id = item.element_id
                WHERE item.project_revision_deleted_at IS NULL
                AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
                AND element.project_structure_id = " . $bill['id'] . "
                AND item.deleted_at IS NULL GROUP BY element.id ORDER BY element.id";
        }
        else
        {
            $rateSql = "SELECT element.id, COALESCE(SUM(item.grand_total),0) AS total_rate
                FROM " . BillItemTable::getInstance()->getTableName() . " AS item
                LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " as element ON element.id = item.element_id
                WHERE item.project_revision_deleted_at IS NULL
                AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
                AND element.project_structure_id = " . $bill['id'] . "
                AND item.deleted_at IS NULL AND item.grand_total <> 0 GROUP BY element.id ORDER BY element.id";
        }

        $stmt = $pdo->prepare($rateSql);

        $stmt->execute();

        $elementToRates = $stmt->fetchAll(PDO::FETCH_GROUP);

        /* fetch and loop element */
        $elements = DoctrineQuery::create()->select('e.id, p.id, m.bill_markup_enabled, m.bill_markup_percentage, m.element_markup_enabled, m.item_markup_enabled, m.rounding_type')
            ->from('BillElement e')->leftJoin('e.ProjectStructure p')->leftJoin('p.BillMarkupSetting m')
            ->where('e.project_structure_id = ?', $billId)
            ->addOrderBy('e.priority ASC')
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->execute();

        $count = 0;

        $grandTotalElement = 0;

        /*
            Loop Element To Calculate Grand Total Include Element Markup if Enable
        */
        foreach ( $elements as $element )
        {
            $elementToRate  = array_key_exists($element['id'], $elementToRates) ? $elementToRates[$element['id']][0]['total_rate'] : 0;
            $grandTotalRate = $elementToRate;

            if ( $billMarkupSetting && $billMarkupSetting['element_markup_enabled'] )
            {
                $elementMarkupAmount = BillElementTable::getFormulatedColumnByRelationIdAndColumnName($element['id'], BillElement::FORMULATED_COLUMN_MARKUP_AMOUNT, Doctrine_Core::HYDRATE_ARRAY);
                $elementMarkupAmount = $elementMarkupAmount ? $elementMarkupAmount['final_value'] : 0;
                $grandTotalRate      = $grandTotalRate + $elementMarkupAmount;
            }

            $grandTotalElement += $grandTotalRate;

            $count ++;

            unset( $element );
        }

        unset( $elements );

        return $grandTotalElement;
    }

    /*
     * Elements grand total is items original grand total + item markup(if any)
     */
    public static function getElementGrandTotalByBillIdGroupByElement($billId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT element.id, COALESCE(SUM(item.grand_total),0) AS original_grand_total,
            COALESCE(SUM(item.grand_total),0) AS grand_total_after_markup
            FROM " . BillItemTable::getInstance()->getTableName() . " AS item
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " as element ON element.id = item.element_id
            WHERE item.project_revision_deleted_at IS NULL
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND element.project_structure_id = " . $billId . "
            AND item.deleted_at IS NULL AND item.grand_total <> 0 AND element.deleted_at IS NULL GROUP BY element.id ORDER BY element.id");

        $stmt->execute();

        $elementGrandTotals = $stmt->fetchAll(PDO::FETCH_GROUP);

        return $elementGrandTotals;
    }

    /* This Function return Array of Element Sum By Element Id */
    public static function getTotalItemRateByAndBillColumnSettingIdGroupByElement(ProjectStructure $bill, BillColumnSetting $billColumnSetting)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        //Get Sum of original Quantity and Sum of After Markup By Column Setting
        $stmt = $pdo->prepare("SELECT element.id, COALESCE(SUM(type.grand_total),0) AS original_total_rate,
            COALESCE(SUM(type.grand_total_after_markup),0) AS total_rate_after_markup
            FROM " . BillItemTable::getInstance()->getTableName() . " AS item
            LEFT JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " AS type ON type.bill_item_id = item.id
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON element.id = item.element_id
            WHERE item.project_revision_deleted_at IS NULL
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND type.bill_column_setting_id = " . $billColumnSetting->id . "
            AND type.include = TRUE
            AND element.project_structure_id = " . $bill->id . " AND element.deleted_at IS NULL AND item.deleted_at IS NULL GROUP BY element.id ORDER BY element.id");

        $stmt->execute();

        $elementToRates = $stmt->fetchAll(PDO::FETCH_GROUP);

        /* fetch and loop element */
        $elements = DoctrineQuery::create()
            ->select('e.id, p.id, m.bill_markup_enabled, m.bill_markup_percentage, m.element_markup_enabled, m.item_markup_enabled, m.rounding_type')
            ->from('BillElement e')
            ->leftJoin('e.ProjectStructure p')
            ->leftJoin('p.BillMarkupSetting m')
            ->where('e.project_structure_id = ?', $bill->id)
            ->addOrderBy('e.priority ASC')
            ->fetchArray();

        $returnData = array();

        /*
         * Loop Element To Calculate Grand Total Include Element Markup if Enable
        */
        $grandTotalElement         = 0;
        $originalGrandTotalElement = 0;

        foreach ( $elements as $element )
        {
            if ( array_key_exists($element['id'], $elementToRates) )
            {
                $originalGrandTotalElement += $elementToRates[$element['id']][0]['original_total_rate'];
                $grandTotalElement += $elementToRates[$element['id']][0]['total_rate_after_markup'];
            }
            else
            {
                $elementToRates[$element['id']][0]['total_rate_after_markup'] = 0;
                $elementToRates[$element['id']][0]['original_total_rate']     = 0;
            }

            unset( $element );
        }

        unset( $elements );

        $returnData['elementToRates']            = $elementToRates;
        $returnData['grandTotalElement']         = $grandTotalElement;
        $returnData['originalGrandTotalElement'] = $originalGrandTotalElement;

        return $returnData;
    }

    public static function getSingleUnitTotalItemRateByAndBillColumnSettingIdGroupByElement(ProjectStructure $bill, BillColumnSetting $billColumnSetting)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        // get total item's rate
        $stmt = $pdo->prepare("SELECT element.id, COALESCE(SUM(bifc.final_value),0) AS total_rate_after_markup
            FROM " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " bifc
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON (item.id = bifc.relation_id)
            LEFT JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " AS type ON type.bill_item_id = item.id
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON element.id = item.element_id
            WHERE item.project_revision_deleted_at IS NULL
            AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
            AND type.bill_column_setting_id = " . $billColumnSetting->id . "
            AND element.project_structure_id = " . $bill->id . " AND element.deleted_at IS NULL AND item.deleted_at IS NULL
            AND bifc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "'
            GROUP BY element.id ORDER BY element.id");

        $stmt->execute();

        $elementToRates = $stmt->fetchAll(PDO::FETCH_GROUP);

        /* fetch and loop element */
        $elements = DoctrineQuery::create()
            ->select('e.id, p.id, m.bill_markup_enabled, m.bill_markup_percentage, m.element_markup_enabled, m.item_markup_enabled, m.rounding_type')
            ->from('BillElement e')
            ->leftJoin('e.ProjectStructure p')
            ->leftJoin('p.BillMarkupSetting m')
            ->where('e.project_structure_id = ?', $bill->id)
            ->addOrderBy('e.priority ASC')
            ->fetchArray();

        $returnData = array();

        /*
         * Loop Element To Calculate Grand Total Include Element Markup if Enable
        */
        $grandTotalElement = 0;

        foreach ( $elements as $element )
        {
            if ( array_key_exists($element['id'], $elementToRates) )
            {
                $grandTotalElement += $elementToRates[$element['id']][0]['total_rate_after_markup'];
            }
            else
            {
                $elementToRates[$element['id']][0]['total_rate_after_markup'] = 0;
            }

            unset( $element );
        }

        unset( $elements );

        $returnData['elementToRates']    = $elementToRates;
        $returnData['grandTotalElement'] = $grandTotalElement;

        return $returnData;
    }

    public static function getPostContractRemeasurementTotalItemRateByBillColumnSettingIdGroupByProject($billId, Array $billColumnSettings, $filterBy)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $billColumnSettingIds = array();
        $filterByQuery        = '';

        foreach ( $billColumnSettings as $billColumnSetting )
        {
            $billColumnSettingIds[] = $billColumnSetting['id'];
        }

        if ( $filterBy == PostContractBillItemRate::REMEASUREMENT_FILTER_BY_PROVISIONAL_ITEMS )
        {
            $filterByQuery = 'AND i.type = ' . BillItem::TYPE_ITEM_PROVISIONAL;
        }

        // query item first
        $stmt = $pdo->prepare("SELECT i.id FROM " . BillItemTable::getInstance()->getTableName() . " i
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.id = i.element_id
            WHERE e.project_structure_id = " . $billId . " AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL {$filterByQuery}");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($items) > 0 )
        {
            foreach ( $items as $item )
            {
                $preItemIds[] = $item['id'];
            }

            $stmt = $pdo->prepare("SELECT type.bill_column_setting_id, COALESCE(SUM(pcbir.rate * pcbitt.qty_per_unit),0) AS omission, COALESCE(SUM(pcrmct.total_per_unit),0) AS addition
            FROM " . PostContractBillItemRateTable::getInstance()->getTableName() . " pcbir
            LEFT JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " AS type ON (type.bill_item_id = pcbir.bill_item_id)
            LEFT JOIN " . PostContractRemeasurementClaimTable::getInstance()->getTableName() . " pcrmct ON (pcrmct.post_contract_bill_item_rate_id = pcbir.id AND pcrmct.bill_column_setting_id = type.bill_column_setting_id)
            LEFT JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pcbitt ON (pcbitt.post_contract_id = pcbir.post_contract_id AND pcbitt.bill_item_id = pcbir.bill_item_id AND pcbitt.bill_column_setting_id = type.bill_column_setting_id)
            WHERE type.bill_item_id IN (" . implode(',', $preItemIds) . ") AND type.bill_column_setting_id IN (" . implode(',', $billColumnSettingIds) . ") AND type.deleted_at IS NULL
            GROUP BY type.bill_column_setting_id ORDER BY type.bill_column_setting_id");

            $stmt->execute(array());

            unset( $billColumnSettingIds, $preItemIds );

            return $stmt->fetchAll(PDO::FETCH_GROUP);
        }

        return array();
    }

    public static function getPostContractRemeasurementTotalItemRateByBillColumnSettingIdGroupByElement(ProjectStructure $bill, Array $billColumnSetting, $filterBy)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $filterByQuery = '';
        $preItemIds    = array();

        if ( $filterBy == PostContractBillItemRate::REMEASUREMENT_FILTER_BY_PROVISIONAL_ITEMS )
        {
            $filterByQuery = 'AND i.type = ' . BillItem::TYPE_ITEM_PROVISIONAL;
        }

        // query item first
        $stmt = $pdo->prepare("SELECT i.id FROM " . BillItemTable::getInstance()->getTableName() . " i
        LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.id = i.element_id
        WHERE e.project_structure_id = " . $bill->id . " AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL {$filterByQuery}");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($items) > 0 )
        {
            foreach ( $items as $item )
            {
                $preItemIds[] = $item['id'];
            }

            $stmt = $pdo->prepare("SELECT item.element_id, COALESCE(SUM(pcbir.rate * pcbitt.qty_per_unit),0) AS omission, COALESCE(SUM(pcrmct.total_per_unit),0) AS addition
            FROM " . PostContractBillItemRateTable::getInstance()->getTableName() . " pcbir
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " item ON (pcbir.bill_item_id = item.id)
            LEFT JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " AS type ON (type.bill_item_id = item.id)
            LEFT JOIN " . PostContractRemeasurementClaimTable::getInstance()->getTableName() . " pcrmct ON (pcrmct.post_contract_bill_item_rate_id = pcbir.id AND pcrmct.bill_column_setting_id = type.bill_column_setting_id)
            LEFT JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pcbitt ON (pcbitt.post_contract_id = pcbir.post_contract_id AND pcbitt.bill_item_id = item.id AND pcbitt.bill_column_setting_id = type.bill_column_setting_id)
            WHERE item.id IN (" . implode(', ', $preItemIds) . ") AND type.bill_column_setting_id = " . $billColumnSetting['id'] . " AND type.deleted_at IS NULL
            GROUP BY item.element_id ORDER BY item.element_id");

            $stmt->execute(array());

            unset( $billColumnSettingIds, $preItemIds );

            return $stmt->fetchAll(PDO::FETCH_GROUP);
        }

        return array();
    }

    public static function getElementSumByBillColumnSettingId($billId, Array $billColumnSetting)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        /* Prepare necessary data to query */
        $bill = DoctrineQuery::create()->select('p.id, m.bill_markup_enabled, m.bill_markup_percentage, m.element_markup_enabled, m.item_markup_enabled, m.rounding_type')
            ->from('ProjectStructure p')->leftJoin('p.BillMarkupSetting m')
            ->where('p.id = ?', $billId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $billMarkupSetting = $bill['BillMarkupSetting']; // Fetch Bill Markup Setting

        if ( $billMarkupSetting && $billMarkupSetting['item_markup_enabled'] )
        {
            $sqlWithMarkup = "(type.grand_total + COALESCE((type.grand_total * ifc.final_value) / 100 ,0))";

            switch ($billMarkupSetting['rounding_type'])
            {
                case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                    $sqlWithMarkup = 'CEIL(' . $sqlWithMarkup . ')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                    $sqlWithMarkup = 'FLOOR(' . $sqlWithMarkup . ')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                    $sqlWithMarkup = 'ROUND(' . $sqlWithMarkup . ')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                    $sqlWithMarkup = 'ROUND((' . $sqlWithMarkup . ') * 10) / 10';
                    break;
                default:
                    $sqlWithMarkup = 'ROUND(' . $sqlWithMarkup . ', 2)';
            }

            $rateSql = "SELECT element.id, COALESCE(SUM( " . $sqlWithMarkup . " ),0) AS total_rate
                FROM " . BillItemTable::getInstance()->getTableName() . " AS item
                LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS ifc ON ifc.relation_id = item.id
                AND ifc.column_name = '" . BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE . "'
                LEFT JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " AS type ON type.bill_item_id = item.id
                LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " as element ON element.id = item.element_id
                WHERE item.project_revision_deleted_at IS NULL
                AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
                AND type.bill_column_setting_id = " . $billColumnSetting['id'] . "
                AND element.project_structure_id = " . $bill['id'] . " AND item.deleted_at IS NULL GROUP BY element.id ORDER BY element.id";
        }
        else
        {
            $rateSql = "SELECT element.id, COALESCE(SUM(type.grand_total),0) AS total_rate
                FROM " . BillItemTable::getInstance()->getTableName() . " AS item
                LEFT JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " AS type ON type.bill_item_id = item.id
                LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " as element ON element.id = item.element_id
                WHERE item.project_revision_deleted_at IS NULL
                AND item.type <> ".BillItem::TYPE_HEADER." AND item.type <> ".BillItem::TYPE_NOID." AND item.type <> ".BillItem::TYPE_HEADER_N."
                AND element.project_structure_id = " . $bill['id'] . "
                AND type.bill_column_setting_id = " . $billColumnSetting['id'] . " AND item.deleted_at IS NULL GROUP BY element.id ORDER BY element.id";
        }

        $stmt = $pdo->prepare($rateSql);

        $stmt->execute(); //empty Param, We'll directly Assign Value to Sql to prevent bindParam slow Query

        $elementToRates = $stmt->fetchAll(PDO::FETCH_GROUP);

        /* fetch and loop element */
        $elements = DoctrineQuery::create()->select('e.id, p.id, m.bill_markup_enabled, m.bill_markup_percentage, m.element_markup_enabled, m.item_markup_enabled, m.rounding_type')
            ->from('BillElement e')->leftJoin('e.ProjectStructure p')->leftJoin('p.BillMarkupSetting m')
            ->where('e.project_structure_id = ?', $billId)
            ->addOrderBy('e.priority ASC')
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->execute();

        $count = 0;

        $grandTotalElement = 0;

        /*
            Loop Element To Calculate Grand Total Include Element Markup if Enable
        */
        foreach ( $elements as $element )
        {
            $elementToRate  = array_key_exists($element['id'], $elementToRates) ? $elementToRates[$element['id']][0]['total_rate'] : 0;
            $grandTotalRate = $elementToRate;

            if ( $billMarkupSetting && $billMarkupSetting['element_markup_enabled'] )
            {
                $elementMarkupAmount = BillElementTable::getFormulatedColumnByRelationIdAndColumnName($element['id'], BillElement::FORMULATED_COLUMN_MARKUP_AMOUNT, Doctrine_Core::HYDRATE_ARRAY);
                $elementMarkupAmount = $elementMarkupAmount ? $elementMarkupAmount['final_value'] : 0;
                $grandTotalRate      = $grandTotalRate + $elementMarkupAmount;
            }

            $grandTotalElement += $grandTotalRate;

            $count ++;

            unset( $element );
        }

        unset( $elements );

        return $grandTotalElement;
    }

    public static function updateAllItemTotalAfterMarkupByBillId($billId, $billColumnSettings, $billMarkupSetting)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $excludedIds = implode(',', BillMarkupSettingTable::getMarkupExcludedItemIds());

        /* Get Items With Markup Percentage */
        $stmt = $pdo->prepare("SELECT c.relation_id, i.element_id, COALESCE(markup.final_value, 0) AS " . BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE . ", ROUND(COALESCE(c.final_value, 0),2) AS " . BillItem::FORMULATED_COLUMN_RATE . " FROM " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " c
            LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " markup ON markup.relation_id = c.relation_id  AND markup.column_name = '" . BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE . "' AND markup.deleted_at IS NULL
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " i ON c.relation_id = i.id
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.id = i.element_id
            WHERE e.project_structure_id = " . $billId . " AND e.deleted_at IS NULL AND (c.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "')
            AND c.final_value <> 0 AND c.deleted_at IS NULL AND i.type NOT IN (" . $excludedIds . ")
            AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL ORDER BY i.id");

        $stmt->execute();

        $itemsWithColumn = $stmt->fetchAll(PDO::FETCH_ASSOC);

        //Get Element Markup If Enabled
        if ( $billMarkupSetting['element_markup_enabled'] )
        {
            $stmt = $pdo->prepare("SELECT e.id, COALESCE(c.final_value, 0) as value FROM " . BillElementFormulatedColumnTable::getInstance()->getTableName() . " c
                JOIN " . BillElementTable::getInstance()->getTableName() . " e ON c.relation_id = e.id
                WHERE e.project_structure_id = " . $billId . " AND c.column_name = '" . BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE . "'
                AND c.deleted_at IS NULL AND e.deleted_at IS NULL");

            $stmt->execute();

            $elementMarkupResults = $stmt->fetchAll(PDO::FETCH_COLUMN | PDO::FETCH_GROUP);
        }

        $con = self::getInstance()->getConnection();

        //Get Item Ids to update
        $arrayOfItemIds = $con->fetchColumn("SELECT item.id FROM " . BillItemTable::getInstance()->getTableName() . " AS item
        LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " AS element ON element.id = item.element_id
        WHERE element.project_structure_id = " . $billId . " AND item.type NOT IN (" . $excludedIds . ") AND item.grand_total_quantity <> 0
        AND item.deleted_at IS NULL AND element.deleted_at IS NULL");

        $itemIds = implode(',', $arrayOfItemIds);

        $itemGrandTotals = array();

        if ( count($itemsWithColumn) && count($arrayOfItemIds) )
        {
            //Get All Item Quantities
            foreach ( $billColumnSettings as $column )
            {
                $quantityFieldName = $column['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                $stmt = $pdo->prepare("SELECT r.bill_item_id, COALESCE(fc.final_value, 0) AS value FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
                    JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
                    WHERE r.bill_item_id IN (" . $itemIds . ") AND r.bill_column_setting_id = " . $column['id'] . "
                    AND r.include IS TRUE AND fc.column_name = '" . $quantityFieldName . "'
                    AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

                $stmt->execute();

                $quantities = $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP);

                $afterMarkupTotalCaseStatement = '';
                $totalCaseStatement            = '';

                foreach ( $itemsWithColumn as $item )
                {
                    if ( !array_key_exists($item['relation_id'], $itemGrandTotals) )
                    {
                        $itemGrandTotals[$item['relation_id']]['grand_total_after_markup'] = 0;
                        $itemGrandTotals[$item['relation_id']]['grand_total']              = 0;
                    }

                    $quantity = ( array_key_exists($item['relation_id'], $quantities) ) ? $quantities[$item['relation_id']][0]['value'] : 0;

                    $totalPerUnit = $quantity * $item['rate'];

                    $typeTotal = number_format($totalPerUnit, 2, '.', '') * $column['quantity'];

                    $itemGrandTotals[$item['relation_id']]['grand_total'] += $typeTotal;

                    if ( $billMarkupSetting && ( $billMarkupSetting['element_markup_enabled'] || $billMarkupSetting['item_markup_enabled'] ) )
                    {
                        $rateAfterMarkup = $item['rate'];

                        if ( $billMarkupSetting['item_markup_enabled'] )
                        {
                            $rateAfterMarkup = $rateAfterMarkup + ( $rateAfterMarkup * $item[BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE] / 100 );
                        }

                        if ( $billMarkupSetting['element_markup_enabled'] )
                        {
                            $elementMarkupPercentage = array_key_exists($item['element_id'], $elementMarkupResults) ? $elementMarkupResults[$item['element_id']][0] : 0;
                            $rateAfterMarkup         = ( $elementMarkupPercentage != 0 ) ? $rateAfterMarkup + ( $rateAfterMarkup * $elementMarkupPercentage / 100 ) : $rateAfterMarkup;
                        }

                        switch ($billMarkupSetting['rounding_type'])
                        {
                            case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                                $rateAfterMarkup = ceil($rateAfterMarkup);
                                break;
                            case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                                $rateAfterMarkup = floor($rateAfterMarkup);
                                break;
                            case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                                $rateAfterMarkup = round($rateAfterMarkup);
                                break;
                            case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                                $rateAfterMarkup = round($rateAfterMarkup * 10) / 10;
                                break;
                            default:
                                $rateAfterMarkup = number_format($rateAfterMarkup, 2, '.', '');
                        }
                    }
                    else
                    {
                        $rateAfterMarkup = $item['rate'];
                    }

                    $totalPerUnitAfterMarkup = $quantity * $rateAfterMarkup;

                    $typeTotalAfterMarkup = number_format($totalPerUnitAfterMarkup, 2, '.', '') * $column['quantity'];

                    $itemGrandTotals[$item['relation_id']]['grand_total_after_markup'] += $typeTotalAfterMarkup;

                    //Generate Case Statement
                    $afterMarkupTotalCaseStatement .= " WHEN " . $item['relation_id'] . " THEN (" . $typeTotalAfterMarkup . ")";

                    $totalCaseStatement .= " WHEN " . $item['relation_id'] . " THEN (" . $typeTotal . ")";
                }

                //Update Per Total Quantity
                $con->execute("UPDATE " . BillItemTypeReferenceTable::getInstance()->getTableName() . "
                    SET grand_total = (CASE bill_item_id" . $totalCaseStatement . " END),
                    grand_total_after_markup = (CASE bill_item_id" . $afterMarkupTotalCaseStatement . " END)
                    WHERE bill_column_setting_id = " . $column['id'] . " AND deleted_at IS NULL AND include IS TRUE");

            }

            $originalGrandTotalCaseStatement    = '';
            $afterMarkupGrandTotalCaseStatement = '';

            //Generate GrandTotal Update Statement
            foreach ( $itemGrandTotals as $itemId => $item )
            {
                $originalGrandTotalCaseStatement .= " WHEN " . $itemId . " THEN (" . $item['grand_total'] . ")";
                $afterMarkupGrandTotalCaseStatement .= " WHEN " . $itemId . " THEN (" . $item['grand_total_after_markup'] . ")";
            }

            //Update All Item Grand Total
            $con->execute("UPDATE " . BillItemTable::getInstance()->getTableName() . " AS item
                SET grand_total = (CASE id" . $originalGrandTotalCaseStatement . " END),
                grand_total_after_markup = (CASE id" . $afterMarkupGrandTotalCaseStatement . " END)
                WHERE item.id IN (" . $itemIds . ")");
        }
    }

    public static function getAllProjects()
    {
        $records = DoctrineQuery::create()
            ->select('p.id, p.title, m.*, r.country, sr.name, p.created_at, cb.id as creator_id, pr.name')
            ->from('ProjectStructure p')
            ->leftJoin('p.MainInformation m')
            ->leftJoin('m.Regions r')
            ->leftJoin('m.Subregions sr')
            ->leftJoin('p.Creator cb')
            ->leftJoin('cb.Profile pr')
            ->where('p.id = p.root_id')
            ->addOrderBy('p.priority ASC')
            ->fetchArray();

        $items = new SplFixedArray(count($records) + 1);

        $form = new BaseForm();

        foreach ( $records as $idx => $record )
        {
            $items[$idx] = array(
                'id'           => $record['id'],
                'title'        => $record['title'],
                'status'       => ProjectMainInformation::getProjectStatusById($record['MainInformation']['status']),
                'status_id'    => $record['MainInformation']['status'],
                'site_address' => $record['MainInformation']['site_address'],
                'state'        => ( $record['MainInformation']['Subregions']['name'] ) ? $record['MainInformation']['Subregions']['name'] : "N/a",
                'country'      => ( $record['MainInformation']['Regions']['country'] ) ? $record['MainInformation']['Regions']['country'] : "N/a",
                'region_id'    => $record['MainInformation']['region_id'],
                'subregion_id' => $record['MainInformation']['subregion_id'],
                'created_by'   => ( $record['Creator']['Profile']['name'] ) ? $record['Creator']['Profile']['name'] : '-',
                'created_at'   => date('d/m/Y', strtotime($record['created_at'])),
                '_csrf_token'  => $form->getCSRFToken()
            );
        }

        unset( $records );

        $items[$items->count() - 1] = array(
            'id'           => - 1,
            'title'        => null,
            'status'       => null,
            'status_id'    => null,
            'site_address' => null,
            'state'        => null,
            'country'      => null,
            'region_id'    => null,
            'subregion_id' => null,
            'created_by'   => null,
            'created_at'   => null,
            '_csrf_token'  => $form->getCSRFToken()
        );

        return $items->toArray();
    }

    public static function getProjectsByUser(sfGuardUser $user, $status=ProjectUserPermission::STATUS_PROJECT_BUILDER, $checkUserPermission = true)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $form = new BaseForm();

        switch($status)
        {
            case ProjectUserPermission::STATUS_TENDERING:
                $projectStatusSql = array(
                    ProjectMainInformation::STATUS_POSTCONTRACT_SUB_PACKAGE,
                    ProjectMainInformation::STATUS_IMPORT_SUB_PACKAGE,
                    ProjectMainInformation::STATUS_TENDERING,
                    ProjectMainInformation::STATUS_IMPORT,
                    ProjectMainInformation::STATUS_POSTCONTRACT
                );
                break;
            case ProjectUserPermission::STATUS_POST_CONTRACT:
                $projectStatusSql = array(
                    ProjectMainInformation::STATUS_POSTCONTRACT_SUB_PACKAGE,
                    ProjectMainInformation::STATUS_POSTCONTRACT
                );
                break;
            case ProjectUserPermission::STATUS_PROJECT_MANAGEMENT:
                $projectStatusSql = array(
                    ProjectMainInformation::STATUS_POSTCONTRACT_SUB_PACKAGE,
                    ProjectMainInformation::STATUS_POSTCONTRACT
                );
                break;
            default:
                $projectStatusSql = array(ProjectMainInformation::STATUS_PRETENDER);
        }

        if($checkUserPermission && !$user->is_super_admin)
        {
            $sql = "SELECT DISTINCT(p.id) AS id, p.priority, p.title, p.created_at, i.status, i.tender_type_id, i.start_date, i.eproject_origin_id, up.is_admin, r.country, sr.name AS state, creator.id AS creator_id, cp.name AS creator_name, postContract.published_type AS post_contract_type
            FROM ".ProjectStructureTable::getInstance()->getTableName()." p
            JOIN ".ProjectMainInformationTable::getInstance()->getTableName()." i ON i.project_structure_id = p.id
            JOIN ".ProjectUserPermissionTable::getInstance()->getTableName()." up ON up.project_structure_id = i.project_structure_id AND up.project_status = ".$status."
            JOIN ".RegionsTable::getInstance()->getTableName()." r ON i.region_id = r.id
            JOIN ".SubregionsTable::getInstance()->getTableName()." sr ON sr.region_id = r.id AND i.subregion_id = sr.id
            LEFT JOIN ".PostContractTable::getInstance()->getTableName()." postContract ON postContract.project_structure_id = p.id
            LEFT JOIN ".sfGuardUserTable::getInstance()->getTableName()." creator ON p.created_by = creator.id
            LEFT JOIN ".sfGuardUserProfileTable::getInstance()->getTableName()." cp ON cp.user_id = creator.id
            WHERE up.user_id = ".$user->id." AND i.status IN (".implode(',', $projectStatusSql).") AND i.deleted_at IS NULL
            AND p.type = " . ProjectStructure::TYPE_ROOT . " AND p.deleted_at IS NULL ORDER BY p.priority ASC";

            $hasAddendumSql = "SELECT p.id, COALESCE(COUNT(r.id), 0)
            FROM ".ProjectStructureTable::getInstance()->getTableName()." p
            JOIN ".ProjectMainInformationTable::getInstance()->getTableName()." info ON info.project_structure_id = p.id
            JOIN ".ProjectUserPermissionTable::getInstance()->getTableName()." up ON up.project_structure_id = info.project_structure_id AND up.project_status = ".$status."
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = up.project_structure_id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON b.id = e.project_structure_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON e.id = i.element_id
            JOIN " . ProjectRevisionTable::getInstance()->getTableName() . " r ON r.id = i.project_revision_id
            WHERE up.user_id = ".$user->id." AND info.status IN (".implode(',', $projectStatusSql).")
            AND p.type = " . ProjectStructure::TYPE_ROOT . "
            AND r.version <> ".ProjectRevision::ORIGINAL_BILL_VERSION."
            AND p.deleted_at IS NULL AND b.deleted_at IS NULL AND e.deleted_at IS NULL
            AND i.deleted_at IS NULL AND r.deleted_at IS NULL AND info.deleted_at IS NULL
            GROUP BY p.id
            ORDER BY p.priority ASC";

            $hasTenderAlternativeSql = "SELECT p.id, COALESCE(COUNT(ta.id), 0)
            FROM ".ProjectStructureTable::getInstance()->getTableName()." p
            JOIN ".ProjectMainInformationTable::getInstance()->getTableName()." info ON info.project_structure_id = p.id
            JOIN ".ProjectUserPermissionTable::getInstance()->getTableName()." up ON up.project_structure_id = info.project_structure_id AND up.project_status = ".$status."
            JOIN ".TenderAlternativeTable::getInstance()->getTableName()." ta ON ta.project_structure_id = up.project_structure_id
            WHERE up.user_id = ".$user->id." AND info.status IN (".implode(',', $projectStatusSql).")
            AND p.type = " . ProjectStructure::TYPE_ROOT . "
            AND p.deleted_at IS NULL AND ta.deleted_at IS NULL AND info.deleted_at IS NULL
            GROUP BY p.id
            ORDER BY p.priority ASC";

            $awardedTenderAlternativeSql = "SELECT p.id, ta.id
            FROM ".ProjectStructureTable::getInstance()->getTableName()." p
            JOIN ".ProjectMainInformationTable::getInstance()->getTableName()." info ON info.project_structure_id = p.id
            JOIN ".ProjectUserPermissionTable::getInstance()->getTableName()." up ON up.project_structure_id = info.project_structure_id AND up.project_status = ".$status."
            JOIN ".TenderAlternativeTable::getInstance()->getTableName()." ta ON ta.project_structure_id = up.project_structure_id
            WHERE up.user_id = ".$user->id." AND info.status IN (".implode(',', $projectStatusSql).")
            AND p.type = " . ProjectStructure::TYPE_ROOT . " AND ta.is_awarded IS TRUE
            AND p.deleted_at IS NULL AND ta.deleted_at IS NULL AND ta.project_revision_deleted_at IS NULL AND info.deleted_at IS NULL
            ORDER BY p.priority ASC";
        }
        else
        {
            $sql = "SELECT DISTINCT p.id AS id, p.priority, p.title, p.created_at, i.status, i.tender_type_id, i.start_date, i.eproject_origin_id, r.country, sr.name AS state, creator.id AS creator_id, cp.name AS creator_name, postContract.published_type AS post_contract_type
            FROM ".ProjectStructureTable::getInstance()->getTableName()." p
            JOIN ".ProjectMainInformationTable::getInstance()->getTableName()." i ON i.project_structure_id = p.id
            JOIN ".RegionsTable::getInstance()->getTableName()." r ON i.region_id = r.id
            JOIN ".SubregionsTable::getInstance()->getTableName()." sr ON sr.region_id = r.id AND i.subregion_id = sr.id
            LEFT JOIN ".PostContractTable::getInstance()->getTableName()." postContract ON postContract.project_structure_id = p.id
            LEFT JOIN ".sfGuardUserTable::getInstance()->getTableName()." creator ON p.created_by = creator.id
            LEFT JOIN ".sfGuardUserProfileTable::getInstance()->getTableName()." cp ON cp.user_id = creator.id
            WHERE i.status IN (".implode(',', $projectStatusSql).") AND i.deleted_at IS NULL
            AND p.type = " . ProjectStructure::TYPE_ROOT . " AND p.deleted_at IS NULL ORDER BY p.priority ASC";

            $hasAddendumSql = "SELECT p.id, COALESCE(COUNT(r.id), 0)
            FROM ".ProjectStructureTable::getInstance()->getTableName()." p
            JOIN ".ProjectMainInformationTable::getInstance()->getTableName()." info ON info.project_structure_id = p.id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = info.project_structure_id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON b.id = e.project_structure_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON e.id = i.element_id
            JOIN " . ProjectRevisionTable::getInstance()->getTableName() . " r ON r.id = i.project_revision_id
            WHERE info.status IN (".implode(',', $projectStatusSql).")
            AND p.type = " . ProjectStructure::TYPE_ROOT . "
            AND r.version <> ".ProjectRevision::ORIGINAL_BILL_VERSION."
            AND p.deleted_at IS NULL AND b.deleted_at IS NULL AND e.deleted_at IS NULL
            AND i.deleted_at IS NULL AND r.deleted_at IS NULL AND info.deleted_at IS NULL
            GROUP BY p.id
            ORDER BY p.priority ASC";

            $hasTenderAlternativeSql = "SELECT p.id, COALESCE(COUNT(ta.id), 0)
            FROM ".ProjectStructureTable::getInstance()->getTableName()." p
            JOIN ".ProjectMainInformationTable::getInstance()->getTableName()." info ON info.project_structure_id = p.id
            JOIN ".TenderAlternativeTable::getInstance()->getTableName()." ta ON ta.project_structure_id = info.project_structure_id
            WHERE info.status IN (".implode(',', $projectStatusSql).")
            AND p.type = " . ProjectStructure::TYPE_ROOT . "
            AND p.deleted_at IS NULL AND ta.deleted_at IS NULL AND info.deleted_at IS NULL
            GROUP BY p.id
            ORDER BY p.priority ASC";

            $awardedTenderAlternativeSql = "SELECT p.id, ta.id
            FROM ".ProjectStructureTable::getInstance()->getTableName()." p
            JOIN ".ProjectMainInformationTable::getInstance()->getTableName()." info ON info.project_structure_id = p.id
            JOIN ".TenderAlternativeTable::getInstance()->getTableName()." ta ON ta.project_structure_id = info.project_structure_id
            WHERE info.status IN (".implode(',', $projectStatusSql).")
            AND p.type = " . ProjectStructure::TYPE_ROOT . " AND ta.is_awarded IS TRUE
            AND p.deleted_at IS NULL AND ta.deleted_at IS NULL AND ta.project_revision_deleted_at IS NULL AND info.deleted_at IS NULL
            ORDER BY p.priority ASC";
        }

        $stmt = $pdo->prepare($sql);

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $eProjectIds = array_column($records, 'eproject_origin_id');
        $eProjectReferences = array();
        $eprojectProjects = array();

        if(!empty($eProjectIds))
        {
            $eProjectRecords = EProjectProjectTable::getInstance()
                ->createQuery('u')
                ->select('u.id, u.reference')
                ->whereIn('u.id', $eProjectIds)
                ->fetchArray();

            foreach($eProjectRecords as $eProjectRecord)
            {
                $eProjectReferences[$eProjectRecord['id']] = $eProjectRecord['reference'];
                $eprojectProjects[$eProjectRecord['id']]   = $eProjectRecord;
            }

            unset($eProjectRecords);
        }

        $stmt = $pdo->prepare($hasAddendumSql);
        $stmt->execute();
        $hasAddendumProjects = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare($hasTenderAlternativeSql);
        $stmt->execute();
        $hasTenderAlternativeProjects = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare($awardedTenderAlternativeSql);
        $stmt->execute();
        $awardedTenderAlternatives = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $items = new SplFixedArray(count($records) + 1);

        $projectsWithOpenAddendum       = ProjectStructureTable::getProjectsWithOpenAddendum();
        $visibleTendererRatesProjectIds = EProjectProjectTable::getVisibleTendererRatesProjectIds();

        foreach ( $records as $idx => $record )
        {
            $items[ $idx ] = array(
                'id'                            => $record['id'],
                'title'                         => $record['title'],
                'priority'                      => $record['priority'],
                'is_admin'                      => $user->is_super_admin ? true : ($record['is_admin'] ?? false),
                'reference'                     => isset( $eProjectReferences[ $record['eproject_origin_id'] ] ) ? $eProjectReferences[ $record['eproject_origin_id'] ] : "",
                'status'                        => ProjectMainInformation::getProjectStatusById($record['status']),
                'status_id'                     => $record['status'],
                'tender_type_id'                => $record['tender_type_id'],
                'post_contract_type_id'         => $record['post_contract_type'],
                'state'                         => ( $record['state'] ) ? $record['state'] : "N/A",
                'country'                       => ( $record['country'] ) ? $record['country'] : "N/A",
                'created_by'                    => ( $record['creator_name'] ) ? $record['creator_name'] : '-',
                'start_date'                    => ( $record['start_date'] ) ? date('Y-m-d', strtotime($record['start_date'])) : '-',
                'created_at'                    => date('d/m/Y H:i', strtotime($record['created_at'])),
                'has_addendum'                  => (int)(array_key_exists($record['id'], $hasAddendumProjects) && $hasAddendumProjects[$record['id']]),
                'has_tender_alternative'        => (int)(array_key_exists($record['id'], $hasTenderAlternativeProjects) && $hasTenderAlternativeProjects[$record['id']]),
                'awarded_tender_alternative_id' => (array_key_exists($record['id'], $awardedTenderAlternatives)) ? $awardedTenderAlternatives[$record['id']] : -1,
                'can_be_deleted'                => self::canBeDeletedById($record['id']),
                'tendering_module_locked'       => ProjectStructureTable::tenderingModuleLocked($record['id']),
                'can_publish_to_post_contract'  => (intval($record['status']) == ProjectMainInformation::STATUS_TENDERING && !array_key_exists($record['id'], $projectsWithOpenAddendum)), 
                'show_contractor_rates'         => (int)in_array($record['eproject_origin_id'], $visibleTendererRatesProjectIds),
                'can_add_addendum_bills'        => array_key_exists($record['id'], $projectsWithOpenAddendum),
                '_csrf_token'                   => $form->getCSRFToken(),
            );
        }

        $items[$items->count() - 1] = array(
            'id'                            => Constants::GRID_LAST_ROW,
            'title'                         => "",
            'priority'                      => -1,
            'is_admin'                      => false,
            'reference'                     => "",
            'status'                        => "",
            'status_id'                     => -1,
            'tender_type_id'                => -1,
            'post_contract_type_id'         => null,
            'state'                         => "",
            'country'                       => "",
            'start_date'                    => "",
            'created_by'                    => "",
            'created_at'                    => "",
            'has_addendum'                  => 0,
            'has_tender_alternative'        => 0,
            'awarded_tender_alternative_id' => -1,
            'can_be_deleted'                => false,
            '_csrf_token'                   => $form->getCSRFToken()
        );

        return $items->toArray();
    }

    public static function removeProjectDataByProjectId($projectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();
        $pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, true);//to run multiple commands

        try
        {
            $pdo->beginTransaction();

            $stmt = $pdo->prepare("SELECT r.table_name, r.constraint_name, r.column_name FROM information_schema.constraint_column_usage u
            INNER JOIN information_schema.referential_constraints fk ON u.constraint_catalog = fk.unique_constraint_catalog
            AND u.constraint_schema = fk.unique_constraint_schema
            AND u.constraint_name = fk.unique_constraint_name
            INNER JOIN information_schema.key_column_usage r
            ON r.constraint_catalog = fk.constraint_catalog
            AND r.constraint_schema = fk.constraint_schema
            AND r.constraint_name = fk.constraint_name
            WHERE u.column_name = 'id'
            AND u.table_name = '" . strtolower(BillItemTable::getInstance()->getTableName()) . "'");

            $stmt->execute();

            $billItemReferenceConstraints = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $deleteReferenceSql = null;
            $alterTableSql      = null;

            foreach ( $billItemReferenceConstraints as $billItemReferenceConstraint )
            {
                $alterTableSql .= "ALTER TABLE " . $billItemReferenceConstraint['table_name'] . " DROP CONSTRAINT " . $billItemReferenceConstraint['constraint_name'] . ";";

                $deleteReferenceSql .= "DELETE FROM " . $billItemReferenceConstraint['table_name'] . " WHERE
                " . $billItemReferenceConstraint['column_name'] . " IN (SELECT i.id FROM " . BillItemTable::getInstance()->getTableName() . " AS i
                JOIN " . BillElementTable::getInstance()->getTableName() . " AS e ON i.element_id = e.id
                JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS s ON e.project_structure_id = s.id WHERE s.root_id = " . $projectId . ");";
            }

            if ( $alterTableSql )
            {
                $stmt = $pdo->prepare($alterTableSql);
                $stmt->execute();

                $stmt = $pdo->prepare($deleteReferenceSql);
                $stmt->execute();
            }

            $stmt = $pdo->prepare("DELETE FROM " . BillItemTable::getInstance()->getTableName() . " WHERE element_id IN
            (SELECT e.id FROM " . BillElementTable::getInstance()->getTableName() . " AS e
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS s ON e.project_structure_id = s.id WHERE s.root_id = " . $projectId . ")");
            $stmt->execute();

            $stmt = $pdo->prepare("DELETE FROM " . sfGuardTenderingProjectGroupTable::getInstance()->getTableName() . " WHERE project_structure_id = " . $projectId);
            $stmt->execute();

            $stmt = $pdo->prepare("DELETE FROM " . ProjectStructureTable::getInstance()->getTableName() . " p WHERE p.root_id = " . $projectId);
            $stmt->execute();

            $addBillItemReferenceSql = null;
            foreach ( $billItemReferenceConstraints as $billItemReferenceConstraint )
            {
                $addBillItemReferenceSql .= "ALTER TABLE " . $billItemReferenceConstraint['table_name'] . " ADD CONSTRAINT " . $billItemReferenceConstraint['constraint_name'] . " FOREIGN KEY (" . $billItemReferenceConstraint['column_name'] . ") REFERENCES " . BillItemTable::getInstance()->getTableName() . "(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;";
            }

            if ( $addBillItemReferenceSql )
            {
                $stmt = $pdo->prepare($addBillItemReferenceSql);
                $stmt->execute();
            }

            $pdo->commit();

            return true;
        }
        catch (PDOException $e)
        {
            $pdo->rollBack();
            throw $e;
        }
    }

    public static function getProjectInformationByProjectId($projectId)
    {
        /*
        */
        $project = Doctrine_Query::create()
            ->select('p.id, p.type, p.title, p.root_id, p.lft, p.rgt, p.level, p.created_at, p.created_by, p.tender_origin_id,
            m.title, m.description, m.site_address, m.client, m.start_date, m.unique_id,
            r.project_structure_id, r.revision, r.version, r.locked_status,
            reg.*, sreg.*, workcat.id, workcat.name, workcat.description, currency.*,
            sf.project_structure_id, sf.first_row_text, sf.second_row_text, sf.left_text, sf.right_text,
            sgs.project_structure_id, sgs.project_title, sgs.summary_title, sgs.include_printing_date, sgs.carried_to_next_page_text, sgs.continued_from_previous_page_text, sgs.page_number_prefix,
            ta.id, ta.title, ta.description, ta.project_structure_id, ta.project_structure_id, ta.tender_origin_id, ta.project_revision_id, ta.deleted_at_project_revision_id, ta.project_revision_deleted_at, ta.is_awarded')
            ->from('ProjectStructure p')
            ->leftJoin('p.MainInformation m')
            ->leftJoin('m.Regions reg')
            ->leftJoin('m.Subregions sreg')
            ->leftJoin('m.WorkCategory workcat')
            ->leftJoin('m.Currency currency')
            ->leftJoin('p.ProjectRevisions r')
            ->leftJoin('p.ProjectSummaryFooter sf')
            ->leftJoin('p.ProjectSummaryGeneralSetting sgs')
            ->leftJoin('p.TenderAlternatives ta')
            ->where('p.id = ?', $projectId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        if ( $project )
        {
            $pdo = self::getInstance()->getConnection()->getDbh();

            $stmt = $pdo->prepare("SELECT ta.id, ta.title, ta.description, ta.project_structure_id, ta.project_structure_id, ta.tender_origin_id, ta.project_revision_id, ta.deleted_at_project_revision_id, ta.project_revision_deleted_at, ta.is_awarded
            FROM ". TenderAlternativeTable::getInstance()->getTableName()." ta
            WHERE ta.project_structure_id = ".$project['id']."
            AND ta.deleted_at IS NULL
            ORDER BY ta.id");

            $stmt->execute();

            $tenderAlternatives = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $breakdown = Doctrine_Query::create()->select('s.id, s.tender_origin_id, s.title, s.type, s.lft, s.rgt, s.root_id, s.level,
                ss.project_structure_id, ss.reference_char, ss.is_bold, ss.is_italic, ss.is_underline')
                ->from('ProjectStructure s')
                ->leftJoin('s.ProjectSummaryStyle ss')
                ->where('s.lft > ? AND s.rgt < ?', array( $project['lft'], $project['rgt'] ))
                ->andWhere('s.root_id = ?', $project['id'])
                ->addOrderBy('s.lft ASC')
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->execute();

            $mainInformation = $project['MainInformation'];

            unset( $project['MainInformation'] );

            $revisions = $project['ProjectRevisions'];

            unset( $project['ProjectRevisions'] );

            return array( 'revisions' => $revisions, 'mainInformation' => $mainInformation, 'structure' => $project, 'tenderAlternatives' => $tenderAlternatives, 'breakdown' => $breakdown );
        }

        return false;
    }

    public static function canBeDeletedById($id)
    {
        $pdo  = self::getInstance()->getConnection()->getDbh();

        // RFQ check.
        $stmt = $pdo->prepare("SELECT COALESCE(COUNT(id), 0) FROM " . RFQTable::getInstance()->getTableName() . " WHERE project_structure_id = " . $id);
        $stmt->execute();

        $count = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        if($count > 0) return false;

        // New Post Contract Form Information check.
        $stmt = $pdo->prepare("SELECT COALESCE(COUNT(id), 0) FROM " . NewPostContractFormInformationTable::getInstance()->getTableName() . " WHERE project_structure_id = " . $id);
        $stmt->execute();

        $count = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return ($count==0);
    }

    public static function setPrintFullDecimalByProjectId($projectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("UPDATE " . BillLayoutSettingTable::getInstance()->getTableName() . " SET print_full_decimal = true WHERE bill_id IN (
            SELECT id FROM " . ProjectStructureTable::getInstance()->getTableName() . " WHERE root_id = " . $projectId . " AND id <> " . $projectId . ")");

        $stmt->execute();
    }

    public static function tenderingModuleLocked($projectId)
    {
        $project = Doctrine_Core::getTable('ProjectStructure')->find($projectId);

        // if not in tendering, false
        $mainInformation = $project->MainInformation;

        if($mainInformation->status != ProjectMainInformation::STATUS_TENDERING)
        {
            return true;
        }

        $locked = false;

        $newPostContractForm = $project->NewPostContractFormInformation;

        if($newPostContractForm->exists())
        {
            $locked = true;

            if(ContractManagementVerifierTable::isRejected($project, PostContractClaim::TYPE_LETTER_OF_AWARD))
            {
                $locked = false;
            }
        }

        return $locked;
    }

    public static function getProjectsWithOpenAddendum()
    {
        $pdo = self::getInstance()->getConnection()->getDbh();
        $stmt = $pdo->prepare("SELECT p.id, COALESCE(COUNT(r.id), 0)
        FROM ".ProjectStructureTable::getInstance()->getTableName()." p
        JOIN ".ProjectMainInformationTable::getInstance()->getTableName()." i ON i.project_structure_id = p.id
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON r.project_structure_id = i.project_structure_id
        WHERE i.status = ".ProjectMainInformation::STATUS_TENDERING."
        AND r.locked_status IS FALSE AND r.version > 0
        AND p.deleted_at IS NULL AND i.deleted_at IS NULL AND r.deleted_at IS NULL
        GROUP BY p.id
        ORDER BY p.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getParentProject(ProjectStructure $project)
    {
        $eProjectProject = Doctrine_Core::getTable('EProjectProject')->find($project->MainInformation->eproject_origin_id);

        if( ! $eProjectProject ) return null;

        $parentEProjectProject = EProjectProjectTable::getByEProjectOriginId($eProjectProject->parent_project_id);

        if( ! $parentEProjectProject ) return null;

        return $parentEProjectProject->BuildspaceProjectMainInfo->ProjectStructure;
    }

    public static function getSubProjects(ProjectStructure $project)
    {
        $eProjectParentProject = Doctrine_Core::getTable('EProjectProject')->find($project->MainInformation->eproject_origin_id);

        $results = DoctrineQuery::create()->select('ep.id')->from('EProjectProject ep')
            ->where('ep.parent_project_id = ?', $eProjectParentProject->id)
            ->andWhere('ep.deleted_at IS NULL')
            ->addOrderBy('ep.id ASC')
            ->execute();

        $subProjects = array();

        foreach($results as $eProjectProject)
        {
            $subProjects[] = $eProjectProject->BuildspaceProjectMainInfo->ProjectStructure;
        }

        return $subProjects;
    }

    public static function getSiblingProjects(ProjectStructure $project)
    {
        $eProjectParentProject = Doctrine_Core::getTable('EProjectProject')->find($project->MainInformation->eproject_origin_id);

        $results = DoctrineQuery::create()->select('ep.id')->from('EProjectProject ep')
            ->where('ep.parent_project_id = ?', $eProjectParentProject->parent_project_id)
            ->andWhere('ep.id != ?', $eProjectParentProject->id)
            ->execute();

        $siblingProjects = array();

        foreach($results as $eProjectProject)
        {
            $siblingProjects[] = $eProjectProject->BuildspaceProjectMainInfo->ProjectStructure;
        }

        return $siblingProjects;
    }

    public static function getBillByLocations(ProjectStructure $project, $requestParams, $description)
    {
        $predefinedLocationCodes       = PreDefinedLocationCodeTable::getAssignedCodesByProjectId($project->id);
        $projectStructureLocationCodes = ProjectStructureLocationCodeTable::getAssignedCodesByProjectId($project->id);
        $form                          = new BaseForm();

        $i = new ArrayIterator($requestParams);
        $predefinedLocationCodesFilter = array();
        $projectStructureLocationCodesFilter = array();
        $columnTypesFilter = array();
        $columnUnitsFilter = array();

        while ($i->valid()) {
            if (strpos($i->key(), 't-') === 0) {
                $level = substr($i->key(), strlen('t-'));
                $predefinedLocationCodesFilter[intval($level)] = explode(",", $i->current());
            }

            if (strpos($i->key(), 'l-') === 0) {
                $level = substr($i->key(), strlen('l-'));
                $projectStructureLocationCodesFilter[intval($level)] = explode(",", $i->current());
            }

            if($i->key() == 'column_type') {
                $columnTypesFilter = explode(",", $i->current());
            }

            if($i->key() == 'column_unit') {
                $columnUnitsFilter = explode(",", $i->current());
            }

            $i->next();
        }

        $columnUnitsFilterGrouped = array();

        foreach($columnUnitsFilter as $stringedIds)
        {
            $ids                 = explode('-', $stringedIds);
            $billId              = $ids[0];
            $billColumnSettingId = $ids[1];
            $counter             = $ids[2];

            if( ! array_key_exists($billId, $columnUnitsFilterGrouped) ) $columnUnitsFilterGrouped[ $billId ] = array();

            if( ! array_key_exists($billColumnSettingId, $columnUnitsFilterGrouped[ $billId ]) ) $columnUnitsFilterGrouped[ $billId ][ $billColumnSettingId ] = array();

            $columnUnitsFilterGrouped[ $billId ][ $billColumnSettingId ][] = $counter;
        }

        if((empty($description) || strlen($description) == 0) && (empty($predefinedLocationCodesFilter) && empty($projectStructureLocationCodesFilter) && empty($columnTypesFilter) && empty($columnUnitsFilter)))
        {
            return array();
        }

        $pdo = $project->getTable()->getConnection()->getDbh();

        $billItemDesc = null;

        $sql = "SELECT b.id AS bill_id, b.title AS bill_title, l.id AS location_assignment_id, l.pre_defined_location_code_id, l.project_structure_location_code_id, c.id, c.description, c.type, c.uom_id, c.lft, c.level, uom.name AS uom_name, uom.symbol AS uom_symbol
            FROM " . LocationAssignmentTable::getInstance()->getTableName() . " l
            JOIN " . PreDefinedLocationCodeTable::getInstance()->getTableName() . " plc ON l.pre_defined_location_code_id = plc.id
            JOIN " . ProjectStructureLocationCodeTable::getInstance()->getTableName() . " pslc ON l.project_structure_location_code_id = pslc.id
            JOIN " . BillItemTable::getInstance()->getTableName() . " c ON c.id = l.bill_item_id
            LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON c.uom_id = uom.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON c.element_id = e.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b ON e.project_structure_id = b.id
            WHERE b.root_id = " . $project->id." AND pslc.project_structure_id = b.root_id ";

        if(!empty($description) && strlen($description) > 0)
        {
            $sql .= " AND (LOWER(c.description) LIKE :bill_item_description) ";

            $billItemDesc = $description;
        }

        $sql .= " AND c.deleted_at IS NULL AND c.project_revision_deleted_at IS NULL
            AND uom.deleted_at IS NULL AND e.deleted_at IS NULL AND b.deleted_at IS NULL
            AND plc.deleted_at IS NULL AND pslc.deleted_at IS NULL
            ORDER BY plc.priority, plc.priority, plc.lft, plc.level, pslc.priority, pslc.priority, pslc.lft, pslc.level";

        $stmt = $pdo->prepare($sql);

        if(!empty($billItemDesc))
        {
            $stmt->execute(array(
                'bill_item_description' => '%'.strtolower($billItemDesc).'%'
            ));
        }
        else
        {
            $stmt->execute();
        }

        $records = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("SELECT l.bill_column_setting_id, l.use_original_qty
            FROM " . LocationBQSettingTable::getInstance()->getTableName() . " l
            JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " bc ON l.bill_column_setting_id = bc.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b ON bc.project_structure_id = b.id
            WHERE b.root_id = ".$project->id." AND b.type = ".ProjectStructure::TYPE_BILL." AND b.deleted_at IS NULL
            AND bc.deleted_at IS NULL
            ORDER BY b.priority, b.lft, b.level, bc.id");

        $stmt->execute();

        $locationBQSettings = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare("SELECT l.id, l.location_assignment_id, l.bill_column_setting_id, l.unit, l.percentage
            FROM " . LocationBillItemQuantityProrateTable::getInstance()->getTableName() . " l
            JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " bc ON l.bill_column_setting_id = bc.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b ON bc.project_structure_id = b.id
            WHERE b.root_id = ".$project->id." AND b.type = ".ProjectStructure::TYPE_BILL." AND b.deleted_at IS NULL
            AND bc.deleted_at IS NULL
            ORDER BY b.priority, b.lft, b.level, bc.id");

        $stmt->execute();

        $locationBillItemQtyProrateRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $locationBillItemQtyProrates = array();

        foreach($locationBillItemQtyProrateRecords as $locationBillItemQtyProrate)
        {
            $locationBillItemQtyProrates[$locationBillItemQtyProrate['location_assignment_id']."-".$locationBillItemQtyProrate['bill_column_setting_id']."-".$locationBillItemQtyProrate["unit"]] = $locationBillItemQtyProrate["percentage"];
        }

        unset($locationBillItemQtyProrateRecords);

        $items = array();

        if(!empty($records))
        {
            $currentProjectRevision = PostContractClaimRevisionTable::getCurrentProjectRevision($project->PostContract);
            $locationProgressClaims = array();

            if($currentProjectRevision)
            {
                $stmt = $pdo->prepare("SELECT c.id, c.location_bill_item_quantity_prorates_id, c.post_contract_claim_revision_id,
                    c.current_quantity, c.current_percentage, c.up_to_date_quantity, c.up_to_date_percentage,
                    l.location_assignment_id, l.bill_column_setting_id, l.unit
                    FROM " . LocationProgressClaimTable::getInstance()->getTableName() . " c
                    JOIN " . LocationBillItemQuantityProrateTable::getInstance()->getTableName() . " l ON c.location_bill_item_quantity_prorates_id = l.id
                    WHERE c.post_contract_claim_revision_id = ".$currentProjectRevision['id']."
                    ORDER BY l.id ASC");

                $stmt->execute();

                $locationProgressClaimRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

                foreach($locationProgressClaimRecords as $locationProgressClaimRecord)
                {
                    $locationProgressClaims[$locationProgressClaimRecord['location_assignment_id']."-".$locationProgressClaimRecord['bill_column_setting_id']."-".$locationProgressClaimRecord["unit"]] = array(
                        'previous_percentage'   => 0,
                        'previous_quantity'     => 0,
                        'current_quantity'      => $locationProgressClaimRecord['current_quantity'],
                        'current_percentage'    => $locationProgressClaimRecord['current_percentage'],
                        'up_to_date_quantity'   => $locationProgressClaimRecord['up_to_date_quantity'],
                        'up_to_date_percentage' => $locationProgressClaimRecord['up_to_date_percentage']
                    );
                }

                $previousProjectRevision = PostContractClaimRevisionTable::getPreviousProjectRevision($project->PostContract, $currentProjectRevision['version']);

                if($previousProjectRevision)
                {
                    $stmt = $pdo->prepare("SELECT c.id, c.location_bill_item_quantity_prorates_id, c.post_contract_claim_revision_id,
                        ROUND(COALESCE(c.up_to_date_percentage, 0),2) AS prev_percentage, ROUND(COALESCE(c.up_to_date_quantity, 0),2) AS prev_quantity,
                        l.location_assignment_id, l.bill_column_setting_id, l.unit
                        FROM " . LocationProgressClaimTable::getInstance()->getTableName() . " c
                        JOIN " . LocationBillItemQuantityProrateTable::getInstance()->getTableName() . " l ON c.location_bill_item_quantity_prorates_id = l.id
                        WHERE c.post_contract_claim_revision_id = ".$previousProjectRevision['id']."
                        ORDER BY l.id ASC");

                    $stmt->execute();

                    $previousLocationProgressClaimRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

                    foreach($previousLocationProgressClaimRecords as $previousLocationProgressClaimRecord)
                    {
                        if(!array_key_exists($previousLocationProgressClaimRecord['location_assignment_id']."-".$previousLocationProgressClaimRecord['bill_column_setting_id']."-".$previousLocationProgressClaimRecord["unit"], $locationProgressClaims))
                        {
                            $locationProgressClaims[$previousLocationProgressClaimRecord['location_assignment_id']."-".$previousLocationProgressClaimRecord['bill_column_setting_id']."-".$previousLocationProgressClaimRecord["unit"]] = array(
                                'current_quantity'      => 0,
                                'current_percentage'    => 0,
                                'up_to_date_quantity'   => $previousLocationProgressClaimRecord['prev_quantity'],
                                'up_to_date_percentage' => $previousLocationProgressClaimRecord['prev_percentage']
                            );
                        }

                        $locationProgressClaims[$previousLocationProgressClaimRecord['location_assignment_id']."-".$previousLocationProgressClaimRecord['bill_column_setting_id']."-".$previousLocationProgressClaimRecord["unit"]]['previous_percentage'] = $previousLocationProgressClaimRecord['prev_percentage'];
                        $locationProgressClaims[$previousLocationProgressClaimRecord['location_assignment_id']."-".$previousLocationProgressClaimRecord['bill_column_setting_id']."-".$previousLocationProgressClaimRecord["unit"]]['previous_quantity']   = $previousLocationProgressClaimRecord['prev_quantity'];
                    }

                    unset($previousLocationProgressClaimRecords);
                }

                unset($locationProgressClaimRecords);
            }

            $standardClaimTypeReferences = PostContractStandardClaimTypeReferenceTable::getStandardClaimTypeReferences($project);

            $billIds = array_keys($records);

            $stmt = $pdo->prepare("SELECT b.id AS bill_id, c.id, c.name, c.quantity, c.remeasurement_quantity_enabled, c.use_original_quantity
            FROM " . BillColumnSettingTable::getInstance()->getTableName() . " c
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b ON c.project_structure_id = b.id
            WHERE c.project_structure_id IN (".implode(',', array_fill(0, count($billIds), '?')).")
            AND c.deleted_at IS NULL AND b.deleted_at IS NULL
            ORDER BY b.id, c.id ASC");

            $stmt->execute($billIds);

            $billColumnSettingsByBills = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

            $quantities = array();

            foreach($billColumnSettingsByBills as $billId => $billColumnSettings)
            {
                foreach($billColumnSettings as $billColumnSetting)
                {
                    $quantityFieldName = (array_key_exists($billColumnSetting['id'], $locationBQSettings) && !$locationBQSettings[$billColumnSetting['id']]) ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT;

                    $stmt = $pdo->prepare("SELECT CAST(r.bill_item_id AS text)|| '-' ||CAST(r.bill_column_setting_id AS text) AS id, COALESCE(fc.final_value, 0) AS value
                        FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
                        JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
                        JOIN " . BillItemTable::getInstance()->getTableName() . " i ON r.bill_item_id = i.id
                        JOIN " . BillElementTable::getInstance()->getTableName() . " e ON i.element_id = e.id
                        WHERE e.project_structure_id = " . $billId . " AND r.bill_column_setting_id = " . $billColumnSetting['id'] . "
                        AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0
                        AND r.deleted_at IS NULL AND fc.deleted_at IS NULL
                        AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
                        AND e.deleted_at IS NULL");

                    $stmt->execute();

                    $quantities += $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
                }
            }

            foreach($billColumnSettingsByBills as $billId => $billColumnSettings)
            {
                if(array_key_exists($billId, $records))
                {
                    foreach($records[$billId] as $record)
                    {
                        foreach($billColumnSettings as $billColumnSetting)
                        {
                            // check for column type.
                            if( ! empty( $columnTypesFilter ) && ( ! in_array($billColumnSetting['id'], $columnTypesFilter) ) ) continue;

                            for($i=1; $i <= $billColumnSetting['quantity']; $i++)
                            {
                                // check for column unit.
                                if( ! empty( $columnUnitsFilter ) && ((!isset($columnUnitsFilterGrouped[$billId][$billColumnSetting['id']])) || ( ! in_array($i, $columnUnitsFilterGrouped[$billId][$billColumnSetting['id']]) )) ) continue;

                                $billItemQty = (array_key_exists($record['id'].'-'.$billColumnSetting['id'], $quantities)) ? $quantities[$record['id'].'-'.$billColumnSetting['id']] : 0;
                                if(array_key_exists($record['location_assignment_id']."-".$billColumnSetting['id']."-".$i, $locationBillItemQtyProrates))
                                {
                                    $percentage    = $locationBillItemQtyProrates[$record['location_assignment_id']."-".$billColumnSetting['id']."-".$i];
                                    $hasProrateQty = true;
                                }
                                else
                                {
                                    $percentage    = 0;
                                    $hasProrateQty = false;
                                }

                                $proRatedQty = ($percentage != 0) ? ($percentage / 100) * $billItemQty : 0;

                                $item = array(
                                    'id'                    => $record['location_assignment_id']."-".$billColumnSetting['id']."-".$i."-".$record['id'],
                                    'bill_title'            => $record['bill_title'],
                                    'description'           => $record['description'],
                                    'uom'                   => strlen($record['uom_symbol']) > 0 ? $record['uom_symbol'] : "-",
                                    'column_name'           => $billColumnSetting['name'],
                                    'column_unit'           => $standardClaimTypeReferences[$billColumnSetting['id']][$i]['new_name'] ?? ('Unit ' . ( $i )),
                                    'qty'                   => $billItemQty,
                                    'percentage'            => $percentage,
                                    'prorated_qty'          => number_format($proRatedQty, 2, '.', ''),
                                    'previous_percentage'   => 0,
                                    'previous_quantity'     => 0,
                                    'current_percentage'    => 0,
                                    'current_quantity'      => 0,
                                    'up_to_date_percentage' => 0,
                                    'up_to_date_quantity'   => 0,
                                    'has_prorate_qty'       => $hasProrateQty,
                                    '_csrf_token'           => $form->getCSRFToken()
                                );

                                if(array_key_exists($record['location_assignment_id']."-".$billColumnSetting['id']."-".$i, $locationProgressClaims))
                                {
                                    $item['previous_percentage']   = $locationProgressClaims[$record['location_assignment_id']."-".$billColumnSetting['id']."-".$i]['previous_percentage'];
                                    $item['previous_quantity']     = $locationProgressClaims[$record['location_assignment_id']."-".$billColumnSetting['id']."-".$i]['previous_quantity'];
                                    $item['current_percentage']    = $locationProgressClaims[$record['location_assignment_id']."-".$billColumnSetting['id']."-".$i]['current_percentage'];
                                    $item['current_quantity']      = $locationProgressClaims[$record['location_assignment_id']."-".$billColumnSetting['id']."-".$i]['current_quantity'];
                                    $item['up_to_date_percentage'] = $locationProgressClaims[$record['location_assignment_id']."-".$billColumnSetting['id']."-".$i]['up_to_date_percentage'];
                                    $item['up_to_date_quantity']   = $locationProgressClaims[$record['location_assignment_id']."-".$billColumnSetting['id']."-".$i]['up_to_date_quantity'];
                                }

                                $itemPredefinedLocationCodeMaxLevel = 0;

                                if(array_key_exists($record["pre_defined_location_code_id"], $predefinedLocationCodes))
                                {
                                    foreach($predefinedLocationCodes[$record["pre_defined_location_code_id"]] as $predefinedLocationCodeIdx => $predefinedLocationCode)
                                    {
                                        $itemPredefinedLocationCodeMaxLevel = max(array($itemPredefinedLocationCodeMaxLevel, $predefinedLocationCode['level']));

                                        if(!empty($predefinedLocationCodesFilter) and array_key_exists($predefinedLocationCode['level'], $predefinedLocationCodesFilter) and
                                            !in_array($predefinedLocationCode['id'], $predefinedLocationCodesFilter[$predefinedLocationCode['level']]))
                                        {
                                            break 3;
                                        }

                                        $item[$predefinedLocationCodeIdx."-predefined_location_code"] = $predefinedLocationCode['name'];
                                    }
                                }

                                $itemProjectStructureLocationCodeMaxLevel = 0;

                                if(array_key_exists($record["project_structure_location_code_id"], $projectStructureLocationCodes))
                                {
                                    foreach($projectStructureLocationCodes[$record["project_structure_location_code_id"]] as $projectStructureLocationCodeIdx => $projectStructureLocationCode)
                                    {
                                        $itemProjectStructureLocationCodeMaxLevel = max(array($itemProjectStructureLocationCodeMaxLevel, $projectStructureLocationCode['level']));

                                        if(!empty($projectStructureLocationCodesFilter) and
                                            array_key_exists($projectStructureLocationCode['level'], $projectStructureLocationCodesFilter) and
                                            !in_array($projectStructureLocationCode['id'], $projectStructureLocationCodesFilter[$projectStructureLocationCode['level']]))
                                        {
                                            break 3;
                                        }

                                        $item[$projectStructureLocationCodeIdx."-project_structure_location_code"] = $projectStructureLocationCode['description'];
                                    }
                                }

                                $predefinedLocationCodeHasFilter  = ( count($predefinedLocationCodesFilter) > 0 );
                                $predefinedLocationCodeLevelMatch = $predefinedLocationCodeHasFilter ? ( $itemPredefinedLocationCodeMaxLevel >= max(array_keys($predefinedLocationCodesFilter)) ) : true;

                                if( ! $predefinedLocationCodeLevelMatch ) continue;

                                $projectStructureLocationCodeHasFilter  = ( count($projectStructureLocationCodesFilter) > 0 );
                                $projectStructureLocationCodeLevelMatch = $projectStructureLocationCodeHasFilter ? ( $itemProjectStructureLocationCodeMaxLevel >= max(array_keys($projectStructureLocationCodesFilter)) ) : true;

                                if( ! $projectStructureLocationCodeLevelMatch ) continue;

                                $items[] = $item;
                            }

                        }
                    }
                }
            }

            unset($quantities);
        }

        return $items;
    }

    public static function pushEProjectToPostContract(ProjectStructure $project, sfGuardUser $user)
    {
        $client = new GuzzleHttp\Client(array(
            'verify'   => sfConfig::get('app_guzzle_ssl_verification'),
            'base_uri' => sfConfig::get('app_e_project_url')
        ));

        $eProjectProject = $project->MainInformation->getEProjectProject();

        try
        {
            $res = $client->post("buildspace/pushToPostContract/{$eProjectProject->id}",[
                'form_params' => [
                    'user_id' => $user->Profile->eproject_user_id,
                ]
            ]);

            $success = json_decode($res->getBody())->success;
        }
        catch(Exception $e)
        {
            throw $e;
        }

        return $success;
    }

}
