<?php

/**
 * StockInDeliveryOrderItemQuantityTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StockInDeliveryOrderItemQuantityTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object StockInDeliveryOrderItemQuantityTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('StockInDeliveryOrderItemQuantity');
    }

    public static function getItemQuantitiesByStockInInvoice(StockInInvoice $invoice)
    {
        $deliveryOrders = $invoice->StockInDeliveryOrders;
        $data           = array();
        $doIds          = array();

        foreach ( $deliveryOrders as $deliveryOrder )
        {
            $doIds[$deliveryOrder->id] = $deliveryOrder->id;
        }

        if ( empty($doIds) )
        {
            return $data;
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        // get total quantity group by resource_item_id filter by doIds
        $stmt = $pdo->prepare("SELECT b.resource_item_id, SUM(COALESCE(sidoiq.quantity, 0)) AS delivery_order_quantity
        FROM ".StockInInvoiceItemTable::getInstance()->getTableName()." b
        LEFT JOIN ".self::getInstance()->getTableName()." sidoiq ON
        sidoiq.stock_in_delivery_order_id IN (".implode(', ', $doIds).")
        AND sidoiq.stock_in_invoice_item_id = b.id AND sidoiq.deleted_at IS NULL
        WHERE ( b.stock_in_invoice_id = :invoiceId AND b.deleted_at IS NULL )
        GROUP BY b.resource_item_id");

        $stmt->execute(array('invoiceId' => $deliveryOrder->Invoice->id));

        $itemQuantities = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $itemQuantities as $itemQuantity )
        {
            $data[$itemQuantity['resource_item_id']] = $itemQuantity['delivery_order_quantity'];

            unset($itemQuantity);
        }

        unset($itemQuantities);

        return $data;
    }

    public static function getItemQuantitiesByStockInInvoiceItem(StockInInvoiceItem $invoiceItem)
    {
        $deliveryOrders = $invoiceItem->Invoice->StockInDeliveryOrders;
        $quantity       = 0;
        $doIds          = array();

        foreach ( $deliveryOrders as $deliveryOrder )
        {
            $doIds[$deliveryOrder->id] = $deliveryOrder->id;
        }

        if ( empty($doIds) )
        {
            return $quantity;
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        // get total quantity group by resource_item_id filter by doIds
        $stmt = $pdo->prepare("SELECT SUM(COALESCE(sidoiq.quantity, 0)) AS delivery_order_quantity
        FROM ".StockInInvoiceItemTable::getInstance()->getTableName()." b
        LEFT JOIN ".self::getInstance()->getTableName()." sidoiq ON
        sidoiq.stock_in_delivery_order_id IN (".implode(', ', $doIds).")
        AND sidoiq.stock_in_invoice_item_id = b.id AND sidoiq.deleted_at IS NULL
        WHERE b.resource_item_id = :resourceItemId
        AND ( b.stock_in_invoice_id = :invoiceId AND b.deleted_at IS NULL )
        GROUP BY b.resource_item_id");

        $stmt->execute(array(
            'resourceItemId' => $invoiceItem->resource_item_id,
            'invoiceId'      => $invoiceItem->Invoice->id
        ));

        return $stmt->fetchColumn();
    }

    public static function getItemQuantitiesByStockInDeliveryOrder(StockInDeliveryOrder $deliveryOrder, array $resourceItemIds = array(), $isPrinting = false)
    {
        $whereItemIdsQuery = null;
        $pdo               = self::getInstance()->getConnection()->getDbh();

        if ( $isPrinting )
        {
            if ( empty($resourceItemIds) )
            {
                return array();
            }

            $whereItemIdsQuery = ' AND b.resource_item_id IN ('.implode(', ', $resourceItemIds).')';
        }

        $stmt = $pdo->prepare("SELECT b.id, b.resource_item_id, b.quantity as invoice_quantity, sidoiq.id as qtyid,
        COALESCE(sidoiq.quantity, 0) AS delivery_order_quantity, COALESCE(remark.description, NULL) AS remark, b.remark_id
        FROM ".StockInInvoiceItemTable::getInstance()->getTableName()." b
        LEFT JOIN ".RFQItemRemarkTable::getInstance()->getTableName()." remark ON ( b.remark_id = remark.id )
        LEFT JOIN ".self::getInstance()->getTableName()." sidoiq ON
        sidoiq.stock_in_delivery_order_id = :deliveryOrderId AND sidoiq.stock_in_invoice_item_id = b.id AND sidoiq.deleted_at IS NULL
        WHERE ( b.stock_in_invoice_id = :invoiceId AND b.deleted_at IS NULL )
        {$whereItemIdsQuery}");

        $stmt->execute(array('deliveryOrderId' => $deliveryOrder->id, 'invoiceId' => $deliveryOrder->Invoice->id));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function deleteRecordsByStockInDeliveryOrder(StockInDeliveryOrder $deliveryOrder)
    {
        return Doctrine_Query::create()
        ->delete()
        ->from('StockInDeliveryOrderItemQuantity')
        ->where('stock_in_delivery_order_id = ?', array($deliveryOrder->id))
        ->execute();
    }

    public static function getOverAllItemQuantitiesFilterByResourceItemIdByProject(ProjectStructure $project, array $resourceItemIds = array())
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $newDOQuantities = array();
        $stockInInvoices = $project->StockInInvoices;

        if ( $stockInInvoices->count() > 0 )
        {
            $inQuery    = null;
            $invoiceIds = array();

            foreach ( $stockInInvoices as $stockInInvoice )
            {
                $invoiceIds[] = $stockInInvoice->id;

                unset($stockInInvoice);
            }

            unset($stockInInvoices);

            if ( ! empty($resourceItemIds) )
            {
                $inQuery = "AND siii.resource_item_id IN (".implode(',', $resourceItemIds).")";
            }

            // will get available DO's Item Quantity associated with current Project
            $stmt = $pdo->prepare("SELECT siii.resource_item_id, COALESCE(SUM(doiq.quantity), 0) as do_quantity
            FROM ".StockInDeliveryOrderItemQuantityTable::getInstance()->getTableName()." doiq
            JOIN ".StockInDeliveryOrderTable::getInstance()->getTableName()." sido
            ON (sido.id = doiq.stock_in_delivery_order_id AND sido.deleted_at IS NULL)
            JOIN ".StockInInvoiceItemTable::getInstance()->getTableName()." siii
            ON (siii.id = doiq.stock_in_invoice_item_id AND siii.deleted_at IS NULL)
            WHERE siii.stock_in_invoice_id IN (".implode(',', $invoiceIds).") AND doiq.deleted_at IS NULL {$inQuery}
            GROUP BY siii.resource_item_id");

            $stmt->execute();

            $doQuantities = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach ( $doQuantities as $doQuantity )
            {
                $newDOQuantities[$doQuantity['resource_item_id']] = $doQuantity['do_quantity'];

                unset($doQuantity);
            }

            unset($doQuantities);
        }

        return $newDOQuantities;
    }

    public static function getRecordsFilteredByDeliveryOrderByProjectAndResourceItem(ProjectStructure $project, ResourceItem $resourceItem)
    {
        return Doctrine_Query::create()
        ->select('po.id as po_id, sido.id as id, invoice.invoice_no as invoice_no,
        pos.company_id as supplier_id, company.name as supplier_name, COALESCE(r.description, NULL) AS remark,
        sido.delivery_order_no as delivery_order_no, sido.delivery_order_date as delivery_order_date, sidoiq.quantity as quantity')
        ->from('StockInDeliveryOrderItemQuantity sidoiq')
        ->leftJoin('sidoiq.StockInDeliveryOrder sido')
        ->leftJoin('sidoiq.StockInInvoiceItem siii')
        ->leftJoin('siii.Remark r')
        ->leftJoin('sido.Invoice invoice')
        ->leftJoin('invoice.PurchaseOrder po')
        ->leftJoin('po.PurchaseOrderSupplier pos')
        ->leftJoin('pos.Company company')
        ->where('invoice.project_structure_id = ?', array($project->id))
        ->andWhere('siii.resource_item_id = ?', array($resourceItem->id))
        ->andWhere('sidoiq.quantity != ?', 0)
        ->orderBy('sido.id DESC')
        ->fetchArray();
    }

}