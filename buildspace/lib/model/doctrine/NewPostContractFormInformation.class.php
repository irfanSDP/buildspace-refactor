<?php

/**
 * NewPostContractFormInformation
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class NewPostContractFormInformation extends BaseNewPostContractFormInformation
{
    const TYPE_1      = 1;
    const TYPE_1_TEXT = 'Letter of Award';
    const TYPE_1_CODE = 'LA';
    const TYPE_2      = 2;
    const TYPE_2_TEXT = 'Work Order';
    const TYPE_2_CODE = 'WO';
    const TYPE_3      = 3;
    const TYPE_3_TEXT = 'Contract Info';
    const TYPE_3_CODE = 'CI';

    const WAIVER_OPTION_TYPE_E_TENDER = 1;
    const WAIVER_OPTION_TYPE_E_AUCTION = 2;

    const E_TENDER_WAIVER_OPTION_SITE_URGENCY = 1;
    const E_TENDER_WAIVER_OPTION_SITE_URGENCY_TEXT = 'Site Urgency';
    const E_TENDER_WAIVER_OPTION_INTER_COMPANY = 2;
    const E_TENDER_WAIVER_OPTION_INTER_COMPANY_TEXT = 'Inter-Company';
    const E_TENDER_WAIVER_OPTION_OTHERS = 4;
    const E_TENDER_WAIVER_OPTION_OTHERS_TEXT = 'Others';

    const E_AUCTION_WAIVER_OPTION_SITE_URGENCY = 8;
    const E_AUCTION_WAIVER_OPTION_SITE_URGENCY_TEXT = 'Site Urgency';
    const E_AUCTION_WAIVER_OPTION_INTER_COMPANY = 16;
    const E_AUCTION_WAIVER_OPTION_INTER_COMPANY_TEXT = 'Inter-Company';
    const E_AUCTION_WAIVER_OPTION_OTHERS = 32;
    const E_AUCTION_WAIVER_OPTION_OTHERS_TEXT = 'Others';

    public static function getTypeText($type)
    {
        $types = array(
            self::TYPE_1 => self::TYPE_1_TEXT,
            self::TYPE_2 => self::TYPE_2_TEXT,
            self::TYPE_3 => self::TYPE_3_TEXT,
        );

        return $types[ $type ] ?? null;
    }

    public static function getTypeCode($type)
    {
        $types = array(
            self::TYPE_1 => self::TYPE_1_CODE,
            self::TYPE_2 => self::TYPE_2_CODE,
            self::TYPE_3 => self::TYPE_3_CODE,
        );

        return $types[ $type ] ?? null;
    }

    public static function getWaiverTypeText($type)
    {
        $types = [
            self::E_TENDER_WAIVER_OPTION_SITE_URGENCY   => self::E_TENDER_WAIVER_OPTION_SITE_URGENCY_TEXT,
            self::E_TENDER_WAIVER_OPTION_INTER_COMPANY  => self::E_TENDER_WAIVER_OPTION_INTER_COMPANY_TEXT,
            self::E_TENDER_WAIVER_OPTION_OTHERS         => self::E_TENDER_WAIVER_OPTION_OTHERS_TEXT,
            self::E_AUCTION_WAIVER_OPTION_SITE_URGENCY  => self::E_AUCTION_WAIVER_OPTION_SITE_URGENCY_TEXT,
            self::E_AUCTION_WAIVER_OPTION_INTER_COMPANY => self::E_AUCTION_WAIVER_OPTION_INTER_COMPANY_TEXT,
            self::E_AUCTION_WAIVER_OPTION_OTHERS        => self::E_AUCTION_WAIVER_OPTION_OTHERS_TEXT,
        ];

        return $types[$type] ?? null;
    }

    public function getSubPackageWorkByType($type, $hydrate=Doctrine_Core::HYDRATE_NONE)
    {
        switch($type)
        {
            case SubPackageWorks::TYPE_1:
            case SubPackageWorks::TYPE_2:
            case SubPackageWorks::TYPE_3:
                break;
            default:
                throw new Exception("Invalid SubPackageWork type");
        }

        $data = Doctrine_Query::create()->select('n.sub_package_work_id')
            ->from('NewPostContractFormInformationSubPackageWork n')
            ->where('n.new_post_contract_form_information_id = ?', $this->id)
            ->andWhere('n.sub_package_work_type = ?', $type)
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        if($data)
        {
            return Doctrine_Query::create()
                ->from('SubPackageWorks w')
                ->where('w.id = ?', $data['sub_package_work_id'])
                ->setHydrationMode($hydrate)
                ->fetchOne();
        }

        return null;
    }

    protected function getGrossRetention(PostContractClaimRevision $claimRevision)
    {
        $sumByTax = $this->getWorkDoneGroupByVersions($claimRevision);

        return $this->calculateGrossRetention($sumByTax);
    }

    public function calculateGrossRetention(Array $workDoneGroupByVersions)
    {
        $retentionSumByTax = [];

        ksort($workDoneGroupByVersions);

        foreach($workDoneGroupByVersions as $version => $data)
        {
            foreach($data as $taxGroup => $amount)
            {
                if(array_key_exists($version-1, $workDoneGroupByVersions))
                {
                    $workDoneGroupByVersions[$version][$taxGroup] += array_sum($workDoneGroupByVersions[$version-1]);
                }
            }
        }

        foreach($workDoneGroupByVersions as $version => $record)
        {
            foreach($record as $key => $value)
            {
                if(!array_key_exists($version, $retentionSumByTax) || !array_key_exists($key, $retentionSumByTax[$version]))
                {
                    $retentionSumByTax[$version][$key] = 0;
                }
                $retentionSumByTax[$version][$key] += round($value * ($this->retention / 100), 2);
            }
        }

        return $retentionSumByTax;
    }

    public function getRetentionSum(PostContractClaimRevision $claimRevision)
    {
        $releasedRetentionSums = $this->getReleasedRetentionSum($claimRevision);
        $grossRetentions = $this->getGrossRetention($claimRevision);
        $maxRetentionSums = $this->calculateMaxRetentionSum($claimRevision);

        return $this->calculateRetentionSum($claimRevision, $releasedRetentionSums, $grossRetentions, $maxRetentionSums);
    }

    /**
    * Calulates total retention sum, with upper limit applied and with previous released retentions deducted.
    */
    public function calculateRetentionSum(PostContractClaimRevision $claimRevision, Array $releasedRetentionSums, Array $grossRetentions, Array $maxRetentionSums)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT rev.version, c.tax_percentage
            FROM ".ClaimCertificateTable::getInstance()->getTableName()." c
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
            WHERE rev.post_contract_id = :postContractId AND rev.version <= :version AND rev.deleted_at IS NULL
            ORDER BY rev.version ASC");
        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $claimCertificateTaxPercentages = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $retentionSums = [];

        foreach($claimCertificateTaxPercentages as $currentVersion => $taxPercentage)
        {
            $previousVersionRetentionSumWithoutRelease = 0;

            foreach($retentionSums as $version => $retentionSum)
            {
                $previousVersionRetentionSumWithoutRelease += array_sum($retentionSum);
            }

            if(array_key_exists($currentVersion, $grossRetentions))
            {
                $maxRetentionSum = array_key_exists($currentVersion, $maxRetentionSums) ? $maxRetentionSums[$currentVersion] : 0;

                foreach($grossRetentions[$currentVersion] as $taxGroup => $grossRetentionSum)
                {
                    if(!array_key_exists($currentVersion, $retentionSums) || !array_key_exists($taxGroup, $retentionSums[$currentVersion]))
                    {
                        $retentionSums[ $currentVersion ][ $taxGroup ] = 0;
                    }

                    $grossRetentionSum = min($grossRetentionSum, $maxRetentionSum);

                    $retentionAmount = $grossRetentionSum - $previousVersionRetentionSumWithoutRelease;

                    if( $retentionAmount < 0 ) $retentionAmount = 0;

                    $retentionSums[ $currentVersion ][ $taxGroup ] += $retentionAmount;
                }
            }
        }

        unset($grossRetentions);

        $cumulativeRetention = [];

        foreach($retentionSums as $version => $amounts)
        {
            foreach($amounts as $taxGroup => $amount)
            {
                if( ! array_key_exists($taxGroup, $cumulativeRetention) )
                {
                    $cumulativeRetention[ $taxGroup ] = 0;
                }

                $cumulativeRetention[ $taxGroup ] += $amount;
            }
        }

        unset($retentionSums);

        for($previousVersion=1;$previousVersion<$claimRevision->version;$previousVersion++)
        {
            if(array_key_exists($previousVersion, $releasedRetentionSums))
            {
                foreach($releasedRetentionSums[$previousVersion] as $taxGroup => $amount)
                {
                    if( ! array_key_exists($taxGroup, $cumulativeRetention) )
                    {
                        $cumulativeRetention[ $taxGroup ] = 0;
                    }

                    $cumulativeRetention[ $taxGroup ] -= $amount;
                }
            }
        }

        ksort($cumulativeRetention);

        return $cumulativeRetention;
    }

    public function getVOWorkDoneGroupByVersionsForRfvCategory(PostContractClaimRevision $claimRevision, EProjectRequestForVariationCategory $rfvCategory)
    {
        $workDoneByVersions = $this->getVOWorkDoneGroupByVersionsForRfvCategoryByVersions($claimRevision, $rfvCategory);
        
        return $this->calculateVOWorkDoneAmount($workDoneByVersions);
    }

    public function getVOWorkDoneAmount(PostContractClaimRevision $claimRevision)
    {
        $workDoneByVersions = $this->getVOWorkDoneGroupByVersions($claimRevision);

        return $this->calculateVOWorkDoneAmount($workDoneByVersions);
    }

    public function calculateVOWorkDoneAmount(Array $voWorkDoneByVersions)
    {
        $totalWorkDone = 0;

        foreach($voWorkDoneByVersions as $version => $data)
        {
            foreach($data as $taxGroup => $amount)
            {
                $totalWorkDone += $amount;
            }
        }

        return $totalWorkDone;
    }

    public function getVOWorkDoneGroupByVersionsForRfvCategoryByVersions(PostContractClaimRevision $claimRevision, EProjectRequestForVariationCategory $rfvCategory)
    {
        $pdo = Doctrine_Manager::getInstance()->getConnection('eproject_conn')->getDbh();
        $eprojectId = $claimRevision->PostContract->ProjectStructure->MainInformation->eproject_origin_id;

        $stmt = $pdo->prepare("SELECT id
                    FROM request_for_variations
                    WHERE request_for_variation_category_id = {$rfvCategory->id}
                    AND project_id = {$eprojectId}
                    AND status = " . EProjectRequestForVariation::STATUS_APPROVED . "
                    AND deleted_at IS NULL");

        $stmt->execute();

        $rfvRecords        = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $rfvIdsForCategory = array_column($rfvRecords, 'id');

        $records = [];
        
        if(count($rfvIdsForCategory) > 0)
        {
            $pdo = $this->getTable()->getConnection()->getDbh();
    
            $stmt = $pdo->prepare("SELECT rev.version, c.tax_percentage, ROUND(SUM(
                        CASE WHEN ((voi.rate * voi.addition_quantity) - (voi.rate * voi.omission_quantity) < 0)
                            THEN -1 * ABS(voci.current_amount)
                            ELSE voci.current_amount
                        END), 2) AS variation_order_total_current_amount
                        FROM ".ClaimCertificateTable::getInstance()->getTableName()." c
                        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
                        JOIN ".VariationOrderClaimClaimCertificateTable::getInstance()->getTableName()." x ON x.claim_certificate_id = c.id
                        JOIN ".VariationOrderClaimTable::getInstance()->getTableName()." voc ON voc.id = x.variation_order_claim_id
                        JOIN ".VariationOrderClaimItemTable::getInstance()->getTableName()." voci ON voci.variation_order_claim_id = voc.id
                        JOIN ".VariationOrderItemTable::getInstance()->getTableName()." voi ON voci.variation_order_item_id = voi.id
                        JOIN ".VariationOrderTable::getInstance()->getTableName()." vo ON voi.variation_order_id = vo.id AND voc.variation_order_id = vo.id
                        WHERE rev.post_contract_id = ".$claimRevision->post_contract_id." AND rev.version <= ".$claimRevision->version."
                        AND voc.status = ".VariationOrderClaim::STATUS_CLOSED." AND vo.is_approved IS TRUE
                        AND voci.current_amount <> 0
                        AND rev.deleted_at IS NULL AND voc.deleted_at IS NULL AND voci.deleted_at IS NULL AND voi.deleted_at IS NULL AND vo.deleted_at IS NULL
                        AND vo.eproject_rfv_id IN (" . implode(", ", $rfvIdsForCategory) . ")
                        GROUP BY rev.version, c.tax_percentage, vo.id
                        ORDER BY rev.version DESC");
    
            $stmt->execute();
    
            $records = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
        }
        $data = [];

        foreach($records as $version => $record)
        {

            foreach($record as $workdone)
            {
                if(!array_key_exists($version, $data) || !array_key_exists($workdone['tax_percentage'], $data[$version]))
                {
                    $data[$version][$workdone['tax_percentage']] = 0;
                }

                $data[$version][$workdone['tax_percentage']] += $workdone['variation_order_total_current_amount'];
            }

            $records[$version] = null;
            unset($records[$version]);
        }

        return $data;
    }

    public function getVOWorkDoneGroupByVersions(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT rev.version, c.tax_percentage, ROUND(SUM(
        CASE WHEN ((voi.rate * voi.addition_quantity) - (voi.rate * voi.omission_quantity) < 0)
            THEN -1 * ABS(voci.current_amount)
            ELSE voci.current_amount
        END), 2) AS variation_order_total_current_amount
        FROM ".ClaimCertificateTable::getInstance()->getTableName()." c
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
        JOIN ".VariationOrderClaimClaimCertificateTable::getInstance()->getTableName()." x ON x.claim_certificate_id = c.id
        JOIN ".VariationOrderClaimTable::getInstance()->getTableName()." voc ON voc.id = x.variation_order_claim_id
        JOIN ".VariationOrderClaimItemTable::getInstance()->getTableName()." voci ON voci.variation_order_claim_id = voc.id
        JOIN ".VariationOrderItemTable::getInstance()->getTableName()." voi ON voci.variation_order_item_id = voi.id
        JOIN ".VariationOrderTable::getInstance()->getTableName()." vo ON voi.variation_order_id = vo.id AND voc.variation_order_id = vo.id
        WHERE rev.post_contract_id = ".$claimRevision->post_contract_id." AND rev.version <= ".$claimRevision->version."
        AND voc.status = ".VariationOrderClaim::STATUS_CLOSED." AND vo.is_approved IS TRUE
        AND voci.current_amount <> 0
        AND rev.deleted_at IS NULL AND voc.deleted_at IS NULL AND voci.deleted_at IS NULL AND voi.deleted_at IS NULL AND vo.deleted_at IS NULL
        GROUP BY rev.version, c.tax_percentage, vo.id
        ORDER BY rev.version DESC");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $data = [];

        foreach($records as $version => $record)
        {
            foreach($record as $workdone)
            {
                if(!array_key_exists($version, $data) || !array_key_exists($workdone['tax_percentage'], $data[$version]))
                {
                    $data[$version][$workdone['tax_percentage']] = 0;
                }

                $data[$version][$workdone['tax_percentage']] += $workdone['variation_order_total_current_amount'];
            }

            $records[$version] = null;
            unset($records[$version]);
        }

        return $data;
    }

    public function showRequestForVariation(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $claimCertificates = PostContractClaimRevisionTable::getClaimCertificates($claimRevision->id, '<=');

        $selectedRevisionClause = (count($certIds = array_column($claimCertificates, 'id')) > 0 ) ? "AND xref.claim_certificate_id IN (" . implode(',', $certIds) . ")" : "";

        $stmt = $pdo->prepare("SELECT COUNT(*)
        FROM ".RequestForVariationItemClaimTable::getInstance()->getTableName()." c
        JOIN ".VariationOrderItemTable::getInstance()->getTableName()." i ON i.id = c.variation_order_item_id
        JOIN ".VariationOrderTable::getInstance()->getTableName()." vo ON i.variation_order_id = vo.id
        JOIN ".RequestForVariationItemClaimCertificateTable::getInstance()->getTableName()." xref on xref.variation_order_item_id = i.id
        JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert on xref.claim_certificate_id = cert.id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
        WHERE vo.project_structure_id = ".$this->project_structure_id."
        AND rev.post_contract_id = ".$claimRevision->post_contract_id." AND rev.version <= ".$claimRevision->version."
        AND vo.eproject_rfv_id IS NOT NULL
        AND i.is_from_rfv IS TRUE
        {$selectedRevisionClause}
        AND rev.deleted_at IS NULL AND vo.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $count = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $count > 0;
    }

    public function getRequestForVariationWorkDoneGroupByVersions(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $claimCertificates = PostContractClaimRevisionTable::getClaimCertificates($claimRevision->id, '<=');

        $selectedRevisionClause = (count($certIds = array_column($claimCertificates, 'id')) > 0 ) ? "AND xref.claim_certificate_id IN (" . implode(',', $certIds) . ")" : "";

        $stmt = $pdo->prepare("SELECT DISTINCT vo.id
        FROM ".VariationOrderTable::getInstance()->getTableName()." vo
        JOIN ".VariationOrderClaimCertificateTable::getInstance()->getTableName()." xref on xref.variation_order_id = vo.id
        WHERE vo.project_structure_id = ".$this->project_structure_id."
        {$selectedRevisionClause}
        AND vo.deleted_at IS NULL
        GROUP BY vo.id");

        $stmt->execute();

        $claimedVariationOrderIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        $variationOrderIdsClause = "";
        if(!empty($claimedVariationOrderIds))
        {
            $variationOrderIdsClause = " AND vo.id NOT IN (" . implode(',', $claimedVariationOrderIds) . ")";
        }

        $stmt = $pdo->prepare("SELECT rev.version, cert.tax_percentage, ROUND(COALESCE(SUM(c.amount), 0), 2) AS amount
        FROM ".RequestForVariationItemClaimTable::getInstance()->getTableName()." c 
        JOIN ".VariationOrderItemTable::getInstance()->getTableName()." i ON i.id = c.variation_order_item_id
        JOIN ".VariationOrderTable::getInstance()->getTableName()." vo ON i.variation_order_id = vo.id
        JOIN ".RequestForVariationItemClaimCertificateTable::getInstance()->getTableName()." xref on xref.variation_order_item_id = i.id
        JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert on xref.claim_certificate_id = cert.id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
        WHERE vo.project_structure_id = ".$this->project_structure_id."
        AND rev.post_contract_id = ".$claimRevision->post_contract_id." AND rev.version <= ".$claimRevision->version."
        {$variationOrderIdsClause}
        AND vo.eproject_rfv_id IS NOT NULL
        AND i.is_from_rfv IS TRUE
        {$selectedRevisionClause}
        AND rev.deleted_at IS NULL AND vo.deleted_at IS NULL AND i.deleted_at IS NULL
        GROUP BY rev.version, cert.tax_percentage
        ORDER BY rev.version DESC");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $data = [];

        foreach($records as $version => $record)
        {
            foreach($record as $workdone)
            {
                if(!array_key_exists($version, $data) || !array_key_exists($workdone['tax_percentage'], $data[$version]))
                {
                    $data[$version][$workdone['tax_percentage']] = 0;
                }

                $data[$version][$workdone['tax_percentage']] += $workdone['amount'];
            }

            $records[$version] = null;
            unset($records[$version]);
        }

        return $data;
    }

    public function getMaterialOnSiteWorkDoneCumulativeAndCurrentAmounts(PostContractClaimRevision $claimRevision)
    {
        $workDoneByVersions = $this->getMaterialOnSiteWorkDoneGroupByVersions($claimRevision);

        $currentMaterialOnSiteWorkDone = array_key_exists($claimRevision->version, $workDoneByVersions) ? array_sum($workDoneByVersions[ $claimRevision->version ]) : 0;

        $previousCumulativeMaterialOnSiteWorkDone = 0;

        if( array_key_exists(( $previousRevisionVersion = $claimRevision->version - 1 ), $workDoneByVersions) )
        {
            $previousVersionAmount = array_sum($workDoneByVersions[ $previousRevisionVersion ]);
            $previousCumulativeMaterialOnSiteWorkDone += $previousVersionAmount;
            $currentMaterialOnSiteWorkDone -= $previousVersionAmount;
        }

        $cumulativeMaterialOnSiteWorkDone = $previousCumulativeMaterialOnSiteWorkDone + $currentMaterialOnSiteWorkDone;

        return array(
            'cumulative'         => $cumulativeMaterialOnSiteWorkDone,
            'previousCumulative' => $previousCumulativeMaterialOnSiteWorkDone,
            'current'            => $currentMaterialOnSiteWorkDone,
        );
    }

    public function getMaterialOnSiteWorkDoneAmount(PostContractClaimRevision $claimRevision)
    {
        $workDoneByVersions = $this->getMaterialOnSiteWorkDoneGroupByVersions($claimRevision);

        $totalWorkDone = 0;
        if(array_key_exists($claimRevision->version, $workDoneByVersions))
        {
            foreach($workDoneByVersions[$claimRevision->version] as $key => $value)
            {
                $totalWorkDone += $value;
            }
        }

        return $totalWorkDone;
    }

    public function getMaterialOnSiteWorkDoneGroupByVersions(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT rev.version, cert.tax_percentage, ROUND(COALESCE(SUM(pcmos.final_amount), 0), 2) AS final_amount
            FROM " . PostContractClaimMaterialOnSiteTable::getInstance()->getTableName() . " pcmos
            JOIN " . PostContractClaimItemTable::getInstance()->getTableName() . " pci on pci.id = pcmos.post_contract_claim_item_id
            JOIN " . PostContractClaimTable::getInstance()->getTableName() . " pc on pc.id = pci.post_contract_claim_id
            JOIN " . ClaimCertificateTable::getInstance()->getTableName() . " cert ON cert.id = pc.claim_certificate_id
            JOIN " . PostContractClaimRevisionTable::getInstance()->getTableName() . " rev ON rev.id = cert.post_contract_claim_revision_id
            WHERE rev.post_contract_id = :postContractId AND rev.version <= :version
            AND pc.deleted_at IS NULL AND pci.deleted_at IS NULL AND pcmos.deleted_at IS NULL
            GROUP BY rev.version, cert.tax_percentage
            ORDER BY rev.version DESC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $records = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $data = [];
        foreach($records as $version => $record)
        {
            foreach($record as $workdone)
            {
                if(!array_key_exists($version, $data) || !array_key_exists($workdone['tax_percentage'], $data[$version]))
                {
                    $data[$version][$workdone['tax_percentage']] = 0;
                }

                $data[$version][$workdone['tax_percentage']] += $workdone['final_amount'];
            }
        }

        return $data;
    }

    public function getPostContractBillClaimWorkDoneAmount(PostContractClaimRevision $claimRevision)
    {
        $workDoneByVersions = $this->getPostContractBillClaimWorkDoneGroupByVersions($claimRevision);

        return $this->calculatePostContractBillClaimWorkDoneAmount($workDoneByVersions);
    }

    public function calculatePostContractBillClaimWorkDoneAmount(Array $workDoneByVersions)
    {
        $totalWorkDone = 0;

        foreach($workDoneByVersions as $version => $data)
        {
            foreach($data as $taxGroup => $amount)
            {
                $totalWorkDone +=$amount;
            }
        }

        return $totalWorkDone;
    }

    public function getPostContractBillClaimWorkDoneGroupByVersions(PostContractClaimRevision $claimRevision)
    {
        return ClaimCertificateTable::getPostContractBillClaimWorkDoneGroupByVersions(array( $claimRevision->ClaimCertificate ))[ $claimRevision->ClaimCertificate->id ];
    }

    protected function getPostContractPreliminaryBillClaimWorkDoneGroupByVersions(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        // Get the Current Work Done of Prelimininary Bill
        $stmt = $pdo->prepare("SELECT billItemRate.id AS bill_item_rate_id, billItemRate.grand_total AS grand_total
            FROM ".ProjectStructureTable::getInstance()->getTableName()." bill
            JOIN ".BillTypeTable::getInstance()->getTableName()." billType ON billType.project_structure_id = bill.id
            JOIN ".BillElementTable::getInstance()->getTableName()." billElement ON bill.id = billElement.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." billItem ON billItem.element_id = billElement.id
            JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." billItemRate ON billItemRate.bill_item_id = billItem.Id
            WHERE bill.root_id = ".$this->project_structure_id." AND billType.type = ".BillType::TYPE_PRELIMINARY."
            AND billItemRate.grand_total <> 0
            AND bill.deleted_at IS NULL AND billElement.deleted_at IS NULL
            AND billType.deleted_at IS NULL AND billItem.deleted_at IS NULL
            ORDER BY billItem.element_id DESC");

        $stmt->execute();

        $billItemRatesGrandTotal = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare("SELECT billItemRate.id AS bill_item_rate_id, ROUND(COALESCE(prelimInitialClaim.amount, 0), 2) AS initial_amount
            FROM ".ProjectStructureTable::getInstance()->getTableName()." bill
            JOIN ".BillElementTable::getInstance()->getTableName()." billElement ON bill.id = billElement.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." billItem ON billItem.element_id = billElement.id
            JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." billItemRate ON billItemRate.bill_item_id = billItem.Id
            JOIN ".PreliminariesInitialClaimTable::getInstance()->getTableName()." prelimInitialClaim ON prelimInitialClaim.post_contract_bill_item_rate_id = billItemRate.id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = prelimInitialClaim.revision_id
            WHERE bill.root_id = ".$this->project_structure_id." AND rev.post_contract_id = :postContractId
            AND rev.version <= :version AND bill.deleted_at IS NULL AND billItem.deleted_at IS NULL AND prelimInitialClaim.deleted_at IS NULL
            AND billElement.deleted_at IS NULL AND rev.deleted_at IS NULL
            ORDER BY rev.version DESC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $billItemInitialClaims = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare("SELECT billItemRate.id AS bill_item_rate_id, ROUND(COALESCE(prelimFinalClaim.amount, 0), 2) AS final_amount
            FROM ".ProjectStructureTable::getInstance()->getTableName()." bill
            JOIN ".BillElementTable::getInstance()->getTableName()." billElement ON bill.id = billElement.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." billItem ON billItem.element_id = billElement.id
            JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." billItemRate ON billItemRate.bill_item_id = billItem.Id
            JOIN ".PreliminariesFinalClaimTable::getInstance()->getTableName()." prelimFinalClaim ON prelimFinalClaim.post_contract_bill_item_rate_id = billItemRate.id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = prelimFinalClaim.revision_id
            WHERE bill.root_id = ".$this->project_structure_id." AND rev.post_contract_id = :postContractId
            AND rev.version <= :version AND bill.deleted_at IS NULL AND billItem.deleted_at IS NULL AND prelimFinalClaim.deleted_at IS NULL
            AND billElement.deleted_at IS NULL AND rev.deleted_at IS NULL
            ORDER BY rev.version DESC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $billItemFinalClaims = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $upToDatebillItemGrandTotal = [];

        foreach($billItemRatesGrandTotal as $billItemRateId => $billItemGrandTotal)
        {
            if($billItemGrandTotal == 0)
                continue;

            $upToDatebillItemGrandTotal[$billItemRateId] = $billItemGrandTotal;

            if(array_key_exists($billItemRateId, $billItemInitialClaims))
            {
                $upToDatebillItemGrandTotal[$billItemRateId] -= $billItemInitialClaims[$billItemRateId];
            }
            if(array_key_exists($billItemRateId, $billItemFinalClaims))
            {
                $upToDatebillItemGrandTotal[$billItemRateId] -= $billItemFinalClaims[$billItemRateId];
            }
        }

        $preliminaryWorkDoneAmountWithTaxPercentage = [];

        $stmt = $pdo->prepare("SELECT prelimIncludeInitial.post_contract_bill_item_rate_id, rev.version AS include_at_version
            FROM ".ProjectStructureTable::getInstance()->getTableName()." bill
            JOIN ".BillElementTable::getInstance()->getTableName()." billElement ON bill.id = billElement.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." billItem ON billItem.element_id = billElement.id
            JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." billItemRate ON billItemRate.bill_item_id = billItem.Id
            JOIN ".PreliminariesIncludeInitialTable::getInstance()->getTableName()." prelimIncludeInitial ON prelimIncludeInitial.post_contract_bill_item_rate_id = billItemRate.id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = prelimIncludeInitial.include_at_revision_id
            WHERE bill.root_id = ".$this->project_structure_id." AND rev.post_contract_id = :postContractId
            AND rev.version <= :version AND bill.deleted_at IS NULL AND billItem.deleted_at IS NULL
            AND billElement.deleted_at IS NULL AND rev.deleted_at IS NULL
            ORDER BY rev.version DESC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $prelimIncludeInitialItems = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("SELECT prelimIncludeFinal.post_contract_bill_item_rate_id, rev.version AS include_at_version
            FROM ".ProjectStructureTable::getInstance()->getTableName()." bill
            JOIN ".BillElementTable::getInstance()->getTableName()." billElement ON bill.id = billElement.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." billItem ON billItem.element_id = billElement.id
            JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." billItemRate ON billItemRate.bill_item_id = billItem.Id
            JOIN ".PreliminariesIncludeFinalTable::getInstance()->getTableName()." prelimIncludeFinal ON prelimIncludeFinal.post_contract_bill_item_rate_id = billItemRate.id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = prelimIncludeFinal.include_at_revision_id
            WHERE bill.root_id = ".$this->project_structure_id." AND rev.post_contract_id = :postContractId
            AND rev.version <= :version AND bill.deleted_at IS NULL AND bill.deleted_at IS NULL
            AND billElement.deleted_at IS NULL AND rev.deleted_at IS NULL AND billItem.deleted_at IS NULL
            ORDER BY rev.version DESC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $prelimIncludeFinalItems = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("SELECT billItemRate.id AS bill_item_rate_id, rev.version, c.tax_percentage, prelimWorkBasedClaim.total
            FROM ".ProjectStructureTable::getInstance()->getTableName()." bill
            JOIN ".BillElementTable::getInstance()->getTableName()." billElement ON bill.id = billElement.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." billItem ON billItem.element_id = billElement.id
            JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." billItemRate ON billItemRate.bill_item_id = billItem.Id
            JOIN ".PreliminariesWorkBasedClaimTable::getInstance()->getTableName()." prelimWorkBasedClaim ON prelimWorkBasedClaim.post_contract_bill_item_rate_id = billItemRate.id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = prelimWorkBasedClaim.revision_id
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." c ON c.post_contract_claim_revision_id = rev.id
            WHERE bill.root_id = ".$this->project_structure_id." AND rev.post_contract_id = :postContractId
            AND rev.version <= :version AND bill.deleted_at IS NULL AND prelimWorkBasedClaim.deleted_at IS NULL 
            AND billItem.deleted_at IS NULL AND billElement.deleted_at IS NULL AND rev.deleted_at IS NULL
            ORDER BY billItemRate.id, rev.version DESC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $billItemWorkBasedClaims = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("SELECT billItemRate.id AS bill_item_rate_id, rev.version, c.tax_percentage, prelimTimeBasedClaim.total
            FROM ".ProjectStructureTable::getInstance()->getTableName()." bill
            JOIN ".BillElementTable::getInstance()->getTableName()." billElement ON bill.id = billElement.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." billItem ON billItem.element_id = billElement.id
            JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." billItemRate ON billItemRate.bill_item_id = billItem.Id
            JOIN ".PreliminariesTimeBasedClaimTable::getInstance()->getTableName()." prelimTimeBasedClaim ON prelimTimeBasedClaim.post_contract_bill_item_rate_id = billItemRate.id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = prelimTimeBasedClaim.revision_id
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." c ON c.post_contract_claim_revision_id = rev.id
            WHERE bill.root_id = ".$this->project_structure_id." AND rev.post_contract_id = :postContractId
            AND rev.version <= :version AND bill.deleted_at IS NULL AND prelimTimeBasedClaim.deleted_at IS NULL 
            AND billItem.deleted_at IS NULL AND billElement.deleted_at IS NULL AND rev.deleted_at IS NULL
            ORDER BY billItemRate.id, rev.version DESC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $billItemTimeBasedClaims = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $upToDateClaims = [];
        $previousClaims = [];
        $currentClaims  = [];

        $stmt = $pdo->prepare("SELECT rev.version, c.tax_percentage
            FROM ".ClaimCertificateTable::getInstance()->getTableName()." c
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
            WHERE rev.post_contract_id = :postContractId AND rev.version <= :version AND rev.deleted_at IS NULL");
        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $claimCertificateTaxPercentages = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        for($currentVersion=$claimRevision->version;$currentVersion>0;$currentVersion--)
        {
            foreach($billItemWorkBasedClaims as $idx => $billItemWorkBasedClaim)
            {
                $versions = array_column($billItemWorkBasedClaim, 'version');

                if(!in_array($currentVersion, $versions))
                {
                    $billItemWorkBasedClaims[$idx][] = [
                        'version' => $currentVersion,
                        'tax_percentage' => $claimCertificateTaxPercentages[$currentVersion],
                        'total' => 0
                    ];
                }
            }

            foreach($billItemTimeBasedClaims as $idx => $billItemItemBasedClaim)
            {
                $versions = array_column($billItemItemBasedClaim, 'version');

                if(!in_array($currentVersion, $versions))
                {
                    $billItemTimeBasedClaims[$idx][] = [
                        'version' => $currentVersion,
                        'tax_percentage' => $claimCertificateTaxPercentages[$currentVersion],
                        'total' => 0
                    ];
                }
            }
        }

        foreach($billItemWorkBasedClaims as $billItemRateId => $workBasedClaims)
        {
            if(array_key_exists($billItemRateId, $upToDatebillItemGrandTotal) && !empty($workBasedClaims))
            {
                foreach($workBasedClaims as $idx => $workBasedClaim)
                {
                    $calculatedCosting = 0;
                    if ( $workBasedClaim['total'] != 0 )
                    {
                        $calculatedCosting = $workBasedClaim['total'] * 100;
                        $calculatedCosting = Utilities::prelimRounding($calculatedCosting);
                    }

                    $currentWorkBasedClaimAmount  = Utilities::prelimRounding($upToDatebillItemGrandTotal[$billItemRateId] * ($calculatedCosting / 100));
                    $previousWorkBasedClaimAmount = 0;
                    if(array_key_exists($idx + 1, $workBasedClaims) && $workBasedClaims[$idx+1]['version']==$workBasedClaim['version']-1)
                    {
                        $calculatedCosting      = 0;
                        $previousWorkBasedClaim = $workBasedClaims[$idx+1];
                        if ( $previousWorkBasedClaim['total'] != 0 )
                        {
                            $calculatedCosting = $previousWorkBasedClaim['total'] * 100;
                            $calculatedCosting = Utilities::prelimRounding($calculatedCosting);
                        }
                        $previousWorkBasedClaimAmount = Utilities::prelimRounding($upToDatebillItemGrandTotal[$billItemRateId] * ($calculatedCosting / 100));
                    }

                    $currentClaims[$billItemRateId][$workBasedClaim['version']] = [
                        'tax_percentage' => $workBasedClaim['tax_percentage'],
                        'amount' => $currentWorkBasedClaimAmount - $previousWorkBasedClaimAmount
                    ];
                }
            }
        }

        foreach($billItemTimeBasedClaims as $billItemRateId => $timeBasedClaims)
        {
            if(array_key_exists($billItemRateId, $upToDatebillItemGrandTotal) && !empty($timeBasedClaims))
            {
                foreach($timeBasedClaims as $idx => $timeBasedClaim)
                {
                    $calculatedCosting = 0;
                    if ( $timeBasedClaim['total'] != 0 )
                    {
                        $calculatedCosting = $timeBasedClaim['total'] * 100;
                        $calculatedCosting = Utilities::prelimRounding($calculatedCosting);
                    }

                    $currentTimeBasedClaimAmount = Utilities::prelimRounding($upToDatebillItemGrandTotal[$billItemRateId] * ($calculatedCosting / 100));
                    $previousTimeBasedClaimAmount = 0;
                    if(array_key_exists($idx + 1, $timeBasedClaims) && $timeBasedClaims[$idx+1]['version']==$timeBasedClaim['version']-1)
                    {
                        $calculatedCosting      = 0;
                        $previousTimeBasedClaim = $timeBasedClaims[$idx+1];
                        if ( $previousTimeBasedClaim['total'] != 0 )
                        {
                            $calculatedCosting = $previousTimeBasedClaim['total'] * 100;
                            $calculatedCosting = Utilities::prelimRounding($calculatedCosting);
                        }
                        $previousTimeBasedClaimAmount = Utilities::prelimRounding($upToDatebillItemGrandTotal[$billItemRateId] * ($calculatedCosting / 100));
                    }

                    $currentClaims[$billItemRateId][$timeBasedClaim['version']] = [
                        'tax_percentage' => $timeBasedClaim['tax_percentage'],
                        'amount' => $currentTimeBasedClaimAmount - $previousTimeBasedClaimAmount
                    ];
                }
            }
        }

        foreach($prelimIncludeInitialItems as $billItemRateId => $data)
        {
            foreach($data as $prelimIncludeInitialItem)
            {
                $includeAtVersion = $prelimIncludeInitialItem['include_at_version'];

                if(!array_key_exists($billItemRateId, $currentClaims) || !array_key_exists($includeAtVersion, $currentClaims[$billItemRateId]))
                {
                    $currentClaims[$billItemRateId][$includeAtVersion] = [
                        'tax_percentage' => $claimCertificateTaxPercentages[$includeAtVersion],
                        'amount' => 0
                    ];
                }

                if(array_key_exists($billItemRateId, $billItemInitialClaims))
                {
                    $currentClaims[$billItemRateId][$includeAtVersion]['amount'] += $billItemInitialClaims[$billItemRateId];
                }
            }
        }

        foreach($prelimIncludeFinalItems as $billItemRateId => $data)
        {
            foreach($data as $prelimIncludeFinalItem)
            {
                $includeAtVersion = $prelimIncludeFinalItem['include_at_version'];

                if(!array_key_exists($billItemRateId, $currentClaims) || !array_key_exists($includeAtVersion, $currentClaims[$billItemRateId]))
                {
                    $currentClaims[$billItemRateId][$includeAtVersion] = [
                        'tax_percentage' => $claimCertificateTaxPercentages[$includeAtVersion],
                        'amount' => 0
                    ];
                }

                if(array_key_exists($billItemRateId, $billItemFinalClaims))
                {
                    $currentClaims[$billItemRateId][$includeAtVersion]['amount'] += $billItemFinalClaims[$billItemRateId];
                }
            }
        }

        foreach($currentClaims as $billItemRateId => $claim)
        {
            foreach($claim as $revision => $data)
            {
                if(!array_key_exists($revision, $preliminaryWorkDoneAmountWithTaxPercentage))
                {
                    $preliminaryWorkDoneAmountWithTaxPercentage[$revision][$data['tax_percentage']] = 0;
                }

                $preliminaryWorkDoneAmountWithTaxPercentage[$revision][$data['tax_percentage']] += $data['amount'];
            }
        }

        return $preliminaryWorkDoneAmountWithTaxPercentage;
    }

    public function calculateMaxRetentionSum(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $overallTotal = PostContractTable::getOverallTotalByProjectId($this->project_structure_id);

        $stmt = $pdo->prepare("SELECT rev.version
            FROM ".ClaimCertificateTable::getInstance()->getTableName()." c
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
            WHERE rev.post_contract_id = :postContractId AND rev.version <= :version AND rev.deleted_at IS NULL
            ORDER BY rev.version ASC");

        $stmt->execute(array(
            'postContractId' => $claimRevision->post_contract_id,
            'version'=> $claimRevision->version
        ));

        $revisions = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        $data = [];

        foreach($revisions as $revision)
        {
            $data[$revision] = $overallTotal;
        }

        if( LetterOfAwardRetentionSumModulesTable::isIncluded($this->id, PostContractClaim::TYPE_VARIATION_ORDER) )
        {
            $totalByClaimRevisions = $this->getVoOverallTotalByClaimRevisions($claimRevision);

            foreach($data as $revision => $overallTotal)
            {
                foreach($totalByClaimRevisions as $version => $total)
                {
                    if($version <= $revision)
                    {
                        $data[$revision] += $total;
                    }
                }
            }

            unset($totalByClaimRevisions);
        }

        foreach($data as $version => $overallTotal)
        {
            $data[$version] = $overallTotal * ( $this->max_retention_sum / 100 );
        }

        return $data;
    }

    public function getWorkDoneAmount(PostContractClaimRevision $claimRevision)
    {
        $workDoneByVersions = $this->getWorkDoneGroupByVersions($claimRevision);

        return $this->calculateWorkDoneAmount($workDoneByVersions);
    }

    public function calculateWorkDoneAmount(Array $workDoneByVersions)
    {
        $totalWorkDone = 0;

        foreach($workDoneByVersions as $version => $data)
        {
            foreach($data as $taxGroup => $amount)
            {
                $totalWorkDone +=$amount;
            }
        }

        return $totalWorkDone;
    }

    public function getWorkDoneGroupByVersions(PostContractClaimRevision $claimRevision)
    {
        $workDone = $this->getPostContractBillClaimWorkDoneGroupByVersions($claimRevision);

        $voWorkDone = $this->getVOWorkDoneGroupByVersions($claimRevision);

        $rfvWorkDone = $this->getRequestForVariationWorkDoneGroupByVersions($claimRevision);

        return $this->calculateWorkDoneGroupByVersions($claimRevision, $workDone, $voWorkDone, $rfvWorkDone);
    }

    public function calculateWorkDoneGroupByVersions(PostContractClaimRevision $claimRevision, Array $workDone, Array $voWorkDone, Array $rfvWorkDone)
    {
        $total = 0;
        foreach($voWorkDone as $version => $data)
        {
            foreach($data as $key => $value)
            {
                if(!array_key_exists($version, $workDone) || !array_key_exists($key, $workDone[$version]))
                {
                    $workDone[$version][$key] = 0;
                }

                $workDone[$version][$key] += round($value, 2);
            }

            $voWorkDone[$version] = null;
            unset($voWorkDone[$version]);
        }

        foreach($rfvWorkDone as $version => $data)
        {
            foreach($data as $key => $value)
            {
                if(!array_key_exists($version, $workDone) || !array_key_exists($key, $workDone[$version]))
                {
                    $workDone[$version][$key] = 0;
                }

                $workDone[$version][$key] += $value;
            }

            $rfvWorkDone[$version] = null;
            unset($rfvWorkDone[$version]);
        }

        if( LetterOfAwardRetentionSumModulesTable::isIncluded($this->id, PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE) )
        {
            $mosWorkDone = $this->getMaterialOnSiteWorkDoneGroupByVersions($claimRevision);

            if(array_key_exists($claimRevision->version, $mosWorkDone))
            {
                $version = $claimRevision->version;
                foreach($mosWorkDone[$version] as $key => $value)
                {
                    if(!array_key_exists($version, $workDone) || !array_key_exists($key, $workDone[$version]))
                    {
                        $workDone[$version][$key] = 0;
                    }

                    $total += $value;

                    $workDone[$version][$key] += $value;
                }
            }
        }

        return $workDone;
    }

    public function getPercentageCompletion(PostContractClaimRevision $claimRevision)
    {
        $workDone    = $this->getWorkDoneAmount($claimRevision);
        $contractSum = $this->getContractSum($claimRevision);

        return $this->calculatePercentageCompletion($workDone, $contractSum);
    }

    public function calculatePercentageCompletion($workDone, $contractSum)
    {
        return ($contractSum != 0) ? round(($workDone / $contractSum) * 100, 2) : 0;
    }

    public function getVoOverallTotalByClaimRevisions(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT rev.version, ROUND(COALESCE(SUM((i.total_unit * i.addition_quantity * i.rate) - (i.total_unit * i.omission_quantity * i.rate))), 2) AS nett_omission_addition
        FROM ".VariationOrderItemTable::getInstance()->getTableName()." i
        JOIN ".VariationOrderTable::getInstance()->getTableName()." vo ON i.variation_order_id = vo.id
        JOIN ".VariationOrderClaimCertificateTable::getInstance()->getTableName()." x ON x.variation_order_id = vo.id
        JOIN ".ClaimCertificateTable::getInstance()->getTableName()." c ON c.id = x.claim_certificate_id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
        WHERE vo.project_structure_id = ".$this->project_structure_id." AND vo.is_approved IS TRUE
        AND i.type <> ".VariationOrderItem::TYPE_HEADER." AND i.rate <> 0
        AND rev.version <= ".$claimRevision->version."
        AND vo.deleted_at IS NULL AND i.deleted_at IS NULL
        GROUP BY rev.version
        ORDER BY rev.version DESC");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public function getVoOverallTotal(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT SUM(ROUND((i.total_unit * i.addition_quantity * i.rate) - (i.total_unit * i.omission_quantity * i.rate), 2)) AS nett_omission_addition
        FROM ".VariationOrderItemTable::getInstance()->getTableName()." i
        JOIN ".VariationOrderTable::getInstance()->getTableName()." vo ON i.variation_order_id = vo.id
        JOIN ".VariationOrderClaimCertificateTable::getInstance()->getTableName()." x ON x.variation_order_id = vo.id
        JOIN ".ClaimCertificateTable::getInstance()->getTableName()." c ON c.id = x.claim_certificate_id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
        WHERE vo.project_structure_id = ".$this->project_structure_id." AND vo.is_approved IS TRUE
        AND i.type <> ".VariationOrderItem::TYPE_HEADER." AND i.rate <> 0
        AND rev.version <= ".$claimRevision->version."
        AND vo.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public function getContractSum(PostContractClaimRevision $claimRevision)
    {
        $billTotal   = PostContractTable::getOverallTotalByProjectId($this->project_structure_id);
        $contractSum = $billTotal + $this->getVoOverallTotal($claimRevision);

        return $contractSum;
    }

    public function getTaxPercentageByProject(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT(c.tax_percentage) AS tax_percentage
        FROM ".ClaimCertificateTable::getInstance()->getTableName()." c
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
        WHERE rev.post_contract_id = :postContractId AND rev.version <= :version AND rev.deleted_at IS NULL
        ORDER BY c.tax_percentage ASC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getVariationOrderWorkDoneByTaxPercentage(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT rev.version, c.tax_percentage, ROUND(COALESCE(SUM(
            CASE WHEN ((voi.rate * voi.addition_quantity) - (voi.rate * voi.omission_quantity) < 0)
                THEN (-1 * ABS(voci.current_amount))
                ELSE voci.current_amount
            END),0),2) AS variation_order_total_current_amount
        FROM ".ClaimCertificateTable::getInstance()->getTableName()." c
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
        JOIN ".VariationOrderClaimClaimCertificateTable::getInstance()->getTableName()." x ON x.claim_certificate_id = c.id
        JOIN ".VariationOrderClaimTable::getInstance()->getTableName()." voc ON voc.id = x.variation_order_claim_id
        JOIN ".VariationOrderClaimItemTable::getInstance()->getTableName()." voci ON voci.variation_order_claim_id = voc.id
        JOIN ".VariationOrderItemTable::getInstance()->getTableName()." voi ON voci.variation_order_item_id = voi.id
        WHERE rev.post_contract_id = :postContractId AND rev.version <= :version AND rev.deleted_at IS NULL
        AND voc.deleted_at IS NULL AND voci.deleted_at IS NULL AND voi.deleted_at IS NULL
        GROUP BY rev.version, c.tax_percentage
        ORDER BY rev.version DESC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $records = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $data = [];
        foreach($records as $version => $record)
        {
            foreach($record as $workdone)
            {
                if(!array_key_exists($version, $data) || !array_key_exists($workdone['tax_percentage'], $data[$version]))
                {
                    $data[$version][$workdone['tax_percentage']] = 0;
                }

                $data[$version][$workdone['tax_percentage']] += $workdone['variation_order_total_current_amount'];
            }
        }

        return $data;
    }

    public function getPreviousReleasedRetentionAmounts(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT c.retention_tax_percentage, ROUND(COALESCE(SUM(c.release_retention_amount),0),2) AS previous_retention_amount
        FROM ".ClaimCertificateTable::getInstance()->getTableName()." c
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
        WHERE rev.post_contract_id = :postContractId AND rev.version < :version AND rev.deleted_at IS NULL GROUP BY c.retention_tax_percentage");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $data = array();

        foreach($stmt->fetchAll(PDO::FETCH_KEY_PAIR) as $taxPercentage => $retentionAmount)
        {
            $data[number_format($taxPercentage, 2)] = $retentionAmount;
        }

        return $data;
    }

    public function getReleasedRetentionSum(PostContractClaimRevision $claimRevision)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT rev.version, c.retention_tax_percentage, ROUND(COALESCE(SUM(c.release_retention_amount),0),2) AS retention_amount
        FROM ".ClaimCertificateTable::getInstance()->getTableName()." c
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
        WHERE rev.post_contract_id = :postContractId AND rev.version <= :version AND rev.deleted_at IS NULL
        GROUP BY rev.version, c.retention_tax_percentage
        ORDER BY rev.version DESC");

        $stmt->execute(array( 'postContractId' => $claimRevision->post_contract_id, 'version'=> $claimRevision->version));

        $records = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $data = [];

        foreach( $records as $version => $releasedAmount)
        {
            foreach($releasedAmount as $record )
            {
                $taxPercentage = number_format($record['retention_tax_percentage'], 2);
                if(!array_key_exists($version, $data) || !array_key_exists($taxPercentage, $record[$version]))
                {
                    $data[$version][$taxPercentage] = 0;
                }

                $data[$version][$taxPercentage] += $record['retention_amount'];
            }
        }

        return $data;
    }

    public static function generateLetterOfAwardCode(ProjectStructure $project, $formType, $formNumber)
    {
        $code = NewPostContractFormInformation::getTypeCode($formType) . str_pad($formNumber, 3, '0', STR_PAD_LEFT);

        if( $project->MainInformation->eproject_origin_id )
        {
            // Uses the contract number of the Main Project.
            if( $parentProject = ProjectStructureTable::getParentProject($project) ) $project = $parentProject;

            $code = EProjectProjectTable::getByEProjectOriginId($project->MainInformation->eproject_origin_id)->reference . '/' . $code;
        }

        return $code;
    }

    public function getRequestForVariationWorkDoneAmount(PostContractClaimRevision $claimRevision)
    {
        $workDoneByVersions = $this->getRequestForVariationWorkDoneGroupByVersions($claimRevision);

        return $this->calculateRequestForVariationWorkDoneAmount($workDoneByVersions);
    }

    public function calculateRequestForVariationWorkDoneAmount(Array $workDoneByVersions)
    {
        $totalWorkDone = 0;

        foreach($workDoneByVersions as $version => $data)
        {
            foreach($data as $taxGroup => $amount)
            {
                $totalWorkDone +=$amount;
            }
        }

        return $totalWorkDone;
    }

    public function getClaimCertificateAmountInfoByClaimRevision(PostContractClaimRevision $claimRevision)
    {
        return ClaimCertificateTable::getClaimCertificateAmountInfoByClaimRevision(array( $claimRevision->ClaimCertificate ))[ $claimRevision->ClaimCertificate->id ];
    }
}
