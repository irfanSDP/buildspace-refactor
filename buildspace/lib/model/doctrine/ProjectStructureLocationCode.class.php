<?php

/**
 * ProjectStructureLocationCode
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProjectStructureLocationCode extends BaseProjectStructureLocationCode
{
    public function delete(Doctrine_Connection $conn = null)
    {
        if($this->canBeDeleted())
        {
            Doctrine_Query::create()
                ->delete('ProjectStructureLocationCode l')
                ->where('l.root_id = ?', $this->root_id)
                ->andWhere('l.project_structure_id = ?', $this->project_structure_id)
                ->andWhere('l.lft > ?', $this->lft)
                ->andWhere('l.rgt < ?', $this->rgt)
                ->execute();

            parent::delete($conn);

            //recalculate left-right values when deleting child nodes
            if(!$this->node->isRoot())
            {
                $first = $this->rgt + 1;
                $delta = $this->lft - $this->rgt - 1;

                Utilities::shiftRightLeftNestedSet(get_class($this), $first, $delta, $this->root_id, $conn);
            }
        }
        else
        {
            throw new Exception('Project Structure Location Code with id: '.$this->id." cannot be deleted");
        }
    }

    public function canBeDeleted()
    {
        return ProjectStructureLocationCodeTable::canBeDeletedById($this->id);
    }

    public function hasLocationAssigned()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COUNT(l.id)
        FROM ".LocationAssignmentTable::getInstance()->getTableName()." l
        WHERE l.project_structure_location_code_id = ".$this->id);

        $stmt->execute();

        $count = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $count > 0;
    }

    public function indent()
    {
        $indented = false;
        $previousRoot = $this->getPreviousRoot();

        if($this->node->isRoot() and $previousRoot)
        {
            $this->node->moveAsLastChildOf($previousRoot);
            $this->refresh();

            $pdo = $this->getTable()->getConnection()->getDbh();

            $stmt = $pdo->prepare("UPDATE ".$this->getTable()->getTableName()." SET priority = ".$previousRoot->priority."
            WHERE root_id = ".$previousRoot->root_id." AND priority <> ".$previousRoot->priority."
            AND project_structure_id = ".$this->project_structure_id." AND deleted_at IS NULL");

            $stmt->execute();

            $indented = true;
        }
        else if(!$this->node->isRoot() and $this->node->hasPrevSibling())
        {
            $this->node->moveAsLastChildOf($this->node->getPrevSibling());

            $this->refresh();

            $indented = true;
        }

        return $indented;
    }

    public function outdent()
    {
        if(!$this->node->isRoot())
        {
            $parent = $this->node->getParent();

            if(!$parent || !$parent->node)
            {
                return false;
            }
            
            $siblings = $this->getTable()
                ->createQuery('l')
                ->where('l.root_id = ?',$this->root_id)
                ->andWhere('l.project_structure_id = ?', $this->project_structure_id)
                ->andWhere('l.level = ?', $this->level)
                ->andWhere('l.lft BETWEEN ? AND ?', array($parent->lft, $parent->rgt))
                ->andWhere('l.lft > ?', $this->rgt)
                ->addOrderBy('l.lft ASC')
                ->execute();

            if(!empty($siblings))
            {
                foreach($siblings as $sibling)
                {
                    $sibling->node->moveAsLastChildOf($this);

                    $this->refresh();
                }
            }

            if(!$parent->node->isRoot())
            {
                $this->node->moveAsNextSiblingOf($parent);
            }
            else
            {
                $this->node->makeRoot($this->id);

                parent::save();

                $this->priority = $parent->priority + 1;

                $this->save();

                $this->updateRootPriority($parent->priority + 1, $this->id);
            }

            $this->refresh();

            return true;
        }
        else
        {
            return false;
        }
    }

    public function moveTo(ProjectStructureLocationCode $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($targetItem->node->isRoot())
            {
                $priority       = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
                $this->priority = $priority;
                $this->save();

                if(!$this->node->isRoot() and $this->node->isValidNode())
                {
                    $this->node->makeRoot($this->id);
                    $this->save();
                }

                if(!$lastPosition)
                {
                    $this->updateRootPriority($priority, $this->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $this->node->moveAsNextSiblingOf($targetItem);
                }
                else
                {
                    $this->node->moveAsPrevSiblingOf($targetItem);
                }

                $this->priority = $targetItem->priority;
                $this->save();

                $this->refresh();
            }

            /*
             * Update priority for all nodes under the family to its root priority.
             * We exclude this step for case the target item is root node and $lastPosition is false
             * because the priority already been update by calling updateRootPriority()
             */
            if(($targetItem->node->isRoot() && $lastPosition) or !$targetItem->node->isRoot())
            {
                Doctrine_Query::create()->update('ProjectStructureLocationCode l')
                    ->set('priority', $this->priority)
                    ->where('l.lft BETWEEN ? AND ?', array($this->lft, $this->rgt))
                    ->andWhere('l.root_id = ?', $this->root_id)
                    ->andWhere('l.project_structure_id = ?', $this->project_structure_id)
                    ->andWhere('l.priority <> ?', $this->priority)
                    ->execute();
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyTo(ProjectStructureLocationCode $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($this->node->hasChildren())
            {
                $children = $this->getTable()
                    ->createQuery('l')
                    ->select('l.id, l.description, l.project_structure_id, l.level')
                    ->where('l.root_id = ?', $this->root_id)
                    ->andWhere('l.project_structure_id = ?', $this->project_structure_id)
                    ->addWhere('l.lft > ? AND l.rgt < ?', array($this->lft, $this->rgt))
                    ->orderBy('l.lft ASC')
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY)
                    ->execute();
            }
            else
            {
                $children = false;
            }

            $cloneItem                       = new ProjectStructureLocationCode();
            $cloneItem->description          = $this->description;
            $cloneItem->project_structure_id = $this->project_structure_id;

            if($targetItem->node->isRoot())
            {
                $priority = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
                $cloneItem->priority = $priority;
                $cloneItem->save($con);

                $cloneItem->getTable()->getTree()->createRoot($cloneItem);

                if(!$lastPosition)
                {
                    $this->updateRootPriority($priority, $cloneItem->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $cloneItem->node->insertAsNextSiblingOf($targetItem);
                }
                else
                {
                    $cloneItem->node->insertAsPrevSiblingOf($targetItem);
                }

                $cloneItem->priority = $targetItem->priority;
                $cloneItem->save($con);
            }

            $cloneItem->refresh();

            if($children)
            {
                $this->_loadNestedSetData($children, $cloneItem);
            }

            $con->commit();

            $cloneItem->refresh(true);

            return $cloneItem;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    private function _loadNestedSetData($nestedSetData, ProjectStructureLocationCode $parent)
    {
        $nestedSetData = array_reverse($nestedSetData, true);

        foreach($nestedSetData as $nestedSet)
        {
            $children = array();
            unset($nestedSet['id']);

            if(array_key_exists('__children', $nestedSet))
            {
                $children = (array) $nestedSet['__children'];
                unset($nestedSet['__children']);
            }

            $obj = new ProjectStructureLocationCode();

            foreach($nestedSet as $key => $value)
            {
                $func = 'set' . Doctrine_Inflector::classify($key);
                $obj->$func($value);
            }

            $parent->node->addChild($obj);

            $obj->priority = $parent->priority;
            $obj->save();


            if(is_array($children) and !empty($children))
            {
                $this->_loadNestedSetData($children, $obj);
            }
        }
    }

    public function getPreviousRoot()
    {
        $rootId = $this->root_id > 0 ? $this->root_id : $this->id;
        $root = $this->getTable()->find($rootId);

        return $this->getTable()
            ->createQuery('l')
            ->where('l.root_id = l.id')
            ->addWhere('l.project_structure_id = ?', $this->project_structure_id)
            ->addWhere('l.priority < ?', $root->priority)
            ->orderBy('l.priority DESC')
            ->limit(1)
            ->fetchOne();
    }

    public function updateRootPriority($priority, $excludeId=null)
    {
        ProjectStructureLocationCodeTable::updateRootPriority($priority, $this->project_structure_id, $excludeId);
    }
}
