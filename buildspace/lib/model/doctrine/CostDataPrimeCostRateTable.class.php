<?php

/**
 * CostDataPrimeCostRateTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CostDataPrimeCostRateTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return CostDataPrimeCostRateTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('CostDataPrimeCostRate');
    }

    public static function getItem(CostData $costData, MasterCostDataPrimeCostRate $masterItem)
    {
        $item = DoctrineQuery::create()->select('i.id')
            ->from('CostDataPrimeCostRate i')
            ->where('i.cost_data_id = ?', $costData->id)
            ->andWhere('i.master_cost_data_prime_cost_rate_id = ?', $masterItem->id)
            ->limit(1)
            ->fetchOne();

        if( ! $item )
        {
            $item = new CostDataPrimeCostRate();
            $item->cost_data_id = $costData->id;
            $item->master_cost_data_prime_cost_rate_id = $masterItem->id;
        }

        return $item;
    }

    public static function setValue(CostData $costData, MasterCostDataPrimeCostRate $masterItem, $attribute, $value)
    {
        $item = self::getItem($costData, $masterItem);

        $item->{$attribute} = $value;
        $item->save();

        if($attribute == CostDataPrimeCostRate::COLUMN_APPROVED_VALUE || $attribute = CostDataPrimeCostRate::COLUMN_AWARDED_VALUE) $item->flushDescendantValues($attribute);

        return $item;
    }

    public static function getItemSum(CostData $costData, array $masterIds)
    {
        if(empty($masterIds)) return 0;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $masterIds = implode(',', $masterIds);

        $stmt = $pdo->prepare("SELECT SUM(COALESCE(i.approved_value, 0) * COALESCE(i.units, 0)) AS approved_sum, SUM(COALESCE(i.awarded_value, 0) * COALESCE(i.units, 0)) AS awarded_sum
        FROM ".MasterCostDataPrimeCostRateTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataPrimeCostRateTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_prime_cost_rate_id and i.cost_data_id = {$costData->id}
        WHERE mi.id in ({$masterIds})
        AND i.show IS NOT FALSE
        AND mi.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    public static function getRecordValues(CostData $costData, array $masterIds)
    {
        if(empty($masterIds)) return array();

        $masterIds = implode(',', $masterIds);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT mi.id, COALESCE(i.units, 1) as units, COALESCE(i.approved_value, 0) AS approved_value, (COALESCE(i.units, 1) * COALESCE(i.approved_value)) AS approved_total, COALESCE(i.awarded_value,0) AS awarded_value, (COALESCE(i.units, 1) * COALESCE(i.awarded_value)) AS awarded_total, COALESCE(i.approved_brand, '') as approved_brand, COALESCE(i.awarded_brand, '') as awarded_brand
        FROM ".MasterCostDataPrimeCostRateTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataPrimeCostRateTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_prime_cost_rate_id and i.cost_data_id = {$costData->id}
        WHERE mi.id in ({$masterIds})
        AND mi.deleted_at IS NULL");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $items = Utilities::setAttributeAsKey($items, 'id');

        return $items;
    }

    public static function setItemVisibility(CostData $costData, $masterItemIds, $setVisible)
    {
        foreach($masterItemIds as $masterItemId)
        {
            $item = self::getItem($costData, Doctrine_Core::getTable('MasterCostDataPrimeCostRate')->find($masterItemId));

            $item->show = $setVisible;
            $item->save();
            $item->updateRelativesCost(array( CostDataPrimeCostRate::COLUMN_APPROVED_VALUE, CostDataPrimeCostRate::COLUMN_AWARDED_VALUE ));
        }
    }

    public static function getItemList(CostData $costData, $parentId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $parentClause = $parentId ? "mi.parent_id = {$parentId}" : "mi.parent_id IS NULL";

        $stmt = $pdo->prepare("SELECT mi.id, mi.description, uom.id AS uom_id, uom.symbol AS uom_symbol
        FROM ".MasterCostDataPrimeCostRateTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataPrimeCostRateTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_prime_cost_rate_id and i.cost_data_id = {$costData->id}
        LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON mi.uom_id = uom.id AND uom.deleted_at IS NULL
        WHERE mi.master_cost_data_id = {$costData->master_cost_data_id} 
        AND {$parentClause}
        AND i.show IS NOT FALSE
        AND mi.deleted_at IS NULL
        ORDER BY mi.priority ASC");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function itemValuesAreDerived(CostData $costData, array $masterIds)
    {
        if(empty($masterIds)) return array();

        $masterIds = implode(',', $masterIds);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT mp.id, (SUM(COALESCE(i.approved_value, 0) * COALESCE(i.units, 0)) != 0) IS TRUE AS approved_value, (SUM(COALESCE(i.awarded_value, 0) * COALESCE(i.units, 0)) != 0) IS TRUE AS awarded_value
        FROM ".MasterCostDataPrimeCostRateTable::getInstance()->getTableName()." mp
        LEFT JOIN ".MasterCostDataPrimeCostRateTable::getInstance()->getTableName()." mi on mp.id = mi.parent_id
        LEFT JOIN ".CostDataPrimeCostRateTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_prime_cost_rate_id and i.cost_data_id = {$costData->id}
        WHERE mp.id in ({$masterIds})
        AND mi.deleted_at IS NULL
        GROUP BY mp.id");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $results = Utilities::setAttributeAsKey($items, 'id');

        $linkedBillItems = BillItemCostDataPrimeCostRateTable::getDescendantsAndSelfLinkedBillItems($costData, array_keys($results));

        foreach($results as $masterId => &$statuses)
        {
            if(!$statuses['awarded_value'])
            {
                if(count($linkedBillItems[$masterId]) > 0) $statuses['awarded_value'] = true;
            }
        }

        return $results;
    }

    public static function getLatestUpdateDetails(CostData $costData)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $statement = "SELECT mi.id, i.updated_at, i.updated_by, cp.name as updater_name
        FROM ".MasterCostDataPrimeCostRateTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataPrimeCostRateTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_prime_cost_rate_id and i.cost_data_id = :costDataId
        LEFT JOIN ".sfGuardUserTable::getInstance()->getTableName()." u on u.id = i.updated_by
        LEFT JOIN ".sfGuardUserProfileTable::getInstance()->getTableName()." cp ON cp.user_id = u.id
        WHERE i.cost_data_id = :costDataId
        AND i.show IS NOT FALSE
        AND mi.deleted_at IS NULL
        ORDER BY i.updated_by DESC;";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array( 'costDataId' => $costData->id ));

        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    public static function updateProjectCostDataItemValues(array $projectIds)
    {
        if(empty($projectIds)) return;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT i.id
            FROM " . BillItemTable::getInstance()->getTableName() . " i
            JOIN " . BillElementTable::getInstance()->getTableName() . " e on e.id = i.element_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b on b.id = e.project_structure_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p on p.id = b.root_id
            WHERE p.id in (" . implode(',', $projectIds) . ")
            AND p.deleted_at IS NULL
            AND b.deleted_at IS NULL
            AND e.deleted_at IS NULL
            AND i.deleted_at IS NULL
            AND i.project_revision_deleted_at IS NULL");

        $stmt->execute();

        $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        if(empty($billItemIds)) return;

        $stmt = $pdo->prepare("SELECT cd.id AS cost_data_id, i.master_cost_data_prime_cost_rate_id
            FROM " . CostDataPrimeCostRateTable::getInstance()->getTableName() . " i
            JOIN " . MasterCostDataPrimeCostRateTable::getInstance()->getTableName() . " mi ON mi.id = i.master_cost_data_prime_cost_rate_id
            JOIN " . CostDataTable::getInstance()->getTableName() . " cd ON cd.id = i.cost_data_id
            WHERE i.id IN (
                SELECT ref.cost_data_prime_cost_rate_id
                FROM " . BillItemCostDataPrimeCostRateTable::getInstance()->getTableName() . " ref
                WHERE ref.bill_item_id IN (" . implode(',', $billItemIds) . ")
            )
            AND cd.deleted_at IS NULL
            AND i.deleted_at IS NULL
            AND mi.deleted_at IS NULl;");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $costDataObjects     = array();
        $masterCostDataItems = array();

        foreach($records as $record)
        {
            if(!array_key_exists($record['cost_data_id'], $costDataObjects)) $costDataObjects[$record['cost_data_id']] = Doctrine_Core::getTable('CostData')->find($record['cost_data_id']);

            if(!array_key_exists($record['master_cost_data_prime_cost_rate_id'], $masterCostDataItems)) $masterCostDataItems[$record['master_cost_data_prime_cost_rate_id']] = Doctrine_Core::getTable('MasterCostDataPrimeCostRate')->find($record['master_cost_data_prime_cost_rate_id']);

            $costData                    = $costDataObjects[$record['cost_data_id']];
            $masterCostDataPrimeCostRate = $masterCostDataItems[$record['master_cost_data_prime_cost_rate_id']];

            BillItemCostDataPrimeCostRateTable::itemValueUpdate($costData, $masterCostDataPrimeCostRate);
        }
    }
}