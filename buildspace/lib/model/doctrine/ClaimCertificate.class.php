<?php

/**
 * ClaimCertificate
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ClaimCertificate extends BaseClaimCertificate
{
    const STATUS_TYPE_IN_PROGRESS          = 1;
    const STATUS_TYPE_PENDING_FOR_APPROVAL = 2;
    const STATUS_TYPE_APPROVED             = 4;
    const STATUS_TYPE_REJECTED             = 128;

    const STATUS_TYPE_IN_PROGRESS_TEXT          = "IN PROGRESS";
    const STATUS_TYPE_PENDING_FOR_APPROVAL_TEXT = "PENDING FOR APPROVAL";
    const STATUS_TYPE_APPROVED_TEXT             = "APPROVED";
    const STATUS_TYPE_REJECTED_TEXT             = "REJECTED";

    const SHARED_FOLDER_DIRECTORY = 'claim-certificates';

    public static function getStatusText($status)
    {
        switch($status)
        {
            case ClaimCertificate::STATUS_TYPE_IN_PROGRESS:
                return ClaimCertificate::STATUS_TYPE_IN_PROGRESS_TEXT;
            case ClaimCertificate::STATUS_TYPE_PENDING_FOR_APPROVAL:
                return ClaimCertificate::STATUS_TYPE_PENDING_FOR_APPROVAL_TEXT;
            case ClaimCertificate::STATUS_TYPE_APPROVED:
                return ClaimCertificate::STATUS_TYPE_APPROVED_TEXT;
            case ClaimCertificate::STATUS_TYPE_REJECTED:
                return ClaimCertificate::STATUS_TYPE_REJECTED_TEXT;
            default:
                throw new Exception("Invalid Claim Certificate Status");
        }
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $certStatus = $this->status;

        parent::save($conn);

        //calling getClaimCertInfo need to be called after the object has been saved (for new record) because ClaimCertificateTable::getClaimCertInfo expect claimCert id to be passed in for calculation
        $claimCertificateInfo = $this->getClaimCertInfo();

        Doctrine_Query::create()
        ->update('ClaimCertificate c')
        ->set('c.amount_certified', '?', $claimCertificateInfo['amountCertified'])
        ->set('c.status', '?', $certStatus) // Status is somehow reset after certified amount calculation.
        ->where('c.id = ?', $this->id)
        ->execute();

        if($this->status == ClaimCertificate::STATUS_TYPE_APPROVED) $this->recalculateClaimCertInformation();
    }

    public function postSave($event)
    {
        $this->assignOrphanVariationOrders();
        $this->assignOrphanVariationOrderClaims();
        $this->assignOrphanPostContractClaims();
        $this->assignOrphanPostContractClaimClaims();
    }

    private function assignOrphanVariationOrders()
    {
        $projectStructureId = $this->PostContractClaimRevision->PostContract->project_structure_id;

        $pdo  = $this->getTable()->getConnection()->getDbh();
        $stmt = $pdo->prepare("SELECT vo.id
            FROM " . VariationOrderTable::getInstance()->getTableName() . " vo
            WHERE vo.id NOT IN (
                SELECT x.variation_order_id
                FROM " . VariationOrderClaimCertificateTable::getInstance()->getTableName() . " x
                JOIN " . VariationOrderTable::getInstance()->getTableName() . " vo2 ON vo2.id = x.variation_order_id
                WHERE vo2.project_structure_id = " . $projectStructureId . " AND vo2.deleted_at IS NULL
            )
            AND vo.project_structure_id =  " . $projectStructureId . "
            AND vo.is_approved IS TRUE AND vo.deleted_at IS NULL");

        $stmt->execute();

        $orphanApprovedVariationOrders = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        if( ! empty( $orphanApprovedVariationOrders ) )
        {
            $insertValues  = array();
            $questionMarks = array();
            $userId        = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            foreach($orphanApprovedVariationOrders as $variationOrderId)
            {
                $data = array(
                    intval($variationOrderId),
                    intval($this->id),
                    date('Y-m-d H:i:s'),
                    date('Y-m-d H:i:s'),
                    $userId,
                    $userId
                );

                $insertValues = array_merge($insertValues, $data);

                $questionMarks[] = '(' . implode(',', array_fill(0, count($data), '?')) . ')';
            }

            if( ! empty( $insertValues ) )
            {
                $stmt = $pdo->prepare("INSERT INTO " . VariationOrderClaimCertificateTable::getInstance()->getTableName() . "
                (variation_order_id, claim_certificate_id, created_at, updated_at, created_by, updated_by)
                VALUES " . implode(',', $questionMarks));

                $stmt->execute($insertValues);
                $this->save();
            }
        }
    }

    private function assignOrphanVariationOrderClaims()
    {
        $projectStructureId = $this->PostContractClaimRevision->PostContract->project_structure_id;

        $pdo  = $this->getTable()->getConnection()->getDbh();
        $stmt = $pdo->prepare("SELECT claim.id
            FROM " . VariationOrderClaimTable::getInstance()->getTableName() . " claim
            JOIN " . VariationOrderTable::getInstance()->getTableName() . " vo ON vo.id = claim.variation_order_id
            WHERE claim.id NOT IN (
                SELECT x.variation_order_claim_id
                FROM " . VariationOrderClaimClaimCertificateTable::getInstance()->getTableName() . " x
                JOIN " . VariationOrderClaimTable::getInstance()->getTableName() . " claim2 ON claim2.id = x.variation_order_claim_id
                JOIN " . VariationOrderTable::getInstance()->getTableName() . " vo2 ON vo2.id = claim2.variation_order_id
                WHERE vo2.project_structure_id = " . $projectStructureId . " AND vo2.is_approved IS TRUE
                AND claim2.status = " . VariationOrderClaim::STATUS_CLOSED . "
                AND vo2.deleted_at IS NULL AND claim2.deleted_at IS NULL
            )
            AND vo.project_structure_id =  " . $projectStructureId . "
            AND vo.is_approved IS TRUE AND claim.status = " . VariationOrderClaim::STATUS_CLOSED . " AND vo.deleted_at IS NULL AND claim.deleted_at IS NULL");

        $stmt->execute();

        $orphanVariationOrderClaims = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        if( ! empty( $orphanVariationOrderClaims ) )
        {
            $insertValues  = array();
            $questionMarks = array();
            $userId        = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            foreach($orphanVariationOrderClaims as $variationOrderClaimId)
            {
                $data = array(
                    intval($variationOrderClaimId),
                    intval($this->id),
                    date('Y-m-d H:i:s'),
                    date('Y-m-d H:i:s'),
                    $userId,
                    $userId
                );

                $insertValues = array_merge($insertValues, $data);

                $questionMarks[] = '(' . implode(',', array_fill(0, count($data), '?')) . ')';
            }

            if( ! empty( $insertValues ) )
            {
                $stmt = $pdo->prepare("INSERT INTO " . VariationOrderClaimClaimCertificateTable::getInstance()->getTableName() . "
                (variation_order_claim_id, claim_certificate_id, created_at, updated_at, created_by, updated_by)
                VALUES " . implode(',', $questionMarks));

                $stmt->execute($insertValues);
                $this->save();
            }
        }
    }

    private function assignOrphanPostContractClaims()
    {
        $projectStructureId = $this->PostContractClaimRevision->PostContract->project_structure_id;

        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT postContractClaim.id
            FROM " . PostContractClaimTable::getInstance()->getTableName() . " postContractClaim
            WHERE postContractClaim.claim_certificate_id IS NULL
            AND postContractClaim.project_structure_id =  " . $projectStructureId . "
            AND postContractClaim.status = " . PostContractClaim::STATUS_APPROVED . " AND postContractClaim.deleted_at IS NULL");

        $stmt->execute();

        $orphanPostContractClaims = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        if( ! empty( $orphanPostContractClaims ) )
        {
            foreach($orphanPostContractClaims as $postContractClaimId)
            {
                $postContractClaim = Doctrine_Core::getTable('PostContractClaim')->find($postContractClaimId);
                $postContractClaim->claim_certificate_id = $this->id;
                $postContractClaim->save();
                $this->save();
            }
        }
    }

    private function assignOrphanPostContractClaimClaims()
    {
        $projectStructureId = $this->PostContractClaimRevision->PostContract->project_structure_id;

        $pdo  = $this->getTable()->getConnection()->getDbh();
        $stmt = $pdo->prepare("SELECT claim.id
            FROM " . PostContractClaimTable::getInstance()->getTableName() . " postContractClaim
            JOIN ".PostContractClaimClaimTable::getInstance()->getTableName()." claim ON claim.post_contract_claim_id = postContractClaim.id
            WHERE claim.claim_certificate_id IS NULL
            AND postContractClaim.project_structure_id =  " . $projectStructureId . "
            AND postContractClaim.status = " . PostContractClaim::STATUS_APPROVED . " AND claim.status= ".PostContractClaimClaim::STATUS_CLOSED." AND postContractClaim.deleted_at IS NULL AND claim.deleted_at IS NULL");

        $stmt->execute();

        $orphanPostContractClaimClaims = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        if( ! empty( $orphanPostContractClaimClaims ) )
        {
            foreach($orphanPostContractClaimClaims as $postContractClaimClaimId)
            {
                $postContractClaimClaim = Doctrine_Core::getTable('PostContractClaimClaim')->find($postContractClaimClaimId);
                $postContractClaimClaim->claim_certificate_id = $this->id;
                $postContractClaimClaim->save();
                $this->save();
            }
        }
    }

    public function approve()
    {
        $this->status = self::STATUS_TYPE_APPROVED;

        $approvalLog                       = new ClaimCertificateApprovalLog();
        $approvalLog->status               = $this->status;
        $approvalLog->claim_certificate_id = $this->id;
        $approvalLog->save();

        // Update due date to approval date
        $this->due_date = max($this->due_date, $approvalLog->created_at);
        $this->save();

        $postContractClaimRevision = $this->PostContractClaimRevision;

        $postContractClaimRevision->locked_status = true;
        $postContractClaimRevision->save();

        Notifications::sendClaimApprovedNotifications($postContractClaimRevision->id);
    }

    public function getContractManagementClaimVerifiers()
    {
        $project = $this->PostContractClaimRevision->PostContract->ProjectStructure;

        return DoctrineQuery::create()->select('*')
            ->from('ContractManagementClaimVerifier v')
            ->where('v.project_structure_id = ?', $project->id)
            ->andWhere('v.module_identifier = ?', PostContractClaim::TYPE_CLAIM_CERTIFICATE)
            ->andWhere('v.object_id = ?', $this->id)
            ->andWhere('v.deleted_at is NULL')
            ->orderBy('v.sequence_number ASC')
            ->execute();
    }

    public function onClaimReview()
    {
        $project = $this->PostContractClaimRevision->PostContract->ProjectStructure;

        if( ContractManagementClaimVerifierTable::isApproved($project, PostContractClaim::TYPE_CLAIM_CERTIFICATE, $this->id) )
        {
            $this->approve();
        }
        elseif( ContractManagementClaimVerifierTable::isRejected($project, PostContractClaim::TYPE_CLAIM_CERTIFICATE, $this->id) )
        {
            $currentRevision = PostContractClaimRevisionTable::getCurrentProjectRevision($this->PostContractClaimRevision->PostContract,true);

            if($currentRevision['id'] == $this->PostContractClaimRevision->id)
            {
                $this->status = self::STATUS_TYPE_IN_PROGRESS;
                $this->save();

                $postContractClaimRevision = $this->PostContractClaimRevision;

                $postContractClaimRevision->locked_status = false;
                $postContractClaimRevision->save();

                SubProjectLatestApprovedClaimRevisionTable::deleteRecords($this->PostContractClaimRevision);
            }
            else
            {
                $this->status = self::STATUS_TYPE_REJECTED;
                $this->save();

                $postContractClaimRevision = $this->PostContractClaimRevision;

                $approvalLog                       = new ClaimCertificateApprovalLog();
                $approvalLog->status               = $this->status;
                $approvalLog->claim_certificate_id = $this->id;
                $approvalLog->save();

                $postContractClaimRevision->locked_status = true;
                $postContractClaimRevision->save();
            }
        }
    }

    public function getVariationOrderOverallTotalByClaimCertificate(ProjectStructure $project)
    {
        //variation order only relates with root (project)
        if(!$project->node->isRoot() and $project->type != self::TYPE_ROOT)
        {
            return false;
        }

        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(
            ROUND((i.total_unit * i.addition_quantity * i.rate) - (i.total_unit * i.omission_quantity * i.rate), 2)
        ), 0), 2) AS nett_omission_addition
        FROM ".VariationOrderItemTable::getInstance()->getTableName()." i
        JOIN ".VariationOrderTable::getInstance()->getTableName()." vo ON i.variation_order_id = vo.id
        JOIN ".VariationOrderClaimCertificateTable::getInstance()->getTableName()." x ON x.variation_order_id = vo.id
        JOIN ".ClaimCertificateTable::getInstance()->getTableName()." c ON c.id = x.claim_certificate_id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.post_contract_claim_revision_id
        WHERE vo.project_structure_id = ".$project->id." AND vo.is_approved IS TRUE
        AND i.type <> ".VariationOrderItem::TYPE_HEADER." AND i.rate <> 0
        AND rev.version <= ".$this->PostContractClaimRevision->version."
        AND vo.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_COLUMN, 0);
        
        return $result ? $result : 0;
    }

    public function getPostContractClaimOverallTotalByClaimCertificate(ProjectStructure $project, $type)
    {
        $pdo  = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(i.quantity * i.rate), 0), 2) AS amount
        FROM " . PostContractClaimTable::getInstance()->getTableName() . " pc
        JOIN " . PostContractClaimItemTable::getInstance()->getTableName() . " i ON i.post_contract_claim_id = pc.id
        JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = pc.claim_certificate_id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
        WHERE pc.project_structure_id = " . $project->id . "
        AND pc.type = ".$type."
        AND pc.status = ".PostContractClaim::STATUS_APPROVED."
        AND rev.version <= ".$this->PostContractClaimRevision->version."
        AND pc.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $overallTotal = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        if($type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(materialOnSite.final_amount), 0), 2) AS amount
            FROM " . PostContractClaimMaterialOnSiteTable::getInstance()->getTableName() . " materialOnSite
            JOIN " . PostContractClaimItemTable::getInstance()->getTableName() . " i ON i.id = materialOnSite.post_contract_claim_item_id
            JOIN " . PostContractClaimTable::getInstance()->getTableName() . " pc ON i.post_contract_claim_id = pc.id
            JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = pc.claim_certificate_id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
            WHERE pc.project_structure_id = " . $project->id . "
            AND pc.status = ".PostContractClaim::STATUS_APPROVED."
            AND pc.type = ".$type."
            AND rev.version <= ".$this->PostContractClaimRevision->version."
            AND pc.deleted_at IS NULL AND i.deleted_at IS NULL AND materialOnSite.deleted_at IS NULL");

            $stmt->execute();

            $overallTotal = $stmt->fetch(PDO::FETCH_COLUMN, 0);
        }

        return $overallTotal;
    }

    public function getPostContractPreviousClaimTotalSecondLevel(ProjectStructure $project, $type)
    {
        $pdo  = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(i.current_amount),0),2) AS current_amount
        FROM " . PostContractClaimTable::getInstance()->getTableName() . " pc
        JOIN " . PostContractClaimClaimTable::getInstance()->getTableName() . " c ON c.post_contract_claim_id = pc.id
        JOIN " . PostContractClaimClaimItemTable::getInstance()->getTableName() . " i ON i.post_contract_claim_claim_id = c.id
        JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = c.claim_certificate_id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
        WHERE pc.project_structure_id = " . $project->id . "
        AND pc.status = ".PostContractClaim::STATUS_APPROVED."
        AND pc.type = ".$type."
        AND c.status = ".PostContractClaimClaim::STATUS_CLOSED."
        AND rev.version < ".$this->PostContractClaimRevision->version."
        AND pc.deleted_at IS NULL AND c.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $currentClaims = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $currentClaims > 0 ? $currentClaims : 0;
    }

    public function getPostContractPreviousClaimTotalFirstLevel(ProjectStructure $project, $type)
    {
        $pdo  = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(i.quantity * i.rate), 0), 2) AS amount
        FROM " . PostContractClaimTable::getInstance()->getTableName() . " pc
        JOIN " . PostContractClaimItemTable::getInstance()->getTableName() . " i ON i.post_contract_claim_id = pc.id
        JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = pc.claim_certificate_id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
        WHERE pc.project_structure_id = " . $project->id . "
        AND pc.type = ".$type."
        AND pc.status = ".PostContractClaim::STATUS_APPROVED."
        AND rev.version < ".$this->PostContractClaimRevision->version."
        AND pc.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $overallTotal = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        if($type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(materialOnSite.final_amount), 0), 2) AS amount
            FROM " . PostContractClaimMaterialOnSiteTable::getInstance()->getTableName() . " materialOnSite
            JOIN " . PostContractClaimItemTable::getInstance()->getTableName() . " i ON i.id = materialOnSite.post_contract_claim_item_id
            JOIN " . PostContractClaimTable::getInstance()->getTableName() . " pc ON i.post_contract_claim_id = pc.id
            JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = pc.claim_certificate_id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
            WHERE pc.project_structure_id = " . $project->id . "
            AND pc.status = ".PostContractClaim::STATUS_APPROVED."
            AND pc.type = ".$type."
            AND rev.version < ".$this->PostContractClaimRevision->version."
            AND pc.deleted_at IS NULL AND i.deleted_at IS NULL AND materialOnSite.deleted_at IS NULL");

            $stmt->execute();

            $overallTotal = $stmt->fetch(PDO::FETCH_COLUMN, 0);
        }

        return $overallTotal;
    }

    public function getAdvancePaymentAmountByClaimRevision($project)
    {
        $pdo  = $project->getTable()->getConnection()->getDbh();

        $currentSelectedClaimRevision = $project->PostContract->getCurrentSelectedClaimRevision();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(i.quantity * i.rate), 0), 2) AS amount
                FROM " . PostContractClaimTable::getInstance()->getTableName() . " pc
                JOIN " . PostContractClaimItemTable::getInstance()->getTableName() . " i ON i.post_contract_claim_id = pc.id
                JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = pc.claim_certificate_id
                JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
                WHERE pc.project_structure_id = " . $project->id . "
                AND pc.type = ".PostContractClaim::TYPE_ADVANCED_PAYMENT."
                AND pc.status = ".PostContractClaim::STATUS_APPROVED."
                AND rev.id = " . $currentSelectedClaimRevision->id . "
                AND pc.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $totalAmount = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $totalAmount;
    }

    public function getPostContractClaimThisClaim(ProjectStructure $project, $type)
    {
        $pdo  = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(i.quantity * i.rate), 0), 2) AS amount
        FROM " . PostContractClaimTable::getInstance()->getTableName() . " pc
        JOIN " . PostContractClaimItemTable::getInstance()->getTableName() . " i ON i.post_contract_claim_id = pc.id
        JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = pc.claim_certificate_id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
        WHERE pc.project_structure_id = " . $project->id . "
        AND pc.type = ".$type."
        AND pc.status = ".PostContractClaim::STATUS_APPROVED."
        AND rev.version = ".$this->PostContractClaimRevision->version."
        AND pc.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $overallTotal = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        if($type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(materialOnSite.final_amount), 0), 2) AS amount
            FROM " . PostContractClaimMaterialOnSiteTable::getInstance()->getTableName() . " materialOnSite
            JOIN " . PostContractClaimItemTable::getInstance()->getTableName() . " i ON i.id = materialOnSite.post_contract_claim_item_id
            JOIN " . PostContractClaimTable::getInstance()->getTableName() . " pc ON i.post_contract_claim_id = pc.id
            JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = pc.claim_certificate_id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
            WHERE pc.project_structure_id = " . $project->id . "
            AND pc.status = ".PostContractClaim::STATUS_APPROVED."
            AND pc.type = ".$type."
            AND rev.version = ".$this->PostContractClaimRevision->version."
            AND pc.deleted_at IS NULL AND i.deleted_at IS NULL AND materialOnSite.deleted_at IS NULL");

            $stmt->execute();

            $overallTotal = $stmt->fetch(PDO::FETCH_COLUMN, 0);
        }

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(i.current_amount),0),2) AS current_amount
        FROM " . PostContractClaimTable::getInstance()->getTableName() . " pc
        JOIN " . PostContractClaimClaimTable::getInstance()->getTableName() . " c ON c.post_contract_claim_id = pc.id
        JOIN " . PostContractClaimClaimItemTable::getInstance()->getTableName() . " i ON i.post_contract_claim_claim_id = c.id
        JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = c.claim_certificate_id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
        WHERE pc.project_structure_id = " . $project->id . "
        AND pc.status = ".PostContractClaim::STATUS_APPROVED."
        AND pc.type = ".$type."
        AND c.status = ".PostContractClaimClaim::STATUS_CLOSED."
        AND rev.version = ".$this->PostContractClaimRevision->version."
        AND pc.deleted_at IS NULL AND c.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $currentClaims = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $overallTotal - $currentClaims;
    }

    public function getPostContractClaimThisClaimSecondLevel(ProjectStructure $project, $type)
    {
        $pdo  = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(i.current_amount),0),2) AS current_amount
        FROM " . PostContractClaimTable::getInstance()->getTableName() . " pc
        JOIN " . PostContractClaimClaimTable::getInstance()->getTableName() . " c ON c.post_contract_claim_id = pc.id
        JOIN " . PostContractClaimClaimItemTable::getInstance()->getTableName() . " i ON i.post_contract_claim_claim_id = c.id
        JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = c.claim_certificate_id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
        WHERE pc.project_structure_id = " . $project->id . "
        AND pc.status = ".PostContractClaim::STATUS_APPROVED."
        AND pc.type = ".$type."
        AND c.status = ".PostContractClaimClaim::STATUS_CLOSED."
        AND rev.version = ".$this->PostContractClaimRevision->version."
        AND pc.deleted_at IS NULL AND c.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $currentClaims = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $currentClaims > 0 ? $currentClaims : 0;
    }

    public function getPostContractClaimThisClaimFirstLevel(ProjectStructure $project, $type)
    {
        $pdo  = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(i.quantity * i.rate), 0), 2) AS amount
        FROM " . PostContractClaimTable::getInstance()->getTableName() . " pc
        JOIN " . PostContractClaimItemTable::getInstance()->getTableName() . " i ON i.post_contract_claim_id = pc.id
        JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = pc.claim_certificate_id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
        WHERE pc.project_structure_id = " . $project->id . "
        AND pc.type = ".$type."
        AND pc.status = ".PostContractClaim::STATUS_APPROVED."
        AND rev.version = ".$this->PostContractClaimRevision->version."
        AND pc.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $overallTotal = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        if($type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(materialOnSite.final_amount), 0), 2) AS amount
            FROM " . PostContractClaimMaterialOnSiteTable::getInstance()->getTableName() . " materialOnSite
            JOIN " . PostContractClaimItemTable::getInstance()->getTableName() . " i ON i.id = materialOnSite.post_contract_claim_item_id
            JOIN " . PostContractClaimTable::getInstance()->getTableName() . " pc ON i.post_contract_claim_id = pc.id
            JOIN " . ClaimCertificateTable::getInstance()->getTableName(). " claimCertificate ON claimCertificate.id = pc.claim_certificate_id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = claimCertificate.post_contract_claim_revision_id
            WHERE pc.project_structure_id = " . $project->id . "
            AND pc.status = ".PostContractClaim::STATUS_APPROVED."
            AND pc.type = ".$type."
            AND rev.version = ".$this->PostContractClaimRevision->version."
            AND pc.deleted_at IS NULL AND i.deleted_at IS NULL AND materialOnSite.deleted_at IS NULL");

            $stmt->execute();

            $overallTotal = $stmt->fetch(PDO::FETCH_COLUMN, 0);
        }

        return $overallTotal;
    }

    public function getClaimCertInfo($includeSubPackageInfo = false)
    {
        return ClaimCertificateTable::getClaimCertInfo(array( $this ), $includeSubPackageInfo)[ $this->id ];
    }

    public function recalculateClaimCertInformation()
    {
        if( !$this->PostContractClaimRevision->PostContract->ProjectStructure->NewPostContractFormInformation->exists() ) return;

        if( $this->status != ClaimCertificate::STATUS_TYPE_APPROVED ) return;

        $claimCertificateInformation = Doctrine_Query::create()
            ->from('ClaimCertificateInformation i')
            ->where('i.claim_certificate_id = ?',$this->id)
            ->fetchOne();

        if( ! $claimCertificateInformation )
        {
            $claimCertificateInformation = new ClaimCertificateInformation();
        }

        $calculatedInfo = $this->getClaimCertInfo();
        
        $claimCertificateInformation->claim_certificate_id = $this->id;
        $claimCertificateInformation->approved_amount = $calculatedInfo['netPayableAmountOverallTotal'];
        $claimCertificateInformation->paid_amount = EProjectClaimCertificatePaymentTable::getPaidAmount($this->id);
        $claimCertificateInformation->paid = ($claimCertificateInformation->paid_amount >= $claimCertificateInformation->approved_amount);
        $claimCertificateInformation->save();
    }

    public function canSubmit()
    {
        $canSubmit = false;

        if( $latestUnapprovedClaimRevision = $this->PostContractClaimRevision->PostContract->getEarliestUnapprovedClaimRevision() )
        {
            $canSubmit = $latestUnapprovedClaimRevision->version == $this->PostContractClaimRevision->version;
        }

        return $canSubmit;
    }

}
