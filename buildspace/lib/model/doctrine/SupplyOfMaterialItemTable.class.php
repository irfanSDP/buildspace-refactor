<?php

/**
 * SupplyOfMaterialItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SupplyOfMaterialItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object SupplyOfMaterialItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('SupplyOfMaterialItem');
    }

    public static function createItemFromLastRow($previousItem, $elementId, $fieldName = null, $fieldValue = null)
    {
        $item = new SupplyOfMaterialItem();

        $item->element_id = $elementId;

        if ( $fieldName )
        {
            $columns = array_keys(self::getInstance()->getColumns());
            if (in_array($fieldName, $columns))
            {
                $fieldValue = ( $fieldName == 'uom_id' and $fieldValue == - 1 ) ? null : $fieldValue;
                $item->{'set' . sfInflector::camelize($fieldName)}($fieldValue);
            }
        }

        if ( $fieldName != 'type' )
        {
            $item->type = SupplyOfMaterialItem::TYPE_WORK_ITEM;
        }

        $asRoot   = true;
        $priority = 0;

        if ( $previousItem )
        {
            if ( $previousItem->node->isRoot() )
            {
                $priority = $previousItem->priority + 1;
            }
            else
            {
                $asRoot = false;
                $item->node->insertAsNextSiblingOf($previousItem);

                $priority = $previousItem->priority;
            }
        }

        $item->priority = $priority;
        $item->save();

        if ( $asRoot )
        {
            $item->getTable()->getTree()->createRoot($item);

            $item->updateRootPriority($priority, $item->id);
        }

        return $item;
    }

    public static function createItem(SupplyOfMaterialItem $nextItem)
    {
        $item             = new SupplyOfMaterialItem();
        $item->element_id = $nextItem->element_id;
        $item->type       = SupplyOfMaterialItem::TYPE_WORK_ITEM;

        if ( $nextItem->node->isRoot() )
        {
            $priority = $nextItem->priority;

            $item->priority = $priority;

            $item->save();

            $node = $item->node;

            if ( $node->isValidNode() )
            {
                $node->makeRoot($item->id);
            }
            else
            {
                $item->getTable()->getTree()->createRoot($item);
            }

            $item->updateRootPriority($priority, $item->id);
        }
        else
        {
            $item->node->insertAsPrevSiblingOf($nextItem);
            $item->priority = $nextItem->priority;
        }

        $item->save();

        return $item;
    }

    public static function updateRootPriority($priority, $elementId, $excludeId = null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sqlUpdateRoot = "UPDATE " . self::getInstance()->getTableName() . " SET priority = priority + 1
            WHERE element_id =" . $elementId . " AND priority >=" . $priority . " AND id = root_id";

        if ( $excludeId and $excludeId > 0 )
        {
            $sqlUpdateRoot .= " AND id <> " . $excludeId;
        }

        $sqlUpdateRoot .= " AND deleted_at IS NULL";

        $stmt = $pdo->prepare($sqlUpdateRoot);

        $stmt->execute();

        //update children priority same as root priority
        $stmt = $pdo->prepare("UPDATE " . self::getInstance()->getTableName() . " AS i SET priority = r.priority
            FROM " . self::getInstance()->getTableName() . " AS r
            WHERE i.root_id = r.id AND i.id <> r.id AND i.priority <> r.priority AND i.element_id = " . $elementId . "
            AND i.deleted_at IS NULL");

        $stmt->execute();
    }
}