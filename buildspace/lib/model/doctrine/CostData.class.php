<?php

/**
 * CostData
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 *  
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class CostData extends BaseCostData
{
    public function getProjects(array $projectStatuses)
    {
        $items = DoctrineQuery::create()->select('pivot.project_structure_id')
            ->from('CostDataProject pivot')
            ->where('pivot.cost_data_id = ?', $this->id)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->execute();

        $projectIds = array_column($items, 'project_structure_id');

        if(empty($projectIds) || empty($projectStatuses)) return array();

        $pdo = ProjectMainInformationTable::getInstance()->getConnection()->getDbh();

        $sql = "SELECT DISTINCT p.id AS id, p.priority, p.title, p.created_at, i.status, i.tender_type_id, i.start_date, i.eproject_origin_id, r.country, sr.name AS state, creator.id AS creator_id, cp.name AS creator_name, postContract.published_type AS post_contract_type
            FROM ".ProjectStructureTable::getInstance()->getTableName()." p
            JOIN ".ProjectMainInformationTable::getInstance()->getTableName()." i ON i.project_structure_id = p.id
            JOIN ".RegionsTable::getInstance()->getTableName()." r ON i.region_id = r.id
            JOIN ".SubregionsTable::getInstance()->getTableName()." sr ON sr.region_id = r.id AND i.subregion_id = sr.id
            LEFT JOIN ".PostContractTable::getInstance()->getTableName()." postContract ON postContract.project_structure_id = p.id
            LEFT JOIN ".sfGuardUserTable::getInstance()->getTableName()." creator ON p.created_by = creator.id
            LEFT JOIN ".sfGuardUserProfileTable::getInstance()->getTableName()." cp ON cp.user_id = creator.id
            WHERE i.status IN (".implode(',', $projectStatuses).")
            AND p.id in (".implode(',', $projectIds).")
            AND i.deleted_at IS NULL
            AND p.type = " . ProjectStructure::TYPE_ROOT . " AND p.deleted_at IS NULL ORDER BY p.title ASC";

        $stmt = $pdo->prepare($sql);

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getParticularGroupTotals()
    {
        $assignedParticulars = MasterCostDataParticularAssignedGroupTable::getParticularsByGroup($this->MasterCostData);

        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT mp.id, COALESCE(p.value, 0) as value
        FROM " . MasterCostDataParticularTable::getInstance()->getTableName() . " mp 
        JOIN " . MasterCostDataTable::getInstance()->getTableName() . " mcd on mcd.id = mp.master_cost_data_id
        JOIN " . CostDataTable::getInstance()->getTableName() . " cd on mcd.id = cd.master_cost_data_id
        LEFT JOIN " . CostDataParticularTable::getInstance()->getTableName() . " p ON p.master_cost_data_particular_id = mp.id AND p.cost_data_id = :costDataId
        WHERE cd.id = :costDataId
        AND mp.deleted_at IS NULL");

        $stmt->execute(array( 'costDataId' => $this->id ));

        $values = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $totals = array();

        foreach($assignedParticulars as $group => $particularIds)
        {
            $totals[ $group ] = 0;

            foreach($particularIds as $particularId)
            {
                $totals[ $group ] += $values[ $particularId ];
            }
        }

        return $totals;
    }
}
