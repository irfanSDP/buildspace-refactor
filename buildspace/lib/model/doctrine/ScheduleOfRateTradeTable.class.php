<?php

/**
 * ScheduleOfRateTradeTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ScheduleOfRateTradeTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ScheduleOfRateTradeTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ScheduleOfRateTrade');
    }

    public static function getRecordsByScheduleOfRateAndIds(ScheduleOfRate $scheduleOfRate, array $ids)
    {
        return DoctrineQuery::create()
            ->from('ScheduleOfRateTrade t')
            ->whereIn('t.id', $ids)
            ->andWhere('t.schedule_of_rate_id = ?', array( $scheduleOfRate->id ))
            ->addOrderBy('t.priority ASC')
            ->fetchArray();
    }

    public static function getMaxPriorityByScheduleOfRateId($scheduleOfRateId)
    {
        $queryResult = DoctrineQuery::create()->select('max(e.priority)')
            ->from('ScheduleOfRateTrade e')
            ->where('e.schedule_of_rate_id = ?', $scheduleOfRateId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $queryResult['max'];
    }

    public static function calculateTotalCostForAnalysis($id, $projectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sql = "SELECT COALESCE(SUM(bi.grand_total), 0) FROM
        " . ScheduleOfRateItemTable::getInstance()->getTableName() . " AS i JOIN
        " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS ifc ON i.id = ifc.relation_id JOIN
        " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS bifc ON ifc.id = bifc.schedule_of_rate_item_formulated_column_id JOIN
        " . BillItemTable::getInstance()->getTableName() . " AS bi ON bifc.relation_id = bi.id JOIN
        " . BillElementTable::getInstance()->getTableName() . " AS be ON bi.element_id = be.id JOIN
        " . ProjectStructureTable::getInstance()->getTableName() . " AS s ON be.project_structure_id = s.id
        WHERE i.trade_id = " . $id . " AND s.root_id = " . $projectId . " AND bifc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "'
        AND bifc.final_value <> 0 AND bifc.schedule_of_rate_item_formulated_column_id IS NOT NULL
        AND i.deleted_at IS NULL
        AND ifc.deleted_at IS NULL AND bifc.deleted_at IS NULL AND bi.deleted_at IS NULL AND bi.project_revision_deleted_at IS NULL
        AND be.deleted_at IS NULL AND s.deleted_at IS NULL";

        $stmt = $pdo->prepare($sql);

        $stmt->execute();

        $total = $stmt->fetchColumn();

        return $total;
    }

    /**
     * bulk recalculate item markup costing on trade level
     * @param  [integer] $tradeId
     * @return null
     */
    public static function tradeLevelRecalculateTotalCost($tradeId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        // get item that needed to be recalculated
        $getItemsSql = "SELECT id FROM " . ScheduleOfRateItemTable::getInstance()->getTableName() . "
        WHERE trade_id = " . $tradeId . " AND recalculate_resources_library_status = TRUE AND deleted_at IS NULL";

        $stmt = $pdo->prepare($getItemsSql);
        $stmt->execute();

        $affectedItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        if (count($affectedItemIds) == 0) {
            return;
        }

        $implodedItemIds = implode(', ', $affectedItemIds);

        // get schedule of rate build up rate items
        $getBuildUpRateItems = "SELECT id FROM " . ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName() . "
        WHERE schedule_of_rate_item_id IN (" . $implodedItemIds . ") AND deleted_at IS NULL ORDER BY id ASC";

        $stmt = $pdo->prepare($getBuildUpRateItems);
        $stmt->execute();

        $affectedBuildUpRateItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        if (count($affectedBuildUpRateItemIds) == 0) {
            return;
        }

        ScheduleOfRateBuildUpRateItemTable::recalculateColumnsWithRowLinking($affectedBuildUpRateItemIds);

        $implodedBuildUpRateItemIds = implode(', ', $affectedBuildUpRateItemIds);

        // get number's information
        $getNumberFormulatedColumnSql = "SELECT sorburfc.relation_id, COALESCE(sorburfc.final_value, 1) as final_value
        FROM " . ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName() . " sorburfc
        WHERE sorburfc.relation_id IN (" . $implodedBuildUpRateItemIds . ") AND sorburfc.column_name = '" . ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_NUMBER . "'
        AND sorburfc.deleted_at IS NULL";

        $stmt = $pdo->prepare($getNumberFormulatedColumnSql);
        $stmt->execute();
        $affectedNumberFormulatedColumns = $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP);

        // get constant's information
        $getConstantColumnSql = "SELECT sorburfc.relation_id, COALESCE(sorburfc.final_value, 1) as final_value
        FROM " . ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName() . " sorburfc
        WHERE sorburfc.relation_id IN (" . $implodedBuildUpRateItemIds . ") AND sorburfc.column_name = '" . ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_CONSTANT . "'
        AND sorburfc.deleted_at IS NULL";

        $stmt = $pdo->prepare($getConstantColumnSql);
        $stmt->execute();
        $affectedConstantColumns = $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP);

        // get quantity's information
        $getQuantityColumnSql = "SELECT sorburfc.relation_id, COALESCE(sorburfc.final_value, 0) as final_value
        FROM " . ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName() . " sorburfc
        WHERE sorburfc.relation_id IN (" . $implodedBuildUpRateItemIds . ") AND sorburfc.column_name = '" . ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_QUANTITY . "'
        AND sorburfc.deleted_at IS NULL";

        $stmt = $pdo->prepare($getQuantityColumnSql);
        $stmt->execute();
        $affectedQuantityColumns = $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP);

        // get rate's information
        $getRateColumnSql = "SELECT sorburfc.relation_id, COALESCE(sorburfc.final_value, 0) as final_value
        FROM " . ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName() . " sorburfc
        WHERE sorburfc.relation_id IN (" . $implodedBuildUpRateItemIds . ") AND sorburfc.column_name = '" . ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_RATE . "'
        AND sorburfc.deleted_at IS NULL";

        $stmt = $pdo->prepare($getRateColumnSql);
        $stmt->execute();
        $affectedRateColumns = $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP);

        // get wastage's information
        // get rate's information
        $getWastageColumnSql = "SELECT sorburfc.relation_id, COALESCE(sorburfc.final_value, 0) as final_value
        FROM " . ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName() . " sorburfc
        WHERE sorburfc.relation_id IN (" . $implodedBuildUpRateItemIds . ") AND sorburfc.column_name = '" . ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_WASTAGE . "'
        AND sorburfc.deleted_at IS NULL";

        $stmt = $pdo->prepare($getWastageColumnSql);
        $stmt->execute();
        $affectedWastageColumns = $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP);

        $con = self::getInstance()->getConnection();

        // container to hold the query's string
        $totalCaseStatement      = '';
        $lineTotalCasteStatement = '';

        foreach ($affectedBuildUpRateItemIds as $affectedBuildUpRateItemId) {
            $number = isset( $affectedNumberFormulatedColumns[$affectedBuildUpRateItemId] ) ? $affectedNumberFormulatedColumns[$affectedBuildUpRateItemId][0]['final_value'] : 1;

            $constant = isset( $affectedConstantColumns[$affectedBuildUpRateItemId] ) ? $affectedConstantColumns[$affectedBuildUpRateItemId][0]['final_value'] : 1;

            $quantity = isset( $affectedQuantityColumns[$affectedBuildUpRateItemId] ) ? $affectedQuantityColumns[$affectedBuildUpRateItemId][0]['final_value'] : 0;

            $rate = isset( $affectedRateColumns[$affectedBuildUpRateItemId] ) ? $affectedRateColumns[$affectedBuildUpRateItemId][0]['final_value'] : 0;

            $wastage = isset( $affectedWastageColumns[$affectedBuildUpRateItemId] ) ? $affectedWastageColumns[$affectedBuildUpRateItemId][0]['final_value'] : 0;

            if ($quantity == 0 OR $rate == 0) {
                $total = 0;
            } else {
                $price = $rate * $quantity;
                $total = $price * $constant * $number;
            }

            $markupRate = 0;

            if ($wastage > 0) {
                $wastagePercentage = $wastage / 100;

                $markupRate = $total * $wastagePercentage;
            }

            $lineTotal = $total + $markupRate;

            $totalCaseStatement .= " WHEN " . $affectedBuildUpRateItemId . " THEN (" . $total . ")";
            $lineTotalCasteStatement .= " WHEN " . $affectedBuildUpRateItemId . " THEN (" . $lineTotal . ")";
        }

        // update total and line total
        $con->execute("UPDATE " . ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName() . "
            SET total = (CASE id" . $totalCaseStatement . " END),
            line_total = (CASE id" . $lineTotalCasteStatement . " END),
            updated_at = NOW()
            WHERE id IN (" . $implodedBuildUpRateItemIds . ") AND deleted_at IS NULL");

        // update item's recalculate status to false
        // update total and line total
        $con->execute("UPDATE " . ScheduleOfRateItemTable::getInstance()->getTableName() . "
            SET recalculate_resources_library_status = false, updated_at = NOW()
            WHERE id IN (" . $implodedItemIds . ") AND deleted_at IS NULL");

        // after finished saving all the bill markup item's costing then proceed with calculating summary
        foreach ($affectedItemIds as $affectedItemId) {
            $buildUpRateSummary = Doctrine_Query::create()
                ->from('ScheduleOfRateBuildUpRateSummary sorburs')
                ->select('sorburs.id')
                ->where('sorburs.schedule_of_rate_item_id = ?', $affectedItemId)
                ->limit(1)
                ->fetchOne();

            if ($buildUpRateSummary) {
                $buildUpRateSummary->calculateFinalCost();
                $buildUpRateSummary->free(true);
            }

            unset( $buildUpRateSummary );
        }
    }

    public static function getRecordsAssociatedWithResourceAndScheduleOfRate(Resource $resource, ScheduleOfRate $sor)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare('SELECT DISTINCT sort.id, sort.description, sort.priority
        FROM ' . ScheduleOfRateBuildUpRateResourceTable::getInstance()->getTableName() . ' sorburr
        JOIN ' . ScheduleOfRateItemTable::getInstance()->getTableName() . ' sori ON (sorburr.schedule_of_rate_item_id = sori.id AND sorburr.deleted_at IS NULL)
        JOIN ' . ScheduleOfRateTradeTable::getInstance()->getTableName() . ' sort ON (sori.trade_id = sort.id AND sort.deleted_at IS NULL)
        JOIN ' . ScheduleOfRateTable::getInstance()->getTableName() . ' sor ON (sort.schedule_of_rate_id = sor.id AND sort.deleted_at IS NULL)
        WHERE sor.id = ' . $sor->id . ' AND sor.deleted_at IS NULL
        AND sorburr.resource_library_id = ' . $resource->id . ' AND sorburr.deleted_at IS NULL
        ORDER BY sort.priority ASC');

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getMaxPriorityByLibraryId($scheduleOfRateId)
    {
        $queryResult = DoctrineQuery::create()->select('max(e.priority)')
            ->from('ScheduleOfRateTrade e')
            ->where('e.schedule_of_rate_id = ?', $scheduleOfRateId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $queryResult['max'];
    }

    public static function getScheduleOfRatesWithNoBuildUp(Array $billItemIds, ScheduleOfRateTrade $scheduleOfRateTrade)
    {
        $rates = array();

        if (!empty($billItemIds))
        {
            $pdo = self::getInstance()->getConnection()->getDbh();

            $stmt = $pdo->prepare("SELECT DISTINCT i.id AS id, st.id AS trade_id, i.grand_total AS total, f.final_value AS value, i.priority, i.root_id, i.lft, i.level
            FROM " .BillItemTable::getInstance()->getTableName(). " i
            JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " f ON i.id = f.relation_id
            JOIN ".ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName()." sf ON sf.id = schedule_of_rate_item_formulated_column_id
            JOIN ".ScheduleOfRateItemTable::getInstance()->getTableName()." si ON si.id = sf.relation_id
            JOIN ".ScheduleOfRateTradeTable::getInstance()->getTableName()." st ON st.id = si.trade_id
            WHERE i.id IN (" . implode(',', $billItemIds) . ") AND st.id = ".$scheduleOfRateTrade->id."
            AND f.column_name = '".BillItem::FORMULATED_COLUMN_RATE."' AND f.has_build_up IS FALSE
            AND st.deleted_at IS NULL AND si.deleted_at IS NULL AND sf.deleted_at IS NULL AND f.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL ORDER BY i.priority, i.root_id, i.lft, i.level");

            $stmt->execute();

            $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach($records as $record)
            {
                if(!array_key_exists($record['trade_id'], $rates))
                {
                    $rates[$record['trade_id']] = array();
                }

                if(!array_key_exists($record['id'], $rates))
                {
                    $rates[$record['trade_id']][ $record['id'] ]['rate']  = $record['value'];
                    $rates[$record['trade_id']][ $record['id'] ]['total'] = 0;
                }

                if($rates[$record['trade_id']][ $record['id'] ]['rate'] != $record['value'])
                {
                    $rates[$record['trade_id']][ $record['id'] ]['rate'] = 'multi';
                }

                $rates[$record['trade_id']][ $record['id'] ]['total'] += $record['total'];
            }
        }

        return $rates;
    }

    public static function getScheduleOfRateItemsByProject(ProjectStructure $project, Array $scheduleOfRateTradeIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $data = array();

        if(!empty($scheduleOfRateTradeIds))
        {
            $stmt = $pdo->prepare("SELECT DISTINCT i.id, i.trade_id
            FROM " . ScheduleOfRateItemTable::getInstance()->getTableName() . " AS i
            JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS ifc ON i.id = ifc.relation_id
            JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS bifc ON ifc.id = bifc.schedule_of_rate_item_formulated_column_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS bi ON bifc.relation_id = bi.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS be ON bi.element_id = be.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS s ON be.project_structure_id = s.id
            WHERE s.root_id = " . $project->id . " AND i.trade_id IN ( " . implode(',', $scheduleOfRateTradeIds) . ")
            AND bifc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "'
            AND i.deleted_at IS NULL AND ifc.deleted_at IS NULL AND bifc.deleted_at IS NULL AND bi.project_revision_deleted_at IS NULL
            AND bi.deleted_at IS NULL AND be.deleted_at IS NULL AND s.deleted_at IS NULL");

            $stmt->execute();

            $scheduleOfRateItemIds = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

            $scheduleOfRateItemIdsByTrades = array();

            $totalCostAnalysis = ScheduleOfRateItemTable::calculateTotalCostForAnalysisByScheduleOfRateItemIds(array_keys($scheduleOfRateItemIds), $project);

            $rates = ScheduleOfRateItemTable::getScheduleOfItemRatesByProject(array_keys($scheduleOfRateItemIds), $project);

            foreach($scheduleOfRateItemIds as $scheduleOfRateItemId => $tradeId)
            {
                if(!array_key_exists($tradeId, $scheduleOfRateItemIdsByTrades))
                {
                    $scheduleOfRateItemIdsByTrades[$tradeId] = array();
                }

                $scheduleOfRateItemIdsByTrades[$tradeId][] = $scheduleOfRateItemId;
            }

            foreach($scheduleOfRateItemIdsByTrades as $tradeId => $scheduleOfRateItemIds)
            {
                $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.root_id, p.description, p.type, p.uom_id, p.level, p.priority, t.priority AS trade_priority, p.lft, uom.symbol AS uom_symbol
                FROM " . ScheduleOfRateItemTable::getInstance()->getTableName() . " c
                JOIN " . ScheduleOfRateItemTable::getInstance()->getTableName() . " p ON c.lft BETWEEN p.lft AND p.rgt
                LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
                JOIN " . ScheduleOfRateTradeTable::getInstance()->getTableName(). " t ON t.id = p.trade_id
                WHERE c.root_id = p.root_id AND c.type <> " . ScheduleOfRateItem::TYPE_HEADER . "
                AND c.id IN (" . implode(',', $scheduleOfRateItemIds) . ")
                AND p.trade_id = " . $tradeId . "
                AND c.deleted_at IS NULL AND p.deleted_at IS NULL
                ORDER BY t.priority, p.priority, p.lft, p.level ASC");

                $stmt->execute();

                $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

                foreach($items as $key => $item)
                {
                    $items[$key]['total_qty']  = 0;
                    $items[$key]['total_cost'] = 0;

                    $items[$key]['multi-rate']       = false;
                    $items[$key]['rate-value']       = 0;
                    $items[$key]['rate-final_value'] = 0;

                    foreach($totalCostAnalysis as $record)
                    {
                        if($item['id'] == $record['id'])
                        {
                            $items[$key]['total_qty']  = $record['total_quantity'];
                            $items[$key]['total_cost'] = $record['total_cost'];

                            break;
                        }
                    }

                    foreach($rates as $idx => $rate)
                    {
                        if($item['id'] == $idx)
                        {
                            $items[$key]['multi-rate']       = $rate['multi-rate'];
                            $items[$key]['rate-value']       = $rate['rate-value'];
                            $items[$key]['rate-final_value'] = $rate['rate-final_value'];

                            break;
                        }
                    }
                }

                $data[$tradeId] = $items;
            }
        }

        return $data;
    }

    public static function getProfitFromBillMarkupByScheduleOfRateTrade(Array $billItemIds, ScheduleOfRateTrade $scheduleOfRateTrade)
    {
        $data = array();

        if(!empty($billItemIds))
        {
            $pdo = self::getInstance()->getConnection()->getDbh();

            $stmt = $pdo->prepare("SELECT DISTINCT st.id AS trade_id, i.id, (i.grand_total_after_markup - i.grand_total) AS value, i.priority, i.root_id, i.lft, i.level
            FROM ".BillMarkupSettingTable::getInstance()->getTableName()." m
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON m.project_structure_id = e.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
            JOIN ".BillItemFormulatedColumnTable::getInstance()->getTableName()." f ON i.id = f.relation_id
            JOIN ".ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName()." sf ON sf.id = schedule_of_rate_item_formulated_column_id
            JOIN ".ScheduleOfRateItemTable::getInstance()->getTableName()." si ON si.id = sf.relation_id
            JOIN ".ScheduleOfRateTradeTable::getInstance()->getTableName()." st ON st.id = si.trade_id
            WHERE i.id IN (" . implode(',', $billItemIds) . ") AND st.id = ".$scheduleOfRateTrade->id."
            AND (m.element_markup_enabled IS TRUE OR m.item_markup_enabled IS TRUE) AND i.type <> " . BillItem::TYPE_HEADER . "
            AND f.column_name = '".BillItem::FORMULATED_COLUMN_RATE."'
            AND si.deleted_at IS NULL AND sf.deleted_at IS NULL AND f.deleted_at IS NULL AND st.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            AND e.deleted_at IS NULL AND m.deleted_at IS NULL ORDER BY i.priority, i.root_id, i.lft, i.level");

            $stmt->execute();

            $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

            if(!empty($records))
            {
                foreach($records as $record)
                {
                    if(!array_key_exists($record['trade_id'], $data))
                    {
                        $data[$record['trade_id']] = array();
                    }

                    if(!array_key_exists($record['id'], $data))
                    {
                        $data[$record['trade_id']][ $record['id'] ] = 0;
                    }

                    $data[$record['trade_id']][ $record['id'] ] += $record['value'];
                }
            }
        }

        return $data;
    }

    public static function getCostAnalysisByProject(ProjectStructure $project, Array $tradeIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $scheduleOfRateItemCosts = array();

        if(!empty($tradeIds))
        {
            $stmt = $pdo->prepare("SELECT DISTINCT i.id, i.trade_id
            FROM " . ScheduleOfRateTradeTable::getInstance()->getTableName() . " t
            JOIN " . ScheduleOfRateItemTable::getInstance()->getTableName() . " AS i ON t.id = i.trade_id
            JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS ifc ON i.id = ifc.relation_id
            JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS bifc ON ifc.id = bifc.schedule_of_rate_item_formulated_column_id
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS bi ON bifc.relation_id = bi.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS be ON bi.element_id = be.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS s ON be.project_structure_id = s.id
            WHERE s.root_id = " . $project->id . " AND t.id IN (" . implode(',', $tradeIds) . ")
            AND bifc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND bifc.final_value <> 0
            AND t.deleted_at IS NULL AND i.deleted_at IS NULL AND ifc.deleted_at IS NULL AND bifc.deleted_at IS NULL AND bi.project_revision_deleted_at IS NULL
            AND bi.deleted_at IS NULL AND be.deleted_at IS NULL AND s.deleted_at IS NULL");

            $stmt->execute();

            $scheduleOfRateItemIds = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

            if(!empty($scheduleOfRateItemIds))
            {
                $scheduleOfRateItemIdsByTradeIds = array();

                foreach($scheduleOfRateItemIds as $scheduleOfRateItemId => $tradeId)
                {
                    if(!array_key_exists($tradeId, $scheduleOfRateItemIdsByTradeIds))
                    {
                        $scheduleOfRateItemIdsByTradeIds[$tradeId] = array();
                    }

                    $scheduleOfRateItemIdsByTradeIds[$tradeId][] = $scheduleOfRateItemId;
                }

                foreach($scheduleOfRateItemIdsByTradeIds as $tradeId => $scheduleOfRateItemIds)
                {
                    $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.element_id, p.root_id, p.description, p.type, p.level, p.priority, e.priority AS element_priority, p.lft
                    FROM " . BillItemTable::getInstance()->getTableName() . " c
                    JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS bifc ON c.id = bifc.relation_id
                    JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS ifc ON bifc.schedule_of_rate_item_formulated_column_id = ifc.id
                    JOIN " . BillItemTable::getInstance()->getTableName() . " p ON c.lft BETWEEN p.lft AND p.rgt
                    JOIN " . BillElementTable::getInstance()->getTableName() . " AS e ON p.element_id = e.id
                    JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS s ON e.project_structure_id = s.id
                    WHERE s.root_id = " . $project->id . " AND c.root_id = p.root_id AND c.element_id = p.element_id
                    AND ifc.relation_id IN (" .implode(',', $scheduleOfRateItemIds). ")
                    AND bifc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND bifc.final_value <> 0
                    AND c.project_revision_deleted_at IS NULL AND c.deleted_at IS NULL
                    AND p.project_revision_deleted_at IS NULL AND p.deleted_at IS NULL
                    AND e.deleted_at IS NULL AND ifc.deleted_at IS NULL AND bifc.deleted_at IS NULL AND s.deleted_at IS NULL
                    ORDER BY e.priority, p.priority, p.lft, p.level ASC");

                    $stmt->execute();

                    $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

                    $billItemResourceRates = BillItemTable::getBillItemResourceRates($billItemIds);

                    foreach($scheduleOfRateItemIds as $scheduleOfRateItemId)
                    {
                        $billItemSORNoBuildUpRates = ScheduleOfRateItemTable::getScheduleOfRatesWithNoBuildUp($billItemIds, $scheduleOfRateItemId);

                        $profitFromBillMarkupRecords = BillItemTable::getProfitFromBillMarkupByScheduleOfRateItem($billItemIds, $scheduleOfRateItemId);

                        $itemProfitRates                = array();
                        $itemResourceRatesForComparison = array();
                        $scheduleOfRateItemProfitTotal  = 0;
                        $resourcesTotal                 = array();

                        foreach($billItemResourceRates as $billItemId => $itemResourceRates)
                        {
                            if($itemResourceRates['schedule_of_rate_item_id'] == $scheduleOfRateItemId)
                            {
                                $scheduleOfRateItemProfitTotal += $itemResourceRates['profitRates']['total'];

                                //if same, ignore. if different, multi.
                                $itemProfitRates[] = $itemResourceRates['profitRates']['rate'];

                                if( ! isset( $itemResourceRates['resourceRates'] ) )
                                {
                                    continue;
                                }

                                foreach($itemResourceRates['resourceRates'] as $resourceName => $resourceRates)
                                {
                                    //resourceTotals
                                    //wastageTotals
                                    if( ! array_key_exists($resourceName, $resourcesTotal) )
                                    {
                                        $resourcesTotal[ $resourceName ]['total']        = 0;
                                        $resourcesTotal[ $resourceName ]['wastageTotal'] = 0;
                                    }
                                    $resourcesTotal[ $resourceName ]['total'] += $resourceRates['total'];
                                    $resourcesTotal[ $resourceName ]['wastageTotal'] += $resourceRates['wastageTotal'];

                                    //resourceRates
                                    $itemResourceRatesForComparison[ $resourceName ]['rates'][] = $itemResourceRates['resourceRates'][ $resourceName ]['rate'];

                                    //wastageRates
                                    $itemResourceRatesForComparison[ $resourceName ]['wastageRates'][] = $itemResourceRates['resourceRates'][ $resourceName ]['wastageRate'];
                                }
                            }
                        }

                        $scheduleOfRateItemProfitRate = $itemProfitRates;

                        if( count(array_unique($itemProfitRates)) == 1 )
                        {
                            $scheduleOfRateItemProfitRate = array_shift($itemProfitRates);
                        }

                        $scheduleOfRateItemCosts[$tradeId][ $scheduleOfRateItemId ]['profit']['rate']  = $scheduleOfRateItemProfitRate;
                        $scheduleOfRateItemCosts[$tradeId][ $scheduleOfRateItemId ]['profit']['total'] = $scheduleOfRateItemProfitTotal;
                        $scheduleOfRateItemCosts[$tradeId][ $scheduleOfRateItemId ]['resources']       = $resourcesTotal;

                        foreach($itemResourceRatesForComparison as $resourceName => $resourceRates)
                        {
                            $scheduleOfRateItemResourceRate = $resourceRates['rates'];
                            if( count(array_unique($resourceRates['rates'])) == 1 )
                            {
                                $scheduleOfRateItemResourceRate = array_shift($resourceRates['rates']);
                            }
                            $scheduleOfRateItemCosts[$tradeId][ $scheduleOfRateItemId ]['resources'][ $resourceName ]['rate'] = $scheduleOfRateItemResourceRate;

                            $scheduleOfRateItemWastageResourceRate = $resourceRates['wastageRates'];
                            if( count(array_unique($resourceRates['wastageRates'])) == 1 )
                            {
                                $scheduleOfRateItemWastageResourceRate = array_shift($resourceRates['wastageRates']);
                            }
                            $scheduleOfRateItemCosts[$tradeId][ $scheduleOfRateItemId ]['resources'][ $resourceName ]['wastageRate'] = $scheduleOfRateItemWastageResourceRate;
                        }

                        if(array_key_exists($scheduleOfRateItemId, $billItemSORNoBuildUpRates))
                        {
                            $scheduleOfRateItemCosts[$tradeId][ $scheduleOfRateItemId ]['noBuildUp'] = $billItemSORNoBuildUpRates[$scheduleOfRateItemId];
                        }

                        if(array_key_exists($scheduleOfRateItemId, $profitFromBillMarkupRecords))
                        {
                            $scheduleOfRateItemCosts[$tradeId][$scheduleOfRateItemId]['profitFromBillMarkup'] = $profitFromBillMarkupRecords[$scheduleOfRateItemId];
                        }
                    }
                }
            }
        }

        return $scheduleOfRateItemCosts;
    }
}