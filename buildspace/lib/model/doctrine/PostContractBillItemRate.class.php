<?php

/**
 * PostContractBillItemRate
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PostContractBillItemRate extends BasePostContractBillItemRate
{

	const PRELIM_RATE_COLUMN_NAME                   = 'rate';

	const PRELIM_INITIAL_CLAIM_COLUMN_NAME          = 'initial';
	const PRELIM_RECURRING_CLAIM_COLUMN_NAME        = 'recurring';
	const PRELIM_TIMEBASED_CLAIM_COLUMN_NAME        = 'timeBased';
	const PRELIM_WORKBASED_CLAIM_COLUMN_NAME        = 'workbased';
	const PRELIM_FINAL_CLAIM_COLUMN_NAME            = 'final';

	const PRELIM_CLAIM_PERCENTAGE_FIELD_EXT_NAME    = 'percentage';
	const PRELIM_CLAIM_AMOUNT_FIELD_EXT_NAME        = 'amount';

	const REMEASUREMENT_FILTER_BY_ALL_ITEMS         = 'allItems';
	const REMEASUREMENT_FILTER_BY_PROVISIONAL_ITEMS = 'provisionalItems';

	public function save(Doctrine_Connection $conn = null)
	{
		parent::save();

		/** Update Total PerUnit **/
		$pdo = $this->getTable()->getConnection()->getDbh();

		$sql = "UPDATE ".PostContractBillItemTypeTable::getInstance()->getTableName()."
			SET total_per_unit = (ROUND(qty_per_unit * :rate ,2)), grand_total = (ROUND(total_quantity * :rate ,2))
			WHERE (bill_item_id = :bill_item_id)";

		$stmt = $pdo->prepare($sql);
		$stmt->execute(array('bill_item_id' => $this->bill_item_id, 'rate' => $this->rate));

		/* Update Grand Total */
		$sql = "UPDATE ".PostContractBillItemRateTable::getInstance()->getTableName()."
			SET grand_total = (
				SELECT ROUND(COALESCE(SUM(type.total_per_unit),0) ,2) AS grand_total
				FROM ".PostContractBillItemTypeTable::getInstance()->getTableName()." type
				WHERE type.bill_item_id = :bill_item_id
			)
			WHERE bill_item_id = :bill_item_id";

		$stmt = $pdo->prepare($sql);
		$stmt->execute(array('bill_item_id' => $this->bill_item_id));

		// get item's recurring total
		$recurringTotal = $this->BillItem->grand_total_quantity * $this->rate;

		// run it when updating item's rate
		$claimColumns = array('PreliminariesInitialClaim', 'PreliminariesFinalClaim');

		foreach ( $claimColumns as $claimColumn )
		{
			if ( $claimRecord = Doctrine_Core::getTable($claimColumn)->findOneBy('post_contract_bill_item_rate_id', $this->id) )
			{
				$claimAmount = ($recurringTotal == 0) ? 0 : ($claimRecord->percentage / 100) * $recurringTotal;

				$claimRecord->amount = $claimAmount;
				$claimRecord->save();
			}
		}
	}

}
