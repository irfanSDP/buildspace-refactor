<?php

/**
 * ScheduleOfQuantityBillItemXrefTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ScheduleOfQuantityBillItemXrefTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ScheduleOfQuantityBillItemXrefTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ScheduleOfQuantityBillItemXref');
    }

    public static function getByRelationIdsAndType($scheduleOfQuantityItemId, $billItemId, $billColumnSettingId, $type, $hydrate=null)
    {
        $query = self::getInstance()
            ->createQuery('x')->select('x.*')
            ->where('x.schedule_of_quantity_item_id = ?', $scheduleOfQuantityItemId)
            ->andWhere('x.bill_item_id = ?', $billItemId)
            ->andWhere('x.bill_column_setting_id = ?', $billColumnSettingId)
            ->andWhere('x.type = ?', $type);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getSelectedItemsBuildUpQuantity(ProjectStructure $project, $billColumnSettings, $billItems)
    {
        // need to get SoQ if available, will check for linked item(s) first
        // then only query item(s) and hierarchy
        // will query item(s) measurement as well

        $pdo                          = self::getInstance()->getConnection()->getDbh();
        $itemIds                      = array();
        $itemsData                    = array();
        $soqItemIds                   = array();
        $manualBuildUpQuantityItems   = array();
        $importedBuildUpQuantityItems = array();
        $formulatedColumns            = array();

        foreach ( $billItems as $billItem )
        {
            $itemIds[$billItem['id']] = $billItem['id'];

            unset($billItem);
        }

        unset($billItems);

        if ( count($itemIds) == 0 )
        {
            return array($itemsData, array(), array(), array());
        }

        // will get item(s) and formulated column base on bill column setting
        foreach ( $billColumnSettings as $billColumnSetting )
        {
            $type = $billColumnSetting->use_original_quantity ? BillBuildUpQuantityItem::QUANTITY_PER_UNIT_ORIGINAL : BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT;

            $stmt = $pdo->prepare("SELECT DISTINCT xref.bill_item_id, p.id, p.description, p.type, p.lft,
            p.level, p.priority, p.identifier_type, p.uom_id AS uom_id, uom.symbol AS uom_symbol
            FROM ".ScheduleOfQuantityItemTable::getInstance()->getTableName()." c
            JOIN ".ScheduleOfQuantityItemTable::getInstance()->getTableName()." p ON c.lft BETWEEN p.lft AND p.rgt
            JOIN ".ScheduleOfQuantityBillItemXrefTable::getInstance()->getTableName()." xref ON xref.schedule_of_quantity_item_id = c.id
            LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
            JOIN ".ScheduleOfQuantityTradeTable::getInstance()->getTableName()." trade ON p.schedule_of_quantity_trade_id = trade.id
            JOIN ".ScheduleOfQuantityTable::getInstance()->getTableName()." soq ON trade.schedule_of_quantity_id = soq.id
            WHERE xref.bill_item_id IN (".implode(',', $itemIds).")
            AND xref.bill_column_setting_id = ".$billColumnSetting['id']." AND xref.type = ".$type."
            AND c.root_id = p.root_id AND c.type <> ".BillItem::TYPE_HEADER."
            AND c.schedule_of_quantity_trade_id = p.schedule_of_quantity_trade_id
            AND c.deleted_at IS NULL AND p.deleted_at IS NULL
            AND soq.project_structure_id = ".$project->id." AND trade.deleted_at IS NULL AND soq.deleted_at IS NULL
            ORDER BY p.priority, p.lft, p.level ASC");

            $stmt->execute();

            $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach ( $items as $item )
            {
                $item['is_soq_item'] = true;

                $itemsData[$billColumnSetting['id']][$item['bill_item_id']][] = $item;

                $soqItemIds[] = $item['id'];

                unset($item);
            }

            unset($billColumnSetting, $items);
        }

        // get SoQ's related information
        if ( count($soqItemIds) > 0 )
        {
            $stmt = $pdo->prepare("SELECT ifc.relation_id, ifc.final_value, ifc.value, ifc.linked, ifc.has_build_up
            FROM ".ScheduleOfQuantityItemFormulatedColumnTable::getInstance()->getTableName()." ifc JOIN
            ".ScheduleOfQuantityItemTable::getInstance()->getTableName()." i ON i.id = ifc.relation_id
            WHERE i.id IN (".implode(',', $soqItemIds).") AND ifc.column_name = '".ScheduleOfQuantityItem::FORMULATED_COLUMN_QUANTITY."' AND i.deleted_at IS NULL
            AND ifc.deleted_at IS NULL AND ifc.final_value <> 0");

            $stmt->execute();

            $itemFormulatedColumns = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach($itemFormulatedColumns as $itemFormulatedColumn)
            {
                if(!array_key_exists($itemFormulatedColumn['relation_id'], $formulatedColumns))
                {
                    $formulatedColumns[$itemFormulatedColumn['relation_id']] = array();
                }

                array_push($formulatedColumns[$itemFormulatedColumn['relation_id']], $itemFormulatedColumn);

                unset($itemFormulatedColumn);
            }

            $manualBuildUpQuantityItems   = self::getBuildUpQuantityItems($soqItemIds, true);
            $importedBuildUpQuantityItems = self::getBuildUpQuantityItems($soqItemIds);
        }

        return array($itemsData, $formulatedColumns, $manualBuildUpQuantityItems, $importedBuildUpQuantityItems);
    }

    /**
     * @param array $soqItemIds
     * @param bool  $editable
     * @return Doctrine_Collection|Doctrine_Collection_OnDemand|int|mixed
     */
    private static function getBuildUpQuantityItems(array $soqItemIds, $editable = false)
    {
        $data = array();

        $importedBuildUpQuantityItems = DoctrineQuery::create()
        ->select('i.id, i.description, i.sign, i.total, i.schedule_of_quantity_item_id AS relation_id, ifc.column_name, ifc.value, ifc.final_value')
        ->from('ScheduleOfQuantityBuildUpItem i')
        ->leftJoin('i.FormulatedColumns ifc')
        ->whereIn('i.schedule_of_quantity_item_id', $soqItemIds)
        ->andWhere('i.can_edit = ?', $editable)
        ->addOrderBy('i.priority ASC')
        ->fetchArray();

        foreach ( $importedBuildUpQuantityItems as $importedBuildUpQuantityItem )
        {
            $data[$importedBuildUpQuantityItem['relation_id']][] = $importedBuildUpQuantityItem;

            unset($importedBuildUpQuantityItem);
        }

        unset($importedBuildUpQuantityItems);

        return $data;
    }
}