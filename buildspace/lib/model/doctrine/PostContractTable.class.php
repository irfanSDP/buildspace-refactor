<?php

/**
 * PostContractTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PostContractTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PostContractTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PostContract');
    }

    public static function cloneBillItemRatesByProject(PostContract $postContract, $withoutNotListedItem = false )
    {
        $sfBillReferenceReset = new sfBillReferenceReset($postContract, $withoutNotListedItem);
        
        $sfBillReferenceReset->process();
    }

    public static function cloneStandardClaimRevision($postContract, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $previousVersion = PostContractClaimRevisionTable::getPreviousProjectRevision($postContract, $revision->version);

        $stmt = $pdo->prepare("INSERT INTO ".PostContractStandardClaimTable::getInstance()->getTableName()."
            (revision_id, claim_type_ref_id, bill_item_id, up_to_date_amount, up_to_date_percentage, up_to_date_qty)
            SELECT ".$revision->id." AS revision_id, c.claim_type_ref_id, c.bill_item_id, c.up_to_date_amount, c.up_to_date_percentage, c.up_to_date_qty
            FROM ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." type_ref
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." c ON c.claim_type_ref_id = type_ref.id
            WHERE type_ref.post_contract_id = ".$postContract->id." AND c.revision_id = ".$previousVersion['id']);

        $stmt->execute(array());
    }

    public static function getTotalClaimRateGroupByElementAndTypeRef( $billId, $revision, $postContractId, $typeIdsFiltered = array() )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sqlFilterByTypeRef = null;

        foreach ( $typeIdsFiltered as $key => $typeId )
        {
            $sqlFilterByTypeRef .= " pctr.bill_column_setting_id = ".$typeId[0]." AND pctr.counter = ".$typeId[1];

            if(count($typeIdsFiltered) > 1 && $key != (count($typeIdsFiltered) -1))
            {
                $sqlFilterByTypeRef .= " OR ";
            }
        }

        $sqlElementTotalPerUnit = "SELECT element.id AS element_id, pctr.id AS claim_type_ref_id, COALESCE(SUM(pt.total_per_unit),0) AS total_per_unit
            FROM ".PostContractBillItemRateTable::getInstance()->getTableName()." pi
            JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." pctr ON pctr.post_contract_id = pi.post_contract_id
            JOIN ".BillItemTable::getInstance()->getTableName()." i on i.id = pi.bill_item_id
            JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON element.id = i.element_id
            JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pt ON pt.post_contract_id = pi.post_contract_id AND pt.bill_item_id = i.id AND pt.bill_column_setting_id = pctr.bill_column_setting_id
            WHERE element.project_structure_id = ".$billId." AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            AND pt.total_per_unit <> 0
            AND pt.include IS TRUE AND pi.post_contract_id = ".$postContractId;

        if(isset($sqlFilterByTypeRef))
        {
            $sqlElementTotalPerUnit .= " AND (".$sqlFilterByTypeRef.") ";
        }

        $sqlElementTotalPerUnit .= "GROUP BY pctr.id, element.id ORDER BY element.id";

        $stmt = $pdo->prepare($sqlElementTotalPerUnit);

        $stmt->execute(array());

        $elementTotalPerUnits =  $stmt->fetchAll(PDO::FETCH_ASSOC);

        $sqlClaims = "SELECT d.new_name, d.counter, cs.name AS bill_column_name, s.element_id, s.bill_column_setting_id, s.claim_type_ref_id,
        s.prev_amount , s.up_to_date_amount, s.up_to_date_qty, s.current_amount
        FROM(
            SELECT element.id AS element_id, pctr.bill_column_setting_id, cr.claim_type_ref_id, COALESCE(SUM(pcr.up_to_date_amount),0) AS prev_amount ,
            COALESCE(SUM(cr.up_to_date_amount),0) AS up_to_date_amount, COALESCE(SUM(cr.up_to_date_qty),0) AS up_to_date_qty,
            COALESCE(SUM(cr.current_amount),0) AS current_amount
            FROM ".PostContractBillItemRateTable::getInstance()->getTableName()." pi
            JOIN ".BillItemTable::getInstance()->getTableName()." i on i.id = pi.bill_item_id
            JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON element.id = i.element_id
            LEFT JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." pr ON pr.post_contract_id = ".$revision['post_contract_id']." AND pr.version = (".$revision['version']." - 1)
            JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." pctr ON pctr.post_contract_id = pi.post_contract_id
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." cr ON cr.bill_item_id = pi.bill_item_id AND cr.claim_type_ref_id = pctr.id AND cr.revision_id = ".$revision['id']."
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." pcr ON pcr.bill_item_id = pi.bill_item_id AND pcr.claim_type_ref_id = pctr.id AND pcr.revision_id = pr.id
            WHERE element.project_structure_id = ".$billId." AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            AND cr.up_to_date_amount <> 0 AND pi.post_contract_id = ".$postContractId;

        if(isset($sqlFilterByTypeRef))
        {
            $sqlClaims .= " AND (".$sqlFilterByTypeRef.") ";
        }

        $sqlClaims .= "GROUP BY pctr.bill_column_setting_id, cr.claim_type_ref_id, element.id
            ORDER BY pctr.bill_column_setting_id, cr.claim_type_ref_id, element.id
        ) s
        JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." d ON s.claim_type_ref_id = d.id
        JOIN ".BillColumnSettingTable::getInstance()->getTableName()." cs ON cs.id = d.bill_column_setting_id";

        $stmt = $pdo->prepare($sqlClaims);

        $stmt->execute(array());

        $results =  $stmt->fetchAll(PDO::FETCH_ASSOC);

        $records = array();

        foreach($results as $data)
        {
            $key = $data['bill_column_setting_id'].'-'.$data['claim_type_ref_id'].'-'.$data['element_id'];

            $records[$key] = $data;

            $arrIt = new RecursiveIteratorIterator(new RecursiveArrayIterator($elementTotalPerUnits));
            $elementUpToDateAmount = array();

            foreach ($arrIt as $sub)
            {
                $subArray = $arrIt->getSubIterator();
                if(!isset($elementUpToDateAmount[$subArray['element_id']]))
                    $elementUpToDateAmount[$subArray['element_id']] = $subArray['total_per_unit'];

                if ($subArray['element_id'] === $data['element_id'] && $subArray['claim_type_ref_id'] == $data['claim_type_ref_id'])
                {
                    $elementTotalPerUnit = iterator_to_array($subArray);

                    $records[$key]['total_per_unit']        = $elementTotalPerUnit['total_per_unit'];
                    $records[$key]['prev_percentage']       = ($data['prev_amount'] / $elementTotalPerUnit['total_per_unit']) * 100;
                    $records[$key]['up_to_date_percentage'] = ($data['up_to_date_amount'] / $elementTotalPerUnit['total_per_unit']) * 100;
                    $records[$key]['current_percentage']    = ($data['current_amount'] / $elementTotalPerUnit['total_per_unit']) * 100;
                }
            }

            $records[$key]['total_up_to_date_amount'] = array_sum($elementUpToDateAmount);
        }

        return $records;
    }

    public static function getTotalClaimRateGroupByElement( $billId, $typeRef, $revision, $postContractId )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT element.id, COALESCE(SUM(pcr.up_to_date_amount),0) AS prev_amount ,
            COALESCE(SUM(cr.up_to_date_amount),0) AS up_to_date_amount, COALESCE(SUM(cr.up_to_date_qty),0) AS up_to_date_qty,
            COALESCE(SUM(cr.current_amount),0) AS current_amount, COALESCE(SUM(pt.total_per_unit),0) AS total_per_unit,
            COALESCE(SUM(icr.up_to_date_amount),0) AS imported_up_to_date_amount
            FROM ".PostContractBillItemRateTable::getInstance()->getTableName()." pi
            LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i on i.id = pi.bill_item_id
            LEFT JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON element.id = i.element_id
            LEFT JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." pr ON pr.post_contract_id = ".$revision['post_contract_id']." AND pr.version = (".$revision['version']." - 1)
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." cr ON cr.bill_item_id = pi.bill_item_id AND cr.claim_type_ref_id = ".$typeRef->id." AND cr.revision_id = ".$revision['id']."
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." pcr ON pcr.bill_item_id = pi.bill_item_id AND pcr.claim_type_ref_id = ".$typeRef->id." AND pcr.revision_id = pr.id
            LEFT JOIN ".PostContractImportedStandardClaimTable::getInstance()->getTableName()." icr ON icr.bill_item_id = pi.bill_item_id AND icr.claim_type_ref_id = ".$typeRef->id." AND icr.revision_id = ".$revision['id']."
            LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pt ON pt.post_contract_id = pi.post_contract_id AND pt.bill_item_id = pi.bill_item_id AND pt.bill_column_setting_id = ".$typeRef->bill_column_setting_id."
            WHERE element.project_structure_id = ".$billId." AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            AND pt.include IS TRUE AND pi.post_contract_id = ".$postContractId." GROUP BY element.id ORDER BY element.id");

        $stmt->execute(array());

        $records =  $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        foreach($records as $key => $record)
        {
            if($record[0]['total_per_unit'] != 0)
            {
                $records[$key][0]['prev_percentage']       = ($record[0]['prev_amount'] / $record[0]['total_per_unit']) * 100;
                $records[$key][0]['up_to_date_percentage'] = ($record[0]['up_to_date_amount'] / $record[0]['total_per_unit']) * 100;
                $records[$key][0]['current_percentage']    = ($record[0]['current_amount'] / $record[0]['total_per_unit']) * 100;
            }
            else
            {
                $records[$key][0]['prev_percentage']       = 0;
                $records[$key][0]['up_to_date_percentage'] = 0;
                $records[$key][0]['current_percentage']    = 0;
            }
        }

        return $records;
    }

    public static function getTotalClaimRateByTypeAndElementIds( $billId, $elementIds, $typeRef, $revision, $postContractId )
    {
        $pdo     = self::getInstance()->getConnection()->getDbh();
        $sqlCond = (count($elementIds)) ? "AND element.id IN (" . implode(',', $elementIds) . ")" : '';

        $data = array(
            'prev_amount'       => 0,
            'up_to_date_amount' => 0,
            'up_to_date_qty'    => 0,
            'current_amount'    => 0,
            'total_per_unit'    => 0,
        );

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(pcr.up_to_date_amount),0) AS prev_amount , COALESCE(ROUND(SUM(pcr.up_to_date_amount) / SUM(pt.total_per_unit) * 100 ,2),0) AS prev_percentage,
        COALESCE(SUM(cr.up_to_date_amount),0) AS up_to_date_amount, COALESCE(ROUND(SUM(cr.up_to_date_amount) / SUM(pt.total_per_unit) * 100 ,2),0) AS up_to_date_percentage, COALESCE(SUM(cr.up_to_date_qty),0) AS up_to_date_qty,
        COALESCE(SUM(cr.current_amount),0) AS current_amount, COALESCE(ROUND(SUM(cr.current_amount) / SUM(pt.total_per_unit) * 100 ,2),0) AS current_percentage, COALESCE(SUM(pt.total_per_unit),0) AS total_per_unit
        FROM ".PostContractBillItemRateTable::getInstance()->getTableName()." pi
        LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i on i.id = pi.bill_item_id
        LEFT JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON element.id = i.element_id
        LEFT JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." pr ON pr.post_contract_id = ".$revision['post_contract_id']." AND pr.version = (".$revision['version']." - 1)
        LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." cr ON cr.bill_item_id = pi.bill_item_id AND cr.claim_type_ref_id = ".$typeRef->id." AND cr.revision_id = ".$revision['id']."
        LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." pcr ON pcr.bill_item_id = pi.bill_item_id AND pcr.claim_type_ref_id = ".$typeRef->id." AND pcr.revision_id = pr.id
        LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pt ON pt.post_contract_id = pi.post_contract_id AND pt.bill_item_id = pi.bill_item_id AND pt.bill_column_setting_id = ".$typeRef->bill_column_setting_id."
        WHERE element.project_structure_id = ".$billId." ".$sqlCond." AND pt.include IS TRUE AND pi.post_contract_id = ".$postContractId);

        $stmt->execute(array());

        $typeRefToClaims = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $typeRefToClaims as $typeRefToClaim )
        {
            $data['prev_amount']       += $typeRefToClaim['prev_amount'];
            $data['up_to_date_amount'] += $typeRefToClaim['up_to_date_amount'];
            $data['up_to_date_qty']    += $typeRefToClaim['up_to_date_qty'];
            $data['current_amount']    += $typeRefToClaim['current_amount'];
            $data['total_per_unit']    += $typeRefToClaim['total_per_unit'];

            unset($typeRefToClaim);
        }

        $data['prev_percentage']       = ($data['prev_amount'] == 0) ? 0 : Utilities::percent($data['prev_amount'], $data['total_per_unit']);
        $data['up_to_date_percentage'] = ($data['up_to_date_amount'] == 0) ? 0 : Utilities::percent($data['up_to_date_amount'], $data['total_per_unit']);
        $data['current_percentage']    = ($data['current_amount'] == 0) ? 0 : Utilities::percent($data['current_amount'], $data['total_per_unit']);

        return $data;
    }

    public static function getTotalClaimRateGroupByElementAndItemIds( $billId, $itemIds, $typeRef, $revision, $postContractId )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT element.id, COALESCE(SUM(pcr.up_to_date_amount),0) AS prev_amount , COALESCE(AVG(pcr.up_to_date_percentage),0) AS prev_percentage,
            COALESCE(SUM(cr.up_to_date_amount),0) AS up_to_date_amount, COALESCE(AVG(cr.up_to_date_percentage),0) AS up_to_date_percentage, COALESCE(SUM(cr.up_to_date_qty),0) AS up_to_date_qty,
            COALESCE(SUM(cr.current_amount),0) AS current_amount, COALESCE(AVG(cr.current_percentage),0) AS current_percentage, COALESCE(SUM(pt.total_per_unit),0) AS total_per_unit
            FROM ".PostContractBillItemRateTable::getInstance()->getTableName()." pi
            LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i on i.id = pi.bill_item_id
            LEFT JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON element.id = i.element_id
            LEFT JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." pr ON pr.post_contract_id = ".$revision['post_contract_id']." AND pr.version = (".$revision['version']." - 1)
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." cr ON cr.bill_item_id = pi.bill_item_id AND cr.claim_type_ref_id = ".$typeRef->id." AND cr.revision_id = ".$revision['id']."
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." pcr ON pcr.bill_item_id = pi.bill_item_id AND pcr.claim_type_ref_id = ".$typeRef->id." AND pcr.revision_id = pr.id
            LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pt ON pt.post_contract_id = pi.post_contract_id AND pt.bill_item_id = pi.bill_item_id AND pt.bill_column_setting_id = ".$typeRef->bill_column_setting_id."
            WHERE element.project_structure_id = ".$billId." AND element.deleted_at IS NULL AND i.id IN (".implode(',', $itemIds).") AND pt.include IS TRUE
            AND pi.post_contract_id = ".$postContractId." GROUP BY element.id ORDER BY element.id");

        $stmt->execute(array());

        return $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);
    }

    public static function getTotalPerUnitGroupByElement( $billId, $billColumnSettingId, $postContractId )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT element.id, COALESCE(SUM(pt.total_per_unit),0) AS total_per_unit
            FROM ".PostContractBillItemRateTable::getInstance()->getTableName()." pi
            LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i on i.id = pi.bill_item_id
            LEFT JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON element.id = i.element_id
            LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pt ON pt.post_contract_id = pi.post_contract_id AND pt.bill_item_id = pi.bill_item_id AND pt.bill_column_setting_id = ".$billColumnSettingId."
            WHERE element.project_structure_id = ".$billId." AND element.deleted_at IS NULL
            AND pt.include IS TRUE AND pi.post_contract_id = ".$postContractId." GROUP BY element.id ORDER BY element.id");

        $stmt->execute(array());

        return $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);
    }

    public static function getTotalClaimRateByElementId( $elementId, $typeRef, $revision, $postContractId )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare( "SELECT element.id, ROUND(COALESCE(SUM(pcr.up_to_date_amount),0),2) AS prev_amount , ROUND((COALESCE(SUM(pcr.up_to_date_amount),0) / SUM(pt.total_per_unit) * 100),2) AS prev_percentage,
            ROUND(COALESCE(SUM(cr.up_to_date_amount),0),2) AS up_to_date_amount, ROUND((COALESCE(SUM(cr.up_to_date_amount),0) / SUM(pt.total_per_unit) * 100),2) AS up_to_date_percentage, ROUND(COALESCE(SUM(cr.up_to_date_qty),0),2) AS up_to_date_qty,
            ROUND(COALESCE(SUM(cr.current_amount),0),2) AS current_amount, ROUND((COALESCE(SUM(cr.current_amount),0) / SUM(pt.total_per_unit) * 100),2) AS current_percentage, ROUND(COALESCE(SUM(pt.total_per_unit),0),2) AS total_per_unit
            FROM ".PostContractBillItemRateTable::getInstance()->getTableName()." pi
            LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i on i.id = pi.bill_item_id
            LEFT JOIN ".BillElementTable::getInstance()->getTableName()." AS element ON element.id = i.element_id
            LEFT JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." pr ON pr.post_contract_id = ".$revision['post_contract_id']." AND pr.version = (".$revision['version']." - 1)
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." cr ON cr.bill_item_id = pi.bill_item_id AND cr.claim_type_ref_id = ".$typeRef['id']." AND cr.revision_id = ".$revision['id']."
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." pcr ON pcr.bill_item_id = pi.bill_item_id AND pcr.claim_type_ref_id = ".$typeRef['id']." AND pcr.revision_id = pr.id
            LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pt ON pt.post_contract_id = pi.post_contract_id AND pt.bill_item_id = pi.bill_item_id AND pt.bill_column_setting_id = ".$typeRef['bill_column_setting_id']."
            WHERE element.id = ".$elementId." AND pt.include IS TRUE AND pi.post_contract_id = ".$postContractId." GROUP BY element.id ORDER BY element.id");

        $stmt->execute(array());

        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    public static function getTotalClaimRateGroupByTypeRef( $billId, $revision, $postContractId )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT type_ref.id, COALESCE(SUM(cr.up_to_date_amount),0) AS up_to_date_amount, COALESCE(AVG(cr.up_to_date_percentage),0) AS up_to_date_percentage,
            COALESCE(SUM(cr.up_to_date_qty),0) AS up_to_date_qty, COALESCE(SUM(pt.total_per_unit),0) AS total_per_unit,
            COALESCE(SUM(icr.up_to_date_amount),0) AS imported_up_to_date_amount
            FROM ".BillColumnSettingTable::getInstance()->getTableName()." cs
            LEFT JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." type_ref ON type_ref.bill_column_setting_id = cs.id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON p.id = cs.project_structure_id
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON e.project_structure_id = p.id
            JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." cr ON cr.claim_type_ref_id = type_ref.id AND cr.revision_id = ".$revision['id']." AND cr.bill_item_id = i.id
            LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pt ON pt.post_contract_id = type_ref.post_contract_id AND pt.bill_column_setting_id = type_ref.bill_column_setting_id AND pt.bill_item_id = cr.bill_item_id
            LEFT JOIN ".PostContractImportedStandardClaimTable::getInstance()->getTableName()." icr ON icr.claim_type_ref_id = type_ref.id AND icr.revision_id = ".$revision['id']." AND icr.bill_item_id = i.id
            WHERE cs.project_structure_id = ".$billId." AND cs.deleted_at IS NULL AND type_ref.post_contract_id = ".$postContractId." GROUP BY type_ref.id ORDER BY type_ref.id");

        $stmt->execute(array());

        return $stmt->fetchAll(PDO::FETCH_GROUP);
    }

    public static function getTotalClaimRateGroupByBillColumnSetting( $billId, $revision, $postContractId )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT cs.id, COALESCE(SUM(cr.up_to_date_amount),0) AS up_to_date_amount, COALESCE(AVG(cr.up_to_date_percentage),0) AS up_to_date_percentage,
            COALESCE(SUM(cr.up_to_date_qty),0) AS up_to_date_qty, COALESCE(SUM(pt.total_per_unit),0) AS total_per_unit
            FROM ".BillColumnSettingTable::getInstance()->getTableName()." cs
            LEFT JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." type_ref ON type_ref.bill_column_setting_id = cs.id
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." cr ON cr.claim_type_ref_id = type_ref.id AND cr.revision_id = ".$revision['id']."
            LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pt ON pt.post_contract_id = type_ref.post_contract_id AND pt.bill_column_setting_id = type_ref.bill_column_setting_id AND pt.bill_item_id = cr.bill_item_id
            WHERE cs.project_structure_id = ".$billId." AND cs.deleted_at IS NULL AND type_ref.post_contract_id = ".$postContractId." GROUP BY cs.id ORDER BY cs.id");

        $stmt->execute(array());

        return $stmt->fetchAll(PDO::FETCH_GROUP);
    }

    public static function getUpToDateAmountGroupByBills(ProjectStructure $project, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT bill.id, ROUND(COALESCE(SUM(cr.up_to_date_amount),0),2) AS up_to_date_amount
            FROM  ".ProjectStructureTable::getInstance()->getTableName()." bill
            JOIN ".BillTypeTable::getInstance()->getTableName()." bill_type ON bill.id = bill_type.project_structure_id
            JOIN ".BillElementTable::getInstance()->getTableName()." element ON bill_type.project_structure_id = element.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = element.id
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." cr ON cr.bill_item_id = i.id
            WHERE bill.root_id = ".$project->id." AND bill.type = ".ProjectStructure::TYPE_BILL."
            AND bill_type.type <> ".BillType::TYPE_PRELIMINARY."
            AND cr.revision_id = ".$revision['id']."
            AND bill.deleted_at IS NULL AND bill_type.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            GROUP BY bill.id
        ");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getImportedUpToDateAmountGroupByBills(ProjectStructure $project, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT bill.id, ROUND(COALESCE(SUM(icr.up_to_date_amount),0),2) AS up_to_date_amount
            FROM  ".ProjectStructureTable::getInstance()->getTableName()." bill
            JOIN ".BillTypeTable::getInstance()->getTableName()." bill_type ON bill.id = bill_type.project_structure_id
            JOIN ".BillElementTable::getInstance()->getTableName()." element ON bill_type.project_structure_id = element.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = element.id
            LEFT JOIN ".PostContractImportedStandardClaimTable::getInstance()->getTableName()." icr ON icr.bill_item_id = i.id
            WHERE bill.root_id = ".$project->id." AND bill.type = ".ProjectStructure::TYPE_BILL."
            AND bill_type.type <> ".BillType::TYPE_PRELIMINARY."
            AND icr.revision_id = ".$revision['id']."
            AND bill.deleted_at IS NULL AND bill_type.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            GROUP BY bill.id
        ");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getUpToDateAmountByBillId($billId, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT element.project_structure_id, ROUND(COALESCE(SUM(cr.up_to_date_amount),0),2) AS up_to_date_amount
            FROM ".BillElementTable::getInstance()->getTableName()." element
            JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = element.id
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." cr ON cr.bill_item_id = i.id
            WHERE element.project_structure_id = ".$billId."
            AND cr.revision_id = ".$revision['id']."
            AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            GROUP BY element.project_structure_id
        ");

        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        
        return $result['up_to_date_amount'];
    }

    public static function getOverallTotalGroupByBills(ProjectStructure $project)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT bill.id, ROUND(COALESCE(SUM(pi.grand_total),0),2) AS grand_total
            FROM ".ProjectStructureTable::getInstance()->getTableName()." bill
            JOIN ".BillTypeTable::getInstance()->getTableName()." bill_type ON bill.id = bill_type.project_structure_id
            JOIN ".BillElementTable::getInstance()->getTableName()." element ON bill_type.project_structure_id = element.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = element.id
            LEFT JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." pi ON pi.bill_item_id = i.id
            WHERE bill.root_id = ".$project->id." AND bill.type = ".ProjectStructure::TYPE_BILL."
            AND bill_type.type <> ".BillType::TYPE_PRELIMINARY."
            AND bill.deleted_at IS NULL AND bill_type.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            GROUP BY bill.id
        ");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);  
    }

    public static function getOverallTotalByBillId($billId, $revision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT element.project_structure_id, ROUND(COALESCE(SUM(pi.grand_total),0),2) AS grand_total
            FROM ".BillElementTable::getInstance()->getTableName()." element
            JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = element.id
            LEFT JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." pi ON pi.bill_item_id = i.id
            WHERE element.project_structure_id = ".$billId."
            AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            GROUP BY element.project_structure_id
        ");

        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        return $result['grand_total'];   
    }

    public static function getOverallTotalByProjectId($projectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(pi.grand_total),0),2) AS grand_total
            FROM ".ProjectStructureTable::getInstance()->getTableName()." bill 
            JOIN ".BillElementTable::getInstance()->getTableName()." element ON bill.id = element.project_structure_id
            JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = element.id AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            LEFT JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." pi ON pi.bill_item_id = i.id
            WHERE bill.root_id = ".$projectId." AND bill.deleted_at IS NULL
            AND element.deleted_at IS NULL");

        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        return $result['grand_total'];
    }
}