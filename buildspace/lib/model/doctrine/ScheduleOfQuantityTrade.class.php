<?php

/**
 * ScheduleOfQuantityTrade
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ScheduleOfQuantityTrade extends BaseScheduleOfQuantityTrade
{
    const DEFAULT_TRADE_ARRAY_KEY              = -1;
    const DEFAULT_TRADE_THIRD_PARTY_IDENTIFIER = 1;
    const DEFAULT_TRADE_TEXT                   = 'Default';

    public function save(Doctrine_Connection $conn = null)
    {
        if($this->isNew() && strlen($this->third_party_identifier) == 0)
        {
            $this->identifier_type = ScheduleOfQuantity::IDENTIFIER_TYPE_MANUAL;
        }

        parent::save($conn);
    }

    public function moveTo($priority, $lastPosition=false)
    {
        $priority = $lastPosition ? $priority+1 : $priority;

        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $this->priority = $priority;

            $this->save();

            if(!$lastPosition)
            {
                $this->updatePriority($priority, $this->id);
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }

    }

    public function copyTo(ScheduleOfQuantityTrade $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $priorityToUpdate = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;

            $cloneTrade = $this->copy();

            $cloneTrade->priority = $priorityToUpdate;

            $cloneTrade->save($con);

            if(!$lastPosition)
            {
                $this->updatePriority($priorityToUpdate, $cloneTrade->id);
            }

            $con->commit();

            return $cloneTrade;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            /*
             * delete all items that belong to the trade
             */
            Doctrine_Query::create()
                ->delete('ScheduleOfQuantityItem i')
                ->where('i.schedule_of_quantity_trade_id = ?', $this->id)
                ->execute();

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
            throw $e;
        }

        return parent::delete($conn);
    }

    private function updatePriority($priority, $excludeId)
    {
        $records = DoctrineQuery::create()->select('t.id')
            ->from('ScheduleOfQuantityTrade t')
            ->where('t.schedule_of_quantity_id = ?', $this->schedule_of_quantity_id)
            ->andWhere('t.priority >= ?', $priority)
            ->addOrderBy('t.priority ASC')
            ->execute();

        $priorityToUpdate = $priority + 1;

        foreach($records as $record)
        {
            if($record->id != $excludeId)
            {
                $record->priority = $priorityToUpdate;
                $record->save();
            }

            $priorityToUpdate++;
        }
    }
}
