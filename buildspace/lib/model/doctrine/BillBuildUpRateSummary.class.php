<?php

/**
 * BillBuildUpRateSummary
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BillBuildUpRateSummary extends BaseBillBuildUpRateSummary
{
    const ROUNDING_TYPE_DISABLED = 1;
    const ROUNDING_TYPE_UPWARD = 2;
    const ROUNDING_TYPE_DOWNWARD = 4;
    const ROUNDING_TYPE_NEAREST_WHOLE_NUMBER = 8;
    const ROUNDING_TYPE_NEAREST_TENTH = 16;

    public function calculateTotalCost()
    {
        $result = DoctrineQuery::create()->select('COALESCE(SUM(b.line_total),0) as total')
            ->from('BillBuildUpRateItem b')
            ->where('b.bill_item_id = ?', $this->bill_item_id)
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $totalCost = $result ? $result['total'] : 0;

        if($totalCost != $this->total_cost)
        {
            $this->total_cost = $totalCost;
            $this->save();
        }

        return $this->total_cost;
    }

    public function getTotalCostAfterConversion()
    {
        $totalCost = $this->calculateTotalCost();
        $conversionFactorAmount = $this->conversion_factor_amount;
        $operator = $this->conversion_factor_operator;

        if($this->apply_conversion_factor)
        {
            $exp = $totalCost.$operator.$conversionFactorAmount;

            $evaluator = new EvalMath(true, true);
            $evaluator->suppress_errors = true;
            $evaluatedValue = $evaluator->evaluate($exp);

            return $evaluatedValue ? $evaluatedValue : 0;
        }

        return $totalCost;
    }

    public function calculateFinalCost()
    {
        $totalCost = $this->getTotalCostAfterConversion();

        $markupPrice = $totalCost * ($this->markup/100);

        $finalCost = $totalCost + $markupPrice;

        switch($this->rounding_type)
        {
            case self::ROUNDING_TYPE_UPWARD:
                $finalCost  = ceil($finalCost);
                break;
            case self::ROUNDING_TYPE_DOWNWARD:
                $finalCost  =  floor($finalCost);
                break;
            case self::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                $finalCost  =  round($finalCost);
                break;
            case self::ROUNDING_TYPE_NEAREST_TENTH:
                $finalCost  =  round($finalCost * 10) / 10;
                break;
            default:
                $finalCost  =  round($finalCost, 2);
        }

        if($finalCost != $this->final_cost)
        {
            $this->final_cost = $finalCost;
            $this->save();
        }

        $this->BillItem->updateBillItemTotalColumns();

        return $this->final_cost;
    }

    public function preSave($event)
    {
        //reset all conversion factor information when it's disabled
        if($this->apply_conversion_factor === 'false')
        {
            $this->conversion_factor_amount = 0;
            $this->conversion_factor_uom_id = NULL;
            $this->rounding_type = 1;
            $this->conversion_factor_operator = Constants::ARITHMETIC_OPERATOR_MULTIPLICATION;
        }

        if($this->isNew() && strlen($this->conversion_factor_operator) == 0)
        {
            $this->conversion_factor_operator = Constants::ARITHMETIC_OPERATOR_MULTIPLICATION;
        }

        if($this->isNew() && strlen($this->rounding_type) == 0)
        {
            $this->rounding_type = self::ROUNDING_TYPE_DISABLED;
        }

        return parent::preSave($event);
    }

    public function postSave($event)
    {
        if(is_null($this->deleted_at) or $this->deleted_at == NULL)
        {
            //update bill item rate to set flag has_build_up to true;
            $billItemFormulatedColumn = $this->BillItem->getFormulatedColumnByName(BillItem::FORMULATED_COLUMN_RATE);

            if(!$billItemFormulatedColumn)
            {
                $billItemFormulatedColumn = new BillItemFormulatedColumn();
                $billItemFormulatedColumn->relation_id = $this->BillItem->id;
                $billItemFormulatedColumn->column_name = BillItem::FORMULATED_COLUMN_RATE;
            }

            $billItemFormulatedColumn->value = $this->final_cost;
            $billItemFormulatedColumn->final_value = $this->final_cost;
            $billItemFormulatedColumn->linked = false;
            $billItemFormulatedColumn->has_build_up = true;
            $billItemFormulatedColumn->parentSave();

            $this->BillItem->Element->updateAllItemTotalAfterMarkup();
        }

        return parent::postSave($event);
    }

    /**
     * Returns the conversion factor.
     * Returns 1 if conversion factor is not supposed to be applied.
     *
     * @return decimal|int
     */
    public function getConversionFactor()
    {
        if( $this->apply_conversion_factor )
        {
            return $this->conversion_factor_amount;
        }

        return 1;
    }
}
