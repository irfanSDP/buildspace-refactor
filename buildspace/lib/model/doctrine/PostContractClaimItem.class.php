<?php

/**
 * PostContractClaimItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PostContractClaimItem extends BasePostContractClaimItem
{
	const TYPE_HEADER = 1;
    const TYPE_WORK_ITEM = 2;

    const TYPE_HEADER_TEXT = 'HEAD';
    const TYPE_WORK_ITEM_TEXT = 'ITEM';

    const TYPE_SKILLED = 1;
    const TYPE_UNSKILLED = 2;

    const TYPE_SKILLED_TEXT = 'SKILLED';
    const TYPE_UNSKILLED_TEXT = 'UNSKILLED' ;

    public function save(Doctrine_Connection $conn = null)
    {
        $originalAmount = $this->rate * $this->quantity; 

        $postContractClaimMaterialOnSite = DoctrineQuery::create()->select('i.*')
            ->from('PostContractClaimMaterialOnSite i')
            ->where('i.post_contract_claim_item_id = ?', $this->id)
            ->limit(1)
            ->fetchOne();

        if($postContractClaimMaterialOnSite)
        {
            if($postContractClaimMaterialOnSite->reduction_percentage == 0 || 
                $postContractClaimMaterialOnSite->reduction_amount == 0)
            {
                $postContractClaimMaterialOnSite->final_amount = $originalAmount;
            }
            
            else
            {
                $reductionPercentage = $postContractClaimMaterialOnSite->reduction_percentage;

                $postContractClaimMaterialOnSite->reduction_amount = round($originalAmount * ($reductionPercentage / 100),2);
                $postContractClaimMaterialOnSite->final_amount = $originalAmount - round(( $originalAmount * $reductionPercentage / 100) ,2);
            }

            $postContractClaimMaterialOnSite->save();
        }

        parent::save($conn);
    }

    public function updateColumnByColumnName($columnName, $value)
    {
        switch($columnName)
        {
            case "type":
                if($value == self::TYPE_HEADER)
                {
                    $this->rate = 0;
                    $this->uom_id = NULL;
                }

                $this->type = (integer)$value;

                break;
            case "uom_id":

                $this->uom_id = $value;

                break;
            case "reference_rate":
                $this->reference_rate = number_format($value,2,'.','');
                $this->reference_amount = $this->reference_rate * $this->reference_quantity;
                break;
            case "reference_quantity":
                $this->reference_quantity = number_format($value,2,'.','');
                $this->reference_amount = $this->reference_rate * $this->reference_quantity;
                break;
            default:
                throw new Exception('invalid column name');
        }
    }

    public function updateRootSequence($sequence, $excludeId)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $sqlUpdateRoot = "UPDATE ".$this->getTable()->getTableName()." SET sequence = sequence + 1
            WHERE post_contract_claim_id =".$this->post_contract_claim_id." AND sequence >=".$sequence." AND id = root_id";

        if($excludeId and $excludeId > 0)
        {
            $sqlUpdateRoot .= " AND id <> ".$excludeId;
        }

        $sqlUpdateRoot .= " AND deleted_at IS NULL";

        $stmt = $pdo->prepare($sqlUpdateRoot);

        $stmt->execute();

        $stmt = $pdo->prepare("UPDATE ".$this->getTable()->getTableName()." AS i SET sequence = r.sequence
            FROM ".$this->getTable()->getTableName()." AS r
            WHERE i.root_id = r.id AND i.id <> r.id AND i.sequence <> r.sequence
            AND i.post_contract_claim_id = ".$this->post_contract_claim_id." AND i.deleted_at IS NULL");

        $stmt->execute();
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        if($this->type == PostContractClaimItem::TYPE_HEADER)
        {
            Doctrine_Query::create()
                ->delete('PostContractClaimItem i')
                ->where('i.root_id = ?', $this->root_id)
                ->andWhere('i.post_contract_claim_id = ?', $this->post_contract_claim_id)
                ->andWhere('i.lft > ?', $this->lft)
                ->andWhere('i.rgt < ?', $this->rgt)
                ->execute();
        }

        parent::delete($conn);

        //recalculate left-right values when deleting child nodes
        if(!$this->node->isRoot())
        {
            $first = $this->rgt + 1;
            $delta = $this->lft - $this->rgt - 1;

            Utilities::shiftRightLeftNestedSet(get_class($this), $first, $delta, $this->root_id, $conn);
        }
    }

    public function moveTo(PostContractClaimItem $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($targetItem->node->isRoot())
            {
                $sequence       = $lastPosition ? $targetItem->sequence + 1 : $targetItem->sequence;
                $this->sequence = $sequence;
                $this->save();

                if(!$this->node->isRoot() and $this->node->isValidNode())
                {
                    $this->node->makeRoot($this->id);
                    $this->save();
                }

                if(!$lastPosition)
                {
                    $this->updateRootSequence($sequence, $this->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $this->node->moveAsNextSiblingOf($targetItem);
                }
                else
                {
                    $this->node->moveAsPrevSiblingOf($targetItem);
                }

                $this->sequence = $targetItem->sequence;
                $this->save();

                $this->refresh();
            }

            if(($targetItem->node->isRoot() && $lastPosition) or !$targetItem->node->isRoot())
            {
                Doctrine_Query::create()->update('PostContractClaimItem i')
                    ->set('sequence', $this->sequence)
                    ->where('i.lft BETWEEN ? AND ?', array($this->lft, $this->rgt))
                    ->andWhere('i.root_id = ?', $this->root_id)
                    ->andWhere('i.sequence <> ?', $this->sequence)
                    ->andWhere('i.post_contract_claim_id = ?', $this->post_contract_claim_id)
                    ->execute();
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function getPreviousRoot()
    {
        $rootId = $this->root_id > 0 ? $this->root_id : $this->id;
        $root = $this->getTable()->find($rootId);

        return Doctrine_Core::getTable('PostContractClaimItem')
            ->createQuery('i')
            ->select('i.id')
            ->where('i.root_id = i.id')
            ->addWhere('i.post_contract_claim_id = ?', $this->post_contract_claim_id)
            ->addWhere('i.sequence < ?', $root->sequence)
            ->orderBy('i.sequence DESC')
            ->limit(1)
            ->fetchOne();
    }

    public function getRoot()
    {
        if($this->node->isRoot())
        {
            return $this;
        }
        else
        {
            return $this->getTable()->find($this->root_id);
        }
    }

    public function indent()
    {
        $indented = false;
        $previousRoot = $this->getPreviousRoot();

        if($this->node->isRoot() and $previousRoot and $previousRoot->type == PostContractClaimItem::TYPE_HEADER)
        {
            $this->node->moveAsLastChildOf($previousRoot);
            $this->refresh();

            $pdo = $this->getTable()->getConnection()->getDbh();
            $sqlUpdateSequence = "UPDATE ".$this->getTable()->getTableName()." SET sequence = ".$previousRoot->sequence."
            WHERE root_id = ".$previousRoot->root_id." AND sequence <> ".$previousRoot->sequence."
            AND post_contract_claim_id = ".$this->post_contract_claim_id." AND deleted_at IS NULL";

            $stmt = $pdo->prepare($sqlUpdateSequence);
            $stmt->execute();

            $indented = true;
        }
        else if(!$this->node->isRoot() and $this->node->hasPrevSibling() and ($this->node->getPrevSibling()->type == PostContractClaimItem::TYPE_HEADER))
        {
            $prevSibling = $this->node->getPrevSibling();
            $this->node->moveAsLastChildOf($prevSibling);

            $this->refresh();

            $indented = true;
        }

        return $indented;
    }

    public function outdent()
    {
        if(!$this->node->isRoot() and ($this->type == PostContractClaimItem::TYPE_HEADER or ($this->type != PostContractClaimItem::TYPE_HEADER and !$this->node->hasNextSibling())))
        {
            $parent = $this->node->getParent();

            if(!$parent || !$parent->node)
            {
                return false;
            }
            
            $siblings = Doctrine_Query::create()->select('i.id')
                ->from('PostContractClaimItem i')
                ->where('i.root_id = ?',$this->root_id)
                ->andWhere('i.level = ?', $this->level)
                ->andWhere('i.lft BETWEEN ? AND ?', array($parent->lft, $parent->rgt))
                ->andWhere('i.lft > ?', $this->rgt)
                ->addOrderBy('i.lft ASC')
                ->execute();

            foreach($siblings as $sibling)
            {
                $sibling->node->moveAsLastChildOf($this);
                $this->refresh();
            }

            if(!$parent->node->isRoot())
            {
                $this->node->moveAsNextSiblingOf($parent);
            }
            else
            {
                $this->node->makeRoot($this->id);
                $this->save();

                $this->sequence = $parent->sequence + 1;
                $this->save();

                $this->updateRootSequence($parent->sequence + 1, $this->id);
            }

            $this->refresh();

            return true;
        }
        else
        {
            return false;
        }
    }

    public function updateClaimItem($fieldName, $value)
    {
        $currentClaim = Doctrine_Query::create()->select('c.*')
            ->from('PostContractClaimClaim c')
            ->where('c.post_contract_claim_id = ?',$this->post_contract_claim_id)
            ->andWhere('c.status = ?', PostContractClaimClaim::STATUS_PROGRESSING)
            ->limit(1)
            ->addOrderBy('c.revision DESC')
            ->fetchOne();

        if($currentClaim)
        {
            $value = is_numeric($value) ? $value : 0;

            $claimItem = DoctrineQuery::create()->select('i.*')
                ->from('PostContractClaimClaimItem i')
                ->where('i.post_contract_claim_claim_id = ?',$currentClaim->id)
                ->andWhere('i.post_contract_claim_item_id = ?', $this->id)
                ->limit(1)
                ->fetchOne();

            if(!$claimItem)
            {
                $claimItem = new PostContractClaimClaimItem();
                $claimItem->post_contract_claim_claim_id = $currentClaim->id;
                $claimItem->post_contract_claim_item_id = $this->id;
            }

            $claimItem->{'update'.sfInflector::camelize($fieldName)}($value);

            $claimItem->save();

            return $claimItem;
        }
        else
        {
            throw new Exception("There is no progressing claim for post contract claim with id: ".$this->post_contract_claim_id);
        }

    }

    public function updateReduction($fieldName, $value)
    {
        $value = is_numeric($value) ? $value : 0;

        $postContractClaimMaterialOnSite = DoctrineQuery::create()->select('i.*')
            ->from('PostContractClaimMaterialOnSite i')
            ->where('i.post_contract_claim_item_id = ?', $this->id)
            ->limit(1)
            ->fetchOne();

        $postContractClaimMaterialOnSite->{'update'.sfInflector::camelize($fieldName)}($value);

        $postContractClaimMaterialOnSite->save();

        return $postContractClaimMaterialOnSite;
    }

    public function updateLabourType($fieldName, $value)
    {
        $value = is_numeric($value) ? $value : 0;

        $outOfContractItem = DoctrineQuery::create()->select('i.*')
            ->from('OutOfContractItem i')
            ->where('i.post_contract_claim_item_id = ?', $this->id)
            ->limit(1)
            ->fetchOne();

        if(!$outOfContractItem)
        {
            $outOfContractItem = new OutOfContractItem();
            $outOfContractItem->post_contract_claim_item_id = $this->id;
        }

        $outOfContractItem->labour_type = $value;
        $outOfContractItem->save();

        return $outOfContractItem;
    }


    public function updateDocumentNumberType($fieldName, $value)
    {
        $value = is_numeric($value) ? $value : 0;

        $purchaseOnBehalf = DoctrineQuery::create()->select('p.*')
            ->from('PurchaseOnBehalf p')
            ->where('p.post_contract_claim_item_id = ?', $this->id)
            ->limit(1)
            ->fetchOne();

        if(!$purchaseOnBehalf)
        {
            $purchaseOnBehalf = new PurchaseOnBehalf();
            $purchaseOnBehalf->post_contract_claim_item_id = $this->id;
        }

        $purchaseOnBehalf->document_number = $value;
        $purchaseOnBehalf->save();

        return $purchaseOnBehalf;
    }

}
