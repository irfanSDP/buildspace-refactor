<?php

/**
 * CostDataPrimeCostRate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 *  
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class CostDataPrimeCostRate extends BaseCostDataPrimeCostRate
{
    CONST COLUMN_UNITS          = 'units';
    CONST COLUMN_APPROVED_VALUE = 'approved_value';
    CONST COLUMN_AWARDED_VALUE  = 'awarded_value';

    public function save(Doctrine_Connection $conn = null)
    {
        $awardedCostUpdated  = $this->awardedCostUpdated();
        $approvedCostUpdated = $this->approvedCostUpdated();
        $unitsUpdated        = $this->unitsUpdated();

        parent::save($conn);

        $updatedFields = array();

        if( $approvedCostUpdated ) $updatedFields[] = self::COLUMN_APPROVED_VALUE;
        if( $awardedCostUpdated ) $updatedFields[] = self::COLUMN_AWARDED_VALUE;
        if( $unitsUpdated ) $updatedFields[] = self::COLUMN_UNITS;

        $this->updateRelativesCost($updatedFields);

        if( $awardedCostUpdated ) $this->flushLinks([ $this->id ]);
    }

    protected function awardedCostUpdated()
    {
        if( $this->isNew() && empty( $this->awarded_value ) ) return false;

        return key_exists(self::COLUMN_AWARDED_VALUE, $this->getModified());
    }

    protected function approvedCostUpdated()
    {
        if( $this->isNew() && empty( $this->approved_value ) ) return false;

        return key_exists(self::COLUMN_APPROVED_VALUE, $this->getModified());
    }

    protected function unitsUpdated()
    {
        if( $this->isNew() && empty( $this->units ) ) return false;

        return key_exists(self::COLUMN_UNITS, $this->getModified());
    }

    public function updateRelativesCost(array $fields)
    {
        if( $this->MasterCostDataPrimeCostRate->Parent->exists() )
        {
            $this->recalculateParentValues($fields);
        }
    }

    protected function recalculateParentValues(array $fields)
    {
        $childrenSum = CostDataPrimeCostRateTable::getItemSum($this->CostData, MasterCostDataPrimeCostRateTable::getChildrenIds(array($this->MasterCostDataPrimeCostRate->Parent->id)));

        $parentItem = CostDataPrimeCostRateTable::getItem($this->CostData, $this->MasterCostDataPrimeCostRate->Parent);

        if(in_array(self::COLUMN_APPROVED_VALUE, $fields)) $parentItem->approved_value = $childrenSum['approved_sum'];
        if(in_array(self::COLUMN_AWARDED_VALUE, $fields)) $parentItem->awarded_value = $childrenSum['awarded_sum'];

        if(in_array(self::COLUMN_UNITS, $fields)) 
        {
            $parentItem->approved_value = $childrenSum['approved_sum'];
            $parentItem->awarded_value = $childrenSum['awarded_sum'];
        }

        $parentItem->save();
    }

    protected function flushLinks($itemIds)
    {
        if(empty($itemIds)) return;

        $implodedItemIds = implode(',', $itemIds);

        Doctrine_Manager::getInstance()->getCurrentConnection()
            ->fetchAssoc("DELETE FROM ".BillItemCostDataPrimeCostRateTable::getInstance()->getTableName()." WHERE cost_data_prime_cost_rate_id in ({$implodedItemIds})");
    }

    public function flushDescendantValues($field)
    {
        $field = ($field == self::COLUMN_APPROVED_VALUE) ? self::COLUMN_APPROVED_VALUE : self::COLUMN_AWARDED_VALUE;

        $descendantIds = MasterCostDataPrimeCostRateTable::getDescendantIds([$this->MasterCostDataPrimeCostRate->id]);

        if(empty($descendantIds)) return;

        $implodedDescendantId = implode(',', $descendantIds);

        $pdo = $this->getTable()->getConnection()->getDbh();

        $statement = "SELECT i.id FROM ".CostDataPrimeCostRateTable::getInstance()->getTableName()." i
        WHERE i.master_cost_data_prime_cost_rate_id in ({$implodedDescendantId})
        AND i.cost_data_id = {$this->cost_data_id}";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        $itemIds =  $stmt->fetchAll(PDO::FETCH_COLUMN,0);

        if( count($itemIds) > 0 )
        {
            $implodedItemIds = implode(',', $itemIds);

            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".CostDataPrimeCostRateTable::getInstance()->getTableName()." SET {$field} = 0 WHERE id in ({$implodedItemIds}) AND deleted_at IS NULL");
        }
    }
}
