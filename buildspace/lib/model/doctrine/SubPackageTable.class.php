<?php

/**
 * SubPackageTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SubPackageTable extends Doctrine_Table {
    /**
     * Returns an instance of this class.
     *
     * @return object SubPackageTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('SubPackage');
    }

    public static function cloneBillItemRatesBySubpackageId($subPackageId, $projectId, $companyId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmtItem = $pdo->prepare("SELECT resource_item_id FROM " . SubPackageResourceItemTable::getInstance()->getTableName() . " WHERE sub_package_id = " . $subPackageId);

        $stmtItem->execute();

        $resourceItemIds = $stmtItem->fetchAll(PDO::FETCH_COLUMN);

        $stmtItem = $pdo->prepare("SELECT schedule_of_rate_item_id FROM " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " WHERE sub_package_id = " . $subPackageId);

        $stmtItem->execute();

        $scheduleOfRateItemIds = $stmtItem->fetchAll(PDO::FETCH_COLUMN);

        if ( count($resourceItemIds) || count($scheduleOfRateItemIds) )
        {
            $joinCase = "AND (";

            if ( count($resourceItemIds) )
            {
                $resourceSqlJoin = "LEFT JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " AS bur ON bur.bill_item_id = c.id AND bur.deleted_at IS NULL";
                $joinCase .= "bur.resource_item_library_id IN (" . implode(',', $resourceItemIds) . ")";
            }
            else
            {
                $resourceSqlJoin = '';
            }

            if ( count($scheduleOfRateItemIds) )
            {
                $scheduleSqlJoin = "LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS ifc ON ifc.relation_id = c.id
				LEFT JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.id = ifc.schedule_of_rate_item_formulated_column_id
				LEFT JOIN " . ScheduleOfRateItemTable::getInstance()->getTableName() . " AS si ON si.id = sifc.relation_id";

                if ( count($resourceItemIds) )
                {
                    $joinCase .= " OR ";
                }

                $joinCase .= "sifc.relation_id IN (" . implode(',', $scheduleOfRateItemIds) . ")";
            }
            else
            {
                $scheduleSqlJoin = '';
            }

            $joinCase .= ")";

            $stmt = $pdo->prepare("SELECT sc.id, sc.company_id FROM " . SubPackageCompanyTable::getInstance()->getTableName() . " sc
			WHERE  sc.company_id = " . $companyId . " AND sc.sub_package_id = " . $subPackageId);

            $stmt->execute();

            $subpackageCompany = $stmt->fetch(PDO::FETCH_ASSOC);

            $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.element_id, p.root_id, p.description, p.type, p.uom_id, uom.symbol AS uom_symbol, rate.rate, rate.grand_total, rate.single_unit_grand_total, p.level, p.priority, p.lft
				FROM " . BillItemTable::getInstance()->getTableName() . " c
				JOIN " . BillItemTable::getInstance()->getTableName() . " p ON c.lft BETWEEN p.lft AND p.rgt
				LEFT JOIN " . SubPackageBillItemRateTable::getInstance()->getTableName() . " rate ON rate.bill_item_id = p.id AND rate.sub_package_company_id = " . $subpackageCompany['id'] . "
				LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " e ON c.element_id = e.id
				LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " s ON e.project_structure_id = s.id
				LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
				" . $scheduleSqlJoin . " " . $resourceSqlJoin . "
				WHERE c.root_id = p.root_id " . $joinCase . " AND c.type != " . BillItem::TYPE_ITEM_NOT_LISTED . "
				AND s.root_id = " . $projectId . " AND c.project_revision_deleted_at IS NULL " . $joinCase . "
				AND c.deleted_at IS NULL AND p.project_revision_deleted_at IS NULL AND p.deleted_at IS NULL
				ORDER BY p.element_id, p.priority, p.lft, p.level ASC");

            $stmt->execute();

            $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

            if ( count($items) )
            {
                $stmt = new sfImportStatementGenerator();

                $stmt->createInsert(SubPackagePostContractBillItemRateTable::getInstance()->getTableName(), array(
                    'sub_package_id', 'bill_item_id', 'rate', 'single_unit_grand_total', 'grand_total'
                ));

                foreach ( $items as $item )
                {
                    $stmt->addRecord(array(
                        $subPackageId, $item['id'], $item['rate'], $item['single_unit_grand_total'], $item['grand_total']
                    ));

                    unset( $item );
                }

                if ( count($stmt->records) )
                {
                    $stmt->save();
                }

                unset( $items );
            }
        }
    }

    public static function getAffectedBillsBySubPackage(SubPackage $subPackage, $billId)
    {
        if ( !is_integer($billId) )
        {
            throw new InvalidArgumentException();
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        // get bill's information associated with sub package
        $sqlFieldCond = '(
            CASE 
                WHEN spsori.sub_package_id IS NOT NULL THEN spsori.sub_package_id
                WHEN spri.sub_package_id IS NOT NULL THEN spri.sub_package_id
            ELSE
                spbi.sub_package_id
            END
            ) AS sub_package_id';

        $stmtItem = $pdo->prepare("SELECT DISTINCT c.id AS bill_column_setting_id, c.use_original_quantity, bill.title AS title, bill.id AS bill_id, i.id AS bill_item_id, rate.final_value AS final_value, $sqlFieldCond FROM " . SubPackageTable::getInstance()->getTableName() . " sp
		LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
		LEFT JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
		LEFT JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
		JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
		LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id
		JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
		LEFT JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " bur ON bur.bill_item_id = i.id AND bur.resource_item_library_id = spri.resource_item_id AND bur.deleted_at IS NULL
		LEFT JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
		LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS rate ON rate.relation_id = i.id
		LEFT JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = i.id AND spbi.sub_package_id = sp.id
		WHERE sp.id =" . $subPackage->id . " AND sp.deleted_at IS NULL
		AND bill.id = " . $billId . " AND bill.deleted_at IS NULL
		AND NOT (spri.sub_package_id IS NULL AND spsori.sub_package_id IS NULL AND spbi.sub_package_id IS NULL)
		AND (rate.relation_id = bur.bill_item_id OR rate.schedule_of_rate_item_formulated_column_id = sifc.id OR rate.relation_id = spbi.bill_item_id)
		AND rate.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND rate.final_value <> 0 AND rate.deleted_at IS NULL
		AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
		AND e.deleted_at IS NULL AND c.deleted_at IS NULL ORDER BY i.id");

        $stmtItem->execute(array());
        $records = $stmtItem->fetchAll(PDO::FETCH_ASSOC);

        $billArray = array();

        foreach ( $records as $record )
        {
            if ( !array_key_exists($record['bill_id'], $billArray) )
            {
                $billArray[$record['bill_id']] = array(
                    'title'      => $record['title'],
                    'est_amount' => 0
                );
            }
        }

        return $billArray;
    }

    public static function getAffectedElementBySubPackageAndBillId(SubPackage $subPackage, $billId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        if ( !is_int($billId) )
        {
            throw new InvalidArgumentException();
        }

        $sqlFieldCond = '(
            CASE 
                WHEN spsori.sub_package_id IS NOT NULL THEN spsori.sub_package_id
                WHEN spri.sub_package_id IS NOT NULL THEN spri.sub_package_id
            ELSE
                spbi.sub_package_id
            END
            ) AS sub_package_id';

        $stmtItem = $pdo->prepare("SELECT DISTINCT c.id AS bill_column_setting_id, c.use_original_quantity, e.priority, e.description, bill.id as bill_id, e.id AS element_id, i.id AS bill_item_id, rate.final_value AS final_value, $sqlFieldCond
		FROM " . SubPackageTable::getInstance()->getTableName() . " sp
		LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
		LEFT JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
		LEFT JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
		JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
		LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id
		JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
		LEFT JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " bur ON bur.bill_item_id = i.id AND bur.resource_item_library_id = spri.resource_item_id AND bur.deleted_at IS NULL
		LEFT JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
		LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS rate ON rate.relation_id = i.id
		LEFT JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = i.id AND spbi.sub_package_id = sp.id
		WHERE sp.id =" . $subPackage->id . " AND sp.deleted_at IS NULL
		AND bill.id = " . $billId . " AND bill.deleted_at IS NULL
		AND NOT (spri.sub_package_id IS NULL AND spsori.sub_package_id IS NULL AND spbi.sub_package_id IS NULL)
		AND (rate.relation_id = bur.bill_item_id OR rate.schedule_of_rate_item_formulated_column_id = sifc.id OR rate.relation_id = spbi.bill_item_id)
		AND rate.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND rate.final_value <> 0 AND rate.deleted_at IS NULL
		AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
		AND e.deleted_at IS NULL AND c.deleted_at IS NULL ORDER BY i.id");

        $stmtItem->execute();
        $records = $stmtItem->fetchAll(PDO::FETCH_ASSOC);

        $elementArray = array();

        foreach ( $records as $record )
        {
            if ( !isset( $elementArray[$record['element_id']] ) )
            {
                $elementArray[$record['element_id']] = array(
                    'description' => $record['description'],
                    'priority'    => $record['priority'],
                );
            }

            unset( $record );
        }

        unset( $records );

        return $elementArray;
    }

    public static function getAffectedItemsBySubPackageAndBillIdAndElementIds(SubPackage $subPackage, $billId, array $elementIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sqlFieldCond = '(
            CASE 
                WHEN spsori.sub_package_id IS NOT NULL THEN spsori.sub_package_id
                WHEN spri.sub_package_id IS NOT NULL THEN spri.sub_package_id
            ELSE
                spbi.sub_package_id
            END
            ) AS sub_package_id';

        $stmtItem = $pdo->prepare("SELECT DISTINCT c.id AS bill_column_setting_id, c.use_original_quantity, i.id AS bill_item_id, rate.final_value AS final_value, $sqlFieldCond
		FROM " . SubPackageTable::getInstance()->getTableName() . " sp
		LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
		LEFT JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
		LEFT JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
		JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
		LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id
		JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
		LEFT JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " bur ON bur.bill_item_id = i.id AND bur.resource_item_library_id = spri.resource_item_id AND bur.deleted_at IS NULL
		LEFT JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
		LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS rate ON rate.relation_id = i.id
		LEFT JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = i.id AND spbi.sub_package_id = sp.id
		WHERE sp.id =" . $subPackage->id . " AND sp.deleted_at IS NULL
		AND bill.id = " . $billId . " AND bill.deleted_at IS NULL
		AND e.id IN (" . implode(',', $elementIds) . ") AND e.deleted_at IS NULL
		AND NOT (spri.sub_package_id IS NULL AND spsori.sub_package_id IS NULL AND spbi.sub_package_id IS NULL)
		AND (rate.relation_id = bur.bill_item_id OR rate.schedule_of_rate_item_formulated_column_id = sifc.id OR rate.relation_id = spbi.bill_item_id)
		AND rate.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND rate.final_value <> 0 AND rate.deleted_at IS NULL
		AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
		AND c.deleted_at IS NULL ORDER BY i.id");

        $stmtItem->execute();

        return $stmtItem->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getSelectedElementsAndItemsBySubPackageIdAndType(SubPackage $subPackage, $type, array $ids)
    {
        $pdo  = self::getInstance()->getConnection()->getDbh();
        $data = array();

        switch ($type)
        {
            case 'bill':
                $column = 'bill.id';
                break;

            case 'element':
                $column = 'e.id';
                break;

            case 'item':
                $column = 'i.id';
                break;

            default:
                throw new InvalidArgumentException('Please enter your type');
                break;
        }

        $sqlFieldCond = '(
            CASE 
                WHEN spsori.sub_package_id IS NOT NULL THEN spsori.sub_package_id
                WHEN spri.sub_package_id IS NOT NULL THEN spri.sub_package_id
            ELSE
                spbi.sub_package_id
            END
            ) AS sub_package_id';

        $stmtItem = $pdo->prepare("SELECT DISTINCT bill.id as bill_id, c.id AS bill_column_setting_id, c.use_original_quantity, e.priority, e.description, e.id AS element_id, i.id AS bill_item_id, $sqlFieldCond
		FROM " . SubPackageTable::getInstance()->getTableName() . " sp
		LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
		LEFT JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
		LEFT JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
		JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
		LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id
		JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
		LEFT JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " bur ON bur.bill_item_id = i.id AND bur.resource_item_library_id = spri.resource_item_id AND bur.deleted_at IS NULL
		LEFT JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
		LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS rate ON rate.relation_id = i.id
		LEFT JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = i.id AND spbi.sub_package_id = sp.id
		WHERE sp.id =" . $subPackage->id . " AND sp.deleted_at IS NULL
		AND {$column} IN (" . implode(',', $ids) . ") AND bill.deleted_at IS NULL
		AND NOT (spri.sub_package_id IS NULL AND spsori.sub_package_id IS NULL AND spbi.sub_package_id IS NULL)
		AND (rate.relation_id = bur.bill_item_id OR rate.schedule_of_rate_item_formulated_column_id = sifc.id OR rate.relation_id = spbi.bill_item_id)
		AND rate.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND rate.final_value <> 0 AND rate.deleted_at IS NULL
		AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
		AND e.deleted_at IS NULL AND c.deleted_at IS NULL ORDER BY i.id");

        $stmtItem->execute();
        $records = $stmtItem->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $records as $record )
        {
            $data[$record['bill_id']][$record['element_id']][$record['bill_item_id']] = $record['bill_item_id'];

            unset( $record );
        }

        unset( $records );

        return $data;
    }

    public static function getRatesBySubPackageAndBillAndItemIds(SubPackage $subPackage, ProjectStructure $bill, array $billItemIds)
    {
        if(empty($billItemIds))
            return [];

        $pdo = self::getInstance()->getConnection()->getDbh();

        $elements = DoctrineQuery::create()
            ->from('BillElement e')
            ->andWhere('e.project_structure_id = ?', $bill->id)
            ->addOrderBy('e.priority')
            ->execute();
        
        $totalCostByBillItems = [];

        foreach($elements as $element)
        {
            $totalCostByBillItems += $subPackage->getEstimatedTotalByBillItems($element);
            $totalCostByBillItems += $subPackage->getEstimatedTotalNoBuildUpByBillItems($element);
        }

        $stmtItem = $pdo->prepare("SELECT DISTINCT c.id AS bill_column_setting_id, c.use_original_quantity, e.id as element_id, i.id AS bill_item_id
        FROM " . SubPackageTable::getInstance()->getTableName() . " sp
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
        JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
        JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id
        JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
        WHERE sp.id =" . $subPackage->id . " AND sp.deleted_at IS NULL
        AND bill.id = " . $bill->id . " AND bill.deleted_at IS NULL
        AND i.id IN (" . implode(',', $billItemIds) . ")
        AND e.deleted_at IS NULL
		AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
		AND c.deleted_at IS NULL ORDER BY i.id");

        $stmtItem->execute();

        $records = $stmtItem->fetchAll(PDO::FETCH_ASSOC);

        foreach($records as $idx => $record)
        {
            $records[$idx]['sub_package_id'] = $subPackage->id;

            $records[$idx]['final_value'] = 0;

            if(array_key_exists($record['bill_item_id'], $totalCostByBillItems))
            {
                $records[$idx]['final_value'] = $totalCostByBillItems[$record['bill_item_id']]['total_cost_after_conversion'];
            }
        }

        return $records;
    }

    public static function getTotalSelectedUnitsBySubPackageAndBillId(SubPackage $subPackage, $billId)
    {
        $units = 0;

        foreach ( self::getSelectedUnitsBySubPackageAndBillId($subPackage, $billId) as $billColumnsUnits )
        {
            $units += $billColumnsUnits;
        }

        return $units;
    }

    public static function getSelectedUnitsBySubPackageAndBillId(SubPackage $subPackage, $billId)
    {
        $pdo   = self::getInstance()->getConnection()->getDbh();
        $units = 0;
        $bill  = Doctrine_Core::getTable('ProjectStructure')->find($billId);

        if ( !$bill )
        {
            return $units;
        }

        $billColumnSettingIds = Utilities::arrayValueRecursive('id', $bill->getBillColumnSettings()->toArray());

        $stmt = $pdo->prepare("SELECT DISTINCT r.bill_column_setting_id, COALESCE(COUNT(r.id), 0) FROM " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " r
		WHERE r.sub_package_id = " . $subPackage->id . " AND r.bill_column_setting_id IN (" . implode(',', $billColumnSettingIds) . ") GROUP BY r.bill_column_setting_id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getDataForPrintingPreviewItemsByColumn(BillElement $element, $revision, SubPackage $subPackage, PostContractStandardClaimTypeReference $typeRef, $column)
    {
        $pdo               = self::getInstance()->getConnection()->getDbh();
        $billItemIds       = array();
        $billItems         = array();
        $claimsInformation = array();

        // get available current amount based on revision
        $stmt = $pdo->prepare("SELECT pr.sub_package_id, ROUND(COALESCE(si.rate,0), 2) AS rate, type_fc.has_build_up, ROUND(COALESCE(pcr.up_to_date_percentage, 0),2) AS prev_percentage, ROUND(COALESCE(pcr.up_to_date_amount, 0),2) AS prev_amount, ROUND(COALESCE(cr.current_amount,0),2) AS current_amount,
		ROUND(COALESCE(cr.current_percentage,0),2) AS current_percentage, ROUND(COALESCE(cr.up_to_date_percentage,0),2) AS up_to_date_percentage, ROUND(COALESCE(cr.up_to_date_qty,0),2) AS up_to_date_qty,
		ROUND(COALESCE(cr.up_to_date_amount,0),2) AS up_to_date_amount, i.id, i.note, i.type, i.lft, i.level, ROUND(pt.qty_per_unit,2) AS qty_per_unit, pt.include, i.description, uom.id AS uom_id, uom.symbol AS uom_symbol, pc.bill_ref_element_no, pc.bill_ref_page_no, pc.bill_ref_char
		FROM " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " si
		JOIN " . BillItemTable::getInstance()->getTableName() . " i on i.id = si.bill_item_id
		JOIN " . PostContractBillItemRateTable::getInstance()->getTableName() . " pc ON (pc.bill_item_id = i.id)
		LEFT JOIN " . SubPackagePostContractClaimRevisionTable::getInstance()->getTableName() . " pr ON pr.sub_package_id = " . $revision['sub_package_id'] . " AND pr.version = (" . $revision['version'] . " - 1)
		LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " cr ON cr.bill_item_id = si.bill_item_id AND cr.claim_type_ref_id = " . $typeRef->id . " AND cr.revision_id = " . $revision['id'] . "
		LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " pcr ON pcr.bill_item_id = si.bill_item_id AND pcr.claim_type_ref_id = " . $typeRef->id . " AND pcr.revision_id = pr.id
		LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON i.uom_id = uom.id AND uom.deleted_at IS NULL
		LEFT JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pt ON pt.bill_item_id = si.bill_item_id AND pt.bill_column_setting_id = " . $typeRef->bill_column_setting_id . "
		LEFT JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " type ON type.bill_item_id = pt.bill_item_id AND type.bill_column_setting_id = pt.bill_column_setting_id AND type.deleted_at IS NULL
		LEFT JOIN " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " type_fc ON type_fc.relation_id = type.id AND column_name ='" . BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT . "'
		WHERE i.element_id = " . $element->id . " AND pt.include IS TRUE AND si.sub_package_id = " . $subPackage->id . " ORDER BY i.priority, i.lft, i.level");

        $stmt->execute();
        $claims = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $claims as $claim )
        {
            if ( $claim[$column] > 0 )
            {
                $billItemIds[$claim['id']] = $claim['id'];

                $claimsInformation[$claim['id']] = array(
                    'sub_package_id'        => $claim['sub_package_id'],
                    'rate'                  => $claim['rate'],
                    'bill_ref_element_no'   => $claim['bill_ref_element_no'],
                    'bill_ref_page_no'      => $claim['bill_ref_page_no'],
                    'bill_ref_char'         => $claim['bill_ref_char'],
                    'prev_percentage'       => $claim['prev_percentage'],
                    'prev_amount'           => $claim['prev_amount'],
                    'current_amount'        => $claim['current_amount'],
                    'current_percentage'    => $claim['current_percentage'],
                    'up_to_date_percentage' => $claim['up_to_date_percentage'],
                    'up_to_date_qty'        => $claim['up_to_date_qty'],
                    'up_to_date_amount'     => $claim['up_to_date_amount'],
                    'has_build_up'          => $claim['has_build_up'],
                );
            }

            unset( $claim );
        }

        if (!empty($billItemIds))
        {
            $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.type, p.priority, p.lft, p.level, ROUND(pt.qty_per_unit * si.rate,2) AS total_per_unit, ROUND(pt.qty_per_unit,2) AS qty_per_unit, pt.include, p.description, uom.id AS uom_id, uom.symbol AS uom_symbol
			FROM " . BillItemTable::getInstance()->getTableName() . " i
			JOIN " . BillItemTable::getInstance()->getTableName() . " p ON (i.lft BETWEEN p.lft AND p.rgt AND i.root_id = p.root_id AND i.type <> " . BillItem::TYPE_HEADER . " AND p.deleted_at IS NULL)
			JOIN " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " si ON (si.bill_item_id = p.id)
			JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
			JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pt ON pt.bill_item_id = p.id AND pt.bill_column_setting_id = " . $typeRef->bill_column_setting_id . "
			JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " type ON type.bill_item_id = p.id AND type.bill_column_setting_id = pt.bill_column_setting_id AND type.deleted_at IS NULL
			JOIN " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " type_fc ON type_fc.relation_id = type.id AND column_name ='" . BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT . "' AND type_fc.deleted_at IS NULL
			WHERE i.id IN (" . implode(', ', $billItemIds) . ") AND pt.include IS TRUE AND si.sub_package_id = ".$subPackage->id." ORDER BY p.priority, p.lft, p.level");

            $stmt->execute();
            $billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach ( $billItems as $key => $billItem )
            {
                $billItems[$key]['bill_ref_element_no'] = null;
                $billItems[$key]['bill_ref_page_no']    = null;
                $billItems[$key]['bill_ref_char']       = null;
                $billItems[$key]['has_build_up']        = null;

                // merge the array
                if ( isset( $claimsInformation[$billItem['id']] ) )
                {
                    $billItems[$key] = $billItem + $claimsInformation[$billItem['id']];
                }
            }
        }

        unset( $claimsInformation );

        return $billItems;
    }

    public static function getDataStructureForSubPackageStandardClaimBillItemListByItemIds($element, $revision, $subPackageId, $typeRef, $itemIds)
    {
        $pdo     = self::getInstance()->getConnection()->getDbh();
        $itemIds = json_decode($itemIds, true);

        $stmt = $pdo->prepare("SELECT DISTINCT p.id, ROUND(COALESCE(si.rate,0), 2) AS rate, type_fc.has_build_up, ROUND(COALESCE(pcr.up_to_date_percentage, 0),2) AS prev_percentage, ROUND(COALESCE(pcr.up_to_date_amount, 0),2) AS prev_amount, ROUND(COALESCE(cr.current_amount,0),2) AS current_amount,
		ROUND(COALESCE(cr.current_percentage,0),2) AS current_percentage, ROUND(COALESCE(cr.up_to_date_percentage,0),2) AS up_to_date_percentage, ROUND(COALESCE(cr.up_to_date_qty,0),2) AS up_to_date_qty,
		ROUND(COALESCE(cr.up_to_date_amount,0),2) AS up_to_date_amount, p.note, p.type, p.priority, p.lft, p.level, ROUND(pt.qty_per_unit * si.rate,2) AS total_per_unit, ROUND(pt.qty_per_unit,2) AS qty_per_unit, pt.include, p.description, uom.id AS uom_id, uom.symbol AS uom_symbol, pc.bill_ref_element_no, pc.bill_ref_page_no, pc.bill_ref_char
		FROM " . BillItemTable::getInstance()->getTableName() . " i
		JOIN " . BillItemTable::getInstance()->getTableName() . " p ON (i.lft BETWEEN p.lft AND p.rgt AND i.root_id = p.root_id AND i.type <> " . BillItem::TYPE_HEADER . " AND p.deleted_at IS NULL)
		LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
		LEFT JOIN " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " si ON si.bill_item_id = p.id
		JOIN " . PostContractBillItemRateTable::getInstance()->getTableName() . " pc ON (pc.bill_item_id = p.id)
		LEFT JOIN " . SubPackagePostContractClaimRevisionTable::getInstance()->getTableName() . " pr ON pr.sub_package_id = " . $revision['sub_package_id'] . " AND pr.version = (" . $revision['version'] . " - 1)
		LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " cr ON cr.bill_item_id = p.id AND cr.claim_type_ref_id = " . $typeRef->id . " AND cr.revision_id = " . $revision['id'] . "
		LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " pcr ON pcr.bill_item_id = p.id AND pcr.claim_type_ref_id = " . $typeRef->id . " AND pcr.revision_id = pr.id
		LEFT JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " pt ON pt.bill_item_id = p.id AND pt.bill_column_setting_id = " . $typeRef->bill_column_setting_id . "
		LEFT JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " type ON type.bill_item_id = p.id AND type.bill_column_setting_id = pt.bill_column_setting_id AND type.deleted_at IS NULL
		LEFT JOIN " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " type_fc ON type_fc.relation_id = type.id AND column_name ='" . BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT . "'
		WHERE si.sub_package_id = " . $subPackageId . " AND i.id IN (" . implode(',', $itemIds) . ") AND i.element_id = " . $element->id . "
		ORDER BY p.priority, p.lft, p.level");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getAffectedElementIdsByItemIds($itemIds, SubPackage $subPackage, ProjectStructure $bill)
    {
        $itemIds    = json_decode($itemIds, true);
        $elementIds = array();

        if ( count($itemIds) == 0 )
        {
            return $elementIds;
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT e.id, e.description, e.note
		FROM " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " rate
		JOIN " . BillItemTable::getInstance()->getTableName() . " i ON rate.bill_item_id  = i.id AND i.deleted_at IS NULL
		JOIN " . BillElementTable::getInstance()->getTableName() . " e ON i.element_id =  e.id AND e.deleted_at IS NULL
		JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b ON b.id =  e.project_structure_id AND b.deleted_at IS NULL
		WHERE i.id IN (" . implode(',', $itemIds) . ") AND b.id = " . $bill->id . "
		AND rate.sub_package_id = " . $subPackage->id . " GROUP BY e.id ORDER BY e.priority ASC");

        $stmt->execute();
        $elements = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $elements as $element )
        {
            $elementIds[$element['id']] = array(
                'description' => $element['description'],
            );
        }

        return $elementIds;
    }

    public static function generateExportSubPackageInformation($subPackageId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT s.id, s.name, s.project_structure_id
			FROM " . SubPackageTable::getInstance()->getTableName() . " s
			WHERE s.id = " . $subPackageId);

        $stmt->execute();

        $subPackage = $stmt->fetch(PDO::FETCH_ASSOC);

        $revisions = array();

        $structure = DoctrineQuery::create()
            ->select('p.id, p.type, p.title, p.root_id, p.lft, p.rgt, p.level, p.created_at, p.created_by, p.tender_origin_id,
			m.title, m.description, m.site_address, m.client, m.start_date, m.unique_id,
			r.project_structure_id, reg.*, sreg.*, workcat.*, currency.*,
			sf.project_structure_id, sf.first_row_text, sf.second_row_text, sf.left_text, sf.right_text,
			sgs.project_structure_id, sgs.project_title, sgs.summary_title, sgs.include_printing_date, sgs.carried_to_next_page_text, sgs.continued_from_previous_page_text, sgs.page_number_prefix')
            ->from('ProjectStructure p')
            ->leftJoin('p.MainInformation m')
            ->leftJoin('m.Regions reg')
            ->leftJoin('m.Subregions sreg')
            ->leftJoin('m.WorkCategory workcat')
            ->leftJoin('m.Currency currency')
            ->leftJoin('p.ProjectSummaryFooter sf')
            ->leftJoin('p.ProjectSummaryGeneralSetting sgs')
            ->where('p.id = ?', $subPackage['project_structure_id'])
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $mainInformation = $structure['MainInformation'];
        unset( $structure['MainInformation'] );

        //Override title using subpackage Name
        $mainInformation['title'] = $structure['title'] = $subPackage['name'];

        array_push($revisions, array(
            'id'                   => 1,
            'project_structure_id' => $structure['id'],
            'revision'             => 'Original Bill',
            'version'              => 0,
            'locked_status'        => 1
        ));

        $sqlFieldCond = '(
            CASE 
                WHEN spsori.sub_package_id is not null THEN spsori.sub_package_id
                WHEN spri.sub_package_id is not null THEN spri.sub_package_id
            ELSE
                spbi.sub_package_id
            END
            ) AS sub_package_id';

        $stmtItem = $pdo->prepare("SELECT DISTINCT c.id AS bill_column_setting_id, c.use_original_quantity, bill.title AS title, bill.id AS bill_id, bill.type as bill_type,
		bill.lft, bill.rgt, bill.root_id as bill_root, bill.level as bill_level,
		i.id AS bill_item_id, rate.final_value AS final_value, $sqlFieldCond FROM " . SubPackageTable::getInstance()->getTableName() . " sp
		LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
		LEFT JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
		LEFT JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
		JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
		LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id
		JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
		LEFT JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " bur ON bur.bill_item_id = i.id AND bur.resource_item_library_id = spri.resource_item_id AND bur.deleted_at IS NULL
		LEFT JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
		LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS rate ON rate.relation_id = i.id
		LEFT JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = i.id AND spbi.sub_package_id = sp.id
		WHERE sp.id =" . $subPackageId . " AND sp.deleted_at IS NULL
		AND bill.deleted_at IS NULL
		AND NOT (spri.sub_package_id IS NULL AND spsori.sub_package_id IS NULL AND spbi.sub_package_id is null)
		AND (rate.relation_id = bur.bill_item_id OR rate.schedule_of_rate_item_formulated_column_id = sifc.id OR rate.relation_id = spbi.bill_item_id)
		AND rate.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND rate.final_value <> 0 AND rate.deleted_at IS NULL
		AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
		AND e.deleted_at IS NULL AND c.deleted_at IS NULL ORDER BY bill.id");

        $stmtItem->execute();

        $records = $stmtItem->fetchAll(PDO::FETCH_ASSOC);

        $billArray = array();

        foreach ( $records as $record )
        {
            if ( !array_key_exists($record['bill_id'], $billArray) )
            {
                $billArray[$record['bill_id']] = array(
                    'id'                  => $record['bill_id'],
                    'title'               => $record['title'],
                    'lft'                 => $record['lft'],
                    'rgt'                 => $record['rgt'],
                    'level'               => 1,
                    'root_id'             => $record['bill_root'],
                    'ProjectSummaryStyle' => '',
                    'tender_origin_id'    => '',
                    'type'                => $record['bill_type']
                );
            }

            unset( $record );
        }

        return array( 'id' => $subPackage['id'], 'mainInformation' => $mainInformation, 'structure' => $structure, 'revisions' => $revisions, 'breakdown' => $billArray );
    }

    public static function generateSubPackageUniqueIdByProjectId($subPackageId, $projectId)
    {
        $buildspaceUniqueId = sfConfig::get('app_register_buildspace_id');

        $information = array( $buildspaceUniqueId, $subPackageId, $projectId );

        return base64_encode(implode('-', $information));
    }

    public static function subConSelections(ProjectStructure $project)
    {
        $data = array();

        if ( $project->MainInformation->status != ProjectMainInformation::STATUS_POSTCONTRACT )
        {
            return $data;
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        // prepend default Main as selection
        $data[] = array(
            'id'   => (string) PurchaseOrderInformation::SUB_CON_MAIN_ID,
            'name' => PurchaseOrderInformation::SUB_CON_MAIN_TEXT,
        );

        $stmt = $pdo->prepare("SELECT DISTINCT s.name AS title, s.id, s.locked, s.selected_company_id,
		COALESCE(SUM(ROUND(rate.rate * type.qty_per_unit, 2)), 0) AS standard_bill_amount, s.priority
		FROM " . SubPackageTable::getInstance()->getTableName() . " s
		JOIN " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " type_ref ON type_ref.sub_package_id = s.id
		JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " type ON type.bill_column_setting_id = type_ref.bill_column_setting_id
		JOIN " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " rate ON rate.sub_package_id = s.id AND rate.bill_item_id = type.bill_item_id
		WHERE s.project_structure_id = " . $project->id . " AND s.locked IS TRUE AND s.deleted_at IS NULL GROUP BY s.id ORDER BY s.priority");

        $stmt->execute();

        $subPackages = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $subPackages as $subPackage )
        {
            $data[] = array(
                'id'   => (string) $subPackage['id'],
                'name' => $subPackage['title'],
            );

            unset( $subPackage );
        }

        unset( $subPackages );

        return $data;
    }

    public static function getBillsBySubPackageAndBillIds(SubPackage $subPackage, array $billIds)
    {
        $pdo       = self::getInstance()->getConnection()->getDbh();
        $billArray = array();

        $sqlFieldCond = '(
            CASE 
                WHEN spsori.sub_package_id IS NOT NULL THEN spsori.sub_package_id
                WHEN spri.sub_package_id IS NOT NULL THEN spri.sub_package_id
            ELSE
                spbi.sub_package_id
            END
            ) AS sub_package_id';

        $stmtItem = $pdo->prepare("SELECT DISTINCT c.id AS bill_column_setting_id, c.use_original_quantity, bill.title AS title, bill.id AS bill_id, i.id AS bill_item_id, bill.type, rate.final_value AS final_value, bill.lft, $sqlFieldCond FROM " . SubPackageTable::getInstance()->getTableName() . " sp
			LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
			LEFT JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
			LEFT JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
			JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
			LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id
			JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
			LEFT JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " bur ON bur.bill_item_id = i.id AND bur.resource_item_library_id = spri.resource_item_id AND bur.deleted_at IS NULL
			LEFT JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
			LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS rate ON rate.relation_id = i.id
			LEFT JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = i.id AND spbi.sub_package_id = sp.id
			WHERE sp.id =" . $subPackage->id . " AND sp.deleted_at IS NULL
			AND bill.id IN (" . implode(',', $billIds) . ") AND bill.deleted_at IS NULL
			AND NOT (spri.sub_package_id IS NULL AND spsori.sub_package_id IS NULL AND spbi.sub_package_id IS NULL)
			AND (rate.relation_id = bur.bill_item_id OR rate.schedule_of_rate_item_formulated_column_id = sifc.id OR rate.relation_id = spbi.bill_item_id)
			AND rate.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND rate.final_value <> 0 AND rate.deleted_at IS NULL
			AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
			AND e.deleted_at IS NULL AND c.deleted_at IS NULL ORDER BY bill.lft");

        $stmtItem->execute();

        $records = $stmtItem->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $records as $record )
        {
            $quantityFieldName = $record['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

            if ( !array_key_exists($record['bill_id'], $billArray) )
            {
                $billArray[$record['bill_id']] = array(
                    'title'      => $record['title'],
                    'est_amount' => 0,
                    'type'       => $record['type'],
                );
            }

            $stmt = $pdo->prepare("SELECT COALESCE(fc.final_value, 0) AS value
				FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
				JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
				WHERE r.bill_item_id = " . $record['bill_item_id'] . " AND r.bill_column_setting_id = " . $record['bill_column_setting_id'] . "
				AND r.include IS TRUE AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0
				AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

            $stmt->execute();
            $quantityPerType = $stmt->fetch(PDO::FETCH_COLUMN, 0);

            $billArray[$record['bill_id']]['est_amount'] += $record['final_value'] * $quantityPerType;

            unset( $record );
        }

        unset( $records );

        return $billArray;
    }

    public static function getVariationOrderOverallTotal(SubPackage $subPackage)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM((i.total_unit * i.addition_quantity * i.rate) - (i.total_unit * i.omission_quantity * i.rate))), 2) AS nett_omission_addition
		FROM " . SubPackageVariationOrderItemTable::getInstance()->getTableName() . " i
		JOIN " . SubPackageVariationOrderTable::getInstance()->getTableName() . " vo ON i.sub_package_variation_order_id = vo.id
		WHERE vo.sub_package_id = " . $subPackage->id . " AND vo.is_approved IS TRUE
		AND i.type <> " . SubPackageVariationOrderItem::TYPE_HEADER . " AND i.rate <> 0
		AND vo.deleted_at IS NULL AND i.deleted_at IS NULL GROUP BY vo.sub_package_id");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public static function getVariationOrderUpToDateClaimAmount(SubPackage $subPackage)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(i.up_to_date_amount), 0), 2) AS amount
		FROM " . SubPackageVariationOrderTable::getInstance()->getTableName() . " vo
		JOIN " . SubPackageVariationOrderClaimTable::getInstance()->getTableName() . " c ON c.sub_package_variation_order_id = vo.id
		JOIN " . SubPackageVariationOrderClaimItemTable::getInstance()->getTableName() . " i ON i.sub_package_variation_order_claim_id = c.id
		WHERE vo.sub_package_id = " . $subPackage->id . " AND c.is_viewing IS TRUE AND vo.is_approved IS TRUE
		AND vo.deleted_at IS NULL AND c.deleted_at IS NULL AND i.deleted_at IS NULL GROUP BY vo.sub_package_id");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public static function getVariationOrderUpToDateClaimAmountPercentage(SubPackage $subPackage)
    {
        return Utilities::percent($subPackage->getVariationOrderUpToDateClaimAmount(), $subPackage->getVariationOrderOverallTotal());
    }

    public static function getMaterialOnSiteUpToDateClaimAmount(SubPackage $subPackage)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ROUND(COALESCE(SUM(mos.total_after_reduction), 0), 2) AS amount
		FROM " . SubPackageMaterialOnSiteTable::getInstance()->getTableName() . " mos
		WHERE mos.sub_package_id = " . $subPackage->id . " AND mos.status = " . SubPackageMaterialOnSite::STATUS_TYPE_THIS_CLAIM . "
		AND mos.deleted_at IS NULL
		GROUP BY mos.sub_package_id");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public static function getOverallTotalIncludingClaimed(ProjectStructure $project)
    {
        $data            = array();
        $subPackageIds   = array();
        $subPackageTotal = array();

        $pdo = self::getInstance()->getConnection()->getDbh();

        //Get Subpackages & Standard Bill Amount
        $stmt = $pdo->prepare("SELECT DISTINCT s.name AS title, s.id, s.locked, s.selected_company_id, s.project_structure_id,
		COALESCE(SUM(ROUND(rate.rate * type.qty_per_unit, 2)), 0) AS standard_bill_amount, s.priority
		FROM " . SubPackageTable::getInstance()->getTableName() . " s
		JOIN " . PostContractTable::getInstance()->getTableName() . " pc ON s.project_structure_id = pc.project_structure_id
		JOIN " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " type_ref ON type_ref.sub_package_id = s.id
		JOIN " . PostContractBillItemTypeTable::getInstance()->getTableName() . " type ON type.post_contract_id = pc.id
		AND type.bill_column_setting_id = type_ref.bill_column_setting_id
		JOIN " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " rate ON rate.sub_package_id = s.id
		AND rate.bill_item_id = type.bill_item_id
		WHERE s.project_structure_id = " . $project->id . " AND s.locked IS TRUE AND s.deleted_at IS NULL GROUP BY s.id
		ORDER BY s.priority");

        $stmt->execute();

        $subPackages = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( empty( $subPackages ) )
        {
            return $data;
        }

        foreach ( $subPackages as $subPackage )
        {
            $subPackageIds[] = $subPackage['id'];

            $subPackageTotal[$subPackage['id']] = 0;
        }

        // get bill(s) associated with the Sub Package Ids
        $stmt = $pdo->prepare("SELECT s.id, rate.sub_package_id, s.title, s.type, s.level, t.type AS bill_type, t.status AS bill_status,
			bls.id AS layout_id, COALESCE(SUM(rate.single_unit_grand_total), 0) AS overall_total_after_markup
			FROM " . SubPackagePostContractBillItemRateTable::getInstance()->getTableName() . " rate
			JOIN " . BillItemTable::getInstance()->getTableName() . " i ON rate.bill_item_id  = i.id AND i.deleted_at IS NULL
			JOIN " . BillElementTable::getInstance()->getTableName() . " e ON i.element_id =  e.id AND e.deleted_at IS NULL
			JOIN " . ProjectStructureTable::getInstance()->getTableName() . " s ON e.project_structure_id = s.id AND s.deleted_at IS NULL
			JOIN " . BillTypeTable::getInstance()->getTableName() . " t ON t.project_structure_id = s.id
			JOIN " . BillLayoutSettingTable::getInstance()->getTableName() . " bls ON bls.bill_id = s.id
			WHERE rate.sub_package_id IN (" . implode(',', $subPackageIds) . ") AND t.deleted_at IS NULL
			AND bls.deleted_at IS NULL
			GROUP BY s.id, s.title, s.type, s.level, t.type, t.status, bls.id, rate.sub_package_id
			ORDER BY s.id ASC");

        $stmt->execute();

        $bills = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $subPackages as $subPackage )
        {
            $claimedTotal = 0;

            $spObject     = new SubPackage();
            $spObject->id = $subPackage['id'];

            $revision = SubPackagePostContractClaimRevisionTable::getCurrentSelectedProjectRevision($spObject);

            foreach ( $bills as $billKey => $bill )
            {
                if ( $bill['sub_package_id'] != $spObject->id )
                {
                    continue;
                }

                $bills[$billKey]['up_to_date_percentage'] = 0;
                $bills[$billKey]['up_to_date_amount']     = 0;

                if ( $bills[$billKey]['bill_type'] == BillType::TYPE_PRELIMINARY )
                {
                    list( $billTotal, $upToDateAmount ) = SubPackagePreliminariesClaimTable::getUpToDateAmountByBillId($subPackage, $bill['id'], $revision);
                }
                else
                {
                    $bills[$billKey]['overall_total_after_markup'] = SubPackagePostContractStandardClaimTable::getOverallTotalByBillId($bill['id'], $revision);
                    $upToDateAmount                                = SubPackagePostContractStandardClaimTable::getUpToDateAmountByBillId($bill['id'], $revision);
                }

                $claimedTotal += $upToDateAmount;

                unset( $bills[$billKey] );
            }

            $subPackage['claimed_total']      = $claimedTotal;
            $subPackage['claimed_percentage'] = Utilities::percent($claimedTotal, $subPackage['standard_bill_amount']);
            $subPackage['type']               = sfBuildSpacePostContractClaimWithSubPackageReportGenerator::SUBPACKAGE_TYPE;

            unset( $subPackage['id'], $subPackage['locked'], $subPackage['selected_company_id'], $subPackage['project_structure_id'], $subPackage['priority'] );

            $subPackageVOAmt        = SubPackageTable::getVariationOrderOverallTotal($spObject);
            $subPackageVOClaimedAmt = SubPackageTable::getVariationOrderUpToDateClaimAmount($spObject);

            $data[] = $subPackage;

            $data[] = array(
                'title'                => sfBuildSpacePostContractClaimWithSubPackageReportGenerator::VO_TEXT,
                'standard_bill_amount' => $subPackageVOAmt,
                'claimed_total'        => $subPackageVOClaimedAmt,
                'claimed_percentage'   => Utilities::percent($subPackageVOClaimedAmt, $subPackageVOAmt),
                'type'                 => sfBuildSpacePostContractClaimWithSubPackageReportGenerator::SUBPACKAGE_TYPE,
            );

            $data[] = array(
                'title'                => sfBuildSpacePostContractClaimWithSubPackageReportGenerator::MOS_TEXT,
                'standard_bill_amount' => 0,
                'claimed_total'        => SubPackageTable::getMaterialOnSiteUpToDateClaimAmount($spObject),
                'claimed_percentage'   => 0,
                'type'                 => sfBuildSpacePostContractClaimWithSubPackageReportGenerator::SUBPACKAGE_TYPE,
            );

            unset( $subPackage );
        }

        return $data;
    }

    public static function getRatesAndTotalBySubPackageAndBillAndItemIds(SubPackage $subPackage, ProjectStructure $bill, Array $billItemIds)
    {
        $project = Doctrine_Core::getTable('ProjectStructure')->find($bill->root_id);

        $pageNoPrefix = $bill->BillLayoutSetting->page_no_prefix;
        $projectMainInfo = $project->MainInformation;
        $isPostContract = ( $projectMainInfo->status == ProjectMainInformation::STATUS_POSTCONTRACT );
        $elementIds = array();
        $data = array();
        $temporarilyBillItemsContainer = array();
        $quantityPerTypes = array();
        $pdo = $subPackage->getTable()->getConnection()->getDbh();

        if( ! empty( $billItemIds ) )
        {
            $records = SubPackageTable::getRatesBySubPackageAndBillAndItemIds($subPackage, $bill, $billItemIds);

            foreach($records as $record)
            {
                $elementIds[ $record['element_id'] ] = $record['element_id'];
            }

            $subConRates = SubPackageBillItemRateTable::getSubConRatesBySubPackageAndItemIds($subPackage, $billItemIds);

            $billRefSelector = 'p.bill_ref_element_no, p.bill_ref_page_no, p.bill_ref_char';
            $postContractJoinTable = null;

            if( $isPostContract )
            {
                $billRefSelector = 'pc.bill_ref_element_no, pc.bill_ref_page_no, pc.bill_ref_char';
                $postContractJoinTable = 'JOIN ' . PostContractBillItemRateTable::getInstance()->getTableName() . " pc ON (pc.bill_item_id = p.id)";
            }

            $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.element_id, p.root_id, p.description, p.type, p.uom_id, uom.symbol AS uom_symbol, p.grand_total, p.grand_total_quantity, p.level, p.priority, p.lft, {$billRefSelector}
                FROM " . BillItemTable::getInstance()->getTableName() . " c
                JOIN " . BillItemTable::getInstance()->getTableName() . " p ON c.lft BETWEEN p.lft AND p.rgt {$postContractJoinTable}
                LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
                WHERE c.root_id = p.root_id AND c.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . "
                AND c.id IN (" . implode(',', $billItemIds) . ")
                AND c.project_revision_deleted_at IS NULL
                AND c.deleted_at IS NULL AND p.project_revision_deleted_at IS NULL AND p.deleted_at IS NULL
                ORDER BY p.element_id, p.priority, p.lft, p.level ASC");

            $stmt->execute();
            $billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $elements = BillElementTable::getElementsByElementIds($elementIds);

            if( ! empty( $records ) )
            {
                // will start to construct query to get quantity per type
                $getQuantityPerTypes = BillItemTypeReferenceFormulatedColumnTable::getQuantityPerType($records);

                foreach($getQuantityPerTypes as $quantityPerType)
                {
                    $quantityPerTypes[ $quantityPerType['bill_item_id'] ][ $quantityPerType['bill_column_setting_id'] ] = $quantityPerType['value'];

                    unset( $quantityPerType );
                }

                unset( $getQuantityPerTypes );

                // process all the bill item(s) before passing to be merge with element level
                foreach($records as $recordKey => &$record)
                {
                    foreach($billItems as $key => &$billItem)
                    {
                        $tendererCostings = array();

                        $billItems[ $key ]['bill_ref'] = BillItemTable::generateBillRef($pageNoPrefix, $billItems[ $key ]['bill_ref_element_no'], $billItems[ $key ]['bill_ref_page_no'], $billItems[ $key ]['bill_ref_char']);

                        if( ! array_key_exists($record['bill_column_setting_id'] . '-' . BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT . '-value', $billItem)
                            && ! array_key_exists($record['bill_column_setting_id'] . '-total_per_unit', $billItem)
                        )
                        {
                            $billItems[ $key ][ $record['bill_column_setting_id'] . '-' . BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT . '-value' ] = 0;
                            $billItems[ $key ][ $record['bill_column_setting_id'] . '-total_per_unit' ] = 0;
                        }

                        if( ! array_key_exists('rate-value', $billItem) )
                        {
                            $billItems[ $key ]['rate-value'] = 0;
                            $billItems[ $key ]['type'] = (string)$billItems[ $key ]['type'];
                        }

                        if( ! array_key_exists('total_est_amount', $billItem) )
                        {
                            $billItems[ $key ]['total_est_amount'] = 0;
                        }

                        if( ! array_key_exists('total_qty', $billItem) )
                        {
                            $billItems[ $key ]['total_qty'] = 0;
                        }

                        if( $record['bill_item_id'] == $billItems[ $key ]['id'] )
                        {
                            $quantityFieldName = $record['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                            $stmt = $pdo->prepare("SELECT COUNT(x.counter)
                                FROM " . SubPackageTable::getInstance()->getTableName() . " sp
                                JOIN " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " x ON x.sub_package_id = sp.id
                                LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
                                JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
                                LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id AND x.bill_column_setting_id = c.id
                                JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
                                WHERE sp.id =" . $subPackage->id . " AND sp.deleted_at IS NULL
                                AND bill.id = " . $bill->id . " AND bill.deleted_at IS NULL
                                AND x.bill_column_setting_id = " . $record['bill_column_setting_id'] . "
                                AND i.id = " . $record['bill_item_id'] . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
                                AND c.deleted_at IS NULL");

                            $stmt->execute();

                            $totalAssignedUnit = $stmt->fetch(PDO::FETCH_COLUMN, 0);

                            $stmt = $pdo->prepare("SELECT SUM(COALESCE(fc.final_value, 0)) AS value
                                FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
                                JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
                                WHERE r.bill_item_id = " . $record['bill_item_id'] . " AND r.bill_column_setting_id = " . $record['bill_column_setting_id'] . "
                                AND r.include IS TRUE AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0
                                AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

                            $stmt->execute();

                            $quantityPerType = $stmt->fetch(PDO::FETCH_COLUMN, 0) * $totalAssignedUnit;

                            $billItems[ $key ][ $record['bill_column_setting_id'] . '-' . BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT . '-value' ] = $quantityPerType;
                            $billItems[ $key ][ $record['bill_column_setting_id'] . '-total_per_unit' ] = $record['final_value'] * $quantityPerType;
                            $billItems[ $key ]['rate-value'] = $record['final_value'];
                            $billItems[ $key ]['total_est_amount'] += $record['final_value'] * $quantityPerType;
                            $billItems[ $key ]['total_qty'] += $quantityPerType;
                        }

                        foreach($subConRates as $subConRate)
                        {
                            if( ! array_key_exists($subConRate['company_id'] . '-rate-value', $billItems[ $key ]) and $billItems[ $key ]['type'] != BillItem::TYPE_HEADER and $billItems[ $key ]['type'] != BillItem::TYPE_HEADER_N and $billItems[ $key ]['type'] != BillItem::TYPE_NOID )
                            {
                                $billItems[ $key ][ $subConRate['company_id'] . '-rate-value' ] = 0;
                                $billItems[ $key ][ $subConRate['company_id'] . '-grand_total' ] = 0;
                            }

                            if( $subConRate['bill_item_id'] == $billItems[ $key ]['id'] )
                            {
                                $billItems[ $key ][ $subConRate['company_id'] . '-rate-value' ] = $subConRate['rate'];
                                $billItems[ $key ][ $subConRate['company_id'] . '-grand_total' ] = $subConRate['rate'] * $billItem['total_qty'];
                            }

                            $tendererCostings[ $subConRate['company_id'] ] = isset( $billItems[ $key ][ $subConRate['company_id'] . '-rate-value' ] ) ? $billItems[ $key ][ $subConRate['company_id'] . '-rate-value' ] : 0;
                        }

                        // if more than 2 tenderers selected then only apply the assignment for the highest
                        // and lowest costing from tenderers
                        if( $billItems[ $key ]['type'] != BillItem::TYPE_HEADER and $billItems[ $key ]['type'] != BillItem::TYPE_HEADER_N and $billItems[ $key ]['type'] != BillItem::TYPE_NOID and count($tendererCostings) > 1 )
                        {
                            // determine which costing from tenderers is highest and lowest
                            $minTotalIndex = array_keys($tendererCostings, min($tendererCostings));
                            $maxTotalIndex = array_keys($tendererCostings, max($tendererCostings));

                            // Lowest/Highest not shown if one of the rates/totals are empty (i.e. value = 0)
                            if( min($tendererCostings) != 0 )
                            {
                                $billItems[ $key ][ $minTotalIndex[0] . '-lowest_cost' ] = true;
                                $billItems[ $key ][ $maxTotalIndex[0] . '-highest_cost' ] = true;
                            }
                        }

                        $temporarilyBillItemsContainer[ $billItems[ $key ]['element_id'] ][ $billItems[ $key ]['id'] ] = $billItems[ $key ];

                        unset( $tendererCostings, $billItem );
                    }

                    unset( $record, $records[ $recordKey ] );
                }

                // merge bill element(s) with bill item(s)
                foreach($elements as &$element)
                {
                    $data[] = array(
                        'id'          => 'element-' . $element['id'],
                        'bill_ref'    => null,
                        'description' => $element['description'],
                        'type'        => -1,
                        'uom_symbol'  => null,
                        'element_id'  => $element['id'],
                    );

                    foreach($temporarilyBillItemsContainer[ $element['id'] ] as &$billItem)
                    {
                        $data[] = $billItem;

                        unset( $billItem );
                    }

                    unset( $temporarilyBillItemsContainer[ $element['id'] ], $element );
                }

                unset( $records );
            }
        }

        return $data;
    }

    public static function getEstimatedTotalNoBuildUps(ProjectStructure $project, SubPackage $subPackage=null)
    {
        $billItems = self::getNoBuildUpBillItems($project, $subPackage);

        $totalCost = [];

        foreach($billItems as $subPackageId => $records)
        {
            if(!array_key_exists($subPackageId, $totalCost))
            {
                $totalCost[$subPackageId] = 0;
            }

            foreach($records as $billId => $items)
            {
                foreach($items as $billItemId => $item)
                {
                    $totalCost[$subPackageId] += $item['rate']*$item['total_qty'];
                }
            }
        }

        return $totalCost;
    }

    public static function getNoBuildUpBillItems(ProjectStructure $project, SubPackage $subPackage=null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT c.id AS bill_column_setting_id, c.use_original_quantity, bill.id AS bill_id
        FROM " . ProjectStructureTable::getInstance()->getTableName() . " bill
        JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = bill.id
        WHERE bill.root_id =" . $project->id . "
        AND bill.deleted_at IS NULL AND c.deleted_at IS NULL
        ORDER BY bill.id, c.id");

        $stmt->execute();

        $billColumnSettingData = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $billColumnSettings    = [];

        foreach($billColumnSettingData as $data)
        {
            if(!array_key_exists($data['bill_id'], $billColumnSettings))
            {
                $billColumnSettings[$data['bill_id']] = [];
            }

            $billColumnSettings[$data['bill_id']][] = [
                'id'                    => $data['bill_column_setting_id'],
                'use_original_quantity' => $data['use_original_quantity']
            ];
        }

        $billColumnSettingData = null;
        unset($billColumnSettingData);

        $billItemRates = self::getNoBuildUpBillItemRates($project, $subPackage);

        $billItems = [];

        foreach($billItemRates as $subPackageId => $records)
        {
            $billItemQuantities[$subPackageId]   = [];
            $billItems[$subPackageId] = [];

            foreach($records as $billId => $records)
            {
                if(!array_key_exists($billId, $billItems))
                {
                    $billItems[$subPackageId][$billId] = [];
                }

                foreach($records as $billItemId => $record)
                {
                    if(array_key_exists($billId, $billColumnSettings) and !array_key_exists($billItemId, $billItemQuantities[$subPackageId]))
                    {
                        $totalQty = 0;
                        foreach($billColumnSettings[$billId] as $billColumnSetting)
                        {
                            $quantityFieldName = $billColumnSetting['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                            $stmt = $pdo->prepare("SELECT COALESCE(fc.final_value, 0) AS value
                            FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
                            JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
                            WHERE r.bill_item_id = " . $billItemId . " AND r.bill_column_setting_id = " . $billColumnSetting['id'] . "
                            AND r.include IS TRUE AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0
                            AND r.deleted_at IS NULL AND fc.deleted_at IS NULL
                            LIMIT 1");

                            $stmt->execute();
                            
                            $qtyPerType = $stmt->fetch(PDO::FETCH_COLUMN, 0);

                            $stmt = $pdo->prepare("SELECT COALESCE(COUNT(id), 0) AS value
                            FROM " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " t
                            WHERE t.sub_package_id = " . $subPackageId . "
                            AND t.bill_column_setting_id = " . $billColumnSetting['id']."
                            LIMIT 1");

                            $stmt->execute();

                            $totalAssignedUnits = $stmt->fetch(PDO::FETCH_COLUMN, 0);

                            $totalQty += ($qtyPerType * $totalAssignedUnits);

                            $billItemQuantities[$subPackageId][$billItemId] = [
                                'qty'   => $totalQty
                            ];
                        }
                    }

                    $rate = round($record['rate'], 2);
                    $qty = (array_key_exists($billItemId, $billItemQuantities[$subPackageId])) ? $billItemQuantities[$subPackageId][$billItemId] : 0;
                    
                    $billItems[$subPackageId][$billId][$billItemId] = [
                        'element_id'  => $record['element_id'],
                        'rate'        => $record['rate'],
                        'total_qty'   => $qty['qty']
                    ];
                }
            }

            $billItemQuantities = null;
            unset($billItemQuantities);
        }

        return $billItems;
    }

    public static function getEstimatedTotalByResources(ProjectStructure $project, SubPackage $subPackage=null)
    {
        $billItemRates = self::getBillItemRates($project, $subPackage);

        $totalCostByResources = [];

        foreach($billItemRates as $subPackageId => $byResources)
        {
            if(!array_key_exists($subPackageId, $totalCostByResources))
            {
                $totalCostByResources[$subPackageId] = [];
            }
            
            foreach($byResources as $resourceId => $byBills)
            {
                if(!array_key_exists($resourceId, $totalCostByResources[$subPackageId]))
                {
                    $totalCostByResources[$subPackageId][$resourceId] = 0;
                }

                foreach($byBills as $billId => $byItems)
                {
                    foreach($byItems as $itemId => $data)
                    {
                        if(array_key_exists($resourceId, $totalCostByResources[$subPackageId]))
                        {
                            $totalCostByResources[$subPackageId][$resourceId] += $data['total_cost_after_conversion']*$data['total_qty'];
                        }

                        unset($billItemRates[$subPackageId][$resourceId][$billId][$itemId]);
                    }
                }

                unset($billItemRates[$subPackageId][$resourceId]);
            }
            
            unset($billItemRates[$subPackageId]);
        }
        
        return $totalCostByResources;
    }

    public static function getBillItemRates(ProjectStructure $project, SubPackage $subPackage=null)
    {
        $resourcesBySubPackages = self::getSubPackageResources($project, $subPackage);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT c.id AS bill_column_setting_id, c.use_original_quantity, bill.id AS bill_id
        FROM " . ProjectStructureTable::getInstance()->getTableName() . " bill
        JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = bill.id
        WHERE bill.root_id =" . $project->id . "
        AND bill.deleted_at IS NULL AND c.deleted_at IS NULL
        ORDER BY bill.id, c.id");

        $stmt->execute();

        $billColumnSettingData = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $billColumnSettings    = [];

        foreach($billColumnSettingData as $data)
        {
            if(!array_key_exists($data['bill_id'], $billColumnSettings))
            {
                $billColumnSettings[$data['bill_id']] = [];
            }

            $billColumnSettings[$data['bill_id']][] = [
                'id'                    => $data['bill_column_setting_id'],
                'use_original_quantity' => $data['use_original_quantity']
            ];
        }

        $billColumnSettingData = null;
        unset($billColumnSettingData);

        $billItemRates = [];
        
        foreach($resourcesBySubPackages as $subPackageId => $resources)
        {
            if(!empty($resources))
            {
                $queries = [
                    "SELECT DISTINCT bi.id AS bill_item_id, bill.id AS bill_id, be.id AS element_id, bur.resource_library_id AS resource_id, 
                    buri.id AS build_up_rate_item_id, buri.line_total, burs.apply_conversion_factor, burs.conversion_factor_operator,
                    burs.conversion_factor_amount, burs.markup, burs.rounding_type
                    FROM " . SubPackageTable::getInstance()->getTableName() . " sp
                    JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
                    JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
                    JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
                    JOIN " . BillElementTable::getInstance()->getTableName() . " AS be ON be.project_structure_id = bill.id
                    JOIN " . BillItemTable::getInstance()->getTableName() . " AS bi ON bi.element_id = be.id
                    JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " fc ON bi.id = fc.relation_id AND fc.schedule_of_rate_item_formulated_column_id = sifc.id AND fc.has_build_up IS TRUE
                    JOIN " . BillBuildUpRateSummaryTable::getInstance()->getTableName() . " burs ON burs.bill_item_id = bi.id
                    JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " buri ON buri.bill_item_id = burs.bill_item_id 
                    JOIN " . BillBuildUpRateResourceTable::getInstance()->getTableName() . " bur ON buri.build_up_rate_resource_id = bur.id AND bur.bill_item_id = buri.bill_item_id
                    WHERE sp.id = ".$subPackageId." AND bill.root_id = " . $project->id . "
                    AND bur.resource_library_id IN (".implode(',', array_keys($resources)).")
                    AND bill.deleted_at IS NULL AND be.deleted_at IS NULL
                    AND sifc.deleted_at IS NULL
                    AND fc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND fc.final_value <> 0 AND fc.deleted_at IS NULL
                    AND bi.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND bi.project_revision_deleted_at IS NULL AND bi.deleted_at IS NULL
                    AND buri.line_total <> 0
                    AND burs.deleted_at IS NULL AND bur.deleted_at IS NULL",

                    "SELECT DISTINCT bi.id AS bill_item_id, bill.id AS bill_id, be.id AS element_id, bur.resource_library_id AS resource_id, 
                    buri.id AS build_up_rate_item_id, buri.line_total, burs.apply_conversion_factor, burs.conversion_factor_operator,
                    burs.conversion_factor_amount, burs.markup, burs.rounding_type
                    FROM " . SubPackageTable::getInstance()->getTableName() . " sp
                    JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
                    JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
                    JOIN " . BillElementTable::getInstance()->getTableName() . " AS be ON be.project_structure_id = bill.id
                    JOIN " . BillItemTable::getInstance()->getTableName() . " AS bi ON bi.element_id = be.id
                    JOIN " . BillBuildUpRateSummaryTable::getInstance()->getTableName() . " burs ON burs.bill_item_id = bi.id
                    JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " buri ON buri.bill_item_id = burs.bill_item_id AND buri.resource_item_library_id = spri.resource_item_id
                    JOIN " . BillBuildUpRateResourceTable::getInstance()->getTableName() . " bur ON buri.build_up_rate_resource_id = bur.id AND bur.bill_item_id = buri.bill_item_id
                    WHERE sp.id = ".$subPackageId." AND bill.root_id = " . $project->id . "
                    AND bur.resource_library_id IN (".implode(',', array_keys($resources)).")
                    AND bill.deleted_at IS NULL AND be.deleted_at IS NULL
                    AND bi.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND bi.project_revision_deleted_at IS NULL AND bi.deleted_at IS NULL
                    AND buri.line_total <> 0
                    AND burs.deleted_at IS NULL AND bur.deleted_at IS NULL",

                    "SELECT DISTINCT bi.id AS bill_item_id, bill.id AS bill_id, be.id AS element_id, bur.resource_library_id AS resource_id, 
                    buri.id AS build_up_rate_item_id, buri.line_total, burs.apply_conversion_factor, burs.conversion_factor_operator,
                    burs.conversion_factor_amount, burs.markup, burs.rounding_type
                    FROM " . SubPackageTable::getInstance()->getTableName() . " sp
                    JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
                    JOIN " . BillElementTable::getInstance()->getTableName() . " AS be ON be.project_structure_id = bill.id
                    JOIN " . BillItemTable::getInstance()->getTableName() . " AS bi ON bi.element_id = be.id
                    JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " fc ON bi.id = fc.relation_id AND fc.has_build_up IS TRUE
                    JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = bi.id AND spbi.sub_package_id = sp.id
                    JOIN " . BillBuildUpRateSummaryTable::getInstance()->getTableName() . " burs ON burs.bill_item_id = spbi.bill_item_id
                    JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " buri ON buri.bill_item_id = burs.bill_item_id 
                    JOIN " . BillBuildUpRateResourceTable::getInstance()->getTableName() . " bur ON buri.build_up_rate_resource_id = bur.id AND bur.bill_item_id = buri.bill_item_id
                    WHERE sp.id = ".$subPackageId." AND bill.root_id = " . $project->id . "
                    AND bur.resource_library_id IN (".implode(',', array_keys($resources)).")
                    AND bill.deleted_at IS NULL AND be.deleted_at IS NULL
                    AND fc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND fc.final_value <> 0 AND fc.deleted_at IS NULL
                    AND bi.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND bi.project_revision_deleted_at IS NULL AND bi.deleted_at IS NULL
                    AND buri.line_total <> 0
                    AND burs.deleted_at IS NULL AND bur.deleted_at IS NULL"
                ];

                $buildUpItemsByResources = [];
                $billItemBuildUpRateItems = [];

                foreach($queries as $query)
                {
                    self::getBuildUpItemsByResources($query, $billItemBuildUpRateItems, $buildUpItemsByResources);
                }

                $queries = null;
                unset($queries);

                foreach($buildUpItemsByResources as $resourceId => $buildUpItemsByBills)
                {
                    foreach($buildUpItemsByBills as $billId => $buildUpItemsByBillItems)
                    {
                        foreach($buildUpItemsByBillItems as $billItemId => $records)
                        {
                            if(array_key_exists($billItemId, $billItemBuildUpRateItems) && array_key_exists($resourceId, $billItemBuildUpRateItems[$billItemId]))
                            {
                                $totalCost = array_sum($billItemBuildUpRateItems[$billItemId][$resourceId]);

                                $buildUpItemsByResources[$resourceId][$billId][$billItemId]['total_cost'] = $totalCost;

                                if($records['apply_conversion_factor'])
                                {
                                    $exp = $totalCost.$records['conversion_factor_operator'].$records['conversion_factor_amount'];

                                    $evaluator = new EvalMath(true, true);
                                    $evaluator->suppress_errors = true;
                                    $evaluatedValue = $evaluator->evaluate($exp);

                                    $totalCost = $evaluatedValue ? $evaluatedValue : 0;
                                }

                                $buildUpItemsByResources[$resourceId][$billId][$billItemId]['total_cost_after_conversion'] = $totalCost;
                            }
                        }
                    }
                }

                $billItemBuildUpRateItems = null;
                unset($billItemBuildUpRateItems);

                $billItemQuantities[$subPackageId]   = [];

                foreach($buildUpItemsByResources as $resourceId => $records)
                {
                    foreach($records as $billId => $record)
                    {
                        foreach($record as $billItemId => $data)
                        {
                            if(array_key_exists($billId, $billColumnSettings) and !array_key_exists($billItemId, $billItemQuantities[$subPackageId] ))
                            {
                                $totalQty = 0;

                                foreach($billColumnSettings[$billId] as $billColumnSetting)
                                {
                                    $quantityFieldName = $billColumnSetting['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                                    $stmt = $pdo->prepare("SELECT COALESCE(fc.final_value, 0) AS value
                                    FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
                                    JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
                                    WHERE r.bill_item_id = " . $billItemId . " AND r.bill_column_setting_id = " . $billColumnSetting['id'] . "
                                    AND r.include IS TRUE AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0
                                    AND r.deleted_at IS NULL AND fc.deleted_at IS NULL
                                    LIMIT 1");

                                    $stmt->execute();
                                    
                                    $qtyPerType = $stmt->fetch(PDO::FETCH_COLUMN, 0);

                                    $stmt = $pdo->prepare("SELECT COALESCE(COUNT(id), 0) AS value
                                    FROM " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " t
                                    WHERE t.sub_package_id = " . $subPackageId . "
                                    AND t.bill_column_setting_id = " . $billColumnSetting['id']."
                                    LIMIT 1");

                                    $stmt->execute();

                                    $totalAssignedUnits = $stmt->fetch(PDO::FETCH_COLUMN, 0);
                                    
                                    $totalQty += ($qtyPerType * $totalAssignedUnits);
                                }

                                $billItemQuantities[$subPackageId][$billItemId] = [
                                    'qty'   => $totalQty
                                ];
                            }

                            $finalCost = $data['total_cost_after_conversion'];

                            $markupPrice = $finalCost * ($data['markup']/100);
                            $finalCost   = $finalCost + $markupPrice;

                            switch($data['rounding_type'])
                            {
                                case BillBuildUpRateSummary::ROUNDING_TYPE_UPWARD:
                                    $finalCost  = ceil($finalCost);
                                    break;
                                case BillBuildUpRateSummary::ROUNDING_TYPE_DOWNWARD:
                                    $finalCost  =  floor($finalCost);
                                    break;
                                case BillBuildUpRateSummary::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                                    $finalCost  =  round($finalCost);
                                    break;
                                case BillBuildUpRateSummary::ROUNDING_TYPE_NEAREST_TENTH:
                                    $finalCost  =  round($finalCost * 10) / 10;
                                    break;
                                default:
                                    $finalCost  =  round($finalCost, 2);
                            }

                            $qty = (array_key_exists($billItemId, $billItemQuantities[$subPackageId])) ? $billItemQuantities[$subPackageId][$billItemId] : [
                                'qty'   => 0,
                                'units' => 0
                            ];

                            $buildUpItemsByResources[$resourceId][$billId][$billItemId]['total_cost_after_conversion'] = $finalCost;
                            $buildUpItemsByResources[$resourceId][$billId][$billItemId]['final_cost']                  = $finalCost; 
                            $buildUpItemsByResources[$resourceId][$billId][$billItemId]['total_qty']                   = $qty['qty']; 
                        }
                        
                        unset($records[$billId]);
                    }
                }

                

                $billItemRates[$subPackageId] = $buildUpItemsByResources;

                $billItemQuantities = null;
                unset($billItemQuantities);
            }
        }

        return $billItemRates;
    }

    private static function getNoBuildUpBillItemRates(ProjectStructure $project, SubPackage $subPackage=null)
    {
        $pdo  = self::getInstance()->getConnection()->getDbh();

        $billItemNoBuildUpSql = "SELECT bi.id, sp.id AS sub_package_id, bill.id AS bill_id, bi.element_id AS element_id, fc.final_value AS rate
        FROM " . SubPackageTable::getInstance()->getTableName() . " sp
        JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " AS spbi ON spbi.sub_package_id = sp.id
        JOIN " . BillItemTable::getInstance()->getTableName() . " AS bi ON bi.id = spbi.bill_item_id
        JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " fc ON fc.relation_id = bi.id
        JOIN " . BillElementTable::getInstance()->getTableName() . " AS be ON be.id = bi.element_id
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON bill.id = be.project_structure_id AND bill.root_id = sp.project_structure_id
        WHERE sp.project_structure_id = ".$project->id." AND sp.deleted_at IS NULL";

        if($subPackage)
        {
            $billItemNoBuildUpSql .= " AND sp.id =" . $subPackage->id . " ";
        }

        $billItemNoBuildUpSql .= " AND fc.schedule_of_rate_item_formulated_column_id IS NULL AND fc.has_build_up IS NOT TRUE AND fc.deleted_at IS NULL
        AND NOT EXISTS (
            SELECT 1 FROM " . BillBuildUpRateItemTable::getInstance()->getTableName() . " buri
            WHERE buri.bill_item_id = bi.id
            AND buri.deleted_at IS NULL
            LIMIT 1
        )
        AND fc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND fc.deleted_at IS NULL
        AND bi.project_revision_deleted_at IS NULL AND bi.deleted_at IS NULL
        AND be.deleted_at IS NULL AND bill.deleted_at IS NULL";

        $scheduleOfRateNoBuildUpSql = "SELECT bi.id, sp.id AS sub_package_id, bill.id AS bill_id, bi.element_id AS element_id, fc.final_value AS rate
        FROM " . SubPackageTable::getInstance()->getTableName() . " sp
        JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
        JOIN " . ScheduleOfRateItemTable::getInstance()->getTableName() . " AS sori ON sori.id = spsori.schedule_of_rate_item_id
        JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sorifc ON sorifc.relation_id = sori.id 
        JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " fc ON fc.schedule_of_rate_item_formulated_column_id = sorifc.id
        JOIN " . BillItemTable::getInstance()->getTableName() . " AS bi ON bi.id = fc.relation_id
        JOIN " . BillElementTable::getInstance()->getTableName() . " AS be ON be.id = bi.element_id
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS bill ON bill.id = be.project_structure_id AND bill.root_id = sp.project_structure_id
        WHERE sp.project_structure_id = ".$project->id." AND sp.deleted_at IS NULL";

        if($subPackage)
        {
            $scheduleOfRateNoBuildUpSql .= " AND sp.id =" . $subPackage->id . " ";
        }

        $scheduleOfRateNoBuildUpSql .= " AND fc.has_build_up IS NOT TRUE AND fc.deleted_at IS NULL
        AND sorifc.has_build_up IS NOT TRUE AND sorifc.deleted_at IS NULL
        AND NOT EXISTS (
            SELECT 1 FROM " . ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName() . " buri
            WHERE buri.schedule_of_rate_item_id = sori.id
            AND buri.deleted_at IS NULL
            LIMIT 1
        )
        AND sori.deleted_at IS NULL
        AND fc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND fc.final_value <> 0 AND fc.deleted_at IS NULL
        AND bi.project_revision_deleted_at IS NULL AND bi.deleted_at IS NULL
        AND be.deleted_at IS NULL AND bill.deleted_at IS NULL";

        $queries = [
            $billItemNoBuildUpSql,
            $scheduleOfRateNoBuildUpSql
        ];

        $billItemRates = [];

        foreach($queries as $query)
        {
            $stmt = $pdo->prepare($query);

            $stmt->execute();
                
            $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach($records as $idx => $record)
            {
                if(!array_key_exists($record['sub_package_id'], $billItemRates))
                {
                    $billItemRates[$record['sub_package_id']] = [];
                }

                if(!array_key_exists($record['bill_id'], $billItemRates[$record['sub_package_id']]))
                {
                    $billItemRates[$record['sub_package_id']][$record['bill_id']] = [];
                }

                $billItemRates[$record['sub_package_id']][$record['bill_id']][$record['id']] = [
                    'element_id' => $record['element_id'],
                    'rate'       => $record['rate']
                ];

                unset($records[$idx]);
            }
        }
        
        return $billItemRates;
    }

    private static function getBuildUpItemsByResources($sql, &$billItemBuildUpRateItems, &$buildUpItemsByResources)
    {
        $pdo  = self::getInstance()->getConnection()->getDbh();
        $stmt = $pdo->prepare($sql);

        $stmt->execute();
            
        $itemBuildUpRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach($itemBuildUpRecords as $idx => $itemBuildup)
        {
            if(!array_key_exists($itemBuildup['resource_id'], $buildUpItemsByResources))
            {
                $buildUpItemsByResources[$itemBuildup['resource_id']] = [];
            }

            if(!array_key_exists($itemBuildup['bill_id'], $buildUpItemsByResources[$itemBuildup['resource_id']]))
            {
                $buildUpItemsByResources[$itemBuildup['resource_id']][$itemBuildup['bill_id']] = [];
            }

            if(!array_key_exists($itemBuildup['bill_item_id'], $buildUpItemsByResources[$itemBuildup['resource_id']][$itemBuildup['bill_id']]))
            {
                $buildUpItemsByResources[$itemBuildup['resource_id']][$itemBuildup['bill_id']][$itemBuildup['bill_item_id']] = [
                    'element_id'                  => $itemBuildup['element_id'],
                    'markup'                      => $itemBuildup['markup'],
                    'rounding_type'               => $itemBuildup['rounding_type'],
                    'apply_conversion_factor'     => $itemBuildup['apply_conversion_factor'],
                    'conversion_factor_amount'    => $itemBuildup['conversion_factor_amount'],
                    'conversion_factor_operator'  => $itemBuildup['conversion_factor_operator'],
                    'total_cost'                  => 0,
                    'total_cost_after_conversion' => 0
                ];
            }

            if(!array_key_exists($itemBuildup['bill_item_id'], $billItemBuildUpRateItems))
            {
                $billItemBuildUpRateItems[$itemBuildup['bill_item_id']] = [];
            }

            if(!array_key_exists($itemBuildup['resource_id'], $billItemBuildUpRateItems[$itemBuildup['bill_item_id']]))
            {
                $billItemBuildUpRateItems[$itemBuildup['bill_item_id']][$itemBuildup['resource_id']] = [];
            }

            $billItemBuildUpRateItems[$itemBuildup['bill_item_id']][$itemBuildup['resource_id']][$itemBuildup['build_up_rate_item_id']] = $itemBuildup['line_total'];

            unset($itemBuildUpRecords[$idx]);
        }

        $itemBuildUpRecords = null;
        unset($itemBuildUpRecords);
    }

    public static function getSubPackageResources(ProjectStructure $project, SubPackage $subPackage=null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $spResourceItemSql = "SELECT DISTINCT sp.id, r.id AS resource_id, r.name AS resource_name
        FROM " . SubPackageTable::getInstance()->getTableName() . " sp
        JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
        JOIN " . ResourceItemTable::getInstance()->getTableName() . " AS ri ON ri.id = spri.resource_item_id
        JOIN " . ResourceTradeTable::getInstance()->getTableName() . " AS rt ON ri.resource_trade_id = rt.id
        JOIN " . ResourceTable::getInstance()->getTableName() . " AS r ON r.id = rt.resource_id
        WHERE sp.project_structure_id = ".$project->id." AND sp.deleted_at IS NULL";

        if($subPackage)
        {
            $spResourceItemSql .= " AND sp.id =" . $subPackage->id . " ";
        }

        $spResourceItemSql .= " GROUP BY sp.id, r.id ORDER BY sp.id, r.id";

        $spBillItemSql = "SELECT DISTINCT sp.id, r.id AS resource_id, r.name AS resource_name
        FROM " . SubPackageTable::getInstance()->getTableName() . " sp
        JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " AS spbi ON spbi.sub_package_id = sp.id
        JOIN " . BillItemTable::getInstance()->getTableName() . " AS bi ON bi.id = spbi.bill_item_id
        JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " buri ON buri.bill_item_id = bi.id
        JOIN " . BillBuildUpRateResourceTable::getInstance()->getTableName() . " bur ON buri.build_up_rate_resource_id = bur.id
        JOIN " . ResourceTable::getInstance()->getTableName() . " AS r ON r.id = bur.resource_library_id
        WHERE sp.project_structure_id = ".$project->id." AND sp.deleted_at IS NULL";

        if($subPackage)
        {
            $spBillItemSql .= " AND sp.id =" . $subPackage->id . " ";
        }

        $spBillItemSql .= " AND bi.project_revision_deleted_at IS NULL AND bi.deleted_at IS NULL
        AND buri.deleted_at IS NULL AND bur.deleted_at IS NULL
        GROUP BY sp.id, r.id ORDER BY sp.id, r.id";
        
        $spScheduleOfRateItemSql = "SELECT DISTINCT sp.id, r.id AS resource_id, r.name AS resource_name
        FROM " . SubPackageTable::getInstance()->getTableName() . " sp
        JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
        JOIN " . ScheduleOfRateItemTable::getInstance()->getTableName() . " AS sori ON sori.id = spsori.schedule_of_rate_item_id
        JOIN " . ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName() . " buri ON buri.schedule_of_rate_item_id = sori.id
        JOIN " . ScheduleOfRateBuildUpRateResourceTable::getInstance()->getTableName() . " bur ON buri.build_up_rate_resource_id = bur.id
        JOIN " . ResourceTable::getInstance()->getTableName() . " AS r ON r.id = bur.resource_library_id
        WHERE sp.project_structure_id = ".$project->id." AND sp.deleted_at IS NULL";

        if($subPackage)
        {
            $spScheduleOfRateItemSql .= " AND sp.id =" . $subPackage->id . " ";
        }

        $spScheduleOfRateItemSql .= " AND sori.deleted_at IS NULL
        AND buri.deleted_at IS NULL AND bur.deleted_at IS NULL
        GROUP BY sp.id, r.id ORDER BY sp.id, r.id";

        $queries = [
            $spResourceItemSql,
            $spBillItemSql,
            $spScheduleOfRateItemSql
        ];

        $resources = [];

        foreach($queries as $query)
        {
            $stmt = $pdo->prepare($query);

            $stmt->execute();

            $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach($records as $idx => $record)
            {
                if(!array_key_exists($record['id'], $resources))
                {
                    $resources[$record['id']] = [];
                }

                $resources[$record['id']][$record['resource_id']] = $record['resource_name'];

                unset($records[$idx]);
            }
        }
        
        return $resources;
    }
}