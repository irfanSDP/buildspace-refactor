<?php

/**
 * CostDataParticularTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CostDataParticularTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return CostDataParticularTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('CostDataParticular');
    }

    public static function setValue(CostData $costData, MasterCostDataParticular $masterCostDataParticular, $value)
    {
        $costDataParticular = DoctrineQuery::create()->select('p.id')
            ->from('CostDataParticular p')
            ->where('p.cost_data_id = ?', $costData->id)
            ->andWhere('p.master_cost_data_particular_id = ?', $masterCostDataParticular->id)
            ->limit(1)
            ->fetchOne();

        if( ! $costDataParticular )
        {
            $costDataParticular = new CostDataParticular();
            $costDataParticular->cost_data_id = $costData->id;
            $costDataParticular->master_cost_data_particular_id = $masterCostDataParticular->id;
        }

        $costDataParticular->value = $value;
        $costDataParticular->save();

        return $costDataParticular;
    }

    public static function getValues(CostData $costData)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare($string = "SELECT mp.id, mp.uom_id, uom.symbol as uom_symbol, COALESCE(p.value, 0) as value
        FROM ".MasterCostDataParticularTable::getInstance()->getTableName()." mp
        LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom on uom.id = mp.uom_id
        LEFT JOIN ".CostDataParticularTable::getInstance()->getTableName()." p on mp.id = p.master_cost_data_particular_id AND p.cost_data_id = {$costData->id}
        WHERE mp.deleted_at IS NULL");

        $stmt->execute();
        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return Utilities::setAttributeAsKey($results, 'id');
    }

    public static function getOverallProjectCostingSummary(CostData $costData)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $items = CostDataItemTable::getItemList($costData, null);

        $masterItemIds = array_column($items, 'id');

        $values = CostDataItemTable::getOverallCostingItemValues($costData, $masterItemIds);

        $stmt = $pdo->prepare("
            SELECT master_cost_data_particular_id, master_cost_data_item_id FROM " . MasterCostDataParticularMasterCostDataItemTable::getInstance()->getTableName() . " pivot
            JOIN " . MasterCostDataParticularTable::getInstance()->getTableName() . " p on p.id = pivot.master_cost_data_particular_id
            JOIN " . CostDataTable::getInstance()->getTableName() . " cd on cd.master_cost_data_id = p.master_cost_data_id
            WHERE cd.id = {$costData->id}
            AND p.is_summary_displayed = TRUE
            AND p.deleted_at IS NULL
            ");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);

        $provisionalSumTotal = CostDataProvisionalSumItemTable::getTotalSum($costData);

        $stmt = $pdo->prepare("
            SELECT p.id
            FROM " . MasterCostDataParticularTable::getInstance()->getTableName() . " p
            JOIN " . CostDataTable::getInstance()->getTableName() . " cd on cd.master_cost_data_id = p.master_cost_data_id
            WHERE cd.id = {$costData->id}
            AND p.is_summary_displayed = TRUE
            AND p.include_provisional_sum = TRUE
            AND p.deleted_at IS NULL
            ");

        $stmt->execute();

        $particularsWithIncludedProvisionalSum = $stmt->fetchAll(PDO::FETCH_COLUMN);

        $particularTotals = [];

        foreach($records as $particularId => $masterItemIds)
        {
            $particularTotals[$particularId] = [
                'approved_cost'        => 0,
                'awarded_cost'         => 0,
                'adjusted_cost'        => 0,
                'variation_order_cost' => 0,
            ];

            if(in_array($particularId, $particularsWithIncludedProvisionalSum))
            {
                $particularTotals[$particularId]['approved_cost'] += $provisionalSumTotal['approved_sum'];
                $particularTotals[$particularId]['awarded_cost'] += $provisionalSumTotal['awarded_sum'];
                $particularTotals[$particularId]['adjusted_cost'] += $provisionalSumTotal['adjusted_sum'];
                $particularTotals[$particularId]['variation_order_cost'] += $provisionalSumTotal['variation_order_sum'];
            }

            foreach($masterItemIds as $masterItemId)
            {
                $particularTotals[$particularId]['approved_cost'] += $values[$masterItemId]['approved_cost'];
                $particularTotals[$particularId]['awarded_cost'] += $values[$masterItemId]['awarded_cost'];
                $particularTotals[$particularId]['adjusted_cost'] += $values[$masterItemId]['adjusted_cost'];
                $particularTotals[$particularId]['variation_order_cost'] += $values[$masterItemId]['variation_order_cost'];
            }
        }

        return $particularTotals;
    }
}