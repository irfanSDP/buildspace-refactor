<?php

/**
 * CostDataProjectInformationTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CostDataProjectInformationTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return CostDataProjectInformationTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('CostDataProjectInformation');
    }

    public static function getItem(CostData $costData, MasterCostDataProjectInformation $masterItem)
    {
        $item = DoctrineQuery::create()->select('i.id')
            ->from('CostDataProjectInformation i')
            ->where('i.cost_data_id = ?', $costData->id)
            ->andWhere('i.master_cost_data_project_information_id = ?', $masterItem->id)
            ->limit(1)
            ->fetchOne();

        if( ! $item )
        {
            $item = new CostDataProjectInformation();
            $item->cost_data_id = $costData->id;
            $item->master_cost_data_project_information_id = $masterItem->id;
        }

        return $item;
    }

    public static function setValue(CostData $costData, MasterCostDataProjectInformation $masterItem, $attribute, $value)
    {
        $item = self::getItem($costData, $masterItem);

        $item->{$attribute} = $value;
        $item->save();

        return $item;
    }

    public static function getItemList(CostData $costData, $parentId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $parentClause = $parentId ? "mi.parent_id = {$parentId}" : "mi.parent_id IS NULL";

        $stmt = $pdo->prepare("SELECT mi.id, mi.description
        FROM ".MasterCostDataProjectInformationTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataProjectInformationTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_project_information_id and i.cost_data_id = {$costData->id}
        WHERE mi.master_cost_data_id = {$costData->master_cost_data_id} 
        AND {$parentClause}
        AND mi.deleted_at IS NULL
        ORDER BY mi.priority ASC");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getRecordValues(CostData $costData, array $masterIds)
    {
        if(empty($masterIds)) return array();

        $masterIds = implode(',', $masterIds);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT mi.id, COALESCE(i.description, '') as description
        FROM ".MasterCostDataProjectInformationTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataProjectInformationTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_project_information_id and i.cost_data_id = {$costData->id}
        WHERE mi.id in ({$masterIds})
        AND mi.deleted_at IS NULL");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $items = Utilities::setAttributeAsKey($items, 'id');

        return $items;
    }
}