<?php

/**
 * ScheduleOfRateBillElementTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ScheduleOfRateBillElementTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ScheduleOfRateBillElementTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ScheduleOfRateBillElement');
    }

    public static function getTotalEstimationRateByElementId($elementId)
    {
        $result = DoctrineQuery::create()->select('SUM(COALESCE(i.estimation_rate)) AS total')
            ->from('ScheduleOfRateBillItem i')
            ->where('i.element_id = ?', $elementId)
            ->andWhere('i.type = ?', ScheduleOfRateBillItem::TYPE_WORK_ITEM)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $result['total'];
    }

    public static function getTotalContractorRateByElementId($elementId)
    {
        $result = DoctrineQuery::create()->select('SUM(COALESCE(i.contractor_rate)) AS total')
            ->from('ScheduleOfRateBillItem i')
            ->where('i.element_id = ?', $elementId)
            ->andWhere('i.type = ?', ScheduleOfRateBillItem::TYPE_WORK_ITEM)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $result['total'];
    }

    public static function getMaxPriorityByBillId($billId)
    {
        $queryResult = DoctrineQuery::create()->select('max(e.priority)')
            ->from('ScheduleOfRateBillElement e')
            ->where('e.project_structure_id = ?', $billId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $queryResult['max'];
    }

    /**
     * Returns the affected bills and items.
     * (Selected by user using elementId).
     *
     * @param ProjectStructure $bill
     * @param                  $elementIds
     *
     * @return array
     */
    public static function getAffectedBillsAndItemsByElementId(ProjectStructure $bill, $elementIds)
    {
        $data = array();
        $pdo = self::getInstance()->getConnection()->getDbh();
        $elementIds = json_decode($elementIds, true);

        if( count($elementIds) == 0 )
        {
            return $data;
        }

        $stmt = $pdo->prepare("
            SELECT i.id, i.element_id
            FROM " . ScheduleOfRateBillItemTable::getInstance()->getTableName() . " i
            WHERE i.element_id IN (" . implode(',', $elementIds) . ")
            AND i.deleted_at IS NULL
            ");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if( count($items) == 0 )
        {
            return $data;
        }

        foreach($items as $item)
        {
            $data[ $bill->id ][ $item['element_id'] ][] = $item['id'];
        }

        return $data;
    }

    /**
     * Returns the affected bills and elements.
     * (Selected by user using itemIds).
     *
     * @param $itemIds
     *
     * @return array
     */
    public static function getAffectedBillsAndElementsByItemIds($itemIds)
    {
        $itemIds = json_decode($itemIds, true);
        $elementIds = array();
        $data = array();

        if( count($itemIds) == 0 )
        {
            return $data;
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("
            SELECT DISTINCT i.element_id
            FROM " . ScheduleOfRateBillItemTable::getInstance()->getTableName() . " i
            WHERE i.id IN (" . implode(',', $itemIds) . ")
            AND i.deleted_at IS NULL
            ");

        $stmt->execute();

        $elements = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if( count($elements) == 0 )
        {
            return $data;
        }

        foreach($elements as $element)
        {
            $elementIds[] = $element['element_id'];

            unset( $element );
        }

        unset( $elements );

        $stmt = $pdo->prepare("
            SELECT DISTINCT e.project_structure_id, e.id as element_id
            FROM " . ScheduleOfRateBillElementTable::getInstance()->getTableName() . " e
            WHERE e.id IN (" . implode(',', $elementIds) . ")
            AND e.deleted_at IS NULL
            ");

        $stmt->execute();

        $bills = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach($bills as $bill)
        {
            $data[ $bill['project_structure_id'] ][ $bill['element_id'] ] = null;
        }

        return $data;
    }

    /**
     * Sorts the elements based on the given parameters.
     *
     * @param array  $elementIds
     * @param        $columnName
     * @param string $order
     *
     * @return array
     */
    public function sortBy(Array $elementIds, $columnName, $order = 'ASC')
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $ids = implode(',', $elementIds);
        $ids = empty( $ids ) ? "NULL" : $ids;

        $stmt = $pdo->prepare("select id
                from " . ScheduleOfRateBillElementTable::getInstance()->getTableName() . "
                where id in (" . $ids . ")
                order by " . $columnName . " " . $order
        );

        $stmt->execute();

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $elementIds = array();
        foreach($results as $result)
        {
            array_push($elementIds, $result['id']);
        }

        return $elementIds;
    }
}