<?php

/**
 * LocationAssignmentTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LocationAssignmentTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object LocationAssignmentTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('LocationAssignment');
    }

    public static function createLocationAssignment(Array $tradeIds, Array $locationIds, Array $billItemIds, Doctrine_Connection $con=null)
    {
        if(empty($tradeIds) and empty($locationIds) and empty($billItemIds))
            return;

        $con = $con ? $con : self::getInstance()->getConnection();
        $pdo = $con->getDbh();

        $insertValues  = array();
        $questionMarks = array();

        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

        $billItemsToDelete = array();

        $stmt = $pdo->prepare("SELECT DISTINCT bill_item_id FROM ".LocationAssignmentTable::getInstance()->getTableName()."
            WHERE pre_defined_location_code_id IN (".implode(',', $tradeIds).") AND
            project_structure_location_code_id IN (".implode(',', $locationIds).")
            GROUP BY bill_item_id");

        $stmt->execute();

        $existingBillItemsWithLocations = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        foreach($billItemIds as $idx => $billItemId)
        {
            if(in_array($billItemId, $existingBillItemsWithLocations))
            {
                unset($billItemIds[$idx]);
            }
        }

        if(!empty($billItemIds))
        {
            foreach($tradeIds as $tradeId)
            {
                foreach($locationIds as $locationId)
                {
                    foreach($billItemIds as $billItemId)
                    {
                        $data = array(
                            intval($tradeId),
                            intval($locationId),
                            intval($billItemId),
                            date('Y-m-d H:i:s'),
                            date('Y-m-d H:i:s'),
                            $userId,
                            $userId
                        );

                        $billItemsToDelete[] = intval($billItemId);

                        $insertValues = array_merge($insertValues, $data);

                        $questionMarks[] = '('.implode(',', array_fill(0, count($data), '?')).')';
                    }
                }
            }

            if(!empty($insertValues))
            {
                $stmt = $pdo->prepare("INSERT INTO ".LocationAssignmentTable::getInstance()->getTableName()."
                    (pre_defined_location_code_id, project_structure_location_code_id, bill_item_id, created_at, updated_at, created_by, updated_by)
                    VALUES " . implode(',', $questionMarks));

                $stmt->execute($insertValues);
            }
        }
    }
}