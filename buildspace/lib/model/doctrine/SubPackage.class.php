<?php

/**
 * SubPackage
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SubPackage extends BaseSubPackage
{
    const SORT_SUB_CONTRACTOR_NAME_ASC = 1;
    const SORT_SUB_CONTRACTOR_NAME_DESC = 2;
    const SORT_SUB_CONTRACTOR_HIGHEST_LOWEST = 4;
    const SORT_SUB_CONTRACTOR_LOWEST_HIGHEST = 8;

    const SORT_SUMMARY_SUB_CONTRACTOR_LOWEST_HIGHEST = 'printPreviewLowestToHighest';
    const SORT_SUMMARY_SUB_CONTRACTOR_HIGHEST_LOWEST = 'printPreviewHighestToLowest';

    public function importResourceItems(Array $resourceItemIds, $tradeId = null)
    {
        $pdo           = $this->getTable()->getConnection()->getDbh();
        $resourceItems = array();

        if ( count($resourceItemIds) == 0 )
        {
            if ( $tradeId )
            {
                $stmt = $pdo->prepare("DELETE FROM " . SubPackageResourceItemTable::getInstance()->getTableName() . "
                WHERE resource_item_id IN (SELECT DISTINCT xref.resource_item_id FROM " . SubPackageResourceItemTable::getInstance()->getTableName() . " xref
                JOIN " . ResourceItemTable::getInstance()->getTableName() . " i_1 ON xref.resource_item_id = i_1.id
                JOIN " . ResourceItemTable::getInstance()->getTableName() . " i_2 ON i_1.resource_trade_id = i_2.resource_trade_id
                WHERE i_2.resource_trade_id = " . $tradeId . " AND xref.sub_package_id = " . $this->id . ") AND sub_package_id = " . $this->id);

                $stmt->execute();
            }

            return $resourceItems;
        }

        $implodedResourceItemIds = implode(',', $resourceItemIds);

        $stmt = $pdo->prepare("DELETE FROM " . SubPackageResourceItemTable::getInstance()->getTableName() . " WHERE resource_item_id IN
        (SELECT DISTINCT xref.resource_item_id FROM " . SubPackageResourceItemTable::getInstance()->getTableName() . " xref
        JOIN " . ResourceItemTable::getInstance()->getTableName() . " i_1 ON xref.resource_item_id = i_1.id
        JOIN " . ResourceItemTable::getInstance()->getTableName() . " i_2 ON i_1.resource_trade_id = i_2.resource_trade_id
        WHERE i_2.id IN (" . $implodedResourceItemIds . ") AND xref.sub_package_id = " . $this->id . ") AND sub_package_id = " . $this->id);

        if ( $stmt->execute() )
        {
            /*
            * only select work item to be imported into sub package . We exclude deleted_at flag because we just import anything from the supplied resource item ids
            * Since sub package is in pre tender stage there is possibility where resource items in bills has been deleted in resource library but not in bills.
            */
            $stmt = $pdo->prepare("SELECT * FROM " . ResourceItemTable::getInstance()->getTableName() . "
            WHERE id IN (" . $implodedResourceItemIds . ") AND type = " . ResourceItem::TYPE_WORK_ITEM . "
            ORDER BY root_id, priority, lft, level ASC");

            $stmt->execute();

            $resourceItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $sqlRows          = false;
            $numResourceItems = count($resourceItems);
            $userId           = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
            $i                = 0;

            foreach ( $resourceItems as $resourceItem )
            {
                $i ++;
                $sqlRows .= "(" . $this->id . ", " . $resourceItem['id'] . ", NOW(), NOW(), " . $userId . ", " . $userId . ")";

                $sqlRows .= $i != $numResourceItems ? ',' : '';
            }
            
            if ( $sqlRows )
            {
                $stmt = $pdo->prepare("INSERT INTO " . SubPackageResourceItemTable::getInstance()->getTableName() . " (sub_package_id, resource_item_id, created_at, updated_at, created_by, updated_by) VALUES " . $sqlRows);
                $stmt->execute();
            }
        }

        return $resourceItems;
    }

    public function importScheduleOfRateItems(Array $scheduleOfRateItemIds, $tradeId = null)
    {
        $pdo                 = $this->getTable()->getConnection()->getDbh();
        $scheduleOfRateItems = array();

        if ( count($scheduleOfRateItemIds) == 0 )
        {
            if ( $tradeId )
            {
                $stmt = $pdo->prepare("DELETE FROM " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . "
                WHERE schedule_of_rate_item_id IN (SELECT DISTINCT xref.schedule_of_rate_item_id FROM " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " xref
                JOIN " . ScheduleOfRateItemTable::getInstance()->getTableName() . " i_1 ON xref.schedule_of_rate_item_id = i_1.id
                JOIN " . ScheduleOfRateItemTable::getInstance()->getTableName() . " i_2 ON i_1.trade_id = i_2.trade_id
                WHERE i_2.trade_id = " . $tradeId . " AND xref.sub_package_id = " . $this->id . ") AND sub_package_id = " . $this->id);

                $stmt->execute();
            }
            
            return $scheduleOfRateItems;
        }

        $implodedScheduleOfRateItemIds = implode(',', $scheduleOfRateItemIds);

        $stmt = $pdo->prepare("DELETE FROM " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " WHERE schedule_of_rate_item_id IN (
            SELECT DISTINCT xref.schedule_of_rate_item_id FROM " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " xref
            JOIN " . ScheduleOfRateItemTable::getInstance()->getTableName() . " i_1 ON xref.schedule_of_rate_item_id = i_1.id
            JOIN " . ScheduleOfRateItemTable::getInstance()->getTableName() . " i_2 ON i_1.trade_id = i_2.trade_id
            WHERE i_2.id IN (" . $implodedScheduleOfRateItemIds . ") AND xref.sub_package_id = " . $this->id . ") AND sub_package_id = " . $this->id);
            
        if ( $stmt->execute() )
        {
            /*
            * only select work item to be imported into sub package . We exclude deleted_at flag because we just import anything from the supplied resource item ids
            * Since sub package is in pre tender stage there is possibility where resource items in bills has been deleted in resource library but not in bills.
            */
            $stmt = $pdo->prepare("SELECT * FROM " . ScheduleOfRateItemTable::getInstance()->getTableName() . "
                WHERE id IN (" . $implodedScheduleOfRateItemIds . ") AND type = " . ScheduleOfRateItem::TYPE_WORK_ITEM . "
                ORDER BY priority, lft, level ASC");

            $stmt->execute();

            $scheduleOfRateItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $sqlRows                = false;
            $numScheduleOfRateItems = count($scheduleOfRateItems);
            $userId                 = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
            $i                      = 0;

            foreach ( $scheduleOfRateItems as $scheduleOfRateItem )
            {
                $i ++;
                $sqlRows .= "(" . $this->id . ", " . $scheduleOfRateItem['id'] . ", NOW(), NOW(), " . $userId . ", " . $userId . ")";

                $sqlRows .= $i != $numScheduleOfRateItems ? ',' : '';
            }

            if ( $sqlRows )
            {
                $stmt = $pdo->prepare("INSERT INTO " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " (sub_package_id, schedule_of_rate_item_id, created_at, updated_at, created_by, updated_by) VALUES " . $sqlRows);
                $stmt->execute();
            }
        }

        return $scheduleOfRateItems;
    }

	public function importBillItems(Array $billItemIds, $elementId)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM " . SubPackageBillItemTable::getInstance()->getTableName() . "
            WHERE sub_package_id = {$this->id}
            AND bill_item_id IN (
                SELECT DISTINCT xref.bill_item_id FROM " . SubPackageBillItemTable::getInstance()->getTableName() . " xref
                JOIN " . BillItemTable::getInstance()->getTableName() . " i ON xref.bill_item_id = i.id
                WHERE i.element_id = {$elementId} AND xref.sub_package_id = {$this->id}
            )");

        $stmt->execute();

        if( empty( $billItemIds ) ) return array();

        BillItemFormulatedColumnTable::initializeDefaultRates($billItemIds);

        $insertStatements = array();

        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

        foreach($billItemIds as $billItemId)
        {
            $insertStatements[ $billItemId ] = "({$billItemId}, {$this->id}, NOW(), NOW(), {$userId}, {$userId})";
        }

        $valuesString = implode(',', $insertStatements);

        $stmt = $pdo->prepare("INSERT INTO " . SubPackageBillItemTable::getInstance()->getTableName() . " (bill_item_id, sub_package_id, created_at, updated_at, created_by, updated_by) VALUES $valuesString");
        $stmt->execute();

        $stmt = $pdo->prepare("SELECT i.* FROM " . SubPackageBillItemTable::getInstance()->getTableName() . " ref
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.id = ref.bill_item_id
            WHERE bill_item_id IN (" . implode(',', $billItemIds) . ") AND sub_package_id = {$this->id}
            ORDER BY priority, lft, level ASC");

        $stmt->execute();

        $billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return $billItems;
    }

    public function getEstimationAmount()
    {
        $subPackageEstAmount = array_sum($this->getEstimatedTotalByResources());
        $subPackageEstAmount += $this->getEstimatedTotalNoBuildUps();

        return $subPackageEstAmount;
    }

    public function cloneBillItemRates()
    {
        SubPackageTable::cloneBillItemRatesBySubpackageId($this->id, $this->project_structure_id, $this->selected_company_id);
    }

    public function getSelectedCompanyTotalAmount()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT b.bill_item_id, COALESCE(b.grand_total, 0) AS total
            FROM " . SubPackageTable::getInstance()->getTableName() . " sp
            JOIN " . SubPackageCompanyTable::getInstance()->getTableName() . " xref ON xref.sub_package_id = sp.id AND xref.company_id = sp.selected_company_id
            LEFT JOIN " . SubPackageBillItemRateTable::getInstance()->getTableName() . " b ON b.sub_package_company_id = xref.id
            LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
            LEFT JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
            LEFT JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
            LEFT JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " bur ON bur.bill_item_id = i.id AND bur.resource_item_library_id = spri.resource_item_id AND bur.deleted_at IS NULL
            LEFT JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
            LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS rate ON rate.relation_id = i.id
            LEFT JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = i.id AND spbi.sub_package_id = sp.id
            WHERE sp.id =" . $this->id . " AND sp.deleted_at IS NULL
            AND bill.deleted_at IS NULL AND b.bill_item_id = i.id AND b.grand_total <> 0
            AND NOT (spri.sub_package_id IS NULL AND spsori.sub_package_id IS NULL AND spbi.id IS NULL)
            AND (rate.relation_id = bur.bill_item_id OR rate.schedule_of_rate_item_formulated_column_id = sifc.id OR rate.relation_id = spbi.bill_item_id)
            AND rate.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND rate.final_value <> 0 AND rate.deleted_at IS NULL
            AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
            AND e.deleted_at IS NULL ORDER BY b.bill_item_id");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $total = 0;

        foreach ( $records as $record )
        {
            $total += $record['total'];
        }

        return $total;
    }

    public function getSelectedCompanySingleUnitTotalAmount()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT b.bill_item_id, COALESCE(b.single_unit_grand_total, 0) AS total
            FROM " . SubPackageTable::getInstance()->getTableName() . " sp
            JOIN " . SubPackageCompanyTable::getInstance()->getTableName() . " xref ON xref.sub_package_id = sp.id AND xref.company_id = sp.selected_company_id
            LEFT JOIN " . SubPackageBillItemRateTable::getInstance()->getTableName() . " b ON b.sub_package_company_id = xref.id
            LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
            LEFT JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
            LEFT JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
            LEFT JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " bur ON bur.bill_item_id = i.id AND bur.resource_item_library_id = spri.resource_item_id AND bur.deleted_at IS NULL
            LEFT JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
            LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS rate ON rate.relation_id = i.id
            LEFT JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = i.id AND spbi.sub_package_id = sp.id
            WHERE sp.id =" . $this->id . " AND sp.deleted_at IS NULL
            AND bill.deleted_at IS NULL AND b.bill_item_id = i.id AND b.single_unit_grand_total <> 0
            AND NOT (spri.sub_package_id IS NULL AND spsori.sub_package_id IS NULL AND spbi.id IS NULL)
            AND (rate.relation_id = bur.bill_item_id OR rate.schedule_of_rate_item_formulated_column_id = sifc.id OR rate.relation_id = spbi.bill_item_id)
            AND rate.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND rate.final_value <> 0 AND rate.deleted_at IS NULL
            AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
            AND e.deleted_at IS NULL ORDER BY b.bill_item_id");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $total = 0;

        foreach ( $records as $record )
        {
            $total += $record['total'];
        }

        return $total;
    }

    /*
     * Units must be in an array of $billColumnSettingId-$counter
     * i.e ['5-1', '5-2', '5-3']
     * 5 is bill column setting id
     * 1,2,3 are units
     */
    public function assignUnits(ProjectStructure $bill, Array $units)
    {
        $this->flushAllTypeReferenceByBillId($bill->id);

        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

        if ( count($units) > 0 )
        {
            try
            {
                $stmt = new sfImportExcelStatementGenerator();
                $stmt->createInsert(
                    SubPackageTypeReferenceTable::getInstance()->getTableName(),
                    array( 'sub_package_id', 'bill_column_setting_id', 'counter', 'created_by', 'updated_by', 'created_at', 'updated_at' )
                );

                foreach ( $units as $unit )
                {
                    $explodedId = explode('-', $unit);

                    if ( count($explodedId) == 2 )
                    {
                        $billColumnSettingId = $explodedId[0];
                        $counter             = $explodedId[1];

                        $stmt->addRecord(array( $this->id, $billColumnSettingId, $counter, $userId, $userId, 'NOW()', 'NOW()' ));
                    }
                }

                if ( count($stmt->records) > 0 )
                {
                    $stmt->save();

                    $pdo = $this->getTable()->getConnection()->getDbh();

                    foreach ( $bill->BillColumnSettings as $billColumnSetting )
                    {
                        $quantityFieldName = $billColumnSetting->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                        $stmt = $pdo->prepare("UPDATE " . SubPackageBillItemRateTable::getInstance()->getTableName() . " SET grand_total = " . SubPackageBillItemRateTable::getInstance()->getTableName() . ".grand_total + (" . SubPackageBillItemRateTable::getInstance()->getTableName() . ".rate * fc.final_value * (SELECT COALESCE(COUNT(counter), 0) FROM " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " WHERE bill_column_setting_id = " . $billColumnSetting->id . " AND sub_package_id = " . $this->id . "))
                            FROM " . SubPackageTable::getInstance()->getTableName() . " sp
                            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
                            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
                            LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id
                            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
                            JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " tr ON tr.bill_item_id = i.id AND tr.bill_column_setting_id = c.id
                            LEFT JOIN " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc ON fc.relation_id = tr.id
                            JOIN " . SubPackageBillItemRateTable::getInstance()->getTableName() . " r ON r.bill_item_id = i.id
                            JOIN " . SubPackageCompanyTable::getInstance()->getTableName() . " companies ON companies.id = r.sub_package_company_id AND companies.sub_package_id = sp.id
                            WHERE " . SubPackageBillItemRateTable::getInstance()->getTableName() . ".id = r.id AND sp.id = " . $this->id . "
                            AND " . SubPackageBillItemRateTable::getInstance()->getTableName() . ".bill_item_id = i.id
                            AND bill.id = " . $bill->id . " AND bill.deleted_at IS NULL
                            AND c.id = " . $billColumnSetting->id . "
                            AND e.deleted_at IS NULL AND fc.column_name = '" . $quantityFieldName . "' AND fc.deleted_at IS NULL
                            AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
                            AND tr.include IS TRUE");

                        $stmt->execute();
                    }
                }
            }
            catch (Exception $e)
            {
                throw $e;
            }
        }
    }
    
    public function flushAllTypeReferenceByBillId($billId)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " r
        WHERE r.sub_package_id = " . $this->id . " AND r.bill_column_setting_id IN
        (SELECT id FROM " . BillColumnSettingTable::getInstance()->getTableName() . "
        WHERE project_structure_id = " . $billId . " AND deleted_at IS NULL)");

        $stmt->execute();

        // reset grand total to 0 since we remove all assigned units
        $stmt = $pdo->prepare("UPDATE " . SubPackageBillItemRateTable::getInstance()->getTableName() . " SET grand_total = 0
        FROM " . BillItemTable::getInstance()->getTableName() . " i
        JOIN " . BillElementTable::getInstance()->getTableName() . " e ON i.element_id = e.id
        WHERE e.project_structure_id = " . $billId . " AND e.deleted_at IS NULL
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
        AND " . SubPackageBillItemRateTable::getInstance()->getTableName() . ".bill_item_id = i.id
        AND " . SubPackageBillItemRateTable::getInstance()->getTableName() . ".sub_package_company_id IN
        (SELECT id FROM " . SubPackageCompanyTable::getInstance()->getTableName() . " WHERE sub_package_id = " . $this->id . ")");

        $stmt->execute();
    }

    public function getVariationOrderOverallTotal()
    {
        return SubPackageTable::getVariationOrderOverallTotal($this);
    }

    public function getVariationOrderUpToDateClaimAmount()
    {
        return SubPackageTable::getVariationOrderUpToDateClaimAmount($this);
    }

    public function getMaterialOnSiteUpToDateClaimAmount()
    {
        return SubPackageTable::getMaterialOnSiteUpToDateClaimAmount($this);
    }

    public function getVariationOrderUpToDateClaimAmountPercentage()
    {
        return SubPackageTable::getVariationOrderUpToDateClaimAmountPercentage($this);
    }

    public function getResources()
    {
        $resources = SubPackageTable::getSubPackageResources($this->ProjectStructure, $this);

        if(array_key_exists($this->id, $resources))
        {
            return $resources[$this->id];
        }

        return [];
    }

    public function getEstimatedTotalByResources()
    {
        $totalCostByResources = SubPackageTable::getEstimatedTotalByResources($this->ProjectStructure, $this);

        $totalCost = 0;

        if(array_key_exists($this->id, $totalCostByResources))
        {
            $totalCost = $totalCostByResources[$this->id];
        }

        return $totalCost;
    }

    public function getEstimatedTotalByBills()
    {
        $billItemRates = SubPackageTable::getBillItemRates($this->ProjectStructure, $this);
        
        $totalCostByBills = [];

        if(array_key_exists($this->id, $billItemRates))
        {
            foreach($billItemRates[$this->id] as $resourceId => $byBills)
            {
                foreach($byBills as $billId => $byItems)
                {
                    if(!array_key_exists($billId, $totalCostByBills))
                    {
                        $totalCostByBills[$billId] = 0;
                    }

                    foreach($byItems as $itemId => $data)
                    {
                        if(array_key_exists($billId, $totalCostByBills))
                        {
                            $totalCostByBills[$billId] += $data['total_cost_after_conversion']*$data['total_qty'];
                        }

                        unset($billItemRates[$this->id][$resourceId][$billId][$itemId]);
                    }
                }
            }
        }

        return $totalCostByBills;
    }

    public function getEstimatedTotalByElements(ProjectStructure $bill)
    {
        $billItemRates = SubPackageTable::getBillItemRates($this->ProjectStructure, $this);
        
        $totalCostByElements = [];

        if(array_key_exists($this->id, $billItemRates))
        {
            foreach($billItemRates[$this->id] as $resourceId => $byBills)
            {
                if(array_key_exists($bill->id, $byBills))
                {
                    foreach($byBills[$bill->id] as $itemId => $data)
                    {
                        if(!array_key_exists($data['element_id'], $totalCostByElements))
                        {
                            $totalCostByElements[$data['element_id']] = 0;
                        }

                        $totalCostByElements[$data['element_id']] += $data['total_cost_after_conversion']*$data['total_qty'];
                    }
                }

                unset($billItemRates[$this->id][$resourceId]);
            }
        }

        return $totalCostByElements;
    }

    public function getEstimatedTotalByBillItems(BillElement $element)
    {
        $billItemRates = SubPackageTable::getBillItemRates($this->ProjectStructure, $this);
        
        $totalCostByBillItems = [];

        if(array_key_exists($this->id, $billItemRates))
        {
            foreach($billItemRates[$this->id] as $resourceId => $byBills)
            {
                if(array_key_exists($element->project_structure_id, $byBills))
                {
                    foreach($byBills[$element->project_structure_id] as $itemId => $data)
                    {
                        if($data['element_id'] == $element->id)
                        {
                            if(!array_key_exists($itemId, $totalCostByBillItems))
                            {
                                $totalCostByBillItems[$itemId] = $data;
                                $totalCostByBillItems[$itemId]['total_cost'] = 0;
                                $totalCostByBillItems[$itemId]['total_cost_after_conversion'] = 0;
                            }

                            $totalCostByBillItems[$itemId]['total_cost'] += $data['total_cost'];
                            $totalCostByBillItems[$itemId]['total_cost_after_conversion'] += $data['total_cost_after_conversion'];
                        }
                    }
                }

                unset($billItemRates[$this->id][$resourceId]);
            }
        }

        return $totalCostByBillItems;
    }

    public function getEstimatedTotalNoBuildUps()
    {
        $totalCostBySubPackages = SubPackageTable::getEstimatedTotalNoBuildUps($this->ProjectStructure, $this);

        $totalCost = 0;

        if(array_key_exists($this->id, $totalCostBySubPackages))
        {
            $totalCost = $totalCostBySubPackages[$this->id];
        }

        return $totalCost;
    }

    public function getEstimatedTotalNoBuildUpByBills()
    {
        $billItems = SubPackageTable::getNoBuildUpBillItems($this->ProjectStructure, $this);

        $totalCost = [];

        if(array_key_exists($this->id, $billItems))
        {
            foreach($billItems[$this->id] as $billId => $items)
            {
                if(!array_key_exists($billId, $totalCost))
                {
                    $totalCost[$billId] = 0;
                }

                foreach($items as $billItemId => $item)
                {
                    $totalCost[$billId] += $item['rate']*$item['total_qty'];
                }
            }
        }
        

        return $totalCost;
    }

    public function getEstimatedTotalNoBuildUpByElements(ProjectStructure $bill)
    {
        $billItems = SubPackageTable::getNoBuildUpBillItems($this->ProjectStructure, $this);

        $totalCost = [];

        if(array_key_exists($this->id, $billItems) && array_key_exists($bill->id, $billItems[$this->id]))
        {
            foreach($billItems[$this->id][$bill->id] as $billItemId => $item)
            {
                if(!array_key_exists($item['element_id'], $totalCost))
                {
                    $totalCost[$item['element_id']] = 0;
                }

                $totalCost[$item['element_id']] += $item['rate']*$item['total_qty'];
            }
        }
        
        return $totalCost;
    }

    public function getEstimatedTotalNoBuildUpByBillItems(BillElement $element)
    {
        $billItems = SubPackageTable::getNoBuildUpBillItems($this->ProjectStructure, $this);
        $bill      = $element->ProjectStructure;

        $totalCost = [];

        if(array_key_exists($this->id, $billItems) && array_key_exists($bill->id, $billItems[$this->id]))
        {
            foreach($billItems[$this->id][$bill->id] as $billItemId => $item)
            {
                if($item['element_id'] == $element->id)
                {
                    $totalCost[$billItemId] = [
                        'total_cost'                  => $item['rate'],
                        'total_cost_after_conversion' => $item['rate'],
                        'total_qty'                   => $item['total_qty']
                    ];
                }
                
                unset($billItems[$this->id][$bill->id][$billItemId]);
            }
        }
        
        return $totalCost;
    }

    public function getOpenClaimRevision()
    {
        return DoctrineQuery::create()->select('*')
        ->from('SubPackagePostContractClaimRevision r')
        ->where('r.sub_package_id = ?', $this->id)
        ->andWhere('r.locked_status = ?', false)
        ->addOrderBy('r.version DESC')
        ->limit(1)
        ->fetchOne();
    }
}