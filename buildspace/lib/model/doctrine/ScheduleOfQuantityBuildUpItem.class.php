<?php

/**
 * ScheduleOfQuantityBuildUpItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ScheduleOfQuantityBuildUpItem extends BaseScheduleOfQuantityBuildUpItem
{
    const FORMULATED_COLUMN_FACTOR = 'factor';

    const QUANTITY_PER_UNIT_ORIGINAL = 1;
    const QUANTITY_PER_UNIT_REMEASUREMENT = 2;

    const SIGN_POSITIVE = 1;
    const SIGN_NEGATIVE = 2;
    const SIGN_POSITIVE_TEXT = '+';
    const SIGN_NEGATIVE_TEXT = '-';

    public function getSignText()
    {
        return ScheduleOfQuantityBuildUpItemTable::getSignTextBySign($this->sign);
    }

    public function getFormulatedColumnByName($columnName, $hydrate=null)
    {
        return ScheduleOfQuantityBuildUpItemTable::getFormulatedColumnByRelationIdAndColumnName($this->id, $columnName, $hydrate);
    }

    public function calculateTotal()
    {
        $formulatedColumnNames = $this->getTable()->getFormulatedColumnNames($this->ScheduleOfQuantityItem->UnitOfMeasurement);

        $result = DoctrineQuery::create()->select('COUNT(id) as count, MULTIPLY(c.final_value) AS value')
            ->from('ScheduleOfQuantityBuildUpFormulatedColumn c')
            ->where('c.relation_id = ?', $this->id)
            ->andWhereIn('c.column_name',$formulatedColumnNames)
            ->andWhere('c.final_value IS NOT NULL')
            ->andWhere('c.deleted_at IS NULL')
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        if($result['count'] > 0)
        {
            $total = $this->sign == self::SIGN_POSITIVE ? abs($result['value']) : abs($result['value']) * -1;
        }
        else
        {
            $total = 0;
        }

        if($this->total != $total)
        {
            $this->total = $total;

            $this->save();
        }

        ScheduleOfQuantityBuildUpItemTable::updateScheduleOfQuantityAmountById($this->schedule_of_quantity_item_id);

        return $this->total;
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $buildUpItemIds = array();
        $affectedBuildUpItems = array();
        $formulatedColumnIds = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            foreach($this->FormulatedColumns as $formulatedColumn)
            {
                $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                if(is_array($nodes))
                {
                    foreach($nodes as $node)
                    {
                        if($referencedNode = Doctrine_Core::getTable('ScheduleOfQuantityBuildUpFormulatedColumn')->find($node['node_from']))
                        {
                            $value = $itemId = str_ireplace('r'.$this->id, '#REF!', $referencedNode->value);
                            $referencedNode->setFormula($value);

                            $referencedNode->save();

                            $buildUpItemIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                        }
                    }
                }

                Doctrine_Manager::getInstance()->getCurrentConnection()
                    ->fetchAssoc("UPDATE ".$formulatedColumn->getTable()->getTableName()." SET
                    deleted_at = NOW()
                    WHERE id = ".$formulatedColumn->id);

                $formulatedColumnIds[] = $formulatedColumn->id;
            }

            if(count($formulatedColumnIds) > 0)
            {
                //now we can remove all edges after we've updated related nodes
                Doctrine_Query::create()
                    ->delete('ScheduleOfQuantityBuildUpEdge e')
                    ->whereIn('e.node_from', $formulatedColumnIds)
                    ->execute();

                Doctrine_Query::create()
                    ->delete('ScheduleOfQuantityBuildUpEdge e')
                    ->whereIn('e.node_to', $formulatedColumnIds)
                    ->execute();
            }

            parent::delete($conn);

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
            throw $e;
        }

        foreach($buildUpItemIds as $buildUpItemId)
        {
            $affectedBuildUpItem = array();
            $buildUpQuantityItem = $this->getTable()->find($buildUpItemId);

            $affectedBuildUpItem['id'] = $buildUpQuantityItem->id;
            $affectedBuildUpQuantityItem['total'] = $buildUpQuantityItem->calculateTotal();

            foreach($buildUpQuantityItem->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedBuildUpItem[$columnName."-final_value"] = $formulatedColumn->final_value;
                $affectedBuildUpItem[$columnName."-value"] = $formulatedColumn->value;
                $affectedBuildUpItem[$columnName.'-has_cell_reference'] = $formulatedColumn->hasCellReference();
                $affectedBuildUpItem[$columnName.'-has_formula'] = $formulatedColumn->hasFormula();
            }

            array_push($affectedBuildUpItems, $affectedBuildUpItem);
        }

        return $affectedBuildUpItems;
    }

    public function moveTo($priority, $lastPosition=false)
    {
        $priority = $lastPosition ? $priority+1 : $priority;

        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $this->priority = $priority;
            $this->save();

            if(!$lastPosition)
            {
                $this->updatePriority($priority, $this->id);
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }

    }

    public function copyTo(ScheduleOfQuantityBuildUpItem $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $priorityToUpdate = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;

            $cloneItem = $this->copy();
            $cloneItem->priority = $priorityToUpdate;
            $cloneItem->save($con);

            if(!$lastPosition)
            {
                $this->updatePriority($priorityToUpdate, $cloneItem->id);
            }

            $cloneItem->copyFormulatedColumnsFromItem($this);

            $con->commit();

            $cloneItem->refresh(true);

            return $cloneItem;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyFormulatedColumnsFromItem(ScheduleOfQuantityBuildUpItem $item)
    {
        $formulatedColumnNames = ScheduleOfQuantityBuildUpItemTable::getFormulatedColumnNames($this->ScheduleOfQuantityItem->UnitOfMeasurement);

        foreach($formulatedColumnNames as $columnName)
        {
            $formulatedColumn = $item->getFormulatedColumnByName($columnName);
            if($formulatedColumn)
            {
                $cloneFormulatedColumn = $formulatedColumn->copy();
                $cloneFormulatedColumn->relation_id = $this->id;
                $cloneFormulatedColumn->save();

                ScheduleOfQuantityBuildUpEdgeTable::getInstance()->getConnection()->fetchAssoc( "INSERT INTO ".ScheduleOfQuantityBuildUpEdgeTable::getInstance()->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                        SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".ScheduleOfQuantityBuildUpEdgeTable::getInstance()->getTableName()." AS old
                        WHERE old.node_from = ".$formulatedColumn->id." AND old.deleted_at IS NULL");
            }
        }
    }

    private function updatePriority($priority, $excludeId)
    {
        $records = DoctrineQuery::create()->select('i.id')
            ->from('ScheduleOfQuantityBuildUpItem i')
            ->where('i.schedule_of_quantity_item_id = ?', $this->schedule_of_quantity_item_id)
            ->andWhere('i.can_edit = ?', true)
            ->andWhere('i.priority >= ?',$priority)
            ->addOrderBy('i.priority ASC')
            ->execute();

        $priorityToUpdate = $priority + 1;

        foreach($records as $record)
        {
            if($record->id != $excludeId)
            {
                $record->priority = $priorityToUpdate;
                $record->save();
            }

            $priorityToUpdate++;
        }
    }

    public function postSave($event)
    {
        if($this->deleted_at == NULL)
        {
            ScheduleOfQuantityItemTable::updateTimeStamp($this->ScheduleOfQuantityItem);
            ScheduleOfQuantityTradeTable::updateTimeStamp($this->ScheduleOfQuantityItem->Trade);
        }

        return parent::postSave($event);
    }
}
