<?php

/**
 * BillElementFormulatedColumn
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BillElementFormulatedColumn extends BaseBillElementFormulatedColumn
{
    public function save(Doctrine_Connection $conn = null, $updateMarkupColumns = true)
    {
        parent::save($conn);

        if($this->deleted_at == NULL)
        {
            if($updateMarkupColumns)
            {
                $this->updateMarkupColumns($this->column_name, $conn);
            }
        }
    }

    public function updateMarkupColumns($updatedColumnName, Doctrine_Connection $con = null)
    {
        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
        $pdo = $this->getTable()->getConnection()->getDbh();

        switch($updatedColumnName)
        {
            case BillElement::FORMULATED_COLUMN_MARKUP_AMOUNT:
                $grandTotal = BillElementTable::getElementGrandTotalByElementId($this->relation_id);
                $markupPercentage = $grandTotal != 0 ? $this->final_value / $grandTotal * 100 : 0;

                $percentageMarkup = number_format($markupPercentage, 5, '.', '');

                if($percentageMarkupColumn = BillElementTable::getFormulatedColumnByRelationIdAndColumnName($this->relation_id, BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE, Doctrine_Core::HYDRATE_ARRAY))
                {
                    $sql = "UPDATE ".BillElementFormulatedColumnTable::getInstance()->getTableName()." SET
                        value = :percentage_markup_txt, final_value = :percentage_markup_num, updated_at = NOW(), updated_by = :user_id WHERE id = :percentage_markup_column_id";

                    $params = array(
                        'percentage_markup_txt' => $percentageMarkup,
                        'percentage_markup_num' => $percentageMarkup,
                        'user_id' => $userId,
                        'percentage_markup_column_id' => $percentageMarkupColumn['id']
                    );
                }
                else
                {
                    $sql = "INSERT INTO ".BillElementFormulatedColumnTable::getInstance()->getTableName()."
                        (relation_id, column_name, value, final_value, created_at, updated_at, created_by, updated_by)
                        VALUES
                        (:relation_id, :column_name, :percentage_markup_txt, :percentage_markup_num, NOW(), NOW(), :user_id, :user_id)";

                    $params = array(
                        'relation_id' => $this->relation_id,
                        'column_name' => BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE,
                        'percentage_markup_txt' => $percentageMarkup,
                        'percentage_markup_num' => $percentageMarkup,
                        'user_id' => $userId
                    );
                }

                $stmt = $pdo->prepare($sql);

                $stmt->execute($params);

                break;
            case BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE:
                $grandTotal = BillElementTable::getElementGrandTotalByElementId($this->relation_id);

                $amountMarkup = number_format($grandTotal * ($this->final_value / 100), 5, '.', '');

                if($amountMarkupColumn = BillElementTable::getFormulatedColumnByRelationIdAndColumnName($this->relation_id, BillElement::FORMULATED_COLUMN_MARKUP_AMOUNT, Doctrine_Core::HYDRATE_ARRAY))
                {
                    $sql = "UPDATE ".BillElementFormulatedColumnTable::getInstance()->getTableName()." SET
                        value = :amount_markup_txt, final_value = :amount_markup_num, updated_at = NOW(), updated_by = :user_id WHERE id = :amount_markup_column_id";

                    $params = array(
                        'amount_markup_txt' => $amountMarkup,
                        'amount_markup_num' => $amountMarkup,
                        'user_id' => $userId,
                        'amount_markup_column_id' => $amountMarkupColumn['id']
                    );
                }
                else
                {
                    $sql = "INSERT INTO ".BillElementFormulatedColumnTable::getInstance()->getTableName()."
                        (relation_id, column_name, value, final_value, created_at, updated_at, created_by, updated_by)
                        VALUES
                        (:relation_id, :column_name, :amount_markup_txt, :amount_markup_num, NOW(), NOW(), :user_id, :user_id)";

                    $params = array(
                        'relation_id' => $this->relation_id,
                        'column_name' => BillElement::FORMULATED_COLUMN_MARKUP_AMOUNT,
                        'amount_markup_txt' => $amountMarkup,
                        'amount_markup_num' => $amountMarkup,
                        'user_id' => $userId
                    );
                }

                $stmt = $pdo->prepare($sql);

                $stmt->execute($params);

                break;
            default:
                break;
        }

        BillMarkupSettingTable::updateBillMarkupAmountById($this->BillElement->ProjectStructure->BillMarkupSetting->id);
    }
}
