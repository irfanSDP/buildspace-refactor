<?php

/**
 * ScheduleTaskItemBillItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ScheduleTaskItemBillItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ScheduleTaskItemBillItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ScheduleTaskItemBillItem');
    }

    public static function getQuantityPerUnitById($scheduleTaskItemBillItemId, $subPackageId=null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        if($subPackageId > 0)
        {
            $sql = "SELECT SUM(DISTINCT ifc.final_value)
            FROM ".ScheduleTaskItemBillItemTable::getInstance()->getTableName()." x
            JOIN ".ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName()." str ON str.schedule_task_item_bill_item_id = x.id
            JOIN ".SubPackageTypeReferenceTable::getInstance()->getTableName()." spr ON str.sub_package_type_reference_id = spr.id AND x.bill_column_setting_id = spr.bill_column_setting_id
            JOIN ".BillColumnSettingTable::getInstance()->getTableName()." bc ON spr.bill_column_setting_id = bc.id
            JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." r ON r.bill_column_setting_id = bc.id AND r.bill_item_id = x.bill_item_id
            JOIN ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." ifc ON r.id = ifc.relation_id AND
            CASE WHEN bc.use_original_quantity IS TRUE THEN
            ifc.column_name = '".BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT."' ELSE
            ifc.column_name = '".BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT."'
            END
            WHERE x.id = ".$scheduleTaskItemBillItemId." AND spr.sub_package_id = ".$subPackageId." AND str.standard_type_reference_id IS NULL
            AND r.include IS TRUE AND ifc.final_value <> 0
            AND bc.deleted_at IS NULL AND r.deleted_at IS NULL AND ifc.deleted_at IS NULL GROUP BY bc.id";
        }
        else
        {
            $sql = "SELECT SUM(DISTINCT ifc.final_value)
            FROM ".ScheduleTaskItemBillItemTable::getInstance()->getTableName()." x
            JOIN ".ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName()." str ON str.schedule_task_item_bill_item_id = x.id
            JOIN ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." pcr ON str.standard_type_reference_id = pcr.id AND x.bill_column_setting_id = pcr.bill_column_setting_id
            JOIN ".BillColumnSettingTable::getInstance()->getTableName()." bc ON pcr.bill_column_setting_id = bc.id
            JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." r ON r.bill_column_setting_id = bc.id AND r.bill_item_id = x.bill_item_id
            JOIN ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." ifc ON r.id = ifc.relation_id AND
            CASE WHEN bc.use_original_quantity IS TRUE THEN
            ifc.column_name = '".BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT."' ELSE
            ifc.column_name = '".BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT."'
            END
            WHERE x.id = ".$scheduleTaskItemBillItemId." AND str.sub_package_type_reference_id IS NULL
            AND r.include IS TRUE AND ifc.final_value <> 0
            AND bc.deleted_at IS NULL AND r.deleted_at IS NULL AND ifc.deleted_at IS NULL GROUP BY bc.id";
        }

        $stmt = $pdo->prepare($sql);

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        return array_sum($records);
    }

    public static function getTaggedUnits(ScheduleTaskItemBillItem $scheduleTaskItemBillItem, $column)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $subPackageId = $scheduleTaskItemBillItem->ScheduleTaskItem->ProjectSchedule->sub_package_id;
        $bill         = $scheduleTaskItemBillItem->BillItem->Element->ProjectStructure;
        $column       = 'cr.' . $column;

        if( $subPackageId )
        {
            $revision = SubPackagePostContractClaimRevisionTable::getCurrentProjectRevision($scheduleTaskItemBillItem->ScheduleTaskItem->ProjectSchedule->SubPackage);

            $sql = "SELECT t.id, type_ref.id AS type_ref_id, type_ref.bill_column_setting_id, type_ref.counter, type_ref.new_name,
                ROUND(COALESCE(" . $column . ",0),2) AS value
                FROM " . ScheduleTaskItemBillItemTable::getInstance()->getTableName() . " ti
                JOIN " . ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName() . " t ON t.schedule_task_item_bill_item_id = ti.id
                JOIN " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " stype ON t.sub_package_type_reference_id = stype.id
                JOIN " . PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName() . " type_ref ON type_ref.bill_column_setting_id = stype.bill_column_setting_id AND type_ref.counter = stype.counter
                JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " cs ON cs.id = stype.bill_column_setting_id
                LEFT JOIN " . SubPackagePostContractStandardClaimTable::getInstance()->getTableName() . " cr ON cr.bill_item_id = ti.bill_item_id AND cr.claim_type_ref_id = type_ref.id AND cr.revision_id = " . $revision['id'] . "
                WHERE ti.id = " . $scheduleTaskItemBillItem->id . " AND t.standard_type_reference_id IS NULL
                AND stype.sub_package_id = " . $subPackageId . " AND type_ref.post_contract_id = " . $bill->getRoot()->PostContract->id . "
                AND cs.id = " . $scheduleTaskItemBillItem->bill_column_setting_id . " AND cs.project_structure_id = " . $bill->id . "
                ORDER BY stype.counter ASC";
        }
        else
        {
            $revision = PostContractClaimRevisionTable::getCurrentProjectRevision($scheduleTaskItemBillItem->ScheduleTaskItem->ProjectSchedule->ProjectStructure->PostContract);

            $sql = "SELECT t.id, pc.bill_column_setting_id, pc.counter, pc.new_name,
                ROUND(COALESCE(" . $column . ",0),2) AS value
                FROM " . ScheduleTaskItemBillItemTable::getInstance()->getTableName() . " ti
                JOIN " . ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName() . " t ON t.schedule_task_item_bill_item_id = ti.id
                JOIN " . PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName() . " pc ON t.standard_type_reference_id = pc.id
                JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " cs ON pc.bill_column_setting_id = cs.id
                LEFT JOIN " . PostContractStandardClaimTable::getInstance()->getTableName() . " cr ON cr.bill_item_id = ti.bill_item_id AND cr.claim_type_ref_id = pc.id AND cr.revision_id = " . $revision['id'] . "
                WHERE ti.id = " . $scheduleTaskItemBillItem->id . " AND t.sub_package_type_reference_id IS NULL
                AND pc.post_contract_id = " . $bill->getRoot()->PostContract->id . " AND cs.project_structure_id = " . $bill->id . "
                AND cs.id = " . $scheduleTaskItemBillItem->bill_column_setting_id . "
                ORDER BY pc.counter ASC";
        }

        $stmt = $pdo->prepare($sql);

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}