<?php

/**
 * SubPackageVariationOrderClaimItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SubPackageVariationOrderClaimItem extends BaseSubPackageVariationOrderClaimItem
{
    public function updateCurrentAmount($value)
    {
        $percentage = $value / $this->SubPackageVariationOrderItem->getNettOmissionAddition() * 100;

        $this->current_percentage = number_format($percentage, 2, '.', '');
        $this->current_amount = $value;

        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount = 0;
        }

        $this->up_to_date_percentage = number_format($previousUpToDatePercentage + $this->current_percentage, 2, '.', '');
        $this->up_to_date_amount = number_format($previousUpToDateAmount + $this->current_amount, 2, '.', '');
    }

    public function updateCurrentPercentage($value)
    {
        $amount = $value / 100 * $this->SubPackageVariationOrderItem->getNettOmissionAddition();

        $this->current_amount = number_format($amount, 2, '.', '');
        $this->current_percentage = $value;

        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount = 0;
        }

        $this->up_to_date_percentage = number_format($previousUpToDatePercentage + $this->current_percentage, 2, '.', '');
        $this->up_to_date_amount = number_format($previousUpToDateAmount + $this->current_amount, 2, '.', '');
    }

    public function updateUpToDateAmount($value)
    {
        $percentage = $value / $this->SubPackageVariationOrderItem->getNettOmissionAddition() * 100;

        $this->up_to_date_percentage = number_format($percentage, 2, '.', '');
        $this->up_to_date_amount = $value;

        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount = 0;
        }

        $this->current_percentage = number_format($this->up_to_date_percentage -  $previousUpToDatePercentage, 2, '.', '');
        $this->current_amount = number_format($this->up_to_date_amount - $previousUpToDateAmount, 2, '.', '');
    }

    public function updateUpToDatePercentage($value)
    {
        $amount = $value / 100 * $this->SubPackageVariationOrderItem->getNettOmissionAddition();

        $this->up_to_date_amount = number_format($amount, 2, '.', '');
        $this->up_to_date_percentage = $value;

        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount = 0;
        }

        $this->current_percentage = number_format($this->up_to_date_percentage -  $previousUpToDatePercentage, 2, '.', '');
        $this->current_amount = number_format($this->up_to_date_amount - $previousUpToDateAmount, 2, '.', '');
    }

    public function getPreviousClaimItem($hydrate = null)
    {
        $previousClaim = $this->SubPackageVariationOrderClaim->getPreviousClaim(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $query = Doctrine_Query::create()->select('i.*')
                ->from('SubPackageVariationOrderClaimItem i')
                ->where('i.sub_package_variation_order_claim_id = ?',$previousClaim['id'])
                ->andWhere('i.sub_package_variation_order_item_id = ?', $this->sub_package_variation_order_item_id)
                ->limit(1);

            if($hydrate)
            {
                $query->setHydrationMode($hydrate);
            }

            return $query->fetchOne();
        }

        return false;
    }
}
