<?php

/**
 * BQItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BQItem extends BaseBQItem
{
    const TYPE_HEADER = 1;
    const TYPE_WORK_ITEM = 2;
    const TYPE_NOID = 4;

    const TYPE_HEADER_TEXT = 'HEAD';
    const TYPE_WORK_ITEM_TEXT = 'ITEM';
    const TYPE_NOID_TEXT = 'NOID';

    const FORMULATED_COLUMN_RATE = 'rate';

    public $itemContainerAfterCopy = array();
    public $itemFormulatedColumnContainerAfterCopy = array();
    public $buildUpRatesContainerAfterCopy = array();
    public $buildUpRatesFormulatedColumnContainerAfterCopy = array();
    public $importedBillItemIds = array();

    public function getFormulatedColumnByName($columnName, $hydrate=null)
    {
        return BQItemTable::getFormulatedColumnByRelationIdAndColumnName($this->id, $columnName, $hydrate);
    }

    /*
     * This method is use when updating type column in bq library item.
     * We need to remove all information from it's formulated column and uom if the type is not work item
     * since only work item will have value in formulated column and uom.
     */
    public function updateType($type)
    {
        $affectedItems = array();
        if($type != self::TYPE_WORK_ITEM)
        {
            $affectedItems = $this->deleteFormulatedColumns();
            $this->uom_id = NULL;
        }

        $this->deleteBuildUpRates();

        $this->type = (integer)$type;

        $this->save();

        return $affectedItems;
    }

    public function save(Doctrine_Connection $conn = null)
    {
        parent::save($conn);

        BQItemTable::updateTimestamp($this);
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        //we need to update any related column from formulated columns before deleting it
        $items = DoctrineQuery::create()->select('*')
            ->from('BQItem i')
            ->andWhere('i.root_id = ?',$this->root_id)
            ->andWhere('i.lft >= ? AND i.rgt <= ?', array($this->lft, $this->rgt))
            ->addOrderBy('i.lft')
            ->execute();

        $affectedItemList = array();

        foreach($items as $item)
        {
            $affectedItems = $item->deleteFormulatedColumns($conn);
            array_push($affectedItemList, $affectedItems);
        }

        // we delete all item subsets under this item (if any)
        if($this->type == BQItem::TYPE_HEADER)
        {
            Doctrine_Query::create()
                ->delete('BQItem i')
                ->where('i.root_id = ?', $this->root_id)
                ->andWhere('i.element_id = ?', $this->element_id)
                ->andWhere('i.lft > ?', $this->lft)
                ->andWhere('i.rgt < ?', $this->rgt)
                ->execute();
        }

        //delete any build up rates
        if($this->type == self::TYPE_WORK_ITEM)
        {
            $this->deleteBuildUpRates($conn);
        }

        parent::delete($conn);

        //recalculate left-right values when deleting child nodes
        if(!$this->node->isRoot())
        {
            $first = $this->rgt + 1;
            $delta = $this->lft - $this->rgt - 1;

            Utilities::shiftRightLeftNestedSet(get_class($this), $first, $delta, $this->root_id, $conn);
        }

        return $affectedItemList;
    }

    public function deleteBuildUpRates(Doctrine_Connection $conn = null)
    {
        BQItemTable::deleteBuildUpRatesByBQItemId($this->id);
    }

    public function deleteFormulatedColumns(Doctrine_Connection $conn = null)
    {
        $bqItemIds = array();
        $affectedItems = array();
        $formulatedColumnIds = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            foreach($this->FormulatedColumns as $formulatedColumn)
            {
                $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                if(is_array($nodes))
                {
                    foreach($nodes as $node)
                    {
                        $referencedNode = Doctrine_Core::getTable('BQItemFormulatedColumn')->find($node['node_from']);

                        if($referencedNode)
                        {
                            $pattern = '/\b(R'.$this->id.')\b/i';
                            $value = preg_replace($pattern, '#REF!', $referencedNode->value);

                            $referencedNode->setFormula($value);

                            $referencedNode->save();

                            $bqItemIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                        }
                    }
                }

                $formulatedColumn->delete($conn);

                $formulatedColumnIds[] = $formulatedColumn->id;
            }

            if(count($formulatedColumnIds) > 0)
            {
                //now we can remove all edges after we've updated related nodes
                Doctrine_Query::create()
                    ->delete('BQItemEdge e')
                    ->whereIn('e.node_from', $formulatedColumnIds)
                    ->execute();

                Doctrine_Query::create()
                    ->delete('BQItemEdge e')
                    ->whereIn('e.node_to', $formulatedColumnIds)
                    ->execute();
            }

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
        }

        foreach($bqItemIds as $bqItemId)
        {
            $affectedItem = array();
            $bqItem = $this->getTable()->find($bqItemId);

            $affectedItem['id'] = $bqItem->id;

            foreach($bqItem->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedItem[$columnName."-final_value"] = $formulatedColumn->final_value;
                $affectedItem[$columnName."-value"] = $formulatedColumn->value;
                $affectedItem[$columnName.'-has_cell_reference'] = $formulatedColumn->hasCellReference();
                $affectedItem[$columnName.'-has_formula'] = $formulatedColumn->hasFormula();
            }

            array_push($affectedItems, $affectedItem);
        }

        return $affectedItems;
    }

    public function moveTo(BQItem $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($targetItem->node->isRoot())
            {
                $priority       = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
                $this->priority = $priority;
                $this->save();

                if(!$this->node->isRoot() and $this->node->isValidNode())
                {
                    $this->node->makeRoot($this->id);
                    $this->save();
                }

                if(!$lastPosition)
                {
                    $this->updateRootPriority($priority, $this->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $this->node->moveAsNextSiblingOf($targetItem);
                }
                else
                {
                    $this->node->moveAsPrevSiblingOf($targetItem);
                }

                $this->priority = $targetItem->priority;
                $this->save();

                $this->refresh();
            }

            /*
             * Update priority for all nodes under the family to its root priority.
             * We exclude this step for case the target item is root node and $lastPosition is false
             * because the priority already been update by calling updateRootPriority()
             */
            if(($targetItem->node->isRoot() && $lastPosition) or !$targetItem->node->isRoot())
            {
                Doctrine_Query::create()->update('BQItem i')
                    ->set('priority', $this->priority)
                    ->where('i.lft BETWEEN ? AND ?', array($this->lft, $this->rgt))
                    ->andWhere('i.root_id = ?', $this->root_id)
                    ->andWhere('i.priority <> ?', $this->priority)
                    ->execute();
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyTo($targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($this->node->hasChildren())
            {
                $children = $this->getTable()
                    ->createQuery('i')
                    ->select('i.id, i.description, i.uom_id, i.element_id, i.type, i.level')
                    ->where('i.root_id = ?', $this->root_id)
                    ->addWhere('i.lft > ? AND i.rgt < ?', array($this->lft, $this->rgt))
                    ->orderBy('i.lft ASC')
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY)
                    ->execute();
            }
            else
            {
                $children = false;
            }

            $cloneItem              = new BQItem();
            $cloneItem->description = $this->description;
            $cloneItem->type        = $this->type;
            $cloneItem->element_id  = $this->element_id;
            $cloneItem->uom_id      = $this->uom_id;

            if($targetItem->node->isRoot())
            {
                $priority = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
                $cloneItem->priority = $priority;
                $cloneItem->save($con);

                $cloneItem->getTable()->getTree()->createRoot($cloneItem);

                if(!$lastPosition)
                {
                    $this->updateRootPriority($priority, $cloneItem->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $cloneItem->node->insertAsNextSiblingOf($targetItem);
                }
                else
                {
                    $cloneItem->node->insertAsPrevSiblingOf($targetItem);
                }

                $cloneItem->priority = $targetItem->priority;
                $cloneItem->save($con);
            }

            $cloneItem->refresh();

            array_push($this->itemContainerAfterCopy, array(
                'id'     => $cloneItem->id,
                'origin' => $this->id
            ));

            if($children)
            {
                $this->_loadNestedSetData($children, $this, $cloneItem);
            }

            $cloneItem->copyFormulatedColumnsFromItem($this, $this);
            $cloneItem->copyBuildUpRatesFromItem($this);

            $this->updateItemRowLinkingAfterCopy();

            $con->commit();

            $cloneItem->refresh(true);

            return $cloneItem;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyRateCellFromItem(BQItem $item)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($this->type != BQItem::TYPE_HEADER && $this->type != BQItem::TYPE_NOID)
            {
                if($this->hasBuildUpRates())
                {
                    $this->deleteBuildUpRates($con);
                }

                $this->copyFormulatedColumnsFromItem($item, $this);
                $this->copyBuildUpRatesFromItem($item);
                $this->updateItemRowLinkingAfterCopy();

                $con->commit();
                $this->refresh(true);
            }
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function indent()
    {
        $indented = false;
        $previousRoot = $this->getPreviousRoot();

        if($this->node->isRoot() and $previousRoot and $previousRoot->type == BQItem::TYPE_HEADER)
        {
            $this->node->moveAsLastChildOf($previousRoot);
            $this->refresh();

            $pdo = $this->getTable()->getConnection()->getDbh();

            $stmt = $pdo->prepare("UPDATE ".$this->getTable()->getTableName()." SET priority = ".$previousRoot->priority."
            WHERE root_id = ".$previousRoot->root_id." AND priority <> ".$previousRoot->priority."
            AND element_id = ".$this->element_id." AND deleted_at IS NULL");

            $stmt->execute();

            $indented = true;
        }
        else if(!$this->node->isRoot() and $this->node->hasPrevSibling() and $this->node->getPrevSibling()->type == BQItem::TYPE_HEADER)
        {
            $this->node->moveAsLastChildOf($this->node->getPrevSibling());

            $this->refresh();

            $indented = true;
        }

        return $indented;
    }

    public function outdent()
    {
        if(!$this->node->isRoot() and ($this->type == BQItem::TYPE_HEADER or ($this->type != BQItem::TYPE_HEADER and !$this->node->hasNextSibling())))
        {
            $parent = $this->node->getParent();

            if(!$parent || !$parent->node)
            {
                return false;
            }
            
            $siblings = $this->getTable()
                ->createQuery('i')
                ->select('i.id')
                ->where('i.root_id = ?',$this->root_id)
                ->andWhere('i.level = ?', $this->level)
                ->andWhere('i.lft BETWEEN ? AND ?', array($parent->lft, $parent->rgt))
                ->andWhere('i.lft > ?', $this->rgt)
                ->addOrderBy('i.lft ASC')
                ->execute();

            foreach($siblings as $sibling)
            {
                $sibling->node->moveAsLastChildOf($this);

                $this->refresh();
            }

            unset($siblings);

            if(!$parent->node->isRoot())
            {
                $this->node->moveAsNextSiblingOf($parent);
            }
            else
            {
                $this->node->makeRoot($this->id);

                parent::save();

                $this->priority = $parent->priority + 1;

                $this->save();

                $this->updateRootPriority($parent->priority + 1, $this->id);
            }

            $this->refresh();

            return true;
        }
        else
        {
            return false;
        }
    }

    public function hasBuildUpRates()
    {
        return $this->BuildUpRateResources->count() > 0 ? true : false;
    }

    /*
     * Well this is fuckin tricky. The problem is when we successfully cloned bq library item, we need to update
     * row linking (if any). The rules are:
     * 1. If the link id is included in the list of copy items, then all linked items in the copy list
     * will be updated to point it's linked value to the newly copied record
     * 2. If the link id is not included in the list of copy item, all linked items in the copy list
     * will remain same (nothing change)
     *
     * So we need to store origin id and the newly created id (from copy) into a container so later once we created
     * all records we will then update the linked id respectively based on the the new id -> origin id list
     *
     * To see this crazy ass solution in action and for better understanding, please refer to copyTo() method in
     * BQItem and BQElement classes
     */
    public function copyFormulatedColumnsFromItem(BQItem $bqItem, $containerScope)
    {
        $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('BQItem');
        $edgeTable = Doctrine_Core::getTable('BQItemEdge');

        foreach($formulatedColumnConstants as $constant)
        {
            $formulatedColumn = $bqItem->getFormulatedColumnByName($constant);
            if($formulatedColumn)
            {
                $cloneFormulatedColumn = $this->getFormulatedColumnByName(BQItem::FORMULATED_COLUMN_RATE);
                $cloneFormulatedColumn = $cloneFormulatedColumn ? $cloneFormulatedColumn : new BQItemFormulatedColumn();
                $cloneFormulatedColumn->has_build_up = $formulatedColumn->has_build_up;
                $cloneFormulatedColumn->column_name = $formulatedColumn->column_name;
                $cloneFormulatedColumn->value = $formulatedColumn->value;
                $cloneFormulatedColumn->final_value = $formulatedColumn->final_value;
                $cloneFormulatedColumn->relation_id = $this->id;
                $cloneFormulatedColumn->save();

                array_push($containerScope->itemFormulatedColumnContainerAfterCopy, array(
                    'id' => $cloneFormulatedColumn->id,
                    'origin' => $formulatedColumn->id
                ));

                $edgeTable->getConnection()->fetchAssoc("INSERT INTO ".$edgeTable->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                    SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".$edgeTable->getTableName()." AS old
                    WHERE old.node_from = ".$formulatedColumn->id." AND old.deleted_at IS NULL");
            }
        }
    }

    public function updateItemRowLinkingAfterCopy()
    {
        if(count($this->itemFormulatedColumnContainerAfterCopy) > 0)
        {
            $formulatedColumnIdList = array();
            $formulatedColumnOriginList = array();

            foreach($this->itemFormulatedColumnContainerAfterCopy as $list)
            {
                array_push($formulatedColumnIdList, $list['id']);
                array_push($formulatedColumnOriginList, $list['origin']);
            }

            $records = DoctrineQuery::create()->select('e.id, e.node_from, e.node_to')
                ->from('BQItemEdge e')
                ->whereIn('e.node_from', $formulatedColumnIdList)
                ->andWhereIn('e.node_to', $formulatedColumnOriginList)
                ->addOrderBy('e.node_from ASC')
                ->execute();

            foreach($records as $record)
            {
                $nodeFrom = $record->NodeFrom;
                if($nodeFrom->hasCellReference())
                {
                    $value = $nodeFrom->value;
                    foreach($this->itemContainerAfterCopy as $list)
                    {
                        $pattern = '/\b(R'.$list['origin'].')\b/i';
                        $value = preg_replace($pattern, 'R'.$list['id'], $value);
                    }
                    $nodeFrom->value = $value;
                    $nodeFrom->save();
                }
                unset($nodeFrom);
            }

            $this->itemFormulatedColumnContainerAfterCopy = array();
            $this->itemContainerAfterCopy = array();
        }
    }

    public function updateBuildUpRatesRowLinkingAfterCopy()
    {
        if(count($this->buildUpRatesFormulatedColumnContainerAfterCopy) > 0)
        {
            $formulatedColumnIdList = array();
            $formulatedColumnOriginList = array();

            foreach($this->buildUpRatesFormulatedColumnContainerAfterCopy as $list)
            {
                array_push($formulatedColumnIdList, $list['id']);
                array_push($formulatedColumnOriginList, $list['origin']);
            }

            $records = DoctrineQuery::create()->select('e.id, e.node_from, e.node_to')
                ->from('BQLibraryBuildUpRateEdge e')
                ->whereIn('e.node_from', $formulatedColumnIdList)
                ->andWhereIn('e.node_to', $formulatedColumnOriginList)
                ->addOrderBy('e.node_from ASC')
                ->execute();

            foreach($records as $record)
            {
                $nodeFrom = $record->NodeFrom;
                if($nodeFrom->hasCellReference())
                {
                    $value = $nodeFrom->value;
                    foreach($this->buildUpRatesContainerAfterCopy as $buildUpList)
                    {
                        $pattern = '/\b(R'.$buildUpList['origin'].')\b/i';
                        $value = preg_replace($pattern, 'R'.$buildUpList['id'], $value);
                    }

                    $nodeFrom->value = $value;
                    $nodeFrom->save();
                }
            }

            $this->buildUpRatesFormulatedColumnContainerAfterCopy = array();
            $this->buildUpRatesContainerAfterCopy = array();
        }
    }

    public function copyBuildUpRatesFromItem(BQItem $bqItem)
    {
        if($bqItem->hasBuildUpRates())
        {
            $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('BQLibraryBuildUpRateItem');
            $edgeTable = Doctrine_Core::getTable('BQLibraryBuildUpRateEdge');

            $buildUpRateResourceIds = array();

            foreach($bqItem->BuildUpRateResources as $buildUpRateResource)
            {
                $cloneBuildUpRateResource = $buildUpRateResource->copy();
                $cloneBuildUpRateResource->bq_item_id = $this->id;
                $cloneBuildUpRateResource->save();

                $buildUpRateResourceIds[$buildUpRateResource->id] = $cloneBuildUpRateResource->id;

                unset($buildUpRateResource);
            }

            foreach($bqItem->BuildUpRates as $buildUpRate)
            {
                $cloneBuildUpRate = $buildUpRate->copy();

                $cloneBuildUpRate->bq_item_id = $this->id;
                $cloneBuildUpRate->build_up_rate_resource_id = $buildUpRateResourceIds[$buildUpRate->build_up_rate_resource_id];
                $cloneBuildUpRate->save();

                array_push($this->buildUpRatesContainerAfterCopy, array(
                    'id' => $cloneBuildUpRate->id,
                    'origin' => $buildUpRate->id
                ));

                foreach($formulatedColumnConstants as $constant)
                {
                    $formulatedColumn = $buildUpRate->getFormulatedColumnByName($constant);
                    if($formulatedColumn)
                    {
                        $cloneFormulatedColumn = $formulatedColumn->copy();
                        $cloneFormulatedColumn->relation_id = $cloneBuildUpRate->id;
                        $cloneFormulatedColumn->save();

                        array_push($this->buildUpRatesFormulatedColumnContainerAfterCopy, array(
                            'id' => $cloneFormulatedColumn->id,
                            'origin' => $formulatedColumn->id
                        ));

                        $edgeTable->getConnection()->fetchAssoc("INSERT INTO ".$edgeTable->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                        SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".$edgeTable->getTableName()." AS old
                        WHERE old.node_from = ".$formulatedColumn->id." AND old.deleted_at IS NULL");
                    }
                }
            }

            $this->updateBuildUpRatesRowLinkingAfterCopy();

            $originBuildUpSummary = $bqItem->BuildUpRateSummary;
            $cloneBuildUpSummary = $this->BuildUpRateSummary;
            $cloneBuildUpSummary->bq_item_id = $this->id;
            $cloneBuildUpSummary->total_cost = $originBuildUpSummary->total_cost;
            $cloneBuildUpSummary->markup = $originBuildUpSummary->markup;
            $cloneBuildUpSummary->final_cost = $originBuildUpSummary->final_cost;
            $cloneBuildUpSummary->apply_conversion_factor = $originBuildUpSummary->apply_conversion_factor;
            $cloneBuildUpSummary->conversion_factor_amount = $originBuildUpSummary->conversion_factor_amount;
            $cloneBuildUpSummary->conversion_factor_uom_id = $originBuildUpSummary->conversion_factor_uom_id;
            $cloneBuildUpSummary->conversion_factor_operator = $originBuildUpSummary->conversion_factor_operator;
            $cloneBuildUpSummary->save();
        }
        else
        {
            return false;
        }
    }

    public function getPreviousRoot()
    {
        $rootId = $this->root_id > 0 ? $this->root_id : $this->id;
        $root = $this->getTable()->find($rootId);

        return $this->getTable()
            ->createQuery('i')
            ->select('i.id')
            ->where('i.root_id = i.id')
            ->addWhere('i.element_id = ?', $this->element_id)
            ->addWhere('i.priority < ?', $root->priority)
            ->orderBy('i.priority DESC')
            ->limit(1)
            ->fetchOne();
    }

    public function updateRootPriority($priority, $excludeId=null)
    {
        BQItemTable::updateRootPriority($priority, $this->element_id, $excludeId);
    }

    private function _loadNestedSetData($nestedSetData, $containerScope, BQItem $parent)
    {
        $nestedSetData = array_reverse($nestedSetData, true);

        foreach($nestedSetData as $nestedSet)
        {
            $children = array();
            $originBQItem = $this->getTable()->find($nestedSet['id']);
            unset($nestedSet['id']);

            if(array_key_exists('__children', $nestedSet))
            {
                $children = (array) $nestedSet['__children'];
                unset($nestedSet['__children']);
            }

            $obj = new BQItem();

            foreach($nestedSet as $key => $value)
            {
                $func = 'set' . Doctrine_Inflector::classify($key);
                $obj->$func($value);
            }

            $parent->node->addChild($obj);

            $obj->priority = $parent->priority;
            $obj->save();

            array_push($containerScope->itemContainerAfterCopy, array(
                'id'     => $obj->id,
                'origin' => $originBQItem->id
            ));

            $obj->copyFormulatedColumnsFromItem($originBQItem, $containerScope);
            $obj->copyBuildUpRatesFromItem($originBQItem);

            if(is_array($children) and !empty($children))
            {
                $this->_loadNestedSetData($children, $containerScope, $obj);
            }
        }
    }

    public function calculateBuildUpTotalByResourceId($resourceId)
    {
        $result = DoctrineQuery::create()->select('SUM(b.line_total) as total')
            ->from('BQLibraryBuildUpRateItem b')
            ->where('b.bq_item_id = ?', $this->id)
            ->andWhere('b.build_up_rate_resource_id = ?', $resourceId)
            ->limit(1)
            ->fetchOne();

        return $result['total'] ? $result['total'] : 0;
    }

    public function importResourceItems($resourceItemIds, BQLibraryBuildUpRateResource $resource)
    {
        $results = DoctrineQuery::create()->select('i.id, i.resource_item_library_id')
            ->from('BQLibraryBuildUpRateItem i')
            ->where('i.bq_item_id = ?', $this->id)
            ->andWhere('i.build_up_rate_resource_id = ?', $resource->id)
            ->andWhereIn('i.resource_item_library_id', $resourceItemIds)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->execute();

        if($results)
        {
            foreach($results as $result)
            {
                //if resource already linked to build up, unset resource id from array
                if(($key = array_search($result['resource_item_library_id'], $resourceItemIds)) !== false) {
                    unset($resourceItemIds[$key]);
                }
            }
        }

        $buildUpRateItems = array();

        if(count($resourceItemIds) > 0)
        {
            // only select work item to be imported into build up
            $resourceItems = DoctrineQuery::create()->select('i.id, i.description, i.uom_id, i.resource_trade_id')
                ->from('ResourceItem i')
                ->whereIn('i.id', $resourceItemIds)
                ->andWhere('i.type = ?', ResourceItem::TYPE_WORK_ITEM)
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->execute();

            $priority = DoctrineQuery::create()->select('i.id, i.description, i.uom_id, i.priority')
                ->from('BQLibraryBuildUpRateItem i')
                ->where('i.bq_item_id = ?', $this->id)
                ->andWhere('i.build_up_rate_resource_id = ?', $resource->id)
                ->orderBy('i.priority DESC')
                ->limit(1)
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->fetchOne();

            $priority = $priority ? $priority['priority']+1 : 0;

            foreach($resourceItems as $item)
            {
                $buildUpRateItem = new BQLibraryBuildUpRateItem();
                $buildUpRateItem->bq_item_id = $this->id;
                $buildUpRateItem->description = $item['description'];
                $buildUpRateItem->build_up_rate_resource_id = $resource->id;
                $buildUpRateItem->resource_trade_library_id = $item['resource_trade_id'];
                $buildUpRateItem->resource_item_library_id = $item['id'];
                $buildUpRateItem->uom_id = $item['uom_id'];
                $buildUpRateItem->priority = $priority;

                $buildUpRateItem->save();

                $columns = array(
                    BQLibraryBuildUpRateItem::FORMULATED_COLUMN_CONSTANT,
                    BQLibraryBuildUpRateItem::FORMULATED_COLUMN_RATE,
                    BQLibraryBuildUpRateItem::FORMULATED_COLUMN_WASTAGE
                );

                foreach($columns as $column)
                {
                    $formulatedColumn = new BQLibraryBuildUpRateFormulatedColumn();
                    $formulatedColumn->relation_id = $buildUpRateItem->id;
                    $formulatedColumn->column_name = $column;
                    $formulatedColumn->linked = true;

                    $resourceItemFormulatedColumn = DoctrineQuery::create()->select('c.id, c.column_name, c.final_value')
                        ->from('ResourceItemFormulatedColumn c')
                        ->where('c.relation_id = ?', $item['id'])
                        ->andWhere('c.column_name = ?', $column)
                        ->limit(1)
                        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                        ->fetchOne();

                    if($resourceItemFormulatedColumn)
                    {
                        $formulatedColumn->value = $resourceItemFormulatedColumn['final_value'];
                        $formulatedColumn->final_value = $resourceItemFormulatedColumn['final_value'];
                    }

                    $formulatedColumn->save();
                }
                $priority++;

                array_push($buildUpRateItems, $buildUpRateItem);
            }
        }

        return $buildUpRateItems;
    }

    public function isResourceLibraryExistsInBuildUpRate($resourceLibraryId)
    {
        return BQLibraryBuildUpRateResourceTable::isResourceFromLibraryExists($resourceLibraryId, $this->id);
    }

    public function createBuildUpRateResourceFromResourceLibrary(Resource $resource)
    {
        if($this->isResourceLibraryExistsInBuildUpRate($resource->id))
            throw new Exception("Resource id ".$resource->id." already exists for build up rate resource with bq item id ".$this->id);

        $buildUpRateResource = new BQLibraryBuildUpRateResource();
        $buildUpRateResource->bq_item_id = $this->id;
        $buildUpRateResource->resource_library_id = $resource->id;
        $buildUpRateResource->name = $resource->name;

        $buildUpRateResource->save();

        return $buildUpRateResource;
    }
}
