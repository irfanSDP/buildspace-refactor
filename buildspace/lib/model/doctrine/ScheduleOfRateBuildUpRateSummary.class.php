<?php

/**
 * ScheduleOfRateBuildUpRateSummary
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ScheduleOfRateBuildUpRateSummary extends BaseScheduleOfRateBuildUpRateSummary
{
    const ROUNDING_TYPE_DISABLED = 1;
    const ROUNDING_TYPE_UPWARD = 2;
    const ROUNDING_TYPE_DOWNWARD = 4;
    const ROUNDING_TYPE_NEAREST_WHOLE_NUMBER = 8;
    const ROUNDING_TYPE_NEAREST_TENTH = 16;

    public function calculateTotalCost()
    {
        return ScheduleOfRateBuildUpRateSummaryTable::calculateTotalCostByScheduleOfRateItemId($this->schedule_of_rate_item_id);
    }

    public function getTotalCostAfterConversion()
    {
        $totalCost = $this->calculateTotalCost();
        $conversionFactorAmount = $this->conversion_factor_amount;
        $operator = $this->conversion_factor_operator;

        if($this->apply_conversion_factor)
        {
            $exp = $totalCost.$operator.$conversionFactorAmount;

            $evaluator = new EvalMath(true, true);
            $evaluator->suppress_errors = true;
            $evaluatedValue = $evaluator->evaluate($exp);

            return $evaluatedValue ? $evaluatedValue : 0;
        }

        return $totalCost;
    }

    public function calculateFinalCost()
    {
        $totalCost = $this->getTotalCostAfterConversion();

        $markupPrice = $totalCost * ($this->markup/100);

        $finalCost = $totalCost + $markupPrice;

        if($finalCost != $this->final_cost)
        {
            $this->final_cost = $finalCost;
            $this->save();
        }

        return $this->final_cost;
    }

    public function preSave($event)
    {
        //reset all conversion factor information when it's disabled
        if($this->apply_conversion_factor === 'false' or !$this->apply_conversion_factor)
        {
            $this->conversion_factor_amount = 0;
            $this->conversion_factor_uom_id = NULL;
            $this->conversion_factor_operator = Constants::ARITHMETIC_OPERATOR_MULTIPLICATION;
        }

        return parent::preSave($event);
    }

    public function postSave($event)
    {
        if($this->deleted_at == NULL)
        {
            //update schedule of rate item rate to set flag has_build_up to true;
            $scheduleOfRateItemFormulatedColumn = $this->ScheduleOfRateItem->getFormulatedColumnByName(ScheduleOfRateItem::FORMULATED_COLUMN_RATE);

            if(!$scheduleOfRateItemFormulatedColumn)
            {
                $scheduleOfRateItemFormulatedColumn = new ScheduleOfRateItemFormulatedColumn();
                $scheduleOfRateItemFormulatedColumn->relation_id = $this->ScheduleOfRateItem->id;
                $scheduleOfRateItemFormulatedColumn->column_name = ScheduleOfRateItem::FORMULATED_COLUMN_RATE;
            }

            $scheduleOfRateItemFormulatedColumn->value = $this->final_cost;
            $scheduleOfRateItemFormulatedColumn->final_value = $this->final_cost;
            $scheduleOfRateItemFormulatedColumn->has_build_up = true;
            $scheduleOfRateItemFormulatedColumn->save();
        }

        return parent::postSave($event);
    }
}
