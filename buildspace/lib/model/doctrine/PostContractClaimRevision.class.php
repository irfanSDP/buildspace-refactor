<?php

/**
 * PostContractClaimRevision
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PostContractClaimRevision extends BasePostContractClaimRevision
{
	const ORIGINAL_BILL_VERSION = 1;

	public function save(Doctrine_Connection $conn = null)
	{
		$isNew = $this->isNew() ? true : false;

		// array to store information for time based and work based claim
		$timeBasedInfos = array();
		$workBasedInfos = array();

		if ( $isNew AND $this->version > self::ORIGINAL_BILL_VERSION )
		{
			$pdo = $this->getTable()->getConnection()->getDbh();

			// set the previous revision's current_selected_revision status to false and claim_submission_locked status to true
			$sql = "UPDATE ".PostContractClaimRevisionTable::getInstance()->getTableName()." SET current_selected_revision = false, locked_status = true, claim_submission_locked = true WHERE (post_contract_id = :post_contract_id)";
			$stmt = $pdo->prepare($sql);
			$stmt->execute(array('post_contract_id' => $this->post_contract_id));

			// get last latest revision id
			$lastLatestRevision = PostContractClaimRevisionTable::getCurrentProjectRevision($this->PostContract);

			// get the data that will be cloned for work based and time based claim for preliminaries grid if available
			$timeBasedInfos = PreliminariesTimeBasedClaimTable::getRecordsByLastRevision($lastLatestRevision);
			$workBasedInfos = PreliminariesWorkBasedClaimTable::getRecordsByLastRevision($lastLatestRevision);

			$this->current_selected_revision = true;
		}

		parent::save();

		if ( $isNew AND $this->version > self::ORIGINAL_BILL_VERSION )
		{
			$this->refresh(true);

			PreliminariesTimeBasedClaimTable::insertRecordsByNewRevision($this, $timeBasedInfos);
			PreliminariesWorkBasedClaimTable::insertRecordsByNewRevision($this, $workBasedInfos);

			PostContractTable::cloneStandardClaimRevision($this->PostContract, $this);
		}
    }
    
    public function getPreviousClaimRevision()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT rev.id 
            FROM " . PostContractClaimRevisionTable::getInstance()->getTableName() . " rev 
            WHERE rev.post_contract_id = " . $this->post_contract_id . "  
            AND rev.version = " . ($this->version - 1) . "
            AND rev.deleted_at IS NULL");

        $stmt->execute();

        $previousClaimRevisionId = $stmt->fetch(PDO::FETCH_COLUMN, 0);
        return ($previousClaimRevisionId) ? Doctrine_Core::getTable('PostContractClaimRevision')->find(intval($previousClaimRevisionId)) : false;
    }

    public function getPreviousWorkDone()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(c.up_to_date_amount),0) AS up_to_date_amount
            FROM ".PostContractStandardClaimTable::getInstance()->getTableName()." c
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.revision_id
            WHERE rev.post_contract_id = ".$this->post_contract_id."
            AND rev.version = ".($this->version - 1)."
            AND rev.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public function getWorkDone()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(c.up_to_date_amount),0) AS up_to_date_amount
            FROM ".PostContractStandardClaimTable::getInstance()->getTableName()." c
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = c.revision_id
            WHERE rev.id = ".$this->id." AND rev.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public function setSelectedRevision()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("UPDATE " . PostContractClaimRevisionTable::getInstance()->getTableName() . "
            SET current_selected_revision = false
            WHERE post_contract_id = :postContractId");

        $stmt->execute(array( 'postContractId' => $this->PostContract->id ));

        $stmt = $pdo->prepare("UPDATE " . PostContractClaimRevisionTable::getInstance()->getTableName() . "
            SET current_selected_revision = true
            WHERE (id = :revisionId)");

        $stmt->execute(array( 'revisionId' =>  $this->id ));

        // Set viewing claim as the latest for this revision, for all post contract claims.

        $claimCertIds = array_column(PostContractClaimRevisionTable::getClaimCertificates($this, '<='), 'id');

        $includeClaimCertFilter = ( $this->ClaimCertificate->status != ClaimCertificate::STATUS_TYPE_IN_PROGRESS ) ? true : false;

        $stmt = $pdo->prepare("SELECT distinct(type) from bs_post_contract_claims");
        $stmt->execute();

        $postContractClaimTypes = $stmt->fetchAll(PDO::FETCH_COLUMN);

        foreach($postContractClaimTypes as $type)
        {
            $stmt = $pdo->prepare("SELECT claimObject.id
                FROM " . PostContractClaimTable::getInstance()->getTableName() . " claimObject
                WHERE claimObject.type = {$type}
                AND claimObject.project_structure_id = {$this->PostContract->ProjectStructure->id}
            ");

            $stmt->execute();

            $claimObjects = $stmt->fetchAll(PDO::FETCH_COLUMN);

            foreach($claimObjects as $claimObjectId)
            {
                if( count($claimCertIds) < 1 ) continue;

                $claimCertClause = $includeClaimCertFilter ? "AND claim.claim_certificate_id in (" . implode(',', $claimCertIds) . ")" : "";

                $stmt = $pdo->prepare("SELECT claim.id
                    FROM " . PostContractClaimClaimTable::getInstance()->getTableName() . " claim
                    JOIN " . PostContractClaimTable::getInstance()->getTableName() . " claimObject on claimObject.id = claim.post_contract_claim_id
                    LEFT JOIN " . ClaimCertificateTable::getInstance()->getTableName() . " cert on cert.id = claim.claim_certificate_id
                    LEFT JOIN " . PostContractClaimRevisionTable::getInstance()->getTableName() . " rev on rev.id = cert.post_contract_claim_revision_id
                    WHERE claimObject.id = {$claimObjectId}
                    {$claimCertClause}
                    ORDER BY rev.version DESC
                    LIMIT 1
                ");

                $stmt->execute();

                if( ! $claimId = $stmt->fetch(PDO::FETCH_COLUMN) ) continue;

                $claim = Doctrine_Core::getTable('PostContractClaimClaim')->find($claimId);
                if($claim)
                {
                    $claim->setAsViewingClaim();
                }
            }
        }

        $stmt = $pdo->prepare("SELECT vo.id
                FROM " . VariationOrderTable::getInstance()->getTableName() . " vo
                WHERE vo.project_structure_id = {$this->PostContract->ProjectStructure->id}
            ");

        $stmt->execute();

        $variationOrders = $stmt->fetchAll(PDO::FETCH_COLUMN);

        foreach($variationOrders as $variationOrderId)
        {
            if( count($claimCertIds) < 1 ) continue;

            $claimCertClause = $includeClaimCertFilter ? "AND xref.claim_certificate_id in (" . implode(',', $claimCertIds) . ")" : "";

            $stmt = $pdo->prepare("SELECT claim.id
                    FROM " . VariationOrderClaimTable::getInstance()->getTableName() . " claim
                    JOIN " . VariationOrderTable::getInstance()->getTableName() . " vo on vo.id = claim.variation_order_id
                    LEFT JOIN " . VariationOrderClaimClaimCertificateTable::getInstance()->getTableName() . " xref on xref.variation_order_claim_id = claim.id
                    LEFT JOIN " . ClaimCertificateTable::getInstance()->getTableName() . " cert on cert.id = xref.claim_certificate_id
                    LEFT JOIN " . PostContractClaimRevisionTable::getInstance()->getTableName() . " rev on rev.id = cert.post_contract_claim_revision_id
                    WHERE vo.id = {$variationOrderId}
                    AND claim.deleted_at IS NULL
                    {$claimCertClause}
                    ORDER BY claim.revision DESC
                    LIMIT 1
                ");

            $stmt->execute();

            if( ! $claimId = $stmt->fetch(PDO::FETCH_COLUMN) ) continue;

            $claim = Doctrine_Core::getTable('VariationOrderClaim')->find($claimId);
            if($claim)
            {
                $claim->setAsViewingClaim();
            }
        }
    }
}
