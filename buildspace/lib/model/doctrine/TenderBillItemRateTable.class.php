<?php

/**
 * TenderBillItemRateTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TenderBillItemRateTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TenderBillItemRateTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TenderBillItemRate');
    }

    public static function getByTenderCompanyIdAndBillItemId($tenderCompanyId, $billItemId, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('TenderBillItemRate r')
            ->where('r.tender_company_id = ?', $tenderCompanyId)
            ->andWhere('r.bill_item_id = ?', $billItemId)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getContractorBillRatesByBillId( $billId, $tenderCompanyId, $withNotListedItem = true )
    {
        $pdo = ProjectStructureTable::getInstance()->getConnection()->getDbh();

        //Get Element List
        $stmt = $pdo->prepare("SELECT e.id, e.project_structure_id FROM ".BillElementTable::getInstance()->getTableName()." e
        WHERE e.project_structure_id = :project_structure_id AND e.deleted_at IS NULL ORDER BY e.priority");

        $stmt->execute(array(
            'project_structure_id' => $billId
        ));

        $elements = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $billTotalAmount = 0;

        $billStructure = array(
            'total_amount' => 0,
            'elementsAndItems' => array()
        );

        if(count($elements))
        {
            //Get Root Items
            $stmt = $pdo->prepare("SELECT i.element_id, i.id FROM ".BillItemTable::getInstance()->getTableName()." i
            WHERE i.id = i.root_id AND i.element_id IN (SELECT e.id FROM ".BillElementTable::getInstance()->getTableName()." e
            WHERE e.project_structure_id = :project_structure_id AND e.deleted_at IS NULL ORDER BY e.priority)
            AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL ORDER BY i.priority");

            $stmt->execute(array(
                'project_structure_id' => $billId
            ));

            $roots = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);

            //Excluded Item Type
            $excludedItemType = array( BillItem::TYPE_HEADER, BillItem::TYPE_NOID, BillItem::TYPE_HEADER_N );

            if(!$withNotListedItem)
            {
                array_push($excludedItemType, BillItem::TYPE_ITEM_NOT_LISTED);
            }

            foreach($elements as $element)
            {
                $elementTotalAmount = 0;

                $result = array(
                    'id' => $element['id'],
                    'total_amount' => 0,
                    'items' => array()
                );

                if(array_key_exists($element['id'], $roots) && $roots[$element['id']])
                {
                    $rootIds = $roots[$element['id']];

                    $sqlFieldCond = '(
                        CASE c.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.' THEN 
                            CASE inl.description IS NULL 
                            WHEN TRUE 
                            THEN null 
                            ELSE inl.description 
                            END
                        ELSE 
                            c.description 
                            END
                        ) AS description,
                        (CASE c.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.' THEN 
                            CASE 
                            inl.uom_id IS NULL 
                            WHEN TRUE 
                            THEN null 
                            ELSE inl.uom_id 
                            END
                        ELSE 
                            c.uom_id 
                            END
                        ) AS uom_id';

                        $whereClause = '';

                        $nlTable = "LEFT JOIN ".TenderBillItemNotListedTable::getInstance()->getTableName()." inl ON inl.bill_item_id = c.id AND inl.tender_company_id = ".$tenderCompanyId;

                    $stmt = $pdo->prepare("SELECT c.id, c.type, ".$sqlFieldCond.", t_rate.grand_total, t_rate.rate FROM ".BillItemTable::getInstance()->getTableName()." p
                        JOIN ".BillItemTable::getInstance()->getTableName()." c ON c.lft BETWEEN p.lft AND p.rgt
                        LEFT JOIN ".TenderBillItemRateTable::getInstance()->getTableName()." t_rate ON t_rate.bill_item_id = c.id AND t_rate.tender_company_id = ".$tenderCompanyId."
                        ".$nlTable."
                        WHERE p.id IN (".implode(',', $rootIds).") AND p.id = c.root_id AND c.project_revision_deleted_at IS NULL
                        AND c.deleted_at IS NULL AND c.type NOT IN (".implode(',', $excludedItemType).") ORDER BY p.priority, c.lft");

                    $stmt->execute();

                    $billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

                    if(count($billItems))
                    {
                        foreach($billItems as $k => $item)
                        {   
                            $elementTotalAmount+=$item['grand_total'];
                        }
                    }

                    $result['items'] = $billItems;
                }

                unset($element);

                $result['total_amount'] = $elementTotalAmount;

                $billStructure['total_amount']+=$elementTotalAmount;

                array_push($billStructure['elementsAndItems'], $result);
            }
        }

        return $billStructure;
    }
}