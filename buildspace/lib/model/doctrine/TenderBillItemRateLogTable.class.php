<?php

/**
 * TenderBillItemRateLogTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TenderBillItemRateLogTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TenderBillItemRateLogTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TenderBillItemRateLog');
    }

    /**
     * Returns the Project Grand Total for a revision.
     * Also includes project grand total breakdown (by bill).
     *
     * @param Company          $company
     * @param ProjectStructure $project
     * @param ProjectRevision  $projectRevision
     *
     * @return array
     */
    public static function getBillTotalAmountByCompanyIdProjectIdAndRevision(Company $company, ProjectStructure $project, ProjectRevision $projectRevision)
    {
        $billItemRates = self::getBillItemGrandTotalByCompanyIdProjectIdAndRevision($company, $project, $projectRevision);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT b.id AS bill_id, i.id AS bill_item_id
        FROM ".ProjectStructureTable::getInstance()->getTableName()." p
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON r.project_structure_id = p.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = r.project_structure_id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON  e.project_structure_id = b.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
        WHERE r.id <> ".$projectRevision->id." AND r.version < ".$projectRevision->version."
        AND p.id = ".$project->id." AND b.type = ".ProjectStructure::TYPE_BILL."
        AND (i.deleted_at_project_revision_id IS NULL OR (i.deleted_at_project_revision_id = r.id AND i.deleted_at_project_revision_id <> ".$projectRevision->id."))
        AND e.deleted_at IS NULL AND p.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL AND r.deleted_at IS NULL
        GROUP BY b.id, i.id");

        $stmt->execute();

        $billItemsByBillsFromPreviousRevision = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("SELECT b.id AS bill_id, i.id AS bill_item_id
        FROM ".ProjectStructureTable::getInstance()->getTableName()." p
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON r.project_structure_id = p.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = r.project_structure_id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON  e.project_structure_id = b.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
        WHERE r.id = ".$projectRevision->id." AND r.version = ".$projectRevision->version."
        AND p.id = ".$project->id." AND b.type = ".ProjectStructure::TYPE_BILL."
        AND e.deleted_at IS NULL AND p.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL AND r.deleted_at IS NULL
        GROUP BY b.id, i.id");

        $stmt->execute();

        $billItemsByBillsFromProjectRevision = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $billItemsByBills = $billItemsByBillsFromProjectRevision + $billItemsByBillsFromPreviousRevision;

        $records = array(
            'project_total' => 0,
            'bills' => array()
        );

        foreach($billItemsByBills as $billId => $billItems)
        {
            if(!array_key_exists($billId, $records['bills']))
            {
                $records['bills'][$billId] = 0;
            }

            foreach($billItems as $billItem)
            {
                if(array_key_exists($billItem['bill_item_id'], $billItemRates))
                {
                    $records['bills'][$billId] += $billItemRates[$billItem['bill_item_id']];
                    $records['project_total'] += $billItemRates[$billItem['bill_item_id']];
                }
            }

            unset($billItems);
        }

        return $records;
    }

    /**
     * Returns the Bill Grand Total for a revision.
     * Also includes bill grand total breakdown (by element).
     *
     * @param Company          $company
     * @param ProjectStructure $bill
     * @param ProjectRevision  $projectRevision
     *
     * @return array
     */

    public static function getElementGrandTotalByCompanyIdBillIdAndRevision(Company $company, ProjectStructure $bill, ProjectRevision $projectRevision)
    {
        $billItemRates = self::getBillItemGrandTotalByCompanyIdProjectIdAndRevision($company, $bill->getRoot(), $projectRevision);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT e.id AS bill_element_id, i.id AS bill_item_id
        FROM ".ProjectStructureTable::getInstance()->getTableName()." p
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON r.project_structure_id = p.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = r.project_structure_id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON  e.project_structure_id = b.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
        WHERE r.id <> ".$projectRevision->id." AND r.version < ".$projectRevision->version." AND b.id = ".$bill->id."
        AND (i.deleted_at_project_revision_id IS NULL OR (i.deleted_at_project_revision_id = r.id AND i.deleted_at_project_revision_id <> ".$projectRevision->id."))
        AND e.deleted_at IS NULL AND p.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL AND r.deleted_at IS NULL
        GROUP BY e.id, i.id");

        $stmt->execute();

        $billItemsByElementsFromPreviousRevision = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("SELECT e.id AS bill_element_id, i.id AS bill_item_id
        FROM ".ProjectStructureTable::getInstance()->getTableName()." p
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON r.project_structure_id = p.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = r.project_structure_id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON  e.project_structure_id = b.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
        WHERE r.id = ".$projectRevision->id." AND r.version = ".$projectRevision->version." AND b.id = ".$bill->id."
        AND e.deleted_at IS NULL AND p.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL AND r.deleted_at IS NULL
        GROUP BY e.id, i.id");

        $stmt->execute();

        $billItemsByElementsFromProjectRevision = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $billItemsByElements = $billItemsByElementsFromProjectRevision + $billItemsByElementsFromPreviousRevision;

        $records = array(
            'bill_total' => 0,
            'elements' => array()
        );

        foreach($billItemsByElements as $elementId => $billItems)
        {
            if(!array_key_exists($elementId, $records['elements']))
            {
                $records['elements'][$elementId] = 0;
            }

            foreach($billItems as $billItem)
            {
                if(array_key_exists($billItem['bill_item_id'], $billItemRates))
                {
                    $records['elements'][$elementId] += $billItemRates[$billItem['bill_item_id']];
                    $records['bill_total'] += $billItemRates[$billItem['bill_item_id']];
                }
            }

            unset($billItems);
        }

        return $records;
    }

    public static function getBillItemGrandTotalByCompanyIdProjectIdAndRevision(Company $company, ProjectStructure $project, ProjectRevision $projectRevision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT l.bill_item_id, COALESCE(l.grand_total, 0) AS total
        FROM ".TenderBillItemRateLogTable::getInstance()->getTableName()." l
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON l.project_revision_id = r.id
        JOIN ".TenderCompanyTable::getInstance()->getTableName()." tc ON l.tender_company_id = tc.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON tc.project_structure_id = p.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON l.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id AND b.root_id = p.id
        WHERE tc.company_id = ".$company->id." AND p.id = ".$project->id." AND p.deleted_at IS NULL
        AND r.id <> ".$projectRevision->id." AND r.version < ".$projectRevision->version."
        AND (i.deleted_at_project_revision_id IS NULL OR (i.deleted_at_project_revision_id = r.id AND i.deleted_at_project_revision_id <> ".$projectRevision->id."))
        AND l.changes_count = (SELECT COALESCE(MAX(changes_count), 0)
            FROM ".TenderBillItemRateLogTable::getInstance()->getTableName()."
            WHERE bill_item_id = i.id AND tender_company_id = tc.id AND project_revision_id = r.id
            GROUP BY tender_company_id, bill_item_id, project_revision_id)
        AND e.deleted_at IS NULL AND b.deleted_at IS NULL AND r.deleted_at IS NULL
        AND i.deleted_at IS NULL
        GROUP BY l.bill_item_id, l.tender_company_id, l.project_revision_id, l.changes_count, r.version, l.grand_total
        ORDER BY r.version, l.changes_count ASC");

        $stmt->execute();

        $previousGrandTotal = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare("SELECT i.id AS bill_item_id, COALESCE(l.grand_total, 0) AS total
        FROM ".TenderBillItemRateLogTable::getInstance()->getTableName()." l
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON l.project_revision_id = r.id
        JOIN ".TenderCompanyTable::getInstance()->getTableName()." tc ON l.tender_company_id = tc.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON tc.project_structure_id = p.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON l.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id AND b.root_id = p.id
        WHERE tc.company_id = ".$company->id." AND p.id = ".$project->id." AND p.deleted_at IS NULL
        AND r.id = ".$projectRevision->id." AND r.version = ".$projectRevision->version."
        AND l.changes_count = (SELECT COALESCE(MAX(changes_count), 0)
            FROM ".TenderBillItemRateLogTable::getInstance()->getTableName()."
            WHERE bill_item_id = i.id AND tender_company_id = tc.id AND project_revision_id = r.id
            GROUP BY tender_company_id, bill_item_id, project_revision_id)
        AND e.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL");

        $stmt->execute();

        $logGrandTotal = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        return $logGrandTotal + $previousGrandTotal;
    }

    public static function getBillItemRateLogs(ProjectStructure $project)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT l.bill_item_id, tc.company_id, l.rate, l.grand_total, r.version
        FROM " . TenderBillItemRateLogTable::getInstance()->getTableName() . " l
        JOIN " . ProjectRevisionTable::getInstance()->getTableName() . " r ON l.project_revision_id = r.id
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p ON r.project_structure_id = p.id
        JOIN " . TenderCompanyTable::getInstance()->getTableName() . " tc ON l.tender_company_id = tc.id
        WHERE p.id = " . $project->id . " AND p.deleted_at IS NULL");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $data = array();

        foreach($records as $key => $record)
        {
            $data[ $record['company_id'] ][ $record['version'] ][ $record['bill_item_id'] ] = $record;
            unset( $records[ $key ] );
        }

        return $data;
    }

    public static function getBillItemRatesByCompanyIdProjectIdAndRevision(Company $company, ProjectStructure $project, ProjectRevision $projectRevision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT l.bill_item_id, COALESCE(l.rate, 0) AS rate
        FROM ".TenderBillItemRateLogTable::getInstance()->getTableName()." l
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON l.project_revision_id = r.id
        JOIN ".TenderCompanyTable::getInstance()->getTableName()." tc ON l.tender_company_id = tc.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON tc.project_structure_id = p.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON l.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id AND b.root_id = p.id
        WHERE tc.company_id = ".$company->id." AND p.id = ".$project->id." AND p.deleted_at IS NULL
        AND r.id <> ".$projectRevision->id." AND r.version < ".$projectRevision->version."
        AND (i.deleted_at_project_revision_id IS NULL OR (i.deleted_at_project_revision_id = r.id AND i.deleted_at_project_revision_id <> ".$projectRevision->id."))
        AND l.changes_count = (SELECT COALESCE(MAX(changes_count), 0)
            FROM ".TenderBillItemRateLogTable::getInstance()->getTableName()."
            WHERE bill_item_id = i.id AND tender_company_id = tc.id AND project_revision_id = r.id
            GROUP BY tender_company_id, bill_item_id, project_revision_id)
        AND e.deleted_at IS NULL AND b.deleted_at IS NULL AND r.deleted_at IS NULL
        AND i.deleted_at IS NULL
        GROUP BY l.bill_item_id, l.tender_company_id, l.project_revision_id, l.changes_count, r.version, l.rate
        ORDER BY r.version, l.changes_count ASC");

        $stmt->execute();

        $previousRates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare("SELECT i.id AS bill_item_id, COALESCE(l.rate, 0) AS rate
        FROM ".TenderBillItemRateLogTable::getInstance()->getTableName()." l
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON l.project_revision_id = r.id
        JOIN ".TenderCompanyTable::getInstance()->getTableName()." tc ON l.tender_company_id = tc.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON tc.project_structure_id = p.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON l.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id AND b.root_id = p.id
        WHERE tc.company_id = ".$company->id." AND p.id = ".$project->id." AND p.deleted_at IS NULL
        AND r.id = ".$projectRevision->id." AND r.version = ".$projectRevision->version."
        AND l.changes_count = (SELECT COALESCE(MAX(changes_count), 0)
            FROM ".TenderBillItemRateLogTable::getInstance()->getTableName()."
            WHERE bill_item_id = i.id AND tender_company_id = tc.id AND project_revision_id = r.id
            GROUP BY tender_company_id, bill_item_id, project_revision_id)
        AND e.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL");

        $stmt->execute();

        $logRates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        return $logRates + $previousRates;
    }

    public static function insertIntoLog(TenderBillItemRate $tenderBillItemRate, $con=null)
    {
        $data[] = array(
            'tender_company_id' => $tenderBillItemRate->tender_company_id,
            'bill_item_id' => $tenderBillItemRate->bill_item_id,
            'rate' => $tenderBillItemRate->rate,
            'grand_total' => $tenderBillItemRate->grand_total
        );

        self::insertBatchLog($data, "MANUAL");
    }

    public static function insertBatchLog(Array $records, $type = "IMPORT")
    {
        $companyIds = array();
        $billItemIds = array();

        foreach($records as $record)
        {
            if(!array_key_exists($record['tender_company_id'], $companyIds))
            {
                $companyIds[$record['tender_company_id']] = $record['tender_company_id'];
            }

            if(!array_key_exists($record['bill_item_id'], $billItemIds))
            {
                $billItemIds[$record['bill_item_id']] = $record['bill_item_id'];
            }
        }

        if($companyIds and $billItemIds)
        {
            $userId = (sfContext::hasInstance()) ? sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser') : null;

            $userId = empty($userId) ? 'NULL': $userId;//to handle rates that came from eproject sync (no bs user id)

            $pdo = self::getInstance()->getConnection()->getDbh();

            $implodedBillItemIds = implode(',', $billItemIds);

            $stmt = $pdo->prepare("SELECT r.id
            FROM ".ProjectRevisionTable::getInstance()->getTableName()." r
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = r.project_structure_id
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON e.project_structure_id = b.id
            JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
            WHERE i.id IN (" . $implodedBillItemIds . ") AND r.deleted_at IS NULL
            AND e.deleted_at IS NULL AND b.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL ORDER BY r.version DESC");

            $stmt->execute();

            $projectRevisionId = $stmt->fetch(PDO::FETCH_COLUMN, 0);

            if($projectRevisionId)
            {
                $stmt = $pdo->prepare("SELECT bill_item_id, MAX(changes_count) FROM ".self::getInstance()->getTableName()."
                WHERE tender_company_id IN (".implode(',', array_keys($companyIds)).")
                AND bill_item_id IN (".$implodedBillItemIds.") AND project_revision_id = ".$projectRevisionId."
                GROUP BY tender_company_id, bill_item_id, project_revision_id");

                $stmt->execute();

                $billItemLogs = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

                $sqlValues = array();

                foreach($records as $record)
                {
                    $changesCount = array_key_exists($record['bill_item_id'], $billItemLogs) ? $billItemLogs[$record['bill_item_id']] + 1 : 1;

                    $sqlValues[] = "(".$record['tender_company_id'].", ".$record['bill_item_id'].", ".$record['rate'].", ".$record['grand_total'].", ".$changesCount.", ".$projectRevisionId.", '".$type."', NOW(), NOW(), ".$userId.", ".$userId.")";
                }

                $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (tender_company_id, bill_item_id, rate, grand_total, changes_count, project_revision_id, type, created_at, updated_at, created_by, updated_by)
                VALUES ".implode(',', $sqlValues));

                $stmt->execute();
            }
        }
    }
}