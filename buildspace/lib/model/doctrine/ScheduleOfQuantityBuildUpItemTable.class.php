<?php

/**
 * ScheduleOfQuantityBuildUpItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ScheduleOfQuantityBuildUpItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ScheduleOfQuantityBuildUpItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ScheduleOfQuantityBuildUpItem');
    }

    public static function getSignTextBySign($sign)
    {
        switch($sign)
        {
            case ScheduleOfQuantityBuildUpItem::SIGN_POSITIVE:
                return ScheduleOfQuantityBuildUpItem::SIGN_POSITIVE_TEXT;
            case ScheduleOfQuantityBuildUpItem::SIGN_NEGATIVE:
                return ScheduleOfQuantityBuildUpItem::SIGN_NEGATIVE_TEXT;
            default:
                throw new Exception('invalid sign');
        }
    }

    public static function getFormulatedColumnNames(UnitOfMeasurement $unitOfMeasurement)
    {
        $columnNames = array();
        foreach($unitOfMeasurement->Dimensions as $dimension)
        {
            $columnNames[] = $dimension->id.'-dimension_column';
        }

        array_push($columnNames, ScheduleOfQuantityBuildUpItem::FORMULATED_COLUMN_FACTOR);

        return $columnNames;
    }

    public static function getFormulatedColumnByRelationIdAndColumnName($id, $columnName, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('ScheduleOfQuantityBuildUpFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?', $columnName)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function updateScheduleOfQuantityAmountById($scheduleOfQuantityItemId)
    {
        $val = self::getInstance()
            ->createQuery('bi')->select('COALESCE(SUM(bi.total), 0) AS total')
            ->where('bi.schedule_of_quantity_item_id = ?', $scheduleOfQuantityItemId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $formulatedColumn = ScheduleOfQuantityItemFormulatedColumnTable::getInstance()->getByRelationIdAndColumnName($scheduleOfQuantityItemId, ScheduleOfQuantityItem::FORMULATED_COLUMN_QUANTITY);

        $formulatedColumn->has_build_up = true;
        $formulatedColumn->setFormula($val['total']);

        $formulatedColumn->save();

        ScheduleOfQuantityItemTable::updateLinkedValues($scheduleOfQuantityItemId);
    }
}