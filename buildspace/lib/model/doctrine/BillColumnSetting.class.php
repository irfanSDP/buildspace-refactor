<?php

/**
 * BillColumnSetting
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BillColumnSetting extends BaseBillColumnSetting
{
    public function setEditorBillItemTypeReferenceQtyForLS(Company $company, BillElement $element)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT i.id
            FROM ".BillItemTable::getInstance()->getTableName() . " i
            WHERE i.element_id = " . $element->id . " AND i.deleted_at IS NULL
            AND i.type IN (".BillItem::TYPE_ITEM_LUMP_SUM.", ".BillItem::TYPE_ITEM_LUMP_SUM_PERCENT.", ".BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE.")");

        $stmt->execute();

        $lsItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);
        
        if(empty($lsItemIds))
        {
            return false;
        }

        $stmt = $pdo->prepare("UPDATE ".EditorBillItemTypeReferenceTable::getInstance()->getTableName()." r
            SET quantity_per_unit = 1, total_quantity = ".$this->quantity."
            FROM ".EditorBillItemInfoTable::getInstance()->getTableName()." info
            WHERE info.company_id = ".$company->id." AND r.bill_item_info_id = info.id
            AND info.bill_item_id IN (".implode(',', $lsItemIds).")
            AND r.bill_column_setting_id = ".$this->id."
            AND (r.quantity_per_unit = 0 OR r.total_quantity = 0)");

        $stmt->execute();

        return true;
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        if($this->canBeDeleted())
        {
            $billElementTypeReferenceTable = Doctrine_Core::getTable('BillElementTypeReference');
            $billItemTypeReferenceTable = Doctrine_Core::getTable('BillItemTypeReference');

            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".BillBuildUpQuantityFormulatedColumnTable::getInstance()->getTableName()." SET deleted_at = NOW()
                    WHERE relation_id IN (SELECT id FROM ".BillBuildUpQuantityItemTable::getInstance()->getTableName()."
                    WHERE bill_column_setting_id = ".$this->id." AND deleted_at IS NULL) AND deleted_at IS NULL");

            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".BillBuildUpQuantityItemTable::getInstance()->getTableName()." SET deleted_at = NOW()
                    WHERE bill_column_setting_id = ".$this->id." AND deleted_at IS NULL");

            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".BillBuildUpQuantitySummaryTable::getInstance()->getTableName()." SET deleted_at = NOW()
                    WHERE bill_column_setting_id = ".$this->id." AND deleted_at IS NULL");

            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".BillBuildUpFloorAreaFormulatedColumnTable::getInstance()->getTableName()." SET deleted_at = NOW()
                    WHERE relation_id IN (SELECT id FROM ".BillBuildUpFloorAreaItemTable::getInstance()->getTableName()."
                    WHERE bill_column_setting_id = ".$this->id." AND deleted_at IS NULL) AND deleted_at IS NULL");

            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".BillBuildUpFloorAreaItemTable::getInstance()->getTableName()." SET deleted_at = NOW()
                    WHERE bill_column_setting_id = ".$this->id." AND deleted_at IS NULL");

            $records = DoctrineQuery::create()->select('f.*')
                ->from('BillItemTypeReferenceFormulatedColumn f')->leftJoin('f.BillItemTypeReference i')
                ->where('i.bill_column_setting_id = ?', $this->id)
                ->execute();

            $billItems = array();

            foreach($records as $record)
            {
                $billItem = $record->BillItemTypeReference->BillItem;

                Doctrine_Manager::getInstance()->getCurrentConnection()
                    ->fetchAssoc("UPDATE ".$record->getTable()->getTableName()." SET deleted_at = NOW()
                    WHERE id = ".$record->id);

                $billItems[$billItem->id] = $billItem->id;

                unset($record, $billItem);
            }

            unset($records);

            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".$billElementTypeReferenceTable->getTableName()." SET deleted_at = NOW()
                WHERE bill_column_setting_id = ".$this->id);

            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".$billItemTypeReferenceTable->getTableName()." SET deleted_at = NOW()
                WHERE bill_column_setting_id = ".$this->id);

            BillItemTypeReferenceTable::clearAllRemeasurementQuantityByColumnSettingId($this);

            Doctrine_Query::create()
                ->delete('LocationBillItemQuantityProrate l')
                ->where('l.bill_column_setting_id = ?', $this->id)
                ->execute();

            parent::delete($conn);

            foreach($billItems as $billItemId)
            {
                $billItem = Doctrine_Core::getTable('BillItem')->find($billItemId);
                $billItem->updateBillItemTotalColumns();

                unset($billItem);
            }
        }
        else
        {
            throw new Exception('Bill column setting with id:'.$this->id." cannot be deleted because it is the only columns setting for bill id:".$this->project_structure_id);
        }
    }

    public function canBeDeleted()
    {
        return $this->ProjectStructure->BillColumnSettings->count() == 1 ? false : true;
    }

    public static function convertToFt2($m2 = null)
    {
        return $m2 * 10.764;
    }

    public static function convertToM2($ft2 = null)
    {
        return $ft2/10.764;
    }

    public function getTotalCostPerFloorArea($grandTotal = null)
    {
        if($this->floor_area_display_metric == true)
        {
            $totalFloorArea = $this->total_floor_area_m2;
        }
        else
        {
            $totalFloorArea = $this->total_floor_area_ft2;
        }

        return ($grandTotal > 0 && $totalFloorArea > 0) ? $grandTotal / $totalFloorArea : 0;
    }

    public function save(Doctrine_Connection $conn = null)
    {
        if(!$this->floor_area_has_build_up)
        {
            $this->deleteBuildUpFloorAreas();
        }

        if($this->floor_area_use_metric == true)
        {
            $this->total_floor_area_ft2 = BillColumnSetting::convertToFt2($this->total_floor_area_m2);
        }
        else
        {
            $this->total_floor_area_m2 = BillColumnSetting::convertToM2($this->total_floor_area_ft2);
        }

        parent::save($conn);
    }

    public function postSave($event)
    {
        if($this->deleted_at == NULL)
        {
            Doctrine_Query::create()
                ->delete('LocationBillItemQuantityProrate l')
                ->where('l.bill_column_setting_id = ?', $this->id)
                ->andWhere('l.unit > ?',$this->quantity)
                ->execute();

            $pdo = BillColumnSettingTable::getInstance()->getConnection()->getDbh();

            //update grand total

            $stmt = $pdo->prepare("SELECT i.id 
          FROM " . ProjectStructureTable::getInstance()->getTableName() . " p 
          JOIN " .BillElementTable::getInstance()->getTableName() . " e ON p.id = e.project_structure_id 
          JOIN " . BillItemTable::getInstance()->getTableName() . " i on i.element_id = e.id 
          WHERE p.id = " . $this->ProjectStructure->id);

            $stmt->execute();

            $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

            foreach($billItemIds as $itemId)
            {
                if( ! BillItemTypeReferenceTable::getByItemIdAndColumnId($itemId, $this->id) )
                {
                    $billItemTypeRef                         = new BillItemTypeReference();
                    $billItemTypeRef->bill_item_id           = $itemId;
                    $billItemTypeRef->bill_column_setting_id = $this->id;
                    $billItemTypeRef->save();

                    $billItemTypeRef->refresh();
                }
            }
        }

        return parent::postSave($event);
    }

    public function deleteBuildUpFloorAreas(Doctrine_Connection $conn = null)
    {
        Doctrine_Query::create()
            ->delete('BillBuildUpFloorAreaItem i')
            ->where('i.bill_column_setting_id = ?', $this->id)
            ->execute();

        Doctrine_Query::create()
            ->delete('BillBuildUpFloorAreaSummary s')
            ->where('s.bill_column_setting_id = ?', $this->id)
            ->execute();
    }

    public static function addQuantityRemeasurementToExistingItemLumpSum($billColumnSetting)
    {
        $data = array();

        // find item lump sum and lump exclude
        $lumpSumItems = Doctrine_Query::create()
        ->select('be.id, bi.id, bitr.id, bitr.bill_item_id, bitr.grand_total, bitr.grand_total_after_markup')
        ->from('BillItemTypeReference bitr')
        ->leftJoin('bitr.BillItem bi')
        ->leftJoin('bi.Element be')
        ->where('bitr.bill_column_setting_id = ?', $billColumnSetting->id)
        ->andWhere('be.project_structure_id = ?', $billColumnSetting->project_structure_id)
        ->andWhereIn('bi.type', array(BillItem::TYPE_ITEM_LUMP_SUM, BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE, BillItem::TYPE_ITEM_LUMP_SUM_PERCENT))
        ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        foreach ( $lumpSumItems as $lumpSumItem )
        {
            $newLumpSumPercentFormulatedColumn              = new BillItemTypeReferenceFormulatedColumn();
            $newLumpSumPercentFormulatedColumn->relation_id = $lumpSumItem['id'];
            $newLumpSumPercentFormulatedColumn->column_name = BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;
            $newLumpSumPercentFormulatedColumn->value       = 1;
            $newLumpSumPercentFormulatedColumn->final_value = 1;

            $newLumpSumPercentFormulatedColumn->save();

            $data[$lumpSumItem['BillItem']['Element']['id']][] = $lumpSumItem['bill_item_id'];
        }

        foreach ( $data as $billElementId => $billItemIds)
        {
            BillItemTable::updateBulkBillItemTotalColumns($billItemIds, $billElementId);
        }
    }
}