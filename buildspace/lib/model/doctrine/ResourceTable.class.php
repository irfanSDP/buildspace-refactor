<?php

/**
 * ResourceTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ResourceTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ResourceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Resource');
    }

    public static function calculateTotalForResourceAnalysis(ProjectStructure $project)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();
        $totalCost = 0;

        $stmt = $pdo->prepare("SELECT DISTINCT r.resource_library_id, bur.bill_item_id, burfc.relation_id, burfc.final_value, burfc.column_name
        FROM ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." AS burfc
        JOIN ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur ON burfc.relation_id = bur.id
        JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON bur.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        JOIN ".BillBuildUpRateResourceTable::getInstance()->getTableName()." AS r ON bur.build_up_rate_resource_id = r.id AND r.bill_item_id = i.id
        JOIN ".BillBuildUpRateResourceTradeTable::getInstance()->getTableName()." AS t ON bur.build_up_rate_resource_trade_id = t.id
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." r_trade ON r_trade.id = t.resource_trade_library_id
        JOIN ".ResourceItemTable::getInstance()->getTableName()." r_item ON r_item.id =  bur.resource_item_library_id AND r_trade.id = r_item.resource_trade_id
        WHERE s.root_id = ".$project->id."
        AND burfc.column_name <> '".BillBuildUpRateItem::FORMULATED_COLUMN_WASTAGE."'
        AND burfc.final_value IS NOT NULL AND burfc.final_value <> 0
        AND r_trade.deleted_at IS NULL AND r_item.deleted_at is NULL
        AND burfc.deleted_at IS NULL AND r.deleted_at IS NULL AND t.deleted_at IS NULL AND bur.deleted_at IS NULL
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL
        AND s.deleted_at IS NULL");

        $stmt->execute();

        $billBuildUpRateFormulatedColumns = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("SELECT DISTINCT r.resource_library_id, sum.bill_item_id, sum.conversion_factor_operator, sum.conversion_factor_amount
        FROM ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." AS sum
        JOIN ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur ON bur.bill_item_id = sum.bill_item_id
        JOIN ".BillBuildUpRateResourceTradeTable::getInstance()->getTableName()." AS t ON bur.build_up_rate_resource_trade_id = t.id
        JOIN ".BillBuildUpRateResourceTable::getInstance()->getTableName()." AS r ON bur.build_up_rate_resource_id = r.id
        JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON r.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." r_trade ON r_trade.id = t.resource_trade_library_id
        JOIN ".ResourceItemTable::getInstance()->getTableName()." r_item ON r_item.id =  bur.resource_item_library_id AND r_trade.id = r_item.resource_trade_id
        WHERE s.root_id = ".$project->id."
        AND sum.apply_conversion_factor IS TRUE
        AND r_trade.deleted_at IS NULL AND r_item.deleted_at is NULL
        AND bur.resource_item_library_id IS NOT NULL
        AND sum.deleted_at IS NULL AND r.deleted_at IS NULL AND t.deleted_at IS NULL AND bur.deleted_at IS NULL
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL
        AND s.deleted_at IS NULL");

        $stmt->execute();

        $buildUpRateSummaryRecords = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $buildUpRateSummaries = [];

        foreach($buildUpRateSummaryRecords as $resourceId => $buildUpRateSummaryByResource)
        {
            $buildUpRateSummaries[$resourceId] = [];

            foreach($buildUpRateSummaryByResource as $buildUpRateSummary)
            {
                $buildUpRateSummaries[$resourceId][$buildUpRateSummary['bill_item_id']] = [
                    'conversion_factor_operator' => $buildUpRateSummary['conversion_factor_operator'],
                    'conversion_factor_amount'   => $buildUpRateSummary['conversion_factor_amount']
                ];
            }
        }

        $buildUpRateSummaryRecords = null;
        unset($buildUpRateSummaryRecords);

        $stmt = $pdo->prepare("SELECT i.id, i.grand_total_quantity
        FROM ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur
        JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON bur.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        JOIN ".BillBuildUpRateResourceTable::getInstance()->getTableName()." AS r ON bur.build_up_rate_resource_id = r.id AND r.bill_item_id = i.id
        JOIN ".BillBuildUpRateResourceTradeTable::getInstance()->getTableName()." AS t ON bur.build_up_rate_resource_trade_id = t.id
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." r_trade ON r_trade.id = t.resource_trade_library_id
        JOIN ".ResourceItemTable::getInstance()->getTableName()." r_item ON r_item.id =  bur.resource_item_library_id AND r_trade.id = r_item.resource_trade_id
        WHERE s.root_id = ".$project->id."
        AND bur.resource_item_library_id IS NOT NULL
        AND i.grand_total_quantity IS NOT NULL AND i.grand_total_quantity <> 0
        AND r_trade.deleted_at IS NULL AND r_item.deleted_at is NULL
        AND r.deleted_at IS NULL AND t.deleted_at IS NULL AND bur.deleted_at IS NULL
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL
        AND s.deleted_at IS NULL ORDER BY i.id");

        $stmt->execute();

        $billItemGrandTotalQuantities = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $billBuildUpRateItems = [];

        foreach($billBuildUpRateFormulatedColumns as $resourceId => $formulatedColumnByResource)
        {
            $billBuildUpRateItems[$resourceId] = [];

            foreach($formulatedColumnByResource as $billBuildUpRateFormulatedColumn)
            {
                $billBuildUpRateItems[$resourceId][$billBuildUpRateFormulatedColumn['relation_id']]['bill_item_id'] = $billBuildUpRateFormulatedColumn['bill_item_id'];
                $billBuildUpRateItems[$resourceId][$billBuildUpRateFormulatedColumn['relation_id']][$billBuildUpRateFormulatedColumn['column_name']] = $billBuildUpRateFormulatedColumn['final_value'];
            }
        }

        $billBuildUpRateFormulatedColumns = null;
        unset($billBuildUpRateFormulatedColumns);

        $result = [];

        foreach($billBuildUpRateItems as $resourceId => $billBuildUpRateItemsByResource)
        {
            $result[$resourceId] = 0;

            foreach($billBuildUpRateItemsByResource as $billBuildUpRateItem)
            {
                if(array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY, $billBuildUpRateItem))
                {
                    $quantity = $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY];
                    $number   = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_NUMBER, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_NUMBER] : 1;
                    $constant = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT] : 1;
                    $rate     = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_RATE, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_RATE] : 0;

                    $billItemQuantity = array_key_exists($billBuildUpRateItem['bill_item_id'], $billItemGrandTotalQuantities) ? $billItemGrandTotalQuantities[$billBuildUpRateItem['bill_item_id']] : 0;

                    if(array_key_exists($resourceId, $buildUpRateSummaries) && array_key_exists($billBuildUpRateItem['bill_item_id'], $buildUpRateSummaries[$resourceId]))
                    {
                        switch($buildUpRateSummaries[$resourceId][$billBuildUpRateItem['bill_item_id']]['conversion_factor_operator'])
                        {
                            case '/':
                                $rate = $number * $constant * $quantity / $buildUpRateSummaries[$resourceId][$billBuildUpRateItem['bill_item_id']]['conversion_factor_amount'] * $rate;
                                break;
                            case '*':
                                $rate = $number * $constant * $quantity * $buildUpRateSummaries[$resourceId][$billBuildUpRateItem['bill_item_id']]['conversion_factor_amount'] * $rate;
                                break;
                            default:
                                throw new Exception('Invalid conversion factor operator');
                        }
                    }
                    else
                    {
                        $rate = $number * $constant * $quantity * $rate;
                    }

                    $cost = round($rate, 2) * $billItemQuantity;

                    $result[$resourceId] += $cost;
                }
            }
        }

        unset($buildUpRateSummaryRecords, $billBuildUpRateFormulatedColumns, $billBuildUpRateItems, $buildUpRateSummaries);

        return $result;
    }

    public static function linkToSoR($resourceId)
    {
        $sql = "SELECT id FROM ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()."
        WHERE resource_item_library_id IN (
            SELECT i.id FROM ".ResourceItemTable::getInstance()->getTableName()." i
            LEFT JOIN ".ResourceTradeTable::getInstance()->getTableName()." x ON (x.id = i.resource_trade_id AND x.deleted_at IS NULL)
        WHERE x.resource_id = :resourceId) AND deleted_at IS NULL";

        $pdo = self::getInstance()->getConnection()->getDbh();

        $params = array('resourceId' => $resourceId);

        $stmt = $pdo->prepare($sql);
        $stmt->execute($params);

        if ( $stmt->rowCount() > 0 )
        {
            return true;
        }

        return false;
    }

    public static function getRecordsThatHasStockInsByProject(ProjectStructure $project)
    {
        $pdo  = self::getInstance()->getConnection()->getDbh();

        // will get Stock In Resource Item's first, then only query the resource
        $stmt = $pdo->prepare("SELECT r.id, r.name, COALESCE(SUM(b.total), 0) as total_cost
        FROM ".StockInInvoiceItemTable::getInstance()->getTableName()." b
        JOIN ".StockInInvoiceTable::getInstance()->getTableName()." sii
        ON (sii.id = b.stock_in_invoice_id AND sii.deleted_at IS NULL)
        JOIN ".ResourceItemTable::getInstance()->getTableName()." ri
        ON (ri.id = b.resource_item_id AND ri.deleted_at IS NULL)
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." rt
        ON (rt.id = ri.resource_trade_id AND rt.deleted_at IS NULL)
        JOIN ".ResourceTable::getInstance()->getTableName()." r ON
        (r.id = rt.resource_id and r.deleted_at IS NULL)
        WHERE ( sii.project_structure_id = :projectId AND b.deleted_at IS NULL )
        GROUP BY r.id ORDER BY r.id ASC");

        $stmt->execute(array('projectId' => $project->id));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}