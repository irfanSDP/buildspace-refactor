<?php

/**
 * StockOutUsedQuantity
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class StockOutUsedQuantity extends BaseStockOutUsedQuantity {

    public function save(Doctrine_Connection $conn = null)
    {
        $isNew = $this->isNew();

        if ( $isNew )
        {
            $user = sfContext::getInstance()->getUser()->getGuardUser();

            $this->created_by = $user->id;
            $this->updated_by = $user->id;

            unset($user);

            $this->running_number = $this->generateStockOutNo($this->Project);
        }

        parent::save($conn);
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        StockOutUsedQuantityItemQuantityTable::deleteByStockUsedQuantity($this);

        return parent::delete($conn);
    }

    public function generateStockOutNo(ProjectStructure $project)
    {
        $count = StockOutUsedQuantityTable::generateStockOutNo($project);

        return Utilities::generateStockOutNo($count);
    }

    public function copyDeliveryOrderItems(Array $resourceItemIds)
    {
        $pdo     = $this->getTable()->getConnection()->getDbh();
        $userId  = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
        $data    = array();
        $doItems = array();

        if ( empty($resourceItemIds) )
        {
            return false;
        }

        $resourceItems   = StockInDeliveryOrderItemQuantityTable::getOverAllItemQuantitiesFilterByResourceItemIdByProject($this->Project, $resourceItemIds);
        $newSOQuantities = StockOutUsedQuantityItemQuantityTable::getOverAllItemQuantitiesFilterByResourceItemIdByProject($this->Project, $resourceItemIds);

        foreach ( $resourceItems as $resourceItemId => $quantity )
        {
            if ( isset($newSOQuantities[$resourceItemId]) )
            {
                $soQuantity = $newSOQuantities[$resourceItemId];

                $quantity -= $soQuantity;
            }

            if($quantity > 0)
            {
                $data[] = "({$this->id}, {$resourceItemId}, {$quantity}, NOW(), NOW(), {$userId}, {$userId})";
            }
        }

        unset($resourceItems);

        if ( ! empty($data) )
        {
            $stmt = $pdo->prepare('INSERT INTO '.StockOutUsedQuantityItemQuantityTable::getInstance()->getTableName().' (stock_out_used_quantity_id, resource_item_id, quantity, created_at, updated_at, created_by, updated_by) VALUES '.implode(', ', $data));

            $stmt->execute();
        }

        unset($data);

        return true;
    }

}