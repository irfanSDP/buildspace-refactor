<?php

/**
 * ResourceTrade
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ResourceTrade extends BaseResourceTrade
{
    public function delete(Doctrine_Connection $conn = null)
    {
        //we need to update any related column from formulated columns before deleting it
        $items = DoctrineQuery::create()->select('*')
            ->from('ResourceItem i')
            ->where('i.root_id = i.id')
            ->andWhere('i.resource_trade_id = ?', $this->id)
            ->addOrderBy('i.lft')
            ->execute();

        $affectedItemList = array();

        foreach ($items as $item)
        {
            $affectedItems = $item->deleteFormulatedColumns($conn, $item);
            array_push($affectedItemList, $affectedItems);
        }

        /*
         * unlink resource item that being used in SOR build up rates
         */
        $this->unlinkRelatedScheduleOfRateBuildUpRates();

        parent::delete($conn);

        return $affectedItemList;
    }

    public function checkRelatedScheduleOfRateBuildUpRates()
    {
        $sql = "SELECT id FROM ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()."
        WHERE resource_item_library_id IN (SELECT i.id FROM ".ResourceItemTable::getInstance()->getTableName()." i
        WHERE i.resource_trade_id = :resourceTradeId) AND deleted_at IS NULL";

        $pdo = $this->getTable()->getConnection()->getDbh();

        $params = array('resourceTradeId' => $this->id);

        $stmt = $pdo->prepare($sql);
        $stmt->execute($params);

        return $stmt->rowCount();
    }

    public function unlinkRelatedScheduleOfRateBuildUpRates()
    {
        $sql = "UPDATE ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()." SET resource_item_library_id = NULL
        WHERE resource_item_library_id IN (SELECT i.id FROM ".ResourceItemTable::getInstance()->getTableName()." i
        WHERE i.resource_trade_id = :resourceTradeId) AND deleted_at IS NULL";

        $unlinkFormulatedColumnSql = "UPDATE ".ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." SET linked = FALSE
        WHERE relation_id IN (SELECT id FROM ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()."
        WHERE resource_item_library_id IN (SELECT i.id FROM ".ResourceItemTable::getInstance()->getTableName()." i
        WHERE i.resource_trade_id = :resourceTradeId) AND deleted_at IS NULL) AND deleted_at IS NULL";

        $pdo = $this->getTable()->getConnection()->getDbh();

        try
        {
            $pdo->beginTransaction();

            $params = array('resourceTradeId' => $this->id);

            $stmt = $pdo->prepare($unlinkFormulatedColumnSql);
            $stmt->execute($params);

            $stmt = $pdo->prepare($sql);
            $stmt->execute($params);

            $pdo->commit();
        }
        catch(PDOException $e)
        {
            $pdo->rollBack();
            throw $e;
        }
    }

    public function deleteFormulatedColumns(Doctrine_Connection $conn = null, $item)
    {
        $resourceItemIds = array();
        $affectedItems = array();
        $formulatedColumnIds = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            foreach($item->FormulatedColumns as $formulatedColumn)
            {
                $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                if(is_array($nodes))
                {
                    foreach($nodes as $node)
                    {
                        $referencedNode = Doctrine_Core::getTable('ResourceItemFormulatedColumn')->find($node['node_from']);

                        if($referencedNode)
                        {
                            $pattern = '/\b(R'.$item->id.')\b/i';
                            $value = preg_replace($pattern, '#REF!', $referencedNode->value);

                            $referencedNode->setFormula($value);

                            $referencedNode->save();

                            $resourceItemIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                        }
                    }
                }

                $formulatedColumn->delete($conn);

                $formulatedColumnIds[] = $formulatedColumn->id;
            }

            if(count($formulatedColumnIds) > 0)
            {
                //now we can remove all edges after we've updated related nodes
                $query = Doctrine_Query::create()
                    ->delete('ResourceItemEdge e')
                    ->whereIn('e.node_from', $formulatedColumnIds);
                $query->execute();

                $query = Doctrine_Query::create()
                    ->delete('ResourceItemEdge e')
                    ->whereIn('e.node_to', $formulatedColumnIds);
                $query->execute();
            }

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
        }

        foreach($resourceItemIds as $resourceItemId)
        {
            $affectedItem = array();
            $resourceItem = ResourceItemTable::getInstance()->getTable()->find($resourceItemId);

            $affectedItem['id'] = $resourceItem->id;

            foreach($resourceItem->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedItem[$columnName."-final_value"] = $formulatedColumn->final_value;
                $affectedItem[$columnName."-value"] = $formulatedColumn->value;
                $affectedItem[$columnName.'-has_cell_reference'] = $formulatedColumn->hasCellReference();
                $affectedItem[$columnName.'-has_formula'] = $formulatedColumn->hasFormula();
            }

            array_push($affectedItems, $affectedItem);
        }

        return $affectedItems;
    }

    public function moveTo($priority, $lastPosition=false)
    {
        $priority = $lastPosition ? $priority+1 : $priority;

        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $this->priority = $priority;
            $this->save();

            if(!$lastPosition)
            {
                $this->updatePriority($priority, $this->id);
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyTo($targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $priorityToUpdate = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;

            $cloneTrade = $this->copy();
            $cloneTrade->priority = $priorityToUpdate;
            $cloneTrade->save($con);

            if(!$lastPosition)
            {
                $this->updatePriority($priorityToUpdate, $cloneTrade->id);
            }

            $query = Doctrine_Core::getTable('ResourceItem')
                ->createQuery('i')
                ->select('i.*')
                ->where('i.root_id = i.id')
                ->addWhere('i.resource_trade_id = ?', $this->id)
                ->orderBy('i.priority ASC');

            $roots = $query->execute();
            $scopeContainer = new ResourceItem();

            foreach($roots as $root)
            {
                $newRoot = $root->copy();

                $newRoot->resource_trade_id = $cloneTrade->id;
                $newRoot->save($con);

                $query = Doctrine_Core::getTable('ResourceItem')
                    ->createQuery('i')
                    ->select('i.*')
                    ->where('i.root_id = ?', $root->id)
                    ->addWhere('i.lft > ? AND i.rgt < ?', array($root->lft, $root->rgt))
                    ->orderBy('i.lft ASC');
                $children = $query->execute();

                foreach($children as $child)
                {
                    $newChild = $child->copy();
                    $newChild->root_id = $newRoot->id;
                    $newChild->resource_trade_id = $cloneTrade->id;
                    $newChild->save($con);
                    $newChild->refresh();

                    array_push($scopeContainer->itemContainerAfterCopy, array(
                        'id' => $newChild->id,
                        'origin' => $child->id
                    ));

                    $newChild->copyFormulatedColumnsFromItem($child, $scopeContainer);

                    unset($newChild, $child);
                }

                unset($children);

                $newRoot->root_id = $newRoot->id;
                $newRoot->save($con);
                $newRoot->refresh();

                array_push($scopeContainer->itemContainerAfterCopy, array(
                    'id' => $newRoot->id,
                    'origin' => $root->id
                ));

                $newRoot->copyFormulatedColumnsFromItem($root, $scopeContainer);

                $newRoot->free();
                unset($newRoot, $root);
            }

            $scopeContainer->updateItemRowLinkingAfterCopy();

            $con->commit();

            unset($scopeContainer);

            return $cloneTrade;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    private function updatePriority($priority, $excludeId)
    {
        $query = DoctrineQuery::create()->select('t.id')
            ->from('ResourceTrade t')
            ->where('t.resource_id = ?', $this->resource_id)
            ->andWhere('t.priority >= ?',$priority)
            ->addOrderBy('t.priority ASC');

        $records = $query->execute();

        $priorityToUpdate = $priority + 1;

        foreach($records as $record)
        {
            if($record->id != $excludeId){
                $record->priority = $priorityToUpdate;
                $record->save();
            }
            $priorityToUpdate++;
        }
    }
}
