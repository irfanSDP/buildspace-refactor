<?php

/**
 * BillBuildUpRateResourceTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillBuildUpRateResourceTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BillBuildUpRateResourceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillBuildUpRateResource');
    }

    public static function isResourceFromLibraryExists($resourceLibraryId, $billItemId)
    {
        $query = DoctrineQuery::create()->select('r.id')
            ->from('BillBuildUpRateResource r')
            ->where('r.bill_item_id = ?', $billItemId)
            ->andWhere('r.resource_library_id = ?', $resourceLibraryId)
            ->andWhere('r.deleted_at IS NULL')
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

        return $query->count() > 0 ? true : false;
    }

    public static function getByResourceLibraryIdAndBillItemId($resourceLibraryId, $billItemId, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('r.*')
            ->from('BillBuildUpRateResource r')
            ->where('r.bill_item_id = ?', $billItemId)
            ->andWhere('r.resource_library_id = ?', $resourceLibraryId)
            ->andWhere('r.deleted_at IS NULL')
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getExistingRecordFromScheduleOfRateBuildUpRateResource($billItemId, $buildUpRateResourceId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT r.id, r.name, r.resource_library_id FROM ".ScheduleOfRateBuildUpRateResourceTable::getInstance()->getTableName()." r WHERE r.id = ".$buildUpRateResourceId." AND r.deleted_at IS NULL");
        $stmt->execute();

        $resource = $stmt->fetch(PDO::FETCH_ASSOC);

        if(!$resource)
        {
            throw new Exception('ScheduleOfRateBuildUpRateResource must be available in order to import rates.');
        }

        $stmt = $pdo->prepare("SELECT t.id, t.name, t.bill_item_id, t.resource_library_id FROM ".self::getInstance()->getTableName()." t WHERE t.bill_item_id = ".$billItemId." AND t.resource_library_id = ".$resource['resource_library_id']." AND t.deleted_at IS NULL");

        $stmt->execute();

        $billBuildUpRateResource = $stmt->fetch(PDO::FETCH_ASSOC);

        if(!$billBuildUpRateResource)
        {
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (name, bill_item_id, resource_library_id, created_at, updated_at, created_by, updated_by) VALUES ('".($resource['name'])."', ".$billItemId.", ".$resource['resource_library_id'].", NOW(), NOW(), ".$userId.", ".$userId.") RETURNING id, name, bill_item_id, resource_library_id");
            $stmt->execute();

            $billBuildUpRateResource = $stmt->fetch(PDO::FETCH_ASSOC);
        }

        return $billBuildUpRateResource;
    }

    public static function getExistingRecordFromBQLibraryBuildUpRateResource($billItemId, $buildUpRateResourceId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT r.id, r.name, r.resource_library_id FROM ".BQLibraryBuildUpRateResourceTable::getInstance()->getTableName()." r WHERE r.id = ".$buildUpRateResourceId." AND r.deleted_at IS NULL");
        $stmt->execute();

        $resource = $stmt->fetch(PDO::FETCH_ASSOC);

        if( ! $resource )
        {
            throw new Exception('BQLibraryBuildUpRateResource must be available in order to import build up rates.');
        }

        $stmt = $pdo->prepare("SELECT t.id, t.name, t.bill_item_id, t.resource_library_id FROM ".self::getInstance()->getTableName()." t WHERE t.bill_item_id = ".$billItemId." AND t.resource_library_id = ".$resource['resource_library_id']." AND t.deleted_at IS NULL");

        $stmt->execute();

        $billBuildUpRateResource = $stmt->fetch(PDO::FETCH_ASSOC);

        if( ! $billBuildUpRateResource )
        {
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (name, bill_item_id, resource_library_id, created_at, updated_at, created_by, updated_by) VALUES ('".pg_escape_string($resource['name'])."', ".$billItemId.", ".$resource['resource_library_id'].", NOW(), NOW(), ".$userId.", ".$userId.") RETURNING id, name, bill_item_id, resource_library_id");
            $stmt->execute();

            $billBuildUpRateResource = $stmt->fetch(PDO::FETCH_ASSOC);
        }

        return $billBuildUpRateResource;
    }

    public static function getExistingRecordFromBillBuildUpRateResourceTable($targetItemId, $buildUpRateResourceId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT r.id, r.name, r.resource_library_id FROM ".self::getInstance()->getTableName()." r WHERE r.id = ".$buildUpRateResourceId." AND r.deleted_at IS NULL");
        $stmt->execute();

        $resource = $stmt->fetch(PDO::FETCH_ASSOC);

        if ( ! $resource )
        {
            throw new Exception('BillBuildUpRateResource must be available in order to import rates.');
        }

        $stmt = $pdo->prepare("SELECT t.id, t.name, t.bill_item_id, t.resource_library_id FROM ".self::getInstance()->getTableName()." t WHERE t.bill_item_id = ".$targetItemId." AND t.resource_library_id = ".$resource['resource_library_id']." AND t.deleted_at IS NULL");

        $stmt->execute();

        $billBuildUpRateResource = $stmt->fetch(PDO::FETCH_ASSOC);

        if( ! $billBuildUpRateResource )
        {
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (name, bill_item_id, resource_library_id, created_at, updated_at, created_by, updated_by) VALUES ('".pg_escape_string($resource['name'])."', ".$targetItemId.", ".$resource['resource_library_id'].", NOW(), NOW(), ".$userId.", ".$userId.") RETURNING id, name, bill_item_id, resource_library_id");
            $stmt->execute();

            $billBuildUpRateResource = $stmt->fetch(PDO::FETCH_ASSOC);
        }

        return $billBuildUpRateResource;
    }
}