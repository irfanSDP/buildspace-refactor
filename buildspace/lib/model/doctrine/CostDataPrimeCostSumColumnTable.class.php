<?php

/**
 * CostDataPrimeCostSumColumnTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CostDataPrimeCostSumColumnTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return CostDataPrimeCostSumColumnTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('CostDataPrimeCostSumColumn');
    }

    public static function getItem(MasterCostDataPrimeCostSumItem $masterItem, $columnId)
    {
        $object = DoctrineQuery::create()->select('c.id')
            ->from('CostDataPrimeCostSumColumn c')
            ->where('c.master_cost_data_prime_cost_sum_item_id = ?', $masterItem->id)
            ->andWhere('c.cost_data_prime_cost_sum_column_definition_id = ?', $columnId)
            ->limit(1)
            ->fetchOne();

        if( ! $object )
        {
            $object = new CostDataPrimeCostSumColumn();
            $object->master_cost_data_prime_cost_sum_item_id = $masterItem->id;
            $object->cost_data_prime_cost_sum_column_definition_id = $columnId;
        }

        return $object;
    }

    public static function setValue(MasterCostDataPrimeCostSumItem $masterItem, $columnId, $value)
    {
        $object = self::getItem($masterItem, $columnId);

        $object->amount = $value;
        $object->save();

        return $object;
    }

    public static function getValues(CostData $costData, array $masterItemIds)
    {
        if(empty($masterItemIds)) return array();

        $columns = CostDataPrimeCostSumColumnDefinitionTable::getPrimeCostSumColumns($costData);

        if(empty($columns)) return array();

        $masterItemIds = implode(',', $masterItemIds);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $selectClauses = array();
        foreach($columns as $key => $column)
        {
            $selectClauses[] = "COALESCE(c{$key}.amount, 0) AS amount_{$column['id']}";
        }

        $selectClause = implode(',', $selectClauses);

        $joinClause = "";
        foreach($columns as $key => $column)
        {
            $joinClause .= "LEFT JOIN ".self::getInstance()->getTableName()." c{$key} on mi.id = c{$key}.master_cost_data_prime_cost_sum_item_id AND c{$key}.cost_data_prime_cost_sum_column_definition_id = {$column['id']} ";
        }

        $notDeletedClause = "";

        foreach($columns as $key => $column)
        {
            $notDeletedClause .= "AND c{$key}.deleted_at IS NULL ";
        }

        $statement = "SELECT mi.id, {$selectClause}
        FROM ".MasterCostDataPrimeCostSumItemTable::getInstance()->getTableName()." mi
        $joinClause
        WHERE mi.id in ({$masterItemIds})
        {$notDeletedClause}";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $items = Utilities::setAttributeAsKey($items, 'id');

        return $items;
    }

    public static function itemValuesAreDerived(CostData $costData, array $masterItemIds)
    {
        $results = array();

        $columns = CostDataPrimeCostSumColumnDefinitionTable::getPrimeCostSumColumns($costData);

        foreach($masterItemIds as $masterItemId)
        {
            foreach($columns as $column)
            {
                $linkedBillItems = BillItemCostDataPrimeCostSumColumnTable::getLinkedBillItems(Doctrine_Core::getTable('MasterCostDataPrimeCostSumItem')->find($masterItemId), $column['id']);

                $results[$masterItemId][$column['id']]['awarded_cost'] = ( count($linkedBillItems) > 0 );
            }
        }

        return $results;
    }

    public static function updateProjectCostDataItemValues(array $projectIds)
    {
        if(empty($projectIds)) return;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT i.id
            FROM " . BillItemTable::getInstance()->getTableName() . " i
            JOIN " . BillElementTable::getInstance()->getTableName() . " e on e.id = i.element_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b on b.id = e.project_structure_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p on p.id = b.root_id
            WHERE p.id in (" . implode(',', $projectIds) . ")
            AND p.deleted_at IS NULL
            AND b.deleted_at IS NULL
            AND e.deleted_at IS NULL
            AND i.deleted_at IS NULL
            AND i.project_revision_deleted_at IS NULL");

        $stmt->execute();

        $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        if(empty($billItemIds)) return;

        $stmt = $pdo->prepare("SELECT i.master_cost_data_prime_cost_sum_item_id, i.cost_data_prime_cost_sum_column_definition_id
            FROM " . self::getInstance()->getTableName() . " i
            JOIN " . MasterCostDataPrimeCostSumItemTable::getInstance()->getTableName() . " mi ON mi.id = i.master_cost_data_prime_cost_sum_item_id
            WHERE i.id IN (
                SELECT ref.cost_data_prime_cost_sum_column_id
                FROM " . BillItemCostDataPrimeCostSumColumnTable::getInstance()->getTableName() . " ref
                WHERE ref.bill_item_id IN (" . implode(',', $billItemIds) . ")
            )
            AND i.deleted_at IS NULL
            AND mi.deleted_at IS NULl;");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $masterCostDataPrimeCostSumItems   = array();

        foreach($records as $record)
        {
            if(!array_key_exists($record['master_cost_data_prime_cost_sum_item_id'], $masterCostDataPrimeCostSumItems)) $masterCostDataPrimeCostSumItems[$record['master_cost_data_prime_cost_sum_item_id']] = Doctrine_Core::getTable('MasterCostDataPrimeCostSumItem')->find($record['master_cost_data_prime_cost_sum_item_id']);

            $masterItem = $masterCostDataPrimeCostSumItems[$record['master_cost_data_prime_cost_sum_item_id']];

            BillItemCostDataPrimeCostSumColumnTable::itemValueUpdate($masterItem, $record['cost_data_prime_cost_sum_column_definition_id']);
        }
    }
}