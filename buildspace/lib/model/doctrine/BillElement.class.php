<?php

/**
 * BillElement
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BillElement extends BaseBillElement
{
    public $grandTotal = null;
    public $afterMarkup = null;

    const FORMULATED_COLUMN_MARKUP_PERCENTAGE = 'markup_percentage';
    const FORMULATED_COLUMN_MARKUP_AMOUNT = 'markup_amount';

    public function getFormulatedColumnByName($columnName, $hydrate=null)
    {
        return BillElementTable::getFormulatedColumnByRelationIdAndColumnName($this->id, $columnName, $hydrate);
    }

    public function save(Doctrine_Connection $conn = null)
    {
        parent::save($conn);

        if($this->deleted_at == NULL)
        {
            $this->refresh();

            $billColumnSettingIds = array();

            foreach($this->BillElementTypeReferences as $billElementTypeReference)
            {
                $billColumnSettingIds[] = $billElementTypeReference->bill_column_setting_id;
            }

            if($this->BillElementTypeReferences->count() > 0)
            {
                $query = DoctrineQuery::create()->select('c.id')
                    ->from('BillColumnSetting c')
                    ->where('c.project_structure_id = ?', $this->project_structure_id)
                    ->andWhereNotIn('c.id', $billColumnSettingIds)
                    ->andWhere('c.deleted_at IS NULL')
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
            }
            else
            {
                $query = DoctrineQuery::create()->select('c.id')
                    ->from('BillColumnSetting c')
                    ->where('c.project_structure_id = ?', $this->project_structure_id)
                    ->andWhere('c.deleted_at IS NULL')
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
            }

            $billColumnSettingIds = $query->count() > 0 ? $query->execute() : array();

            foreach($billColumnSettingIds as $billColumnSettingId)
            {
                $billElementTypeReference = new BillElementTypeReference();
                $billElementTypeReference->bill_element_id = $this->id;
                $billElementTypeReference->bill_column_setting_id = $billColumnSettingId['id'];
                $billElementTypeReference->save($conn);

                unset($billElementTypeReference);
            }
        }
    }

    public function moveTo($priority, $lastPosition=false)
    {
        $priority = $lastPosition ? $priority+1 : $priority;

        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $this->priority = $priority;
            $this->save();

            if(!$lastPosition)
            {
                $this->updatePriority($priority, $this->id);
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }

    }

    public function copyTo($targetItem, $lastPosition=false, $currentBQAddendumId = 0)
    {
        $con = $this->getTable()->getConnection();

        $lumpSumItemTypes = array(
            BillItem::TYPE_ITEM_LUMP_SUM,
            BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE,
            BillItem::TYPE_ITEM_LUMP_SUM_PERCENT
        );

        $lumpSumItemIdsToBeSaved = array();
        $itemLumpSumPercentIds   = array();

        try
        {
            $con->beginTransaction();

            $priorityToUpdate = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;

            $cloneElement = $this->copy();
            $cloneElement->priority = $priorityToUpdate;
            $cloneElement->save($con);

            if(!$lastPosition)
            {
                $this->updatePriority($priorityToUpdate, $cloneElement->id);
            }

            $roots = DoctrineQuery::create()
                ->select('i.id, i.bill_ref, i.description, i.note, i.type, i.grand_total_quantity, i.uom_id, i.level, i.lft, i.rgt, i.priority')
                ->from('BillItem i')
                ->where('i.element_id = ?', array($this->id))
                ->andWhere('i.root_id = i.id')
                ->orderBy('i.priority ASC')
                ->fetchArray();

            $pdo = $this->getTable()->getConnection()->getDbh();
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            $rootSql = "INSERT INTO ".BillItemTable::getInstance()->getTableName()." (element_id, bill_ref, description, note, type, grand_total_quantity, uom_id, level, lft, rgt, priority, created_at, updated_at, created_by, updated_by, project_revision_id)
                    VALUES (".$cloneElement->id.", :bill_ref, :description, :note, :type, :grand_total_qty, :uom_id, :level, :lft, :rgt, :priority, NOW(), NOW(), ".$userId.", ".$userId.", :currentBQAddendumId) RETURNING id";

            $itemSql = "INSERT INTO ".BillItemTable::getInstance()->getTableName()." (element_id, bill_ref, description, note, type, grand_total_quantity, uom_id, root_id, level, lft, rgt, priority, created_at, updated_at, created_by, updated_by, project_revision_id)
                    VALUES (".$cloneElement->id.", :bill_ref, :description, :note, :type, :grand_total_qty, :uom_id, :root_id, :level, :lft, :rgt, :priority, NOW(), NOW(), ".$userId.", ".$userId.", :currentBQAddendumId) RETURNING id";

            $rootStmt = $pdo->prepare($rootSql);
            $itemStmt = $pdo->prepare($itemSql);

            foreach($roots as $root)
            {
                $rootGrandTotalQty = 0;

                if(in_array($root['type'], $lumpSumItemTypes))
                {
                    $rootGrandTotalQty = $root['grand_total_quantity'];
                }

                $rootStmt->execute(array(
                    'bill_ref'            => $root['bill_ref'],
                    'description'         => $root['description'],
                    'note'                => $root['note'],
                    'type'                => $root['type'],
                    'uom_id'              => $root['uom_id'],
                    'level'               => $root['level'],
                    'lft'                 => $root['lft'],
                    'rgt'                 => $root['rgt'],
                    'priority'            => $root['priority'],
                    'currentBQAddendumId' => $currentBQAddendumId,
                    'grand_total_qty'     => $rootGrandTotalQty,
                ));

                $rootReturningId = $rootStmt->fetch(PDO::FETCH_ASSOC);

                if(in_array($root['type'], $lumpSumItemTypes))
                {
                    $lumpSumItemIdsToBeSaved[$rootReturningId['id']] = $rootReturningId['id'];
                }

                if ( $root['type'] == BillItem::TYPE_ITEM_LUMP_SUM_PERCENT )
                {
                    $itemLumpSumPercentIds[$rootReturningId['id']] = $rootReturningId['id'];
                }

                Doctrine_Query::create()->update('BillItem i')
                    ->set('i.root_id', $rootReturningId['id'])
                    ->where('i.id = ?', $rootReturningId['id'])
                    ->execute();

                $billItems = DoctrineQuery::create()
                    ->select('i.id, i.bill_ref, i.description, i.note, i.type, i.grand_total_quantity, i.uom_id, i.element_id, i.level, i.lft, i.rgt, i.priority')
                    ->from('BillItem i')
                    ->where('i.root_id = ?', $root['id'])
                    ->andWhere('i.element_id = ?', array($this->id))
                    ->andWhere('i.lft > ? AND i.rgt < ?', array($root['lft'], $root['rgt']))
                    ->addOrderBy('i.lft ASC')
                    ->fetchArray();

                foreach($billItems as $billItem)
                {
                    $grandTotalQty = 0;

                    if(in_array($billItem['type'], $lumpSumItemTypes))
                    {
                        $grandTotalQty = $billItem['grand_total_quantity'];
                    }

                    $itemStmt->execute(array(
                        'bill_ref'            => $billItem['bill_ref'],
                        'description'         => $billItem['description'],
                        'note'                => $billItem['note'],
                        'type'                => $billItem['type'],
                        'uom_id'              => $billItem['uom_id'],
                        'root_id'             => $rootReturningId['id'],
                        'level'               => $billItem['level'],
                        'lft'                 => $billItem['lft'],
                        'rgt'                 => $billItem['rgt'],
                        'priority'            => $billItem['priority'],
                        'currentBQAddendumId' => $currentBQAddendumId,
                        'grand_total_qty'     => $grandTotalQty,
                    ));

                    $itemReturningId = $itemStmt->fetch(PDO::FETCH_ASSOC);

                    if(in_array($billItem['type'], $lumpSumItemTypes))
                    {
                        $lumpSumItemIdsToBeSaved[$itemReturningId['id']] = $itemReturningId['id'];
                    }

                    if ( $billItem['type'] == BillItem::TYPE_ITEM_LUMP_SUM_PERCENT )
                    {
                        $itemLumpSumPercentIds[$itemReturningId['id']] = $itemReturningId['id'];
                    }
                }
            }

            // will proceed with saving item lump sum type's default quantity
            $this->saveNewlyCreatedItemLumpSumQuantity($pdo, $lumpSumItemIdsToBeSaved);

            // will proceed to save a default row for each item lump sum percent
            $this->saveNewlyCreatedItemLumpSumPercent($itemLumpSumPercentIds);

            $con->commit();

            return $cloneElement;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $billElementIds = array();
        $affectedBillElements = array();
        $formulatedColumnIds = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            foreach($this->FormulatedColumns as $formulatedColumn)
            {
                $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                if(is_array($nodes))
                {
                    foreach($nodes as $node)
                    {
                        $referencedNode = Doctrine_Core::getTable('BillElementFormulatedColumn')->find($node['node_from']);

                        if($referencedNode)
                        {
                            $pattern = '/\b(R'.$this->id.')\b/i';
                            $value = preg_replace($pattern, '#REF!', $referencedNode->value);

                            $referencedNode->setFormula($value);

                            $referencedNode->save();

                            $billElementIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                        }
                    }
                }

                Doctrine_Manager::getInstance()->getCurrentConnection()
                    ->fetchAssoc("UPDATE ".$formulatedColumn->getTable()->getTableName()." SET
                    deleted_at = NOW()
                    WHERE id = ".$formulatedColumn->id);

                $formulatedColumnIds[] = $formulatedColumn->id;
            }

            if(count($formulatedColumnIds) > 0)
            {
                //now we can remove all edges after we've updated related nodes
                Doctrine_Query::create()
                    ->delete('BillElementEdge e')
                    ->whereIn('e.node_from', $formulatedColumnIds)
                    ->execute();

                Doctrine_Query::create()
                    ->delete('BillElementEdge e')
                    ->whereIn('e.node_to', $formulatedColumnIds)
                    ->execute();
            }

            /*
             * delete all items that belong to the element
             */
            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".BillItemTable::getInstance()->getTableName()." SET deleted_at = NOW() WHERE element_id = ".$this->id);

            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".BillItemTypeReferenceTable::getInstance()->getTableName()." SET deleted_at = NOW()
                WHERE bill_item_id IN (SELECT i.id FROM ".BillItemTable::getInstance()->getTableName()." AS i WHERE i.element_id = ".$this->id.")");

            Doctrine_Query::create()
                ->delete('BillElement e')
                ->where('e.id = ?', $this->id)
                ->execute();

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
            throw $e;
        }

        foreach($billElementIds as $billElementId)
        {
            $affectedBillElement = array();
            $billElement = $this->getTable()->find($billElementId);

            $affectedBillElement['id'] = $billElement->id;

            foreach($billElement->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedBillElement[$columnName."-final_value"] = $formulatedColumn->final_value;
                $affectedBillElement[$columnName."-value"] = $formulatedColumn->value;
                $affectedBillElement[$columnName.'-has_cell_reference'] = $formulatedColumn->hasCellReference();
                $affectedBillElement[$columnName.'-has_formula'] = $formulatedColumn->hasFormula();
            }

            array_push($affectedBillElements, $affectedBillElement);
        }

        return $affectedBillElements;
    }

    private function updatePriority($priority, $excludeId)
    {
        $records = DoctrineQuery::create()->select('e.id')
            ->from('BillElement e')
            ->where('e.project_structure_id = ?', $this->project_structure_id)
            ->andWhere('e.priority >= ?',$priority)
            ->addOrderBy('e.priority ASC')
            ->execute();

        $priorityToUpdate = $priority + 1;

        foreach($records as $record)
        {
            if($record->id != $excludeId){
                $record->priority = $priorityToUpdate;
                $record->save();
            }
            $priorityToUpdate++;
        }
    }

    public static function getMaxPriorityByBillId($billId)
    {
        $queryResult = DoctrineQuery::create()->select('max(e.priority)')
            ->from('BillElement e')
            ->where('e.project_structure_id = ?', $billId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $queryResult['max'];
    }

    public function updateAllItemTotalAfterMarkup()
    {
        $billColumnSettings = $this->ProjectStructure->BillColumnSettings->toArray();
        $billMarkupSetting = $this->ProjectStructure->BillMarkupSetting->toArray();

        BillElementTable::updateAllItemTotalAfterMarkupByElementId($this->id, $billColumnSettings, $billMarkupSetting);
    }

    public function updateMarkupAmount()
    {
        //to update element markup amount column based on grand_total * markup percentage
        BillElementTable::updateMarkupAmountByElementId($this->id);
    }

    public function getAddendumInfo($includeInProgress=true)
    {
        $pdo = BillElementTable::getInstance()->getConnection()->getDbh();
        $includeInProgressSql = (!$includeInProgress) ? " AND r.locked_status IS TRUE " : "";
        $stmt = $pdo->prepare("SELECT DISTINCT r.id, r.revision, r.version
        FROM " . BillElementTable::getInstance()->getTableName() . " e
        JOIN " . BillItemTable::getInstance()->getTableName() . " i ON e.id = i.element_id
        JOIN " . ProjectRevisionTable::getInstance()->getTableName() . " r ON r.id = i.project_revision_id 
        WHERE e.id = ".$this->id."
        AND r.version <> ".ProjectRevision::ORIGINAL_BILL_VERSION." ".$includeInProgressSql."
        AND e.deleted_at IS NULL AND i.deleted_at IS NULL AND r.deleted_at IS NULL
        ORDER BY r.version");
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    private function saveNewlyCreatedItemLumpSumQuantity(PDO $pdo, array $lumpSumItemIdsToBeSaved)
    {
        if ( empty($lumpSumItemIdsToBeSaved) )
        {
            return;
        }

        $billColumnSettings = $this->ProjectStructure->BillColumnSettings;
        $typeReferenceIds   = array();

        $stmt = $pdo->prepare('INSERT INTO '.BillItemTypeReferenceTable::getInstance()->getTableName().' (bill_item_id, bill_column_setting_id, total_quantity, created_at, updated_at) VALUES (:bill_item_id, :bill_column_setting_id, :total_quantity, NOW(), NOW()) RETURNING id');

        foreach ( $lumpSumItemIdsToBeSaved as $lumpSumItemId )
        {
            foreach ( $billColumnSettings as $billColumnSetting )
            {
                $stmt->execute(array(
                    'bill_item_id'           => $lumpSumItemId,
                    'bill_column_setting_id' => $billColumnSetting->id,
                    'total_quantity'         => 1,
                ));

                $returningId = $stmt->fetch(PDO::FETCH_ASSOC);

                $typeReferenceIds[$returningId['id']] = $returningId['id'];

                unset($billColumnSetting);
            }

            unset($lumpSumItemIds);
        }

        unset($lumpSumItemIdsToBeSaved);

        $stmt = $pdo->prepare('INSERT INTO '.BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName().' (relation_id, column_name, value, final_value, created_at, updated_at) VALUES (:relation_id, :column_name, :value, :final_value, NOW(), NOW())');

        foreach ( $typeReferenceIds as $typeReferenceId )
        {
            $stmt->execute(array(
                'relation_id' => $typeReferenceId,
                'column_name' => BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT,
                'value'       => 1,
                'final_value' => 1,
            ));

            unset($typeReferenceId);
        }

        unset($typeReferenceIds);
    }

    private function saveNewlyCreatedItemLumpSumPercent(array $itemLumpSumPercentIds)
    {
        foreach ( $itemLumpSumPercentIds as $itemLumpSumPercentId )
        {
            $item = new BillItem();
            $item->id = $itemLumpSumPercentId;

            BillItemLumpSumPercentageTable::insertDefaultEmptyRow($item);

            $item->free(true);

            unset($itemLumpSumPercentId, $item);
        }

        unset($itemLumpSumPercentIds);
    }

    public function removeMarkup()
    {
        $formulatedColumn = Doctrine_Core::getTable('BillElementFormulatedColumn')->getByRelationIdAndColumnName($this->id, BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE);

        $formulatedColumn->setFormula(0);

        $formulatedColumn->save();

        $formulatedColumn->refresh();

        $this->updateAllItemTotalAfterMarkup();
    }
}
