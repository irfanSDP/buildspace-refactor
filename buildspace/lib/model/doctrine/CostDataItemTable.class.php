<?php

/**
 * CostDataItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CostDataItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return CostDataItemTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('CostDataItem');
    }

    public static function getCascadingAttributes()
    {
        return array(
            CostDataItem::COLUMN_APPROVED_COST,
            CostDataItem::COLUMN_AWARDED_COST,
            CostDataItem::COLUMN_VARIATION_ORDER_COST,
        );
    }

    public static function isCascadingAttribute($attribute)
    {
        return in_array($attribute, self::getCascadingAttributes());
    }

    public static function getItem(CostData $costData, MasterCostDataItem $masterCostDataItem)
    {
        $costDataItem = DoctrineQuery::create()->select('i.id')
            ->from('CostDataItem i')
            ->where('i.cost_data_id = ?', $costData->id)
            ->andWhere('i.master_cost_data_item_id = ?', $masterCostDataItem->id)
            ->limit(1)
            ->fetchOne();

        if( ! $costDataItem )
        {
            $costDataItem = new CostDataItem();
            $costDataItem->cost_data_id = $costData->id;
            $costDataItem->master_cost_data_item_id = $masterCostDataItem->id;
        }

        return $costDataItem;
    }

    public static function setValue(CostData $costData, MasterCostDataItem $masterCostDataItem, $attribute, $value)
    {
        $costDataItem = self::getItem($costData, $masterCostDataItem);

        $costDataItem->{$attribute} = $value;
        $costDataItem->save();

        if(self::isCascadingAttribute($attribute)) $costDataItem->flushDescendantValues($attribute);

        return $costDataItem;
    }

    public static function getItemSum(CostData $costData, array $masterCostDataItemIds)
    {
        if(empty($masterCostDataItemIds)) return 0;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $masterCostDataItemIds = implode(',', $masterCostDataItemIds);

        $stmt = $pdo->prepare("SELECT SUM(i.approved_cost) AS approved_sum, SUM(i.awarded_cost) AS awarded_sum, SUM(i.variation_order_cost) AS variation_order_sum, SUM(i.awarded_cost + i.variation_order_cost) as adjusted_sum
        FROM ".MasterCostDataItemTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataItemTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_item_id and i.cost_data_id = {$costData->id}
        WHERE mi.id in ({$masterCostDataItemIds})
        AND i.show IS NOT FALSE
        AND mi.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    public static function getOverallCostingItemValues(CostData $costData, array $masterCostDataItemIds)
    {
        if(empty($masterCostDataItemIds)) return array();

        $masterCostDataItemIds = implode(',', $masterCostDataItemIds);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT mi.id, COALESCE(i.approved_cost, 0) AS approved_cost, COALESCE(i.awarded_cost,0) AS awarded_cost, COALESCE(i.variation_order_cost,0) AS variation_order_cost, COALESCE(i.awarded_cost, 0)+COALESCE(i.variation_order_cost, 0) AS adjusted_cost, COALESCE(i.remarks, '') as remarks
        FROM ".MasterCostDataItemTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataItemTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_item_id and i.cost_data_id = {$costData->id}
        WHERE mi.id in ({$masterCostDataItemIds})
        AND mi.deleted_at IS NULL");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $items = Utilities::setAttributeAsKey($items, 'id');

        $stmt = $pdo->prepare("
            SELECT p.id, COALESCE(cdp.value, 0) AS value FROM " . MasterCostDataParticularTable::getInstance()->getTableName() . " p
            JOIN " . CostDataTable::getInstance()->getTableName() . " cd on cd.master_cost_data_id = p.master_cost_data_id
            LEFT JOIN " . CostDataParticularTable::getInstance()->getTableName() . " cdp on cdp.master_cost_data_particular_id = p.id AND cdp.cost_data_id = cd.id
            WHERE cd.id = {$costData->id}
            AND p.is_used_for_cost_comparison = TRUE
            AND p.deleted_at IS NULL
            ORDER BY p.priority ASC
            ");

        $stmt->execute();

        $particulars = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        foreach($items as $masterId => $item)
        {
            foreach($particulars as $particularId => $particularValue)
            {
                $items[$masterId]['approved-'.$particularId] = Utilities::divide($item['approved_cost'], $particularValue);
                $items[$masterId]['awarded-'.$particularId]  = Utilities::divide($item['awarded_cost'], $particularValue);
                $items[$masterId]['adjusted-'.$particularId] = Utilities::divide($item['adjusted_cost'], $particularValue);
            }
        }

        return $items;
    }

    public static function getWorkCategoryValues(CostData $costData, array $masterCostDataItemIds)
    {
        if( empty( $masterCostDataItemIds ) ) return array();

        $masterCostDataItemIdsString = implode(',', $masterCostDataItemIds);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT mi.id, COALESCE(i.approved_cost, 0) AS approved_cost, COALESCE(i.awarded_cost,0) AS awarded_cost, COALESCE(i.variation_order_cost,0) AS variation_order_cost, COALESCE(i.awarded_cost, 0)+COALESCE(i.variation_order_cost, 0) AS adjusted_cost, i.remarks
        FROM " . MasterCostDataItemTable::getInstance()->getTableName() . " mi
        LEFT JOIN " . CostDataItemTable::getInstance()->getTableName() . " i on mi.id = i.master_cost_data_item_id and i.cost_data_id = {$costData->id}
        WHERE mi.id in ({$masterCostDataItemIdsString})
        AND mi.deleted_at IS NULL");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $items = Utilities::setAttributeAsKey($items, 'id');

        $sums = self::getItemSum($costData, $masterCostDataItemIds);

        $stmt = $pdo->prepare("
            SELECT p.id, COALESCE(cdp.value, 0) AS value FROM " . MasterCostDataParticularTable::getInstance()->getTableName() . " p
            JOIN " . CostDataTable::getInstance()->getTableName() . " cd on cd.master_cost_data_id = p.master_cost_data_id
            LEFT JOIN " . CostDataParticularTable::getInstance()->getTableName() . " cdp on cdp.master_cost_data_particular_id = p.id AND cdp.cost_data_id = cd.id
            WHERE cd.id = {$costData->id}
            AND p.deleted_at IS NULL
            ORDER BY p.priority ASC
            ");

        $stmt->execute();

        $particulars = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        foreach($items as $masterId => &$item)
        {
            foreach($particulars as $particularId => $particularValue)
            {
                $item['column-'.$particularId] = $particularValue;

                $item['approved_column-'.$particularId] = Utilities::divide($item['approved_cost'], $particularValue);
                $item['awarded_column-'.$particularId] = Utilities::divide($item['awarded_cost'], $particularValue);
                $item['adjusted_column-'.$particularId] = Utilities::divide($item['adjusted_cost'], $particularValue);
            }
        }

        return $items;
    }

    public static function getElementValues(CostData $costData, MasterCostDataItem $workCategoryItem, array $masterCostDataItemIds)
    {
        if(empty($masterCostDataItemIds)) return array();

        $sums = self::getItemSum($costData, $masterCostDataItemIds);

        $masterCostDataItemIds = implode(',', $masterCostDataItemIds);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT mi.id, COALESCE(i.approved_cost, 0) AS approved_cost, COALESCE(i.awarded_cost,0) AS awarded_cost, ROUND(COALESCE(i.variation_order_cost, 0), 2) as variation_order_cost, ROUND(COALESCE(i.awarded_cost + i.variation_order_cost, 0), 2) as adjusted_cost, i.remarks
        FROM ".MasterCostDataItemTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataItemTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_item_id and i.cost_data_id = {$costData->id}
        WHERE mi.id in ({$masterCostDataItemIds})
        AND mi.deleted_at IS NULL");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $items = Utilities::setAttributeAsKey($items, 'id');

        $stmt = $pdo->prepare("
            SELECT p.id, COALESCE(cdp.value, 0) AS value FROM " . MasterCostDataParticularTable::getInstance()->getTableName() . " p
            JOIN " . CostDataTable::getInstance()->getTableName() . " cd on cd.master_cost_data_id = p.master_cost_data_id
            LEFT JOIN " . CostDataParticularTable::getInstance()->getTableName() . " cdp on cdp.master_cost_data_particular_id = p.id AND cdp.cost_data_id = cd.id
            WHERE cd.id = {$costData->id}
            AND p.is_used_for_cost_comparison = TRUE
            AND p.deleted_at IS NULL
            ORDER BY p.priority ASC
            ");

        $stmt->execute();

        $particulars = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        foreach($items as $masterId => $item)
        {
            $items[$masterId]['approved_percentage'] = Utilities::percent($item['approved_cost'], $sums['approved_sum']);
            $items[$masterId]['awarded_percentage']  = Utilities::percent($item['awarded_cost'], $sums['awarded_sum']);
            $items[$masterId]['adjusted_percentage'] = Utilities::percent($item['adjusted_cost'], $sums['adjusted_sum']);

            foreach($particulars as $particularId => $particularValue)
            {
                $items[$masterId]['approved-'.$particularId] = Utilities::divide($item['approved_cost'], $particularValue);
                $items[$masterId]['awarded-'.$particularId]  = Utilities::divide($item['awarded_cost'], $particularValue);
                $items[$masterId]['adjusted-'.$particularId] = Utilities::divide($item['adjusted_cost'], $particularValue);
            }
        }

        return $items;
    }

    public static function setItemVisibility(CostData $costData, $masterItemIds, $setVisible)
    {
        foreach($masterItemIds as $masterItemId)
        {
            $item = self::getItem($costData, Doctrine_Core::getTable('MasterCostDataItem')->find($masterItemId));

            $item->show = $setVisible;
            $item->save();

            $item->updateRelativesCost(array( CostDataItem::COLUMN_APPROVED_COST, CostDataItem::COLUMN_AWARDED_COST, CostDataItem::COLUMN_VARIATION_ORDER_COST ));
        }
    }

    public static function getItemList(CostData $costData, $parentId = null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $parentClause = $parentId ? "mi.parent_id = {$parentId}" : "mi.parent_id IS NULL";

        $stmt = $pdo->prepare("SELECT mi.id, mi.description, i.updated_at, i.updated_by, cp.name as updater_name
        FROM ".MasterCostDataItemTable::getInstance()->getTableName()." mi
        LEFT JOIN ".CostDataItemTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_item_id and i.cost_data_id = {$costData->id}
        LEFT JOIN ".sfGuardUserTable::getInstance()->getTableName()." u on u.id = i.updated_by
        LEFT JOIN ".sfGuardUserProfileTable::getInstance()->getTableName()." cp ON cp.user_id = u.id
        WHERE mi.master_cost_data_id = {$costData->master_cost_data_id} 
        AND {$parentClause}
        AND i.show IS NOT FALSE
        AND mi.deleted_at IS NULL
        ORDER BY mi.priority ASC");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function itemValuesAreDerived(CostData $costData, array $masterCostDataItemIds)
    {
        if(empty($masterCostDataItemIds)) return array();

        $masterCostDataItemIds = implode(',', $masterCostDataItemIds);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT mp.id, (SUM(COALESCE(i.approved_cost, 0)) != 0) IS TRUE AS approved_cost, (SUM(COALESCE(i.awarded_cost,0)) != 0) IS TRUE AS awarded_cost, (SUM(COALESCE(i.variation_order_cost, 0)) != 0) IS TRUE AS variation_order_cost
        FROM ".MasterCostDataItemTable::getInstance()->getTableName()." mp
        LEFT JOIN ".MasterCostDataItemTable::getInstance()->getTableName()." mi on mp.id = mi.parent_id
        LEFT JOIN ".CostDataItemTable::getInstance()->getTableName()." i on mi.id = i.master_cost_data_item_id and i.cost_data_id = {$costData->id}
        WHERE mp.id in ({$masterCostDataItemIds})
        AND mi.deleted_at IS NULL
        GROUP BY mp.id");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $results = Utilities::setAttributeAsKey($items, 'id');

        $linkedBillItems = BillItemCostDataItemTable::getDescendantsAndSelfLinkedBillItems($costData, array_keys($results));

        $linkedVariationOrderItems = VariationOrderItemCostDataItemTable::getDescendantsAndSelfLinkedItems($costData, array_keys($results));

        foreach($results as $masterId => &$statuses)
        {
            if(!$statuses['awarded_cost'])
            {
                if(count($linkedBillItems[$masterId]) > 0) $statuses['awarded_cost'] = true;
            }

            if(!$statuses['variation_order_cost'])
            {
                if(count($linkedVariationOrderItems[$masterId]) > 0) $statuses['variation_order_cost'] = true;
            }
        }

        return $results;
    }

    public static function updateProjectCostDataItemValues(array $projectIds)
    {
        if(empty($projectIds)) return;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT i.id
            FROM " . BillItemTable::getInstance()->getTableName() . " i
            JOIN " . BillElementTable::getInstance()->getTableName() . " e on e.id = i.element_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " b on b.id = e.project_structure_id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " p on p.id = b.root_id
            WHERE p.id in (" . implode(',', $projectIds) . ")
            AND p.deleted_at IS NULL
            AND b.deleted_at IS NULL
            AND e.deleted_at IS NULL
            AND i.deleted_at IS NULL
            AND i.project_revision_deleted_at IS NULL");

        $stmt->execute();

        $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        if(empty($billItemIds)) return;

        $stmt = $pdo->prepare("SELECT cd.id AS cost_data_id, i.master_cost_data_item_id
            FROM " . CostDataItemTable::getInstance()->getTableName() . " i
            JOIN " . MasterCostDataItemTable::getInstance()->getTableName() . " mi ON mi.id = i.master_cost_data_item_id
            JOIN " . CostDataTable::getInstance()->getTableName() . " cd ON cd.id = i.cost_data_id
            WHERE i.id IN (
                SELECT ref.cost_data_item_id
                FROM " . BillItemCostDataItemTable::getInstance()->getTableName() . " ref
                WHERE ref.bill_item_id IN (" . implode(',', $billItemIds) . ")
            )
            AND cd.deleted_at IS NULL
            AND i.deleted_at IS NULL
            AND mi.deleted_at IS NULl;");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $costDataObjects     = array();
        $masterCostDataItems = array();

        foreach($records as $record)
        {
            if(!array_key_exists($record['cost_data_id'], $costDataObjects)) $costDataObjects[$record['cost_data_id']] = Doctrine_Core::getTable('CostData')->find($record['cost_data_id']);

            if(!array_key_exists($record['master_cost_data_item_id'], $masterCostDataItems)) $masterCostDataItems[$record['master_cost_data_item_id']] = Doctrine_Core::getTable('MasterCostDataItem')->find($record['master_cost_data_item_id']);

            $costData           = $costDataObjects[$record['cost_data_id']];
            $masterCostDataItem = $masterCostDataItems[$record['master_cost_data_item_id']];

            BillItemCostDataItemTable::itemValueUpdate($costData, $masterCostDataItem);
        }
    }
}