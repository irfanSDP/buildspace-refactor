<?php

/**
 * TenderBillItemRationalizedRatesTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TenderBillItemRationalizedRatesTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TenderBillItemRationalizedRatesTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TenderBillItemRationalizedRates');
    }

    public static function flushExistingRatesByProjectId( $projectId )
    {
        $pdo = ProjectStructureTable::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT i.id
        FROM ".BillItemTable::getInstance()->getTableName()." i
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id AND e.deleted_at IS NULL
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON e.project_structure_id = p.id AND p.deleted_at IS NULL
        WHERE p.root_id = :project_id AND i.deleted_at IS NULL");

        $stmt->execute(array(
            'project_id' => $projectId
        ));

        $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        if(count($billItemIds))
        {
            $stmt = $pdo->prepare("DELETE
            FROM ".TenderBillItemRationalizedRatesTable::getInstance()->getTableName()." i
            WHERE i.bill_item_id IN (".implode(',', $billItemIds).")");

            $stmt->execute();
        }
    }

    public static function getOverallBillTotalByProject( $projectId )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $rationalizedRates = [
            'project_total' => 0,
            'bill' => []
        ];
        
        $stmt = $pdo->prepare("SELECT b.id, SUM(COALESCE(r.grand_total, 0)) AS total
            FROM ".ProjectStructureTable::getInstance()->getTableName()." p
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = p.id
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON e.project_structure_id = b.id
            JOIN ".TenderBillElementRationalizedGrandTotalTable::getInstance()->getTableName()." r ON r.bill_element_id = e.id
            WHERE p.id = :project_id AND b.type = :type
            AND b.deleted_at IS NULL AND e.deleted_at IS NULL
            GROUP BY b.id");

        $stmt->execute([
            'project_id' => $projectId,
            'type'       => ProjectStructure::TYPE_BILL
        ]);
        
        $rates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $projectTotal = 0;

        foreach($rates as $billId => $rate)
        {
            $projectTotal+=$rate;
            $rationalizedRates['bill'][$billId] = $rate;
        }

        $rationalizedRates['project_total'] = $projectTotal;

        return $rationalizedRates;
    }

    public static function getTenderAlternativeOverallBillTotalByProject(ProjectStructure $project)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ta.id, SUM(COALESCE(r.grand_total, 0)) AS total
            FROM ".TenderBillElementRationalizedGrandTotalTable::getInstance()->getTableName()." r
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON e.id = r.bill_element_id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id
            JOIN ".TenderAlternativeBillTable::getInstance()->getTableName()." AS x ON x.project_structure_id = b.id
            JOIN ".TenderAlternativeTable::getInstance()->getTableName()." ta ON ta.id = x.tender_alternative_id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON ta.project_structure_id = p.id
            WHERE p.id =:project_id AND b.root_id = p.id
            AND b.type =:type AND b.deleted_at IS NULL
            AND e.deleted_at IS NULL AND ta.deleted_at IS NULL AND ta.project_revision_deleted_at IS NULL
            GROUP BY ta.id");

        $stmt->execute([
            'project_id' => $project->id,
            'type'       => ProjectStructure::TYPE_BILL
        ]);
        
        return $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
    }

    public static function getRationalizedGrandTotalByBillId($billId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $rationalizeRates = [
            'bill_total' => 0,
            'element' => []
        ];

        $stmt = $pdo->prepare("SELECT r.bill_element_id, COALESCE(r.grand_total, 0) AS total
            FROM ".BillElementTable::getInstance()->getTableName()." e
            JOIN ".TenderBillElementRationalizedGrandTotalTable::getInstance()->getTableName()." r ON r.bill_element_id = e.id
            WHERE e.project_structure_id = :project_structure_id AND e.deleted_at IS NULL");

        $stmt->execute([
            'project_structure_id' => $billId
        ]);
        
        $rates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $billTotal = 0;

        foreach($rates as $elementId => $rate)
        {
            $billTotal+=$rate;
            $rationalizeRates['element'][$elementId] = $rate;
        }

        $rationalizeRates['bill_total'] = $billTotal;

        return $rationalizeRates;
    }

    public static function getAllRationalizedRatesByElementId( $elementId )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $rationalizedRates = array();
        
        $stmt = $pdo->prepare("SELECT r.bill_item_id, r.rate, COALESCE(r.grand_total, 0) AS grand_total
        FROM ".BillElementTable::getInstance()->getTableName()." e
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id AND i.deleted_at IS NULL
        JOIN ".TenderBillItemRationalizedRatesTable::getInstance()->getTableName()." r ON r.bill_item_id = i.id
        WHERE e.id = :element_id AND i.project_revision_deleted_at IS NULL");

        $stmt->execute([
            'element_id' => $elementId
        ]);
        
        $rationalizedRates = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
        
        return $rationalizedRates;
    }
}