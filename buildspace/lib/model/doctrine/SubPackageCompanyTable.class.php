<?php

/**
 * SubPackageCompanyTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SubPackageCompanyTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object SubPackageCompanyTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('SubPackageCompany');
    }

    public static function getBySubPackageIdAndCompanyId($subPackageId, $companyId, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('SubPackageCompany xref')
            ->where('xref.sub_package_id = ?', $subPackageId)
            ->andWhere('xref.company_id = ?', $companyId)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }
	
	public static function flushBillItemRatesBySubPackageCompanyId( $subPackageCompanyId )
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM ".SubPackageBillItemRateTable::getInstance()->getTableName()." p WHERE p.sub_package_company_id = ".$subPackageCompanyId);

        $stmt->execute();
    }

    public static function getSubConCompany(SubPackage $subPackage, $selectedCompanyId, $sortBy)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        switch($sortBy)
        {
            case SubPackage::SORT_SUMMARY_SUB_CONTRACTOR_HIGHEST_LOWEST:
                $sqlOrder = "total DESC";
                break;
            case SubPackage::SORT_SUMMARY_SUB_CONTRACTOR_LOWEST_HIGHEST:
                $sqlOrder = "total ASC";
                break;
            default:
                throw new Exception('Invalid sort option');
        }

        $stmt = $pdo->prepare("SELECT c.id, c.name, c.shortname, COALESCE(SUM(b.grand_total), 0) AS total
        FROM ".CompanyTable::getInstance()->getTableName()." c
        JOIN ".SubPackageCompanyTable::getInstance()->getTableName()." xref ON xref.company_id = c.id
        JOIN ".SubPackageTable::getInstance()->getTableName()." sp ON sp.id = xref.sub_package_id
        LEFT JOIN ".SubPackageBillItemRateTable::getInstance()->getTableName()." b ON b.sub_package_company_id = xref.id
        WHERE sp.id =".$subPackage->id." AND sp.deleted_at IS NULL
        AND c.id <> ".$selectedCompanyId." AND c.deleted_at IS NULL
        AND b.grand_total <> 0 AND b.bill_item_id IN (SELECT DISTINCT b.bill_item_id
        FROM ".CompanyTable::getInstance()->getTableName()." c
        JOIN ".SubPackageCompanyTable::getInstance()->getTableName()." xref ON xref.company_id = c.id
        JOIN ".SubPackageTable::getInstance()->getTableName()." sp ON sp.id = xref.sub_package_id
        LEFT JOIN ".ProjectStructureTable::getInstance()->getTableName()." bill ON bill.root_id = sp.project_structure_id
        LEFT JOIN ".SubPackageResourceItemTable::getInstance()->getTableName()." AS spri ON spri.sub_package_id = sp.id
        LEFT JOIN ".SubPackageScheduleOfRateItemTable::getInstance()->getTableName()." AS spsori ON spsori.sub_package_id = sp.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON e.project_structure_id = bill.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
        LEFT JOIN ".SubPackageBillItemRateTable::getInstance()->getTableName()." b ON b.sub_package_company_id = xref.id AND b.bill_item_id = i.id
        LEFT JOIN ".BillBuildUpRateItemTable::getInstance()->getTableName()." bur ON bur.bill_item_id = i.id AND bur.resource_item_library_id = spri.resource_item_id AND bur.deleted_at IS NULL
        LEFT JOIN ".ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName()." AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
        LEFT JOIN ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS rate ON rate.relation_id = i.id
        LEFT JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = i.id AND spbi.sub_package_id = sp.id
        WHERE sp.id =".$subPackage->id." AND sp.deleted_at IS NULL
        AND c.id <> ".$selectedCompanyId." AND c.deleted_at IS NULL
        AND bill.deleted_at IS NULL
        AND NOT (spri.sub_package_id IS NULL AND spsori.sub_package_id IS NULL AND spbi.sub_package_id IS NULL)
        AND (rate.relation_id = bur.bill_item_id OR rate.schedule_of_rate_item_formulated_column_id = sifc.id OR rate.relation_id = spbi.bill_item_id)
        AND rate.column_name = '".BillItem::FORMULATED_COLUMN_RATE."' AND rate.final_value <> 0 AND rate.deleted_at IS NULL
        AND i.type <> ".BillItem::TYPE_ITEM_NOT_LISTED." AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
        AND e.deleted_at IS NULL) GROUP BY c.id ORDER BY ".$sqlOrder);

        $stmt->execute();
        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if(count($records) == 0)
        {
            $stmt = $pdo->prepare("SELECT c.id, c.name, c.shortname, COALESCE(0, 0) AS total
            FROM ".CompanyTable::getInstance()->getTableName()." c
            JOIN ".SubPackageCompanyTable::getInstance()->getTableName()." xref ON xref.company_id = c.id
            JOIN ".SubPackageTable::getInstance()->getTableName()." sp ON sp.id = xref.sub_package_id
            WHERE sp.id =".$subPackage->id." AND sp.deleted_at IS NULL
            AND c.id <> ".$selectedCompanyId." AND c.deleted_at IS NULL
            ORDER BY ".$sqlOrder);

            $stmt->execute();
            $records = $stmt->fetchAll(PDO::FETCH_ASSOC);
        }

        return $records;
    }
}