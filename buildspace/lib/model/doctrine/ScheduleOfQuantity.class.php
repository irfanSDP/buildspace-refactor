<?php

/**
 * ScheduleOfQuantity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ScheduleOfQuantity extends BaseScheduleOfQuantity
{
    const IDENTIFIER_TYPE_MANUAL = 1;
    const IDENTIFIER_TYPE_CUBIT = 4;

    const IDENTIFIER_TYPE_MANUAL_TEXT = 'MANUAL';
    const IDENTIFIER_TYPE_CUBIT_TEXT = 'CUBIT';

    const CUBIT_EXTENSIONS = array('jbk', 'cbx');

    public function moveTo($priority, $lastPosition=false)
    {
        $priority = $lastPosition ? $priority+1 : $priority;

        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $this->priority = $priority;

            $this->save();

            if(!$lastPosition)
            {
                $this->updatePriority($priority, $this->id);
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }

    }

    public function copyTo(ScheduleOfQuantity $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $priorityToUpdate = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;

            $cloneScheduleOfQuantity = $this->copy();

            $cloneScheduleOfQuantity->priority = $priorityToUpdate;

            $cloneScheduleOfQuantity->save($con);

            if(!$lastPosition)
            {
                $this->updatePriority($priorityToUpdate, $cloneScheduleOfQuantity->id);
            }

            $con->commit();

            return $cloneScheduleOfQuantity;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            /*
             * delete all items that belong to the trade
             */
            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".ScheduleOfQuantityItemTable::getInstance()->getTableName()." SET deleted_at = NOW()
                WHERE schedule_of_quantity_trade_id IN (SELECT t.id FROM ".ScheduleOfQuantityTradeTable::getInstance()->getTableName()." AS t
                WHERE t.schedule_of_quantity_id = ".$this->id.")");

            Doctrine_Query::create()
                ->delete('ScheduleOfQuantityTrade t')
                ->where('t.schedule_of_quantity_id = ?', $this->id)
                ->execute();

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
            throw $e;
        }

        return parent::delete($conn);
    }

    private function updatePriority($priority, $excludeId)
    {
        $records = DoctrineQuery::create()->select('q.id')
            ->from('ScheduleOfQuantity q')
            ->where('q.project_structure_id = ?', $this->project_structure_id)
            ->andWhere('q.priority >= ?', $priority)
            ->addOrderBy('q.priority ASC')
            ->execute();

        $priorityToUpdate = $priority + 1;

        foreach($records as $record)
        {
            if($record->id != $excludeId)
            {
                $record->priority = $priorityToUpdate;
                $record->save();
            }

            $priorityToUpdate++;
        }
    }
}
