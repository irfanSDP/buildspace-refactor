<?php

/**
 * BillBuildUpRateItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillBuildUpRateItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BillBuildUpRateItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillBuildUpRateItem');
    }

    public static function getFormulatedColumnByRelationIdAndColumnName($id, $columnName, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('BillBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?', $columnName)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->count() > 0 ? $query->fetchOne() : false;
    }

    public static function getByBillItemIdAndResourceItemId($billItemId, $resourceItemId, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('BillBuildUpRateItem i')
            ->where('i.bill_item_id = ?', $billItemId)
            ->andWhere('i.resource_item_library_id = ?', $resourceItemId)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function calculateTotalById($id)
    {
        $pdo   = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(b.final_value, 0) * COALESCE(b2.final_value, 0) as price
        FROM ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." b
        JOIN ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." b2
        ON (b2.relation_id = ".$id." AND b2.column_name = '".BillBuildUpRateItem::FORMULATED_COLUMN_RATE."' AND b2.deleted_at IS NULL)
        WHERE (b.relation_id = ".$id." AND b.column_name = '".BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY."' AND b.deleted_at IS NULL) LIMIT 1");

        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        $price  = $result ? $result['price'] : 0;

        $stmt = $pdo->prepare("SELECT MULTIPLY(COALESCE(c.final_value, 1)) AS value
        FROM ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." c
        WHERE c.relation_id = ".$id." AND c.column_name IN ('".BillBuildUpRateItem::FORMULATED_COLUMN_NUMBER."', '".BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT."')
        AND c.final_value IS NOT NULL AND c.final_value <> 0 AND c.deleted_at IS NULL LIMIT 1");

        $stmt->execute();

        $otherColumnValues = $stmt->fetch(PDO::FETCH_ASSOC);

        $total = $otherColumnValues ? $otherColumnValues['value'] * $price : $price;

        DoctrineQuery::create()
            ->update('BillBuildUpRateItem')
            ->set('total', '?', $total)
            ->where('id = ?', $id)
            ->andWhere('total <> ?', $total)
            ->execute();

        return $total;
    }

    public static function calculateLineTotalById($id)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT c.id, c.final_value
        FROM ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." c
        WHERE c.relation_id = ".$id." AND c.column_name = '".BillBuildUpRateItem::FORMULATED_COLUMN_WASTAGE."'
        AND c.deleted_at IS NULL LIMIT 1");

        $stmt->execute();

        $wastage = $stmt->fetch(PDO::FETCH_ASSOC);

        $wastagePercentage = 0;

        if(!empty($wastage))
        {
            $wastagePercentage = $wastage['final_value'] / 100;
        }

        $stmt = $pdo->prepare("UPDATE ".self::getInstance()->getTableName()." SET line_total = total + (total * ".$wastagePercentage.")
        WHERE id =".$id." AND deleted_at IS NULL RETURNING line_total");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public static function calculateTotalAndLineTotalByIdString($idString)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT c.relation_id, COALESCE(c.final_value, 0)
        FROM ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." c
        WHERE c.relation_id IN (".$idString.") AND (c.column_name = '".BillBuildUpRateItem::FORMULATED_COLUMN_RATE."' OR c.column_name = '".BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY."')
        AND c.deleted_at IS NULL GROUP BY c.relation_id, c.column_name, c.final_value");

        $stmt->execute();

        $rateQtyRecords = $stmt->fetchAll(PDO::FETCH_COLUMN | PDO::FETCH_GROUP);

        $itemTotals = array();

        foreach($rateQtyRecords as $id => $record)
        {
            if(count($record)!=2){
                $itemTotals[$id] = 0;
                continue;
            }

            $itemTotals[$id] = $record[0] * $record[1];
        }

        $stmt = $pdo->prepare("SELECT c.relation_id, COALESCE(MULTIPLY(c.final_value), 0) as total
        FROM ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." c
        WHERE c.relation_id IN (".$idString.") AND c.column_name <> '".BillBuildUpRateItem::FORMULATED_COLUMN_RATE."' AND c.column_name <> '".BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY."'
        AND c.column_name <> '".BillBuildUpRateItem::FORMULATED_COLUMN_WASTAGE."' AND c.final_value <> 0 AND c.deleted_at IS NULL GROUP BY c.relation_id");

        $stmt->execute();

        $otherColumns = $stmt->fetchAll(PDO::FETCH_COLUMN | PDO::FETCH_GROUP);

        $stmt = $pdo->prepare("SELECT c.relation_id, COALESCE(c.final_value, 0)
        FROM ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." c
        WHERE c.column_name='".BillBuildUpRateItem::FORMULATED_COLUMN_WASTAGE."' AND c.final_value <> 0 AND c.relation_id IN (".$idString.") AND c.deleted_at IS NULL");

        $stmt->execute();

        $wastage = $stmt->fetchAll(PDO::FETCH_COLUMN | PDO::FETCH_GROUP);

        if(!empty($itemTotals))
        {
            $totalCaseStatement = '';
            $lineTotalCaseStatement = '';

            //Generate Case Statament
            foreach($itemTotals as $itemId => $totalAmount)
            {
                if(array_key_exists($itemId, $otherColumns))
                {
                    $totalAmount *= $otherColumns[$itemId][0];
                }

                $totalCaseStatement.=" WHEN ".$itemId." THEN (".$totalAmount.")";

                $lineTotal = $totalAmount;

                if(array_key_exists($itemId, $wastage))
                {
                    $lineTotal = $totalAmount + ($totalAmount * ($wastage[$itemId][0] / 100) );
                }

                $lineTotalCaseStatement.=" WHEN ".$itemId." THEN (".$lineTotal.")";
            }

            $stmt = $pdo->prepare("UPDATE ".BillBuildUpRateItemTable::getInstance()->getTableName()."
                    SET total = (CASE id".$totalCaseStatement." END),
                    line_total = (CASE id".$lineTotalCaseStatement." END)
                    WHERE id IN (".$idString.") AND deleted_at IS NULL;");

            $stmt->execute();
        }
    }

    /*
     *
     * To calculate total cost/quantity by build up rate item id
     */
    public static function calculateTotalForResourceAnalysis($id, $resourceId, $projectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();
        $totalQuantity = 0;
        $totalCost = 0;
        $buildUpRateSummaries = array();

        $stmt = $pdo->prepare("SELECT bur.bill_item_id, burfc.relation_id, burfc.final_value, burfc.column_name FROM
        ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." AS burfc JOIN
        ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur ON burfc.relation_id = bur.id JOIN
        ".BillBuildUpRateResourceTable::getInstance()->getTableName()." AS r ON bur.build_up_rate_resource_id = r.id JOIN
        ".BillItemTable::getInstance()->getTableName()." AS i ON r.bill_item_id = i.id JOIN
        ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id JOIN
        ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        WHERE s.root_id = ".$projectId." AND r.resource_library_id = ".$resourceId."
        AND burfc.column_name <> '".BillBuildUpRateItem::FORMULATED_COLUMN_WASTAGE."'
        AND burfc.final_value IS NOT NULL AND burfc.final_value <> 0
        AND bur.id = ".$id." AND bur.build_up_rate_resource_trade_id IS NULL AND bur.resource_item_library_id IS NULL
        AND burfc.deleted_at IS NULL AND bur.deleted_at IS NULL AND r.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
        AND i.deleted_at IS NULL AND e.deleted_at IS NULL AND s.deleted_at IS NULL ORDER BY burfc.relation_id");

        $stmt->execute();

        $billBuildUpRateFormulatedColumns = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $stmt->execute();
        $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        if(count($billItemIds) > 0)
        {
            $stmt = $pdo->prepare("SELECT DISTINCT sum.bill_item_id, sum.conversion_factor_operator, sum.conversion_factor_amount FROM
            ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." AS sum
            WHERE sum.bill_item_id IN (".implode(',', $billItemIds).")
            AND sum.apply_conversion_factor IS TRUE
            AND sum.deleted_at IS NULL ORDER BY sum.bill_item_id");

            $stmt->execute();

            $buildUpRateSummaryRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach($buildUpRateSummaryRecords as $buildUpRateSummary)
            {
                $buildUpRateSummaries[$buildUpRateSummary['bill_item_id']] = array(
                    'conversion_factor_operator' => $buildUpRateSummary['conversion_factor_operator'],
                    'conversion_factor_amount' => $buildUpRateSummary['conversion_factor_amount']
                );
            }

            $stmt = $pdo->prepare("SELECT DISTINCT i.id, i.grand_total_quantity FROM
            ".BillItemTable::getInstance()->getTableName()." AS i
            WHERE i.id IN (".implode(',', $billItemIds).")
            AND i.grand_total_quantity IS NOT NULL AND i.grand_total_quantity <> 0
            AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
            GROUP BY i.id, i.grand_total_quantity ORDER BY i.id");

            $stmt->execute();

            $billItems = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);

            $billBuildUpRateItems = array();

            foreach($billBuildUpRateFormulatedColumns as $billBuildUpRateFormulatedColumn)
            {
                $billBuildUpRateItems[$billBuildUpRateFormulatedColumn['relation_id']]['bill_item_id'] = $billBuildUpRateFormulatedColumn['bill_item_id'];
                $billBuildUpRateItems[$billBuildUpRateFormulatedColumn['relation_id']][$billBuildUpRateFormulatedColumn['column_name']] = $billBuildUpRateFormulatedColumn['final_value'];
            }

            unset($billBuildUpRateFormulatedColumns);

            foreach($billBuildUpRateItems as $billBuildUpRateItem)
            {
                if(array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY, $billBuildUpRateItem))
                {
                    $quantity = $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY];
                    $number = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_NUMBER, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_NUMBER] : 1;
                    $constant = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT] : 1;
                    $rate = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_RATE, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_RATE] : 0;

                    $billItemQuantity = array_key_exists($billBuildUpRateItem['bill_item_id'], $billItems) ? $billItems[$billBuildUpRateItem['bill_item_id']][0] : 0;

                    if(array_key_exists($billBuildUpRateItem['bill_item_id'], $buildUpRateSummaries))
                    {
                        switch($buildUpRateSummaries[$billBuildUpRateItem['bill_item_id']]['conversion_factor_operator'])
                        {
                            case '/':
                                $rate = $number * $constant * $quantity / $buildUpRateSummaries[$billBuildUpRateItem['bill_item_id']]['conversion_factor_amount'] * $rate;
                                $quantityOnly = $number * $constant * $quantity / $buildUpRateSummaries[$billBuildUpRateItem['bill_item_id']]['conversion_factor_amount'] * $billItemQuantity;
                                break;
                            case '*':
                                $rate = $number * $constant * $quantity * $buildUpRateSummaries[$billBuildUpRateItem['bill_item_id']]['conversion_factor_amount'] * $rate;
                                $quantityOnly = $number * $constant * $quantity * $buildUpRateSummaries[$billBuildUpRateItem['bill_item_id']]['conversion_factor_amount'] * $billItemQuantity;
                                break;
                            default:
                                throw new Exception('Invalid conversion factor operator');
                        }
                    }
                    else
                    {
                        $rate = $number * $constant * $quantity * $rate;
                        $quantityOnly = $number * $constant * $quantity * $billItemQuantity;
                    }

                    $cost = number_format($rate, 2, '.', '') * $billItemQuantity;

                    $totalQuantity += $quantityOnly;
                    $totalCost += $cost;
                }
            }
        }

        unset($billBuildUpRateItems, $buildUpRateSummaries);

        return array(
            $totalQuantity,
            $totalCost
        );
    }

    public static function calculateRateAfterMarkupWithoutRounding($rate, $itemMarkupPercentage, Array $markupSettingsInfo)
    {
        $rate                 = (float) $rate;
        $itemMarkupPercentage = (float) $itemMarkupPercentage;

        if($markupSettingsInfo['item_markup_enabled'] or $markupSettingsInfo['element_markup_enabled'] or $markupSettingsInfo['bill_markup_enabled'])
        {
            if ( $markupSettingsInfo['item_markup_enabled'] and $itemMarkupPercentage != 0 )
            {
                $rate += $rate * ( $itemMarkupPercentage / 100 );
            }

            if ( $markupSettingsInfo['element_markup_enabled'] and $markupSettingsInfo['element_markup_percentage'] != 0 )
            {
                $elementMarkupPercentage = (float) $markupSettingsInfo['element_markup_percentage'];
                $rate += $rate * ( $elementMarkupPercentage / 100 );
            }

            if ( $markupSettingsInfo['bill_markup_enabled'] and $markupSettingsInfo['bill_markup_percentage'] != 0 )
            {
                $billMarkupPercentage = (float) $markupSettingsInfo['bill_markup_percentage'];
                $rate += $rate * ( $billMarkupPercentage / 100 );
            }
        }

        return number_format($rate, 2, '.', '');
    }

    public static function calculateRateWithSummaryMarkupWithoutRounding(array $rate, array $wastage, array $buildUpRateSummaryInfo)
    {
        $rateValue    = $rate[0]['final_value'];
        $wastageValue = $wastage[0]['final_value'];

        $newRate = $rateValue + ($rateValue * ($wastageValue / 100));

        // get total rate after conversion
        if(isset($buildUpRateSummaryInfo['apply_conversion_factor']) AND $buildUpRateSummaryInfo['apply_conversion_factor'])
        {
            $conversionFactorAmount = $buildUpRateSummaryInfo['conversion_factor_amount'];
            $operator               = $buildUpRateSummaryInfo['conversion_factor_operator'];

            $evaluator = new EvalMath(true, true);
            $evaluator->suppress_errors = true;
            $evaluatedValue = $evaluator->evaluate($newRate.$operator.$conversionFactorAmount);

            $newRate = $evaluatedValue ? $evaluatedValue : 0;

            unset($evaluatedValue);
        }

        // apply markup
        if ( isset($buildUpRateSummaryInfo['markup']) AND $buildUpRateSummaryInfo['markup'] > 0 )
        {
            $newRate = $newRate + ($newRate * ( $buildUpRateSummaryInfo['markup'] / 100));
        }

        return $newRate;
    }
}