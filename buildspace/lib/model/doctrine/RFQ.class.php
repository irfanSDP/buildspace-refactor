<?php

/**
 * RFQ
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class RFQ extends BaseRFQ
{
    const TYPE_PROJECT        = 1;
    const TYPE_RESOURCE       = 2;
    const TYPE_PROJECT_TEXT   = 'Project';
    const TYPE_RESOURCE_TEXT  = 'Resource';

    const STATUS_PENDING      = 1;
    const STATUS_SENT         = 2;
    const STATUS_CLOSED       = 4;
    const STATUS_PENDING_TEXT = 'Pending';
    const STATUS_SENT_TEXT    = 'Sent';
    const STATUS_CLOSED_TEXT  = 'Closed';

    public function save(Doctrine_Connection $conn = null)
    {
        $isNew = $this->isNew();

        if ( $isNew )
        {
            $user = sfContext::getInstance()->getUser()->getGuardUser();

            $this->created_by = $user->id;
            $this->updated_by = $user->id;

            unset($user);
        }

        parent::save($conn);

        if ( $isNew AND $this->type == self::TYPE_PROJECT )
        {
            $rfqRecord                           = new RFQProject();
            $rfqRecord->request_for_quotation_id = $this->id;
            $rfqRecord->project_structure_id     = $this->project_structure_id;
            $rfqRecord->save();
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        // will soft delete assigned Project with associated current RFQ's ID (RFQProject)
        Doctrine_Query::create()
        ->update('RFQProject')
        ->set('deleted_at', '?', 'NOW()')
        ->where('request_for_quotation_id = ?', $this->id)
        ->execute();

        // will delete item(s) associated with current RFQ's ID (RFQItem)
        Doctrine_Query::create()
        ->delete('RFQItem')
        ->where('request_for_quotation_id = ?', $this->id)
        ->execute();

        // will delete supplier(s) associated with current RFQ's ID (RFQSupplier)
        Doctrine_Query::create()
        ->delete('RFQSupplier')
        ->where('request_for_quotation_id = ?', $this->id)
        ->execute();

        return parent::delete($conn);
    }

    public function copyResourceItems(Array $resourceItemIds)
    {
        $pdo      = $this->getTable()->getConnection()->getDbh();
        $userId   = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
        $rfqItems = array();

        if (count($resourceItemIds) == 0)
        {
            return $rfqItems;
        }

        $implodedResourceItemIds = implode(',', $resourceItemIds);

        // only select work item to be imported into build up
        $stmt = $pdo->prepare("SELECT i.id FROM ".ResourceItemTable::getInstance()->getTableName()." AS i
        WHERE i.id IN (".$implodedResourceItemIds.") AND i.type = ".ResourceItem::TYPE_WORK_ITEM." AND i.deleted_at IS NULL
        ORDER BY i.priority, i.lft, i.level ASC");

        $stmt->execute();
        $resourceItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($resourceItems) == 0 )
        {
            return $rfqItems;
        }

        $stmt = $pdo->prepare('INSERT INTO '.RFQItemTable::getInstance()->getTableName().' (request_for_quotation_id, resource_item_id, created_at, updated_at, created_by, updated_by) VALUES (:request_for_quotation_id, :resource_item_id, NOW(), NOW(), :createdBy, :updatedBy)');

        foreach ( $resourceItems as $resourceItem )
        {
            $stmt->bindValue(':request_for_quotation_id', $this->id);
            $stmt->bindValue(':resource_item_id', $resourceItem['id']);
            $stmt->bindValue(':createdBy', $userId);
            $stmt->bindValue(':updatedBy', $userId);
            $stmt->execute();

            $rfqItems[] = $resourceItem['id'];
        }

        return $rfqItems;
    }

    public function copyProjectResourceItems(Array $resourceItemLibraryIds, $resourceId, $projectId)
    {
        $totalCostAndQuantityByResourceItems = ResourceItemTable::calculateTotalForResourceAnalysis($resourceItemLibraryIds, $resourceId, $projectId);

        $pdo      = $this->getTable()->getConnection()->getDbh();
        $userId   = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
        $rfqItems = array();

        if ( count($totalCostAndQuantityByResourceItems) == 0 )
        {
            return $rfqItems;
        }

        $stmt = $pdo->prepare('INSERT INTO '.RFQItemTable::getInstance()->getTableName().' (request_for_quotation_id, resource_item_id, quantity, created_at, updated_at, created_by, updated_by) VALUES (:request_for_quotation_id, :resource_item_id, :quantity, NOW(), NOW(), :createdBy, :updatedBy)');

        foreach ( $totalCostAndQuantityByResourceItems as $resourceItemId => $resourceItem )
        {
            $stmt->bindValue(':request_for_quotation_id', $this->id);
            $stmt->bindValue(':resource_item_id', $resourceItemId);
            $stmt->bindValue(':quantity', $resourceItem['total_quantity']);
            $stmt->bindValue(':createdBy', $userId);
            $stmt->bindValue(':updatedBy', $userId);
            $stmt->execute();

            $rfqItems[] = $resourceItemId;
        }

        return $rfqItems;
    }
}