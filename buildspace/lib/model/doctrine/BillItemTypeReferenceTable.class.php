<?php

/**
 * BillItemTypeReferenceTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillItemTypeReferenceTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object BillItemTypeReferenceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillItemTypeReference');
    }

    public static function getFormulatedColumnByRelationIdAndColumnName($id, $columnName, $hydrate = null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('BillItemTypeReferenceFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?', $columnName)
            ->limit(1);

        if ( !is_null($hydrate) )
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getByItemIdAndColumnId($itemId, $columnSettingId, $hydrate = null)
    {
        $query = DoctrineQuery::create()->select('r.*')
            ->from('BillItemTypeReference r')
            ->where('r.bill_item_id = ?', $itemId)
            ->andWhere('r.bill_column_setting_id = ?', $columnSettingId)
            ->andWhere('r.deleted_at IS NULL')
            ->limit(1);

        if ( !is_null($hydrate) )
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function clearAllRemeasurementQuantityByColumnSettingId(BillColumnSetting $billColumnSetting)
    {
        $billItemTypeReferenceEdgeTable             = Doctrine_Core::getTable('BillItemTypeReferenceEdge');
        $billItemTypeReferenceFormulatedColumnTable = Doctrine_Core::getTable('BillItemTypeReferenceFormulatedColumn');
        $billItemTypeReferenceTable                 = Doctrine_Core::getTable('BillItemTypeReference');

        //delete node from edges
        self::getInstance()->getConnection()->fetchAssoc("UPDATE " . $billItemTypeReferenceEdgeTable->getTableName() . " SET deleted_at = NOW()
            WHERE node_from IN (SELECT f.id FROM " . $billItemTypeReferenceFormulatedColumnTable->getTableName() . " AS f WHERE f.relation_id IN (
            SELECT r.id FROM " . $billItemTypeReferenceTable->getTableName() . " AS r WHERE r.bill_column_setting_id = " . $billColumnSetting->id . "
            AND r.deleted_at IS NULL) AND f.column_name = '" . BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT . "'
            AND f.deleted_at IS NULL) AND deleted_at IS NULL");

        //delete node to edges
        self::getInstance()->getConnection()->fetchAssoc("UPDATE " . $billItemTypeReferenceEdgeTable->getTableName() . " SET deleted_at = NOW()
            WHERE node_to IN (SELECT f.id FROM " . $billItemTypeReferenceFormulatedColumnTable->getTableName() . " AS f WHERE f.relation_id IN (
            SELECT r.id FROM " . $billItemTypeReferenceTable->getTableName() . " AS r WHERE r.bill_column_setting_id = " . $billColumnSetting->id . "
            AND r.deleted_at IS NULL) AND f.column_name = '" . BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT . "'
            AND f.deleted_at IS NULL) AND deleted_at IS NULL");

        self::getInstance()->getConnection()->fetchAssoc("UPDATE " . $billItemTypeReferenceFormulatedColumnTable->getTableName() . " SET deleted_at = NOW()
            WHERE relation_id IN (SELECT i.id FROM " . $billItemTypeReferenceTable->getTableName() . " AS i
            WHERE i.bill_column_setting_id = " . $billColumnSetting->id . " AND i.deleted_at IS NULL)
            AND column_name = '" . BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT . "' AND deleted_at IS NULL");

        $billBuildUpQuantityItemTable             = Doctrine_Core::getTable('BillBuildUpQuantityItem');
        $billBuildUpQuantityFormulatedColumnTable = Doctrine_Core::getTable('BillBuildUpQuantityFormulatedColumn');
        $billBuildUpQuantityEdgeTable             = Doctrine_Core::getTable('BillBuildUpQuantityEdge');

        //delete node from edges
        self::getInstance()->getConnection()->fetchAssoc("UPDATE " . $billBuildUpQuantityEdgeTable->getTableName() . " SET deleted_at = NOW()
            WHERE node_from IN (SELECT f.id FROM " . $billBuildUpQuantityFormulatedColumnTable->getTableName() . " AS f WHERE f.relation_id IN (
            SELECT r.id FROM " . $billBuildUpQuantityItemTable->getTableName() . " AS r WHERE r.bill_column_setting_id = " . $billColumnSetting->id . "
            AND type = " . BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT . " AND r.deleted_at IS NULL)
            AND f.deleted_at IS NULL) AND deleted_at IS NULL");

        //delete node to edges
        self::getInstance()->getConnection()->fetchAssoc("UPDATE " . $billBuildUpQuantityEdgeTable->getTableName() . " SET deleted_at = NOW()
            WHERE node_to IN (SELECT f.id FROM " . $billBuildUpQuantityFormulatedColumnTable->getTableName() . " AS f WHERE f.relation_id IN (
            SELECT r.id FROM " . $billBuildUpQuantityItemTable->getTableName() . " AS r WHERE r.bill_column_setting_id = " . $billColumnSetting->id . "
            AND type = " . BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT . " AND r.deleted_at IS NULL) AND f.deleted_at IS NULL)
            AND deleted_at IS NULL");

        self::getInstance()->getConnection()->fetchAssoc("UPDATE " . $billBuildUpQuantityFormulatedColumnTable->getTableName() . " SET deleted_at = NOW()
            WHERE relation_id IN (SELECT i.id FROM " . $billBuildUpQuantityItemTable->getTableName() . " AS i WHERE
            i.bill_column_setting_id = " . $billColumnSetting->id . " AND type = " . BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT . "
            AND i.deleted_at IS NULL) AND deleted_at IS NULL");

        Doctrine_Query::create()
            ->delete('BillBuildUpQuantityItem i')
            ->where('i.bill_column_setting_id = ?', $billColumnSetting->id)
            ->andWhere('i.type = ?', BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT)
            ->execute();

        Doctrine_Query::create()
            ->delete('BillBuildUpQuantitySummary s')
            ->where('s.bill_column_setting_id = ?', $billColumnSetting->id)
            ->andWhere('s.type = ?', BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT)
            ->execute();

        Doctrine_Query::create()
            ->update('BillItemTypeReference')
            ->set('quantity_per_unit_difference', 'NULL')
            ->where('bill_column_setting_id = ' . $billColumnSetting->id)
            ->execute();
    }

    public static function updateTypeTotalByBillColumnSettingAndItemId($billItemId, $billColumnSetting, $markupSettingsInfo)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $qtyColumnName = ( $billColumnSetting['use_original_quantity'] ) ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

        $sqlWithoutMarkup = "SELECT COALESCE((ROUND(COALESCE(ifc.final_value,0), 2)),0) * COALESCE(type_fc.final_value, 0)
            FROM " . BillItemTable::getInstance()->getTableName() . " as item
            JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " as ifc ON ifc.relation_id = item.id
            JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " as type ON type.bill_item_id = item.id AND type.bill_column_setting_id = " . $billColumnSetting['id'] . " AND type.deleted_at IS NULL
            JOIN " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " as type_fc ON type_fc.relation_id = type.id AND type_fc.column_name = '" . $qtyColumnName . "' AND type_fc.deleted_at IS NULL
            WHERE ifc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND item.id = " . $billItemId . "
            AND item.deleted_at IS NULL AND item.project_revision_deleted_at IS NULL AND ifc.deleted_at IS NULL LIMIT 1";

        if ( $markupSettingsInfo && ( $markupSettingsInfo['element_markup_enabled'] || $markupSettingsInfo['item_markup_enabled'] ) )
        {
            $statementWithMarkup = "ROUND((ifc.final_value), 2)";

            if ( $markupSettingsInfo['item_markup_enabled'] )
            {
                $statementWithMarkup .= " + ((" . $statementWithMarkup . " * COALESCE(markup.final_value,0)) / 100) ";
            }

            if ( $markupSettingsInfo['element_markup_enabled'] )
            {
                $elementMarkupPercentage = $markupSettingsInfo['element_markup_percentage'];
                $statementWithMarkup     = "(" . $statementWithMarkup . ") + (((" . $statementWithMarkup . ") * COALESCE((" . $elementMarkupPercentage . "), 0)) / 100)";
            }

            if ( ( count($markupSettingsInfo) > 0 ) )
            {
                switch ($markupSettingsInfo['rounding_type'])
                {
                    case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                        $statementWithMarkup = 'CEIL(' . $statementWithMarkup . ')';
                        break;
                    case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                        $statementWithMarkup = 'FLOOR(' . $statementWithMarkup . ')';
                        break;
                    case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                        $statementWithMarkup = 'ROUND(' . $statementWithMarkup . ')';
                        break;
                    case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                        $statementWithMarkup = 'ROUND((' . $statementWithMarkup . ') * 10) / 10';
                        break;
                    default:
                        $statementWithMarkup = 'ROUND(' . $statementWithMarkup . ', 2)';
                }
            }
            else
            {
                $statementWithMarkup = 'ROUND(' . $statementWithMarkup . ', 2)';
            }

            $sqlWithMarkup = "SELECT ROUND(COALESCE((" . $statementWithMarkup . "),0),2) * COALESCE(type_fc.final_value, 0)
                FROM " . BillItemTable::getInstance()->getTableName() . " as item
                JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " as ifc ON ifc.relation_id = item.id
                JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " as markup ON markup.relation_id = item.id
                AND markup.column_name = '" . BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE . "' AND markup.deleted_at IS NULL
                JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " as type ON type.bill_item_id = item.id AND type.bill_column_setting_id = " . $billColumnSetting['id'] . " AND type.deleted_at IS NULL
                JOIN " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " as type_fc ON type_fc.relation_id = type.id AND type_fc.column_name = '" . $qtyColumnName . "' AND type_fc.deleted_at IS NULL
                WHERE ifc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND item.id = " . $billItemId . " AND item.deleted_at IS NULL
                AND type.bill_column_setting_id = " . $billColumnSetting['id'] . " AND item.project_revision_deleted_at IS NULL AND ifc.deleted_at IS NULL LIMIT 1";
        }
        else
        {
            $sqlWithMarkup = $sqlWithoutMarkup;
        }

        //Update Grand Total
        $stmt = $pdo->prepare("UPDATE " . self::getInstance()->getTableName() . " SET
            grand_total = (ROUND((" . $sqlWithoutMarkup . "),2) * " . $billColumnSetting['quantity'] . "),
            grand_total_after_markup = (ROUND((" . $sqlWithMarkup . "),2) * " . $billColumnSetting['quantity'] . ")
            WHERE bill_column_setting_id = " . $billColumnSetting['id'] . " AND bill_item_id = " . $billItemId . "
            AND deleted_at IS NULL");
        
        $stmt->execute();
    }

    public static function updateQuantityByBillColumnSetting(BillColumnSetting $billColumnSetting, BillMarkupSetting $billMarkupSetting)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $columnName = ( $billColumnSetting->use_original_quantity ) ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

        /* Get BillTypeReferences and Rate */
        $stmt = $pdo->prepare("SELECT type.bill_item_id, item.element_id, COALESCE(type_fc.final_value, 0) as quantity,
            ROUND(COALESCE(ifc.final_value, 0), 2) as rate,
            COALESCE(markup.final_value, 0) as " . BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE . "
            FROM  " . BillItemTypeReferenceTable::getInstance()->getTableName() . " AS type
            LEFT JOIN " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " AS type_fc
            ON type.id = type_fc.relation_id AND type_fc.column_name = '" . $columnName . "' AND type_fc.deleted_at IS NULL
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " AS item
            ON item.id = type.bill_item_id AND item.deleted_at IS NULL
            LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS ifc
            ON ifc.relation_id = type.bill_item_id AND ifc.deleted_at IS NULL AND ifc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "'
            LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " markup
            ON markup.relation_id = item.id AND markup.deleted_at IS NULL AND markup.column_name = '" . BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE . "'
            WHERE type.bill_column_setting_id = " . $billColumnSetting->id . " AND type.deleted_at IS NULL");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        //Get Other Type Reference, so we can calculate Item Grand Total While updating current type total
        $stmt = $pdo->prepare("SELECT item.id, type.bill_item_id, type.grand_total, type.grand_total_after_markup, type.total_quantity
            FROM " . BillItemTypeReferenceTable::getInstance()->getTableName() . " AS type
            LEFT JOIN " . BillItemTable::getInstance()->getTableName() . " AS item ON item.id = type.bill_item_id AND item.deleted_at IS NULL
            LEFT JOIN " . BillElementTable::getInstance()->getTableName() . " e ON item.element_id = e.id
            WHERE type.bill_column_setting_id <> " . $billColumnSetting->id . "
            AND e.project_structure_id = " . $billColumnSetting->project_structure_id . "
            AND type.deleted_at IS NULL");

        $stmt->execute();

        $otherColumnsArray = $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP);

        //Get Element Markup If Enabled
        if ( $billMarkupSetting['element_markup_enabled'] )
        {
            $stmt = $pdo->prepare("SELECT e.id, COALESCE(c.final_value, 0) as value FROM " . BillElementFormulatedColumnTable::getInstance()->getTableName() . " c
                JOIN " . BillElementTable::getInstance()->getTableName() . " e ON c.relation_id = e.id
                WHERE e.project_structure_id = " . $billColumnSetting->project_structure_id . "
                AND c.column_name = '" . BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE . "'
                AND c.deleted_at IS NULL AND e.deleted_at IS NULL");

            $stmt->execute();

            $elementMarkupResults = $stmt->fetchAll(PDO::FETCH_COLUMN | PDO::FETCH_GROUP);
        }

        $originalCaseStatement              = '';
        $originalGrandTotalCaseStatement    = '';
        $afterMarkupCaseStatement           = '';
        $afterMarkupGrandTotalCaseStatement = '';
        $totalQuantityCaseStatement         = '';
        $grandTotalQuantityCaseStatement    = '';
        $billItemIds                        = array();

        foreach ( $records as $record )
        {
            $grandTotalQuantity = $totalQuantity = $record['quantity'] * $billColumnSetting->quantity;

            $totalPerUnit = $record['rate'] * $record['quantity'];

            $originalGrandTotal = $originalTotal = number_format($totalPerUnit, 2, '.', '') * $billColumnSetting->quantity;

            $grandTotalAfterMarkup = 0;

            $otherColumns = array_key_exists($record['bill_item_id'], $otherColumnsArray) ? $otherColumnsArray[$record['bill_item_id']] : array();

            foreach ( $otherColumns as $columns )
            {
                //If Not Current Bill Column Setting
                $grandTotalQuantity += $columns['total_quantity'];
                $originalGrandTotal += $columns['grand_total'];
                $grandTotalAfterMarkup += $columns['grand_total_after_markup'];
            }

            if ( $billMarkupSetting && ( $billMarkupSetting['element_markup_enabled'] || $billMarkupSetting['item_markup_enabled'] ) )
            {
                $rateAfterMarkup = $record['rate'];

                if ( $billMarkupSetting['item_markup_enabled'] )
                {
                    $rateAfterMarkup = $rateAfterMarkup + number_format(( $rateAfterMarkup * $record[BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE] / 100 ), 2, '.', '');
                }

                if ( $billMarkupSetting['element_markup_enabled'] )
                {
                    $elementMarkupPercentage = array_key_exists($record['element_id'], $elementMarkupResults) ? $elementMarkupResults[$record['element_id']][0] : 0;
                    $rateAfterMarkup         = ( $elementMarkupPercentage > 0 ) ? $rateAfterMarkup + ( $rateAfterMarkup * $elementMarkupPercentage / 100 ) : $rateAfterMarkup;
                }

                $rateAfterMarkup = number_format($rateAfterMarkup, 5, '.', "");

                switch ($billMarkupSetting['rounding_type'])
                {
                    case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                        $statementWithMarkup = 'CEIL(' . $rateAfterMarkup . ')';
                        break;
                    case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                        $statementWithMarkup = 'FLOOR(' . $rateAfterMarkup . ')';
                        break;
                    case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                        $statementWithMarkup = 'ROUND(' . $rateAfterMarkup . ')';
                        break;
                    case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                        $statementWithMarkup = 'ROUND((' . $rateAfterMarkup . ') * 10) / 10';
                        break;
                    default:
                        $statementWithMarkup = 'ROUND(' . $rateAfterMarkup . ', 2)';
                }

                $statementWithMarkup = $billColumnSetting->quantity . " * (ROUND(" . $record['quantity'] . " * (" . $statementWithMarkup . "),2))";

                $grandTotalStatementWithMarkup = $grandTotalAfterMarkup . " + (" . $statementWithMarkup . ")";
            }
            else
            {
                $statementWithMarkup           = $originalTotal;
                $grandTotalStatementWithMarkup = $originalGrandTotal;
            }

            $originalCaseStatement .= " WHEN " . $record['bill_item_id'] . " THEN " . $originalTotal;
            $originalGrandTotalCaseStatement .= " WHEN " . $record['bill_item_id'] . " THEN " . $originalGrandTotal;
            $totalQuantityCaseStatement .= " WHEN " . $record['bill_item_id'] . " THEN " . $totalQuantity;
            $grandTotalQuantityCaseStatement .= " WHEN " . $record['bill_item_id'] . " THEN " . $grandTotalQuantity;
            $afterMarkupCaseStatement .= " WHEN " . $record['bill_item_id'] . " THEN (" . $statementWithMarkup . ")";
            $afterMarkupGrandTotalCaseStatement .= " WHEN " . $record['bill_item_id'] . " THEN (" . $grandTotalStatementWithMarkup . ")";

            array_push($billItemIds, $record['bill_item_id']);
        }

        if ( empty( $records ) )
        {
            return;
        }

        $con = self::getInstance()->getConnection();

        //Update Per Total Quantity
        $con->execute("UPDATE " . BillItemTypeReferenceTable::getInstance()->getTableName() . "
        SET total_quantity = (CASE bill_item_id" . $totalQuantityCaseStatement . " END),
        grand_total_after_markup = (CASE bill_item_id" . $afterMarkupCaseStatement . " END),
        grand_total = (CASE bill_item_id" . $originalCaseStatement . " END)
        WHERE bill_item_id IN (" . implode(',', $billItemIds) . ")
        AND bill_column_setting_id = " . $billColumnSetting->id . "
        AND deleted_at IS NULL AND include IS TRUE");

        $con->execute("UPDATE " . BillItemTable::getInstance()->getTableName() . " AS item
        SET grand_total_quantity = (CASE id" . $grandTotalQuantityCaseStatement . " END),
        grand_total = (CASE id" . $originalGrandTotalCaseStatement . " END),
        grand_total_after_markup = (CASE id" . $afterMarkupGrandTotalCaseStatement . " END)
        WHERE item.id IN (" . implode(',', $billItemIds) . ")");
    }

    public static function cloneItemLumpSumRecords($billSettingObject)
    {
        $data = array();

        // get item type reference record for existing item-type lump sum and lump sum exclude
        $lumpSumItems = Doctrine_Query::create()
            ->select('be.id, bi.id, bi.grand_total, bi.grand_total_after_markup')
            ->from('BillItem bi')
            ->leftJoin('bi.Element be')
            ->where('be.project_structure_id = ?', $billSettingObject->project_structure_id)
            ->andWhere('bi.type = ? OR bi.type = ?', array( BillItem::TYPE_ITEM_LUMP_SUM, BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE ))
            ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        foreach ( $lumpSumItems as $lumpSumItem )
        {
            $newLumpSumItem                           = new BillItemTypeReference();
            $newLumpSumItem->bill_item_id             = $lumpSumItem['id'];
            $newLumpSumItem->bill_column_setting_id   = $billSettingObject->id;
            $newLumpSumItem->total_quantity           = 1;
            $newLumpSumItem->grand_total              = $lumpSumItem['grand_total'];
            $newLumpSumItem->grand_total_after_markup = $lumpSumItem['grand_total_after_markup'];
            $newLumpSumItem->save();
            $newLumpSumItem->refresh();

            $newLumpSumFormulatedColumn              = new BillItemTypeReferenceFormulatedColumn();
            $newLumpSumFormulatedColumn->relation_id = $newLumpSumItem->id;
            $newLumpSumFormulatedColumn->column_name = BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT;
            $newLumpSumFormulatedColumn->value       = 1;
            $newLumpSumFormulatedColumn->final_value = 1;
            $newLumpSumFormulatedColumn->save();

            $data[$lumpSumItem['Element']['id']][] = $lumpSumItem['id'];
        }

        foreach ( $data as $billElementId => $billItemIds )
        {
            BillItemTable::updateBulkBillItemTotalColumns($billItemIds, $billElementId);
        }
    }

    public static function cloneItemLumpSumPercentRecords($billSettingObject)
    {
        $data = array();

        // get item type reference record for existing item-type lump sum % to be clone
        $lumpSumPercentItems = Doctrine_Query::create()
            ->select('be.id, bi.id, bilsp.id, bilsp.bill_item_id, bilsp.amount')
            ->from('BillItemLumpSumPercentage bilsp')
            ->leftJoin('bilsp.BillItem bi')
            ->leftJoin('bi.Element be')
            ->where('be.project_structure_id = ?', $billSettingObject->project_structure_id)
            ->andWhere('bi.type = ?', BillItem::TYPE_ITEM_LUMP_SUM_PERCENT)
            ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        foreach ( $lumpSumPercentItems as $lumpSumPercentItem )
        {
            $newLumpSumPercentItem                           = new BillItemTypeReference();
            $newLumpSumPercentItem->bill_item_id             = $lumpSumPercentItem['bill_item_id'];
            $newLumpSumPercentItem->bill_column_setting_id   = $billSettingObject->id;
            $newLumpSumPercentItem->total_quantity           = 1;
            $newLumpSumPercentItem->grand_total              = $lumpSumPercentItem['amount'];
            $newLumpSumPercentItem->grand_total_after_markup = $lumpSumPercentItem['amount'];
            $newLumpSumPercentItem->save();
            $newLumpSumPercentItem->refresh();

            $newLumpSumPercentFormulatedColumn              = new BillItemTypeReferenceFormulatedColumn();
            $newLumpSumPercentFormulatedColumn->relation_id = $newLumpSumPercentItem->id;
            $newLumpSumPercentFormulatedColumn->column_name = BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT;
            $newLumpSumPercentFormulatedColumn->value       = 1;
            $newLumpSumPercentFormulatedColumn->final_value = 1;
            $newLumpSumPercentFormulatedColumn->save();

            $data[$lumpSumPercentItem['BillItem']['Element']['id']][] = $lumpSumPercentItem['bill_item_id'];
        }

        foreach ( $data as $billElementId => $billItemIds )
        {
            BillItemTable::updateBulkBillItemTotalColumns($billItemIds, $billElementId);
        }
    }

    public static function getQtyByBillColumnSettingsIdAndElementIds(array $billColumnSettings, array $elements)
    {
        if( empty( $elements ) )
        {
            return array();
        }

        $data       = array();
        $elementIds = array();

        foreach ( $elements as $element )
        {
            $elementIds[] = $element['id'];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        foreach ( $billColumnSettings as $billColumnSetting )
        {
            $quantityFieldName = $billColumnSetting['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

            $stmt = $pdo->prepare('SELECT be.id as element_id, bitr.bill_item_id, bitrfc.final_value
            FROM ' . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . ' bitrfc
            JOIN ' . BillItemTypeReferenceTable::getInstance()->getTableName() . ' bitr ON (bitrfc.relation_id = bitr.id)
            JOIN ' . BillItemTable::getInstance()->getTableName() . ' bi ON (bi.id = bitr.bill_item_id
            AND bi.project_revision_deleted_at IS NULL AND bi.deleted_at IS NULL)
            JOIN ' . BillElementTable::getInstance()->getTableName() . ' be ON (be.id = bi.element_id AND be.deleted_at IS NULL)
            WHERE be.id IN (' . implode(',', $elementIds) . ') AND bitr.bill_column_setting_id = ' . $billColumnSetting['id'] . '
            AND bitrfc.column_name = \'' . $quantityFieldName . '\'
            AND bitr.deleted_at IS NULL AND bitrfc.deleted_at IS NULL');

            $stmt->execute();

            $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach ( $records as $record )
            {
                $data[$billColumnSetting['id']][$record['element_id']][$record['bill_item_id']] = $record['final_value'];
            }
        }

        return $data;
    }

}