<?php

/**
 * CostDataItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class CostDataItem extends BaseCostDataItem
{
    CONST COLUMN_APPROVED_COST        = 'approved_cost';
    CONST COLUMN_AWARDED_COST         = 'awarded_cost';
    CONST COLUMN_VARIATION_ORDER_COST = 'variation_order_cost';

    public function save(Doctrine_Connection $conn = null)
    {
        $awardedCostUpdated        = $this->awardedCostUpdated();
        $approvedCostUpdated       = $this->approvedCostUpdated();
        $variationOrderCostUpdated = $this->variationOrderCostUpdated();

        parent::save($conn);

        $updatedFields = array();

        if( $approvedCostUpdated ) $updatedFields[] = self::COLUMN_APPROVED_COST;
        if( $awardedCostUpdated ) $updatedFields[] = self::COLUMN_AWARDED_COST;
        if( $variationOrderCostUpdated ) $updatedFields[] = self::COLUMN_VARIATION_ORDER_COST;

        $this->updateRelativesCost($updatedFields);

        if( $awardedCostUpdated ) $this->flushLinks([ $this->id ]);
        if( $variationOrderCostUpdated ) $this->flushVariationOrderItemLinks([ $this->id ]);
    }

    protected function awardedCostUpdated()
    {
        if( $this->isNew() && empty( $this->awarded_cost ) ) return false;

        return key_exists(self::COLUMN_AWARDED_COST, $this->getModified());
    }

    protected function approvedCostUpdated()
    {
        if( $this->isNew() && empty( $this->approved_cost ) ) return false;

        return key_exists(self::COLUMN_APPROVED_COST, $this->getModified());
    }

    protected function variationOrderCostUpdated()
    {
        if( $this->isNew() && empty( $this->variation_order_cost ) ) return false;

        return key_exists(self::COLUMN_VARIATION_ORDER_COST, $this->getModified());
    }

    public function updateRelativesCost(array $fields)
    {
        if( $this->MasterCostDataItem->Parent->exists() )
        {
            $this->recalculateParentValues($fields);
        }
    }

    protected function recalculateParentValues(array $fields)
    {
        $newParentSum = CostDataItemTable::getItemSum($this->CostData, MasterCostDataItemTable::getChildrenIds(array($this->MasterCostDataItem->Parent->id)));

        $parentItem = CostDataItemTable::getItem($this->CostData, $this->MasterCostDataItem->Parent);

        if(in_array(self::COLUMN_APPROVED_COST, $fields)) $parentItem->approved_cost = $newParentSum['approved_sum'];
        if(in_array(self::COLUMN_AWARDED_COST, $fields)) $parentItem->awarded_cost = $newParentSum['awarded_sum'];
        if(in_array(self::COLUMN_VARIATION_ORDER_COST, $fields)) $parentItem->variation_order_cost = $newParentSum['variation_order_sum'];

        $parentItem->save();
    }

    protected function flushLinks($itemIds)
    {
        if(empty($itemIds)) return;

        $implodedItemIds = implode(',', $itemIds);

        Doctrine_Manager::getInstance()->getCurrentConnection()
            ->fetchAssoc("UPDATE ".CostDataItemTable::getInstance()->getTableName()." SET conversion_factor = 1 WHERE id in ({$implodedItemIds}) AND deleted_at IS NULL");

        Doctrine_Manager::getInstance()->getCurrentConnection()
            ->fetchAssoc("DELETE FROM ".BillItemCostDataItemTable::getInstance()->getTableName()." WHERE cost_data_item_id in ({$implodedItemIds})");
    }

    protected function flushVariationOrderItemLinks($itemIds)
    {
        if(empty($itemIds)) return;

        $implodedItemIds = implode(',', $itemIds);

        Doctrine_Manager::getInstance()->getCurrentConnection()
            ->fetchAssoc("DELETE FROM ".VariationOrderItemCostDataItemTable::getInstance()->getTableName()." WHERE cost_data_item_id in ({$implodedItemIds})");
    }

    public function flushDescendantValues($field)
    {
        $descendantIds = MasterCostDataItemTable::getDescendantIds([$this->MasterCostDataItem->id]);

        if(empty($descendantIds)) return;

        $implodedDescendantId = implode(',', $descendantIds);

        $pdo = $this->getTable()->getConnection()->getDbh();

        $statement = "SELECT i.id FROM ".CostDataItemTable::getInstance()->getTableName()." i
        WHERE i.master_cost_data_item_id in ({$implodedDescendantId})
        AND i.cost_data_id = :costDataId";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array('costDataId' => $this->cost_data_id));

        $itemIds = $stmt->fetchAll(PDO::FETCH_COLUMN,0);

        if( count($itemIds) > 0 )
        {
            $implodedItemIds = implode(',', $itemIds);

            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".CostDataItemTable::getInstance()->getTableName()." SET {$field} = 0 WHERE id in ({$implodedItemIds}) AND deleted_at IS NULL");

            if($field == self::COLUMN_AWARDED_COST) $this->flushLinks($itemIds);
            if($field == self::COLUMN_VARIATION_ORDER_COST) $this->flushVariationOrderItemLinks($itemIds);
        }

    }
}
