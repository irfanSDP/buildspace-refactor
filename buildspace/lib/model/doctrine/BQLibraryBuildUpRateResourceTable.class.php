<?php

/**
 * BQLibraryBuildUpRateResourceTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BQLibraryBuildUpRateResourceTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BQLibraryBuildUpRateResourceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BQLibraryBuildUpRateResource');
    }

    public static function isResourceFromLibraryExists($resourceLibraryId, $bqItemId)
    {
        $query = DoctrineQuery::create()->select('r.id')
            ->from('BQLibraryBuildUpRateResource r')
            ->where('r.bq_item_id = ?', $bqItemId)
            ->andWhere('r.resource_library_id = ?', $resourceLibraryId)
            ->andWhere('r.deleted_at IS NULL')
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

        return $query->count() > 0 ? true : false;
    }

    public static function getByResourceLibraryIdAndBQItemId($resourceLibraryId, $bqItemId, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('r.*')
            ->from('BQLibraryBuildUpRateResource r')
            ->where('r.bq_item_id = ?', $bqItemId)
            ->andWhere('r.resource_library_id = ?', $resourceLibraryId)
            ->andWhere('r.deleted_at IS NULL')
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getResourceByItemIds(array $itemIds)
    {
        $data = array();

        $resourceTrades = DoctrineQuery::create()
        ->select('r.id, r.bq_item_id, r.name, r.resource_library_id')
        ->from('BQLibraryBuildUpRateResource r')
        ->whereIn('r.bq_item_id', $itemIds)
        ->addOrderBy('r.id ASC')
        ->fetchArray();

        foreach ( $resourceTrades as $resourceTrade )
        {
            $data[$resourceTrade['bq_item_id']][] = $resourceTrade;

            unset($resourceTrade);
        }

        return $data;
    }
}