<?php

/**
 * ClaimCertificateTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ClaimCertificateTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ClaimCertificateTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ClaimCertificate');
    }

    public static function getAmountCertifiedByClaimCertificates(PostContract $postContract)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT cert.id, cert.amount_certified AS amount_certified
        FROM ".ClaimCertificateTable::getInstance()->getTableName()." cert
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
        WHERE rev.post_contract_id = :postContractId AND rev.deleted_at IS NULL");

        $stmt->execute(array( 'postContractId' => $postContract->id ));

        $certAmountCertified = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        return $certAmountCertified;
    }

    public static function getNetPayableAmountByClaimCertificates(PostContract $postContract)
    {
        $netPayableAmount = array();

        if($postContract->published_type != PostContract::PUBLISHED_TYPE_NEW)
            return $netPayableAmount;

        $pdo = self::getInstance()->getConnection()->getDbh();

        // net payable amount
        // work done amount = (total up to date claim + approved VO)
        // (work done amount - ((work done amount * retention % ))) - (amount from any finance module TBD i.e kongsi kong, material on site etc )
        $stmt = $pdo->prepare("SELECT cert.id, SUM(claim.up_to_date_amount) AS amount
        FROM ".ClaimCertificateTable::getInstance()->getTableName()." cert
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
        JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." claim ON claim.revision_id = rev.id
        WHERE rev.post_contract_id = :postContractId AND rev.deleted_at IS NULL
        GROUP BY cert.id");

        $stmt->execute(array( 'postContractId' => $postContract->id ));

        //need to include approved VO once we done with the VO refactoring for the new post contract

        $claimUpToDateAmount = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $retentionPercentage = $postContract->ProjectStructure->NewPostContractFormInformation->retention / 100;

        $workDoneAmount = array();

        foreach($claimUpToDateAmount as $certId => $upToDateAmount)
        {
            $workDoneAmount[$certId] = $upToDateAmount;
        }

        unset($claimUpToDateAmount);

        //to include approved VO amount into $workDoneAmount

        foreach ($workDoneAmount as $certId => $amount )
        {
            $netPayableAmount[$certId] = ($amount - ($amount * $retentionPercentage));
        }

        return $netPayableAmount;
    }

    public static function getPaidAmountByClaimCertificates(PostContract $postContract)
    {
        $payments = array();

        if($postContract->published_type != PostContract::PUBLISHED_TYPE_NEW)
            return $payments;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT cert.id, SUM(p.amount) AS amount
        FROM ".ClaimCertificatePaymentLogTable::getInstance()->getTableName()." p
        JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON p.claim_certificate_id = cert.id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
        WHERE rev.post_contract_id = :postContractId AND rev.deleted_at IS NULL
        GROUP BY cert.id");

        $stmt->execute(array( 'postContractId' => $postContract->id ));

        $payments = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        return $payments;
    }

    public static function getPostContractBillClaimWorkDoneGroupByVersions(array $claimCertificates)
    {
        if( count($claimCertificates) <= 0 ) return array();

        $pdo = ClaimCertificateTable::getInstance()->getConnection()->getDbh();

        $allWorkDone             = [];
        $postContractMaxVersions = array();
        $versionClauses          = [];

        foreach($claimCertificates as $claimCertificate)
        {
            $currentMaxVersion = $postContractMaxVersions[ $claimCertificate->PostContractClaimRevision->post_contract_id ] ?? 0;

            if( $claimCertificate->PostContractClaimRevision->version > $currentMaxVersion ) $postContractMaxVersions[ $claimCertificate->PostContractClaimRevision->post_contract_id ] = $claimCertificate->PostContractClaimRevision->version;
        }

        foreach($postContractMaxVersions as $postContractId => $maxVersion)
        {
            $versionClauses[] = "(rev.version <= {$maxVersion} AND rev.post_contract_id = {$postContractId})";
        }

        $versionClauses = implode(' OR ', $versionClauses);

        if( empty( $versionClauses ) ) $versionClauses = "FALSE";

        $stmt = $pdo->prepare("SELECT rev.post_contract_id, rev.version, c.tax_percentage, ROUND(COALESCE(SUM(psc.up_to_date_amount),0),2) AS standard_claim_total_current_amount
                FROM " . ClaimCertificateTable::getInstance()->getTableName() . " c
                JOIN " . PostContractClaimRevisionTable::getInstance()->getTableName() . " rev ON rev.id = c.post_contract_claim_revision_id
                JOIN " . PostContractStandardClaimTable::getInstance()->getTableName() . " psc ON psc.revision_id = rev.id
                WHERE ({$versionClauses})
                AND rev.deleted_at IS NULL GROUP BY rev.version, c.tax_percentage, rev.post_contract_id
                ORDER BY rev.version ASC");

        $stmt->execute();

        $standardClaimWorkDoneAmountWithTaxPercentage = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        foreach($claimCertificates as $claimCertificate)
        {
            $claimRevision = $claimCertificate->PostContractClaimRevision;

            $postContract = $claimCertificate->PostContractClaimRevision->PostContract;
            $data         = $standardClaimWorkDoneAmountWithTaxPercentage[ $postContract->id ] ?? array();

            $newPostContractFormInformation = $postContract->ProjectStructure->NewPostContractFormInformation;

            $billTotalWorkDoneAmount = $newPostContractFormInformation->getPostContractPreliminaryBillClaimWorkDoneGroupByVersions($claimRevision);

            $previousRecord = null;
            foreach($data as $workDone)
            {
                if( $workDone['version'] > $claimRevision->version ) continue;

                if( ! array_key_exists($workDone['version'], $billTotalWorkDoneAmount) || ! array_key_exists($workDone['tax_percentage'], $billTotalWorkDoneAmount[ $workDone['version'] ]) )
                {
                    $billTotalWorkDoneAmount[ $workDone['version'] ][ $workDone['tax_percentage'] ] = 0;
                }

                $workDoneAmount = $workDone['standard_claim_total_current_amount'];

                if( $previousRecord )
                {
                    $workDoneAmount = $workDone['standard_claim_total_current_amount'] - $previousRecord['standard_claim_total_current_amount'];
                }

                $billTotalWorkDoneAmount[ $workDone['version'] ][ $workDone['tax_percentage'] ] += $workDoneAmount;

                $previousRecord = $workDone;
            }

            $allWorkDone[ $claimCertificate->id ] = $billTotalWorkDoneAmount;
        }

        return $allWorkDone;
    }

    public static function getClaimCertificateAmountInfoByClaimRevision(Array $claimCertificates)
    {
        $claimCertInfo = [];

        $currentClaimCertificates = $claimCertificates;

        foreach($currentClaimCertificates as $claimCertificate)
        {
            if( $previousClaimRevision = $claimCertificate->PostContractClaimRevision->getPreviousClaimRevision() )
            {
                $claimCertificates[] = $previousClaimRevision->ClaimCertificate;
            }
        }

        $allBillClaimWorkDoneByVersions = self::getPostContractBillClaimWorkDoneGroupByVersions($claimCertificates);

        foreach($claimCertificates as $claimCertificate)
        {
            $project = $claimCertificate->PostContractClaimRevision->PostContract->ProjectStructure;

            $claimRevision = $claimCertificate->PostContractClaimRevision;

            $newPostContractFormInformation = $project->NewPostContractFormInformation;

            $contractSum      = $newPostContractFormInformation->getContractSum($claimRevision);
            $maxRetentionSums = $newPostContractFormInformation->calculateMaxRetentionSum($claimRevision);

            $billClaimWorkDoneByVersions = $allBillClaimWorkDoneByVersions[ $claimCertificate->id ];
            $voWorkDoneByVersions        = $newPostContractFormInformation->getVOWorkDoneGroupByVersions($claimRevision);
                
            $rfvWorkDoneByVersions = $newPostContractFormInformation->getRequestForVariationWorkDoneGroupByVersions($claimRevision);

            $billClaimWorkDone = $newPostContractFormInformation->calculatePostContractBillClaimWorkDoneAmount($billClaimWorkDoneByVersions);

            $voWorkDone  = $newPostContractFormInformation->calculateVOWorkDoneAmount($voWorkDoneByVersions);

            // vo work done for selected rfv category
            $project                             = $claimCertificate->PostContractClaimRevision->PostContract->ProjectStructure;
            $claimCertificatePrintSettings       = $project->PostContract->ClaimCertificatePrintSetting;
            $rfvCategory                         = Doctrine_Core::getTable('EProjectRequestForVariationCategory')->find($claimCertificatePrintSettings->request_for_variation_category_id_to_print);
            $voWorkDoneForSelectedRfvCategory    = $rfvCategory ? $newPostContractFormInformation->getVOWorkDoneGroupByVersionsForRfvCategory($claimRevision, $rfvCategory) : 0.0;

            $rfvWorkDone = $newPostContractFormInformation->calculateRequestforVariationWorkDoneAmount($rfvWorkDoneByVersions);

            $workDoneByVersions = $newPostContractFormInformation->calculateWorkDoneGroupByVersions($claimRevision, $billClaimWorkDoneByVersions, $voWorkDoneByVersions, $rfvWorkDoneByVersions);

            //getWorkDoneAmount
            $totalWorkDone = $newPostContractFormInformation->calculateWorkDoneAmount($workDoneByVersions);

            //getPercentageCompletion
            $percentageCompletion = $newPostContractFormInformation->calculatePercentageCompletion($totalWorkDone, $contractSum);

            //getRetentionSum
            $releasedRetentionSums = $newPostContractFormInformation->getReleasedRetentionSum($claimRevision);

            //getGrossRetention
            $grossRetentionSumByTax = $newPostContractFormInformation->calculateGrossRetention($workDoneByVersions);

            //getRetentionSum
            $retentionSum = $newPostContractFormInformation->calculateRetentionSum($claimRevision, $releasedRetentionSums, $grossRetentionSumByTax, $maxRetentionSums);

            $claimCertInfo[ $claimCertificate->id ] = [
                'contractSum'                      => $contractSum,
                'billClaimWorkDone'                => $billClaimWorkDone,
                'voWorkDone'                       => $voWorkDone,
                'voWorkDoneForSelectedRfvCategory' => $voWorkDoneForSelectedRfvCategory,
                'requestForVariationWorkDone'      => $rfvWorkDone,
                'workDoneAmount'                   => $totalWorkDone,
                'percentageCompletion'             => $percentageCompletion,
                'retentionSum'                     => $retentionSum,
                'releasedRetentionSums'            => $releasedRetentionSums,
            ];
        }

        return $claimCertInfo;
    }

    public static function getClaimCertInfo(array $claimCertificates, $includeSubPackageInfo = false, $useSubProjectReferenceCode=false)
    {
        $claimCertificateAmountDataByCertId = self::getClaimCertificateAmountInfoByClaimRevision($claimCertificates);
        $certInfo                           = [];
        $claimCertApprovalDates              = [];
        
        if(!empty($claimCertificateAmountDataByCertId))
        {
            $pdo = self::getInstance()->getConnection()->getDbh();

            $in = str_repeat('?,', count(array_keys($claimCertificateAmountDataByCertId)) - 1) . '?';
            $stmt = $pdo->prepare("SELECT claim_certificate_id, created_at
                FROM ".ClaimCertificateApprovalLogTable::getInstance()->getTableName()."
                WHERE claim_certificate_id IN (".$in.")
                AND status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
                GROUP BY id");

            $stmt->execute(array_keys($claimCertificateAmountDataByCertId));

            $claimCertApprovalDates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
        }

        foreach($claimCertificates as $claimCertificate)
        {
            $claimRevision                  = $claimCertificate->PostContractClaimRevision;
            $previousClaimRevision          = $claimRevision->getPreviousClaimRevision();
            $project                        = $claimCertificate->PostContractClaimRevision->PostContract->ProjectStructure;
            $newPostContractFormInformation = $project->NewPostContractFormInformation;
            $currencyCode                   = $project->MainInformation->Currency->currency_code;
            $awardedCompany                 = $project->TenderSetting->AwardedCompany;

            $mainProjectTitle = '';
            $subPackageTitle  = '';
            $companyName      = '';
            $projectReference = '';

            $retentionSumIncludeVO             = LetterOfAwardRetentionSumModulesTable::isIncluded($newPostContractFormInformation, PostContractClaim::TYPE_VARIATION_ORDER);
            $retentionSumIncludeMaterialOnSite = LetterOfAwardRetentionSumModulesTable::isIncluded($newPostContractFormInformation, PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE);

            if( $Eproject = $project->MainInformation->getEProjectProject() )
            {
                if( $Eproject->isSubProject() )
                {
                    $mainProject = Doctrine_Core::getTable('EProjectProject')->find(intval($Eproject->parent_project_id));

                    $mainProjectTitle = $mainProject->title;

                    $subPackageTitle = $Eproject->title;

                    $projectReference = ($useSubProjectReferenceCode) ? $Eproject->reference : $mainProject->reference;
                }
                else
                {
                    $mainProjectTitle = $Eproject->title;

                    $subPackageTitle = '';

                    $projectReference = $Eproject->reference;
                }

                $companyName  = $Eproject->Subsidiary->getFullSubsidiaryName();
                $currencyCode = ($Eproject->modified_currency_code) ? $Eproject->modified_currency_code : $Eproject->Country->currency_code;
            }

            $data = $claimCertificate->toArray();

            $previousData = null;

            if($previousClaimRevision) $previousData = $previousClaimRevision->ClaimCertificate->toArray();

            $claimCertificateAmountData = $claimCertificateAmountDataByCertId[ $claimCertificate->id ];

            $previousClaimCertificateAmountData = null;

            if( $previousClaimRevision ) $previousClaimCertificateAmountData = $claimCertificateAmountDataByCertId[ $previousClaimRevision->ClaimCertificate->id ];

            $currentReleaseRetentionAmount         = $data['release_retention_amount'];
            $releaseRetentionAmountAfterGST        = $data['release_retention_amount'] * $data['retention_tax_percentage'] / 100;
            $previousCurrentReleaseRetentionAmount = $previousData['release_retention_amount'] ?? 0;

            $contractorName  = $awardedCompany->name ?? '';
            $contractorAddr  = $awardedCompany->address ?? '';
            $contractorTel   = $awardedCompany->phone_number ?? '';
            $fax             = $awardedCompany->fax_number ?? '';
            $contractorPIC   = $awardedCompany->contact_person_name ?? '';
            $claimNo         = (string)$claimRevision->version;
            $personInCharge  = $data['person_in_charge'];
            $remark          = $data['acc_remarks'];
            $projectTitle    = $mainProjectTitle;
            $projectCode     = $projectReference;
            $letterOfAwardNo = (string)$newPostContractFormInformation->form_number;
            $reference       = $project->NewPostContractFormInformation->reference;
            $worksfromLA     = NewPostContractFormInformationTable::getSubPackageWork($newPostContractFormInformation->id ?? -1, 2)['name'] ?? '';
            $date            = date("d/m/Y");
            $dueDate         = date("d/m/Y", strtotime($data['due_date']));

            $taxPercentage                                 = $data['tax_percentage'];
            $billTotal                                     = PostContractTable::getOverallTotalByProjectId($project->id);
            $voTotal                                       = $claimCertificate->getVariationOrderOverallTotalByClaimCertificate($project);
            $contractSum                                   = $claimCertificateAmountData['contractSum'];
            $billWorkDone                                  = $claimCertificateAmountData['billClaimWorkDone'];
            $voWorkDone                                    = $claimCertificateAmountData['voWorkDone'];
            $requestForVariationWorkDone                   = $claimCertificateAmountData['requestForVariationWorkDone'];
            $previousCumulativeRequestForVariationWorkDone = $previousClaimRevision ? $previousClaimCertificateAmountData['requestForVariationWorkDone'] : 0;
            $currentRequestForVariationWorkDone            = $requestForVariationWorkDone - $previousCumulativeRequestForVariationWorkDone;

            // rfv category printing
            $voWorkDoneForSelectedRfvCategory         = $claimCertificateAmountData['voWorkDoneForSelectedRfvCategory'];
            $previousVoWorkDoneForSelectedRfvCategory = $previousClaimRevision ? $previousClaimCertificateAmountData['voWorkDoneForSelectedRfvCategory'] : 0;
            $currentVoWorkDoneForSelectedRfvCategory  = $previousClaimRevision ? ($voWorkDoneForSelectedRfvCategory - $previousClaimCertificateAmountData['voWorkDoneForSelectedRfvCategory']) : $voWorkDoneForSelectedRfvCategory;

            $showRequestForVariationWorkDone = $newPostContractFormInformation->showRequestForVariation($claimRevision);

            $materialOnSiteWorkDone = $newPostContractFormInformation->getMaterialOnSiteWorkDoneAmount($claimRevision);

            $materialOnSiteWorkDoneCumulativeAndCurrentAmounts = $newPostContractFormInformation->getMaterialOnSiteWorkDoneCumulativeAndCurrentAmounts($claimRevision);

            $totalWorkDone = $claimCertificateAmountData['workDoneAmount'];

            $retentionSumByTax = $claimCertificateAmountData['retentionSum'];

            $cumulativeTotalRetentionWithoutCurrentClaimRelease = array_sum($retentionSumByTax);

            $cumulativeTotalRetention = $cumulativeTotalRetentionWithoutCurrentClaimRelease - $currentReleaseRetentionAmount;

            $cumulativeReleasedRetentionAmount = 0;

            foreach($claimCertificateAmountData['releasedRetentionSums'] as $releasedRetentionSums)
            {
                $cumulativeReleasedRetentionAmount += array_sum($releasedRetentionSums);
            }

            $previousRetentionSumByTax = $previousClaimCertificateAmountData['retentionSum'] ?? array();

            $previousCumulativeTotalRetentionWithoutCurrentClaimRelease = array_sum($previousRetentionSumByTax);

            $previousCumulativeTotalRetention = $previousCumulativeTotalRetentionWithoutCurrentClaimRelease - $previousCurrentReleaseRetentionAmount;

            $previousCumulativeReleasedRetentionAmount = 0;

            foreach($previousClaimCertificateAmountData['releasedRetentionSums'] ?? array() as $releasedRetentionSums)
            {
                $previousCumulativeReleasedRetentionAmount += array_sum($releasedRetentionSums);
            }

            $previousTotalWorkDone = $previousClaimRevision ? $previousClaimCertificateAmountData['workDoneAmount'] : 0;

            $cumulativeRetentionSum = $cumulativeTotalRetention + $cumulativeReleasedRetentionAmount;

            $previousCumulativeRetentionSum = $previousCumulativeTotalRetention + $previousCumulativeReleasedRetentionAmount;

            // we round it since the workdone and cumulativetotalRetention is shown in rounded figure.
            $cumulativeAmountCertified = round($totalWorkDone, 2) - round($cumulativeTotalRetention, 2);
            $cumulativeAmountGSTAmount = $cumulativeAmountCertified * $data['tax_percentage'] / 100;

            $cumulativePreviousAmountCertified = round($previousTotalWorkDone, 2) - round($previousCumulativeTotalRetention, 2);
            $amountCertified                   = $cumulativeAmountCertified - $cumulativePreviousAmountCertified;

            // total amount excluding current claim release.
            $totalAmount                 = $cumulativeAmountCertified - $cumulativePreviousAmountCertified - $currentReleaseRetentionAmount;
            $totalAmountAfterGST         = $totalAmount * $data['tax_percentage'] / 100;
            $amountCertifiedTaxAmount    = $amountCertified * $data['tax_percentage'] / 100;
            $amountCertifiedIncludingTax = $amountCertified + $amountCertifiedTaxAmount;

            $currentTotalRetention = $cumulativeTotalRetention - $previousCumulativeTotalRetention;

            $currentTotalWorkDone = $totalWorkDone - $previousTotalWorkDone;

            $completionPercentage = round(Utilities::percent($totalWorkDone, $contractSum), 2);

            $advancePaymentOverallTotal  = $claimCertificate->getPostContractClaimOverallTotalByClaimCertificate($project, PostContractClaim::TYPE_ADVANCED_PAYMENT);
            $depositOverallTotal         = $claimCertificate->getPostContractClaimOverallTotalByClaimCertificate($project, PostContractClaim::TYPE_DEPOSIT);
            $materialOnSiteOverallTotal  = $claimCertificate->getPostContractClaimOverallTotalByClaimCertificate($project, PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE);
            $kskOverallTotal             = $claimCertificate->getPostContractClaimOverallTotalByClaimCertificate($project, PostContractClaim::TYPE_OUT_OF_CONTRACT_ITEM);
            $wobMCOverallTotal           = $claimCertificate->getPostContractClaimOverallTotalByClaimCertificate($project, PostContractClaim::TYPE_WORK_ON_BEHALF);
            $debitCreditNoteOverallTotal = $project->getDebitCreditNoteTotalByClaimRevision($claimRevision, "<=");

            $debitCreditNoteBreakdownOverallTotal = $project->getDebitCreditNoteBreakdownTotalByClaimRevision($claimRevision, "<=");

            $pobOverallTotal          = $claimCertificate->getPostContractClaimOverallTotalByClaimCertificate($project, PostContractClaim::TYPE_PURCHASE_ON_BEHALF);
            $wobOverallTotal          = $claimCertificate->getPostContractClaimOverallTotalByClaimCertificate($project, PostContractClaim::TYPE_WORK_ON_BEHALF_BACK_CHARGE);
            $penaltyOverallTotal      = $claimCertificate->getPostContractClaimOverallTotalByClaimCertificate($project, PostContractClaim::TYPE_PENALTY);
            $waterDepositOverallTotal = $claimCertificate->getPostContractClaimOverallTotalByClaimCertificate($project, PostContractClaim::TYPE_WATER_DEPOSIT);
            $permitOverallTotal       = $claimCertificate->getPostContractClaimOverallTotalByClaimCertificate($project, PostContractClaim::TYPE_PERMIT);

            $advancePaymentPreviousClaim  = $claimCertificate->getPostContractPreviousClaimTotalSecondLevel($project, PostContractClaim::TYPE_ADVANCED_PAYMENT);
            $depositPreviousClaim         = $claimCertificate->getPostContractPreviousClaimTotalSecondLevel($project, PostContractClaim::TYPE_DEPOSIT);
            $materialOnSitePreviousClaim  = $claimCertificate->getPostContractPreviousClaimTotalSecondLevel($project, PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE);
            $kskPreviousClaim             = $claimCertificate->getPostContractPreviousClaimTotalFirstLevel($project, PostContractClaim::TYPE_OUT_OF_CONTRACT_ITEM);
            $wobMCPreviousClaim           = $claimCertificate->getPostContractPreviousClaimTotalFirstLevel($project, PostContractClaim::TYPE_WORK_ON_BEHALF);

            $debitCreditNotePreviousClaim = ( $previousClaimRevision ) ? $project->getDebitCreditNoteTotalByClaimRevision($previousClaimRevision, "<=") : 0;

            $debitCreditNoteBreakdownPreviousClaim = ( $previousClaimRevision ) ? $project->getDebitCreditNoteBreakdownTotalByClaimRevision($previousClaimRevision, "<=") : [];

            $pobPreviousClaim          = $claimCertificate->getPostContractPreviousClaimTotalSecondLevel($project, PostContractClaim::TYPE_PURCHASE_ON_BEHALF);
            $wobPreviousClaim          = $claimCertificate->getPostContractPreviousClaimTotalFirstLevel($project, PostContractClaim::TYPE_WORK_ON_BEHALF_BACK_CHARGE);
            $penaltyPreviousClaim      = $claimCertificate->getPostContractPreviousClaimTotalFirstLevel($project, PostContractClaim::TYPE_PENALTY);
            $waterDepositPreviousClaim = $claimCertificate->getPostContractPreviousClaimTotalFirstLevel($project, PostContractClaim::TYPE_WATER_DEPOSIT);
            $permitPreviousClaim       = $claimCertificate->getPostContractPreviousClaimTotalSecondLevel($project, PostContractClaim::TYPE_PERMIT);

            $advancePaymentThisClaim           = $claimCertificate->getPostContractClaimThisClaim($project, PostContractClaim::TYPE_ADVANCED_PAYMENT);
            $advancePaymentThisClaimFormatB    = $claimCertificate->getAdvancePaymentAmountByClaimRevision($project);

            $depositThisClaim         = $claimCertificate->getPostContractClaimThisClaim($project, PostContractClaim::TYPE_DEPOSIT);
            $materialOnSiteThisClaim  = $claimCertificate->getPostContractClaimThisClaim($project, PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE);
            $kskThisClaim             = $claimCertificate->getPostContractClaimThisClaimFirstLevel($project, PostContractClaim::TYPE_OUT_OF_CONTRACT_ITEM);
            $wobMCThisClaim           = $claimCertificate->getPostContractClaimThisClaimFirstLevel($project, PostContractClaim::TYPE_WORK_ON_BEHALF);
            $debitCreditNoteThisClaim = $project->getDebitCreditNoteTotalByClaimRevision($claimRevision, "=");

            $debitCreditNoteBreakdownThisClaim = $project->getDebitCreditNoteBreakdownTotalByClaimRevision($claimRevision, "=");

            $pobThisClaim          = $claimCertificate->getPostContractClaimThisClaimSecondLevel($project, PostContractClaim::TYPE_PURCHASE_ON_BEHALF);
            $wobThisClaim          = $claimCertificate->getPostContractClaimThisClaimFirstLevel($project, PostContractClaim::TYPE_WORK_ON_BEHALF_BACK_CHARGE);
            $penaltyThisClaim      = $claimCertificate->getPostContractClaimThisClaimFirstLevel($project, PostContractClaim::TYPE_PENALTY);
            $waterDepositThisClaim = $claimCertificate->getPostContractClaimThisClaimFirstLevel($project, PostContractClaim::TYPE_WATER_DEPOSIT);
            $permitThisClaim       = $claimCertificate->getPostContractClaimThisClaim($project, PostContractClaim::TYPE_PERMIT);

            $advancePaymentThisClaimAfterGST  = $advancePaymentThisClaim * $data['tax_percentage'] / 100;
            $materialOnSiteThisClaimAfterGST  = $materialOnSiteThisClaim * $data['tax_percentage'] / 100;
            $kskThisClaimAfterGST             = $kskThisClaim * $data['tax_percentage'] / 100;
            $wobMCThisClaimAfterGST           = $wobMCThisClaim * $data['tax_percentage'] / 100;
            $debitCreditNoteThisClaimAfterGST = $debitCreditNoteThisClaim * $data['tax_percentage'] / 100;

            $debitCreditNoteBreakdownThisClaimAfterGST = [];

            foreach($debitCreditNoteBreakdownThisClaim as $id => $debitCreditNoteBreakdown)
            {
                $debitCreditNoteBreakdown['total'] = $debitCreditNoteBreakdown['total'] * $data['tax_percentage'] / 100;

                $debitCreditNoteBreakdownThisClaimAfterGST[ $id ] = $debitCreditNoteBreakdown;
            }

            $pobThisClaimAfterGST = $pobThisClaim * $data['tax_percentage'] / 100;
            $wobThisClaimAfterGST = $wobThisClaim * $data['tax_percentage'] / 100;

            $miscThisClaimSubTotal           = $advancePaymentThisClaim + $depositThisClaim + $kskThisClaim + $wobMCThisClaim;
            $miscThisClaimSubTotalRecoupment = $advancePaymentThisClaimFormatB + $depositThisClaim + $kskThisClaim + $wobMCThisClaim;

            if( ! $retentionSumIncludeMaterialOnSite ) 
            {
                $miscThisClaimSubTotal += $materialOnSiteThisClaim;
                $miscThisClaimSubTotalRecoupment += $materialOnSiteThisClaim;
            }

            $miscThisClaimAfterGSTSubTotal = $advancePaymentThisClaimAfterGST + $kskThisClaimAfterGST + $wobMCThisClaimAfterGST;
            if( ! $retentionSumIncludeMaterialOnSite ) $miscThisClaimAfterGSTSubTotal += $materialOnSiteThisClaimAfterGST;

            $miscThisClaimOverallTotal = $miscThisClaimSubTotal + $miscThisClaimAfterGSTSubTotal;

            $taxInvoiceBySubConSubTotal = $amountCertified + $miscThisClaimSubTotal;
            $taxInvoiceBySubConSubTotalRecoupment = $amountCertified + $miscThisClaimSubTotalRecoupment;
            $taxInvoiceBySubConAfterGSTSubTotal = $amountCertifiedTaxAmount + $miscThisClaimAfterGSTSubTotal;
            $taxInvoiceBySubConOverallTotal     = $taxInvoiceBySubConSubTotal + $taxInvoiceBySubConAfterGSTSubTotal;

            $otherThisClaimSubTotal         = $debitCreditNoteThisClaim + $pobThisClaim + $wobThisClaim + $penaltyThisClaim;
            $otherThisClaimAfterGSTSubTotal = $debitCreditNoteThisClaimAfterGST + $pobThisClaimAfterGST + $wobThisClaimAfterGST;
            $otherThisClaimOverallTotal     = $otherThisClaimSubTotal + $otherThisClaimAfterGSTSubTotal;

            $paymentOnBehalfThisClaimSubTotal         = $waterDepositThisClaim + $permitThisClaim;
            $paymentOnBehalfThisClaimAfterGSTSubTotal = 0;
            $paymentOnBehalfThisClaimOverallTotal     = $paymentOnBehalfThisClaimSubTotal + $paymentOnBehalfThisClaimAfterGSTSubTotal;

            $netPayableAmount             = $taxInvoiceBySubConSubTotal - $otherThisClaimSubTotal + $paymentOnBehalfThisClaimSubTotal;
            $netPayableAmountGST          = $taxInvoiceBySubConAfterGSTSubTotal - $otherThisClaimAfterGSTSubTotal + $paymentOnBehalfThisClaimAfterGSTSubTotal;
            $netPayableAmountOverallTotal = $netPayableAmount + $netPayableAmountGST;

            $netPayableAmountRecoupmentWithTax  = $taxInvoiceBySubConSubTotalRecoupment - $otherThisClaimSubTotal + $paymentOnBehalfThisClaimSubTotal;

            $subPackages = [];

            $projectAndSubPackagesCurrentAmountCertified             = $amountCertified;
            $projectAndSubPackagesCurrentAmountCertifiedIncludingTax = $amountCertifiedIncludingTax;

            if($includeSubPackageInfo)
            {
                $subProjects = ProjectStructureTable::getSubProjects($project);

                $subProjectLatestApprovedClaimRevisions = SubProjectLatestApprovedClaimRevisionTable::getLatestApprovedSubProjectClaimRevision($claimRevision);

                foreach($subProjects as $subProject)
                {
                    if(!array_key_exists($subProject->id, $subProjectLatestApprovedClaimRevisions)) continue;

                    $latestClaimRevision = $subProjectLatestApprovedClaimRevisions[$subProject->id];

                    $latestApprovedClaimCertificate = $latestClaimRevision->ClaimCertificate;

                    if(!$latestApprovedClaimCertificate->exists()) continue;

                    $subPackageClaimCertInfo = $latestApprovedClaimCertificate->getClaimCertInfo();

                    $subPackages[] = [
                        'title'                             => $subProject->title,
                        'cumulativeAmountCertified'         => $subPackageClaimCertInfo['cumulativeAmountCertified'],
                        'cumulativePreviousAmountCertified' => $subPackageClaimCertInfo['cumulativePreviousAmountCertified'],
                        'amountCertified'                   => $subPackageClaimCertInfo['amountCertified'],
                        'amountCertifiedTaxAmount'          => $subPackageClaimCertInfo['amountCertifiedTaxAmount'],
                        'amountCertifiedIncludingTax'       => $subPackageClaimCertInfo['amountCertifiedIncludingTax'],
                    ];

                    $projectAndSubPackagesCurrentAmountCertified += $subPackageClaimCertInfo['amountCertified'];
                    $projectAndSubPackagesCurrentAmountCertifiedIncludingTax += $subPackageClaimCertInfo['amountCertifiedIncludingTax'];
                }
            }

            $approvalDate = array_key_exists($claimCertificate->id, $claimCertApprovalDates) ? $claimCertApprovalDates[$claimCertificate->id] : null;

            unset($claimCertApprovalDates[$claimCertificate->id]);

            $certInfo[ $claimCertificate->id ] = array(
                'certId'                                                  => $claimCertificate->id,
                'companyName'                                             => $companyName,
                'contractorName'                                          => $contractorName,
                'contractorAddr'                                          => $contractorAddr,
                'contractorTel'                                           => $contractorTel,
                'fax'                                                     => $fax,
                'contractorPIC'                                           => $contractorPIC,
                'claimNo'                                                 => $claimNo,
                'personInCharge'                                          => $personInCharge,
                'remark'                                                  => $remark,
                'subPackageTitle'                                         => $subPackageTitle,
                'projectTitle'                                            => $projectTitle,
                'projectCode'                                             => $projectCode,
                'projectId'                                               => $project->id,
                'letterOfAwardNo'                                         => $letterOfAwardNo,
                'reference'                                               => $reference,
                'worksfromLA'                                             => $worksfromLA,
                'completionPercentage'                                    => $completionPercentage,
                'date'                                                    => $date,
                'dueDate'                                                 => $dueDate,
                'certificateDate'                                         => $claimCertificate->qs_received_date,
                'periodEnding'                                            => $claimCertificate->budget_due_date,
                'contractorSubmittedDate'                                 => $claimCertificate->contractor_submitted_date,
                'createdDate'                                             => $claimCertificate->created_at,
                'siteVerifiedDate'                                        => $claimCertificate->site_verified_date,
                'approvalDate'                                            => $approvalDate,
                'taxPercentage'                                           => $taxPercentage,
                'currencyCode'                                            => $currencyCode,
                'billTotal'                                               => $billTotal,
                'voTotal'                                                 => $voTotal,
                'contractSum'                                             => $contractSum,
                'billWorkDone'                                            => $billWorkDone,
                'voWorkDone'                                              => $voWorkDone,
                'voWorkDoneForSelectedRfvCategory'                        => $voWorkDoneForSelectedRfvCategory,
                'previousVoWorkDoneForSelectedRfvCategory'                => $previousVoWorkDoneForSelectedRfvCategory,
                'currentVoWorkDoneForSelectedRfvCategory'                 => $currentVoWorkDoneForSelectedRfvCategory,
                'requestForVariationWorkDone'                             => $requestForVariationWorkDone,
                'materialOnSiteWorkDone'                                  => $materialOnSiteWorkDone,
                'totalWorkDone'                                           => $totalWorkDone,
                'cumulativeRetentionSum'                                  => $cumulativeRetentionSum,
                'cumulativeTotalRetentionWithoutCurrentClaimRelease'      => $cumulativeTotalRetentionWithoutCurrentClaimRelease,
                'retentionSumByTaxes'                                     => $retentionSumByTax,
                'totalAmount'                                             => $totalAmount,
                'totalAmountAfterGST'                                     => $totalAmountAfterGST,
                'amountCertifiedTaxAmount'                                => $amountCertifiedTaxAmount,
                'amountCertifiedIncludingTax'                             => $amountCertifiedIncludingTax,
                'currentReleaseRetentionAmount'                           => $currentReleaseRetentionAmount,
                'releaseRetentionAmountAfterGST'                          => $releaseRetentionAmountAfterGST,
                'retention_tax_percentage'                                => $data['retention_tax_percentage'],
                'amountCertified'                                         => $amountCertified,
                'advancePaymentOverallTotal'                              => $advancePaymentOverallTotal,
                'advancePaymentPreviousClaim'                             => $advancePaymentPreviousClaim,
                'advancePaymentThisClaim'                                 => $advancePaymentThisClaim,
                'advancePaymentThisClaimAfterGST'                         => $advancePaymentThisClaimAfterGST,
                'depositOverallTotal'                                     => $depositOverallTotal,
                'depositPreviousClaim'                                    => $depositPreviousClaim,
                'depositThisClaim'                                        => $depositThisClaim,
                'materialOnSiteOverallTotal'                              => $materialOnSiteOverallTotal,
                'materialOnSitePreviousClaim'                             => $materialOnSitePreviousClaim,
                'materialOnSiteThisClaim'                                 => $materialOnSiteThisClaim,
                'materialOnSiteThisClaimAfterGST'                         => $materialOnSiteThisClaimAfterGST,
                'kskOverallTotal'                                         => $kskOverallTotal,
                'kskPreviousClaim'                                        => $kskPreviousClaim,
                'kskThisClaim'                                            => $kskThisClaim,
                'kskThisClaimAfterGST'                                    => $kskThisClaimAfterGST,
                'wobMCOverallTotal'                                       => $wobMCOverallTotal,
                'wobMCPreviousClaim'                                      => $wobMCPreviousClaim,
                'wobMCThisClaim'                                          => $wobMCThisClaim,
                'wobMCThisClaimAfterGST'                                  => $wobMCThisClaimAfterGST,
                'miscThisClaimSubTotal'                                   => $miscThisClaimSubTotal,
                'miscThisClaimAfterGSTSubTotal'                           => $miscThisClaimAfterGSTSubTotal,
                'miscThisClaimOverallTotal'                               => $miscThisClaimOverallTotal,
                'taxInvoiceBySubConSubTotal'                              => $taxInvoiceBySubConSubTotal,
                'taxInvoiceBySubConSubTotalRecoupment'                    => $taxInvoiceBySubConSubTotalRecoupment,
                'netPayableAmountRecoupmentWithTax'                       => $netPayableAmountRecoupmentWithTax,
                'miscThisClaimSubTotalRecoupment'                         => $miscThisClaimSubTotalRecoupment,
                'taxInvoiceBySubConAfterGSTSubTotal'                      => $taxInvoiceBySubConAfterGSTSubTotal,
                'taxInvoiceBySubConOverallTotal'                          => $taxInvoiceBySubConOverallTotal,
                'debitCreditNoteOverallTotal'                             => $debitCreditNoteOverallTotal,
                'debitCreditNotePreviousClaim'                            => $debitCreditNotePreviousClaim,
                'debitCreditNoteThisClaim'                                => $debitCreditNoteThisClaim,
                'debitCreditNoteThisClaimAfterGST'                        => $debitCreditNoteThisClaimAfterGST,
                'debitCreditNoteBreakdownOverallTotal'                    => $debitCreditNoteBreakdownOverallTotal,
                'debitCreditNoteBreakdownPreviousClaim'                   => $debitCreditNoteBreakdownPreviousClaim,
                'debitCreditNoteBreakdownThisClaim'                       => $debitCreditNoteBreakdownThisClaim,
                'debitCreditNoteBreakdownThisClaimAfterGST'               => $debitCreditNoteBreakdownThisClaimAfterGST,
                'pobOverallTotal'                                         => $pobOverallTotal,
                'pobPreviousClaim'                                        => $pobPreviousClaim,
                'pobThisClaim'                                            => $pobThisClaim,
                'pobThisClaimAfterGST'                                    => $pobThisClaimAfterGST,
                'wobOverallTotal'                                         => $wobOverallTotal,
                'wobPreviousClaim'                                        => $wobPreviousClaim,
                'wobThisClaim'                                            => $wobThisClaim,
                'wobThisClaimAfterGST'                                    => $wobThisClaimAfterGST,
                'penaltyOverallTotal'                                     => $penaltyOverallTotal,
                'penaltyPreviousClaim'                                    => $penaltyPreviousClaim,
                'penaltyThisClaim'                                        => $penaltyThisClaim,
                'otherThisClaimSubTotal'                                  => $otherThisClaimSubTotal,
                'otherThisClaimAfterGSTSubTotal'                          => $otherThisClaimAfterGSTSubTotal,
                'otherThisClaimOverallTotal'                              => $otherThisClaimOverallTotal,
                'waterDepositOverallTotal'                                => $waterDepositOverallTotal,
                'waterDepositPreviousClaim'                               => $waterDepositPreviousClaim,
                'waterDepositThisClaim'                                   => $waterDepositThisClaim,
                'permitOverallTotal'                                      => $permitOverallTotal,
                'permitPreviousClaim'                                     => $permitPreviousClaim,
                'permitThisClaim'                                         => $permitThisClaim,
                'paymentOnBehalfThisClaimSubTotal'                        => $paymentOnBehalfThisClaimSubTotal,
                'paymentOnBehalfThisClaimAfterGSTSubTotal'                => $paymentOnBehalfThisClaimAfterGSTSubTotal,
                'paymentOnBehalfThisClaimOverallTotal'                    => $paymentOnBehalfThisClaimOverallTotal,
                'netPayableAmount'                                        => $netPayableAmount,
                'netPayableAmountGST'                                     => $netPayableAmountGST,
                'netPayableAmountOverallTotal'                            => $netPayableAmountOverallTotal,
                'retentionSumIncludeVO'                                   => $retentionSumIncludeVO,
                'retentionSumIncludeMaterialOnSite'                       => $retentionSumIncludeMaterialOnSite,
                'invoiceNo'                                               => $claimCertificate->Invoice->invoice_number ?? null,
                'invoiceDate'                                             => $claimCertificate->Invoice->invoice_date ?? null,
                'previousBillClaimWorkDone'                               => $previousClaimRevision ? $previousClaimCertificateAmountData['billClaimWorkDone'] : 0,
                'currentBillClaimWorkDone'                                => $previousClaimRevision ? ( $billWorkDone - $previousClaimCertificateAmountData['billClaimWorkDone'] ) : $billWorkDone,
                'previousCumulativeVoWorkDone'                            => $previousClaimRevision ? $previousClaimCertificateAmountData['voWorkDone'] : 0,
                'currentVoWorkDone'                                       => $previousClaimRevision ? ( $voWorkDone - $previousClaimCertificateAmountData['voWorkDone'] ) : $voWorkDone,
                'previousCumulativeRequestForVariationWorkDone'           => $previousCumulativeRequestForVariationWorkDone,
                'currentRequestForVariationWorkDone'                      => $currentRequestForVariationWorkDone,
                'showRequestForVariationWorkDone'                         => $showRequestForVariationWorkDone,
                'previousTotalWorkDone'                                   => $previousTotalWorkDone,
                'currentTotalWorkDone'                                    => $currentTotalWorkDone,
                'previousCumulativeRetentionSum'                          => $previousCumulativeRetentionSum,
                'currentRetentionSum'                                     => $cumulativeRetentionSum - $previousCumulativeRetentionSum,
                'previousCumulativeReleasedRetentionAmount'               => $previousCumulativeReleasedRetentionAmount,
                'cumulativeReleasedRetentionAmount'                       => $cumulativeReleasedRetentionAmount,
                'cumulativeTotalRetention'                                => $cumulativeTotalRetention,
                'previousCumulativeTotalRetention'                        => $previousCumulativeTotalRetention,
                'currentTotalRetention'                                   => $currentTotalRetention,
                'cumulativeAmountCertified'                               => $cumulativeAmountCertified,
                'cumulativePreviousAmountCertified'                       => $cumulativePreviousAmountCertified,
                'cumulativeAmountGSTAmount'                               => $cumulativeAmountGSTAmount,
                'cumulativeMaterialOnSiteWorkDone'                        => $materialOnSiteWorkDoneCumulativeAndCurrentAmounts['cumulative'],
                'previousCumulativeMaterialOnSiteWorkDone'                => $materialOnSiteWorkDoneCumulativeAndCurrentAmounts['previousCumulative'],
                'currentMaterialOnSiteWorkDone'                           => $materialOnSiteWorkDoneCumulativeAndCurrentAmounts['current'],
                'subPackages'                                             => $subPackages,
                'projectAndSubPackagesCurrentAmountCertified'             => $projectAndSubPackagesCurrentAmountCertified,
                'projectAndSubPackagesCurrentAmountCertifiedIncludingTax' => $projectAndSubPackagesCurrentAmountCertifiedIncludingTax,
            );
        }

        return $certInfo;
    }

    public static function getApprovedClaimCertificates($onlyLatest, ProjectStructure $project=null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $projectSql = ($project) ? " AND p.id = ".$project->id." " : null;

        $onlyLatestSql = ($onlyLatest) ? " JOIN (SELECT post_contract_id, MAX(version) AS version
        FROM ".PostContractClaimRevisionTable::getInstance()->getTableName()."
        WHERE locked_status IS TRUE AND deleted_at IS NULL
        GROUP BY post_contract_id) b ON claim_rev.post_contract_id = b.post_contract_id AND claim_rev.version = b.version " : null;

        $stmt = $pdo->prepare("SELECT cert.id
        FROM ".ClaimCertificateTable::getInstance()->getTableName()." cert
        JOIN ".ClaimCertificateInformationTable::getInstance()->getTableName()." cert_info ON cert_info.claim_certificate_id = cert.id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." claim_rev ON claim_rev.id = cert.post_contract_claim_revision_id
        ".$onlyLatestSql."
        JOIN ".PostContractTable::getInstance()->getTableName()." pc ON pc.id = claim_rev.post_contract_id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON p.id = pc.project_structure_id
        WHERE cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND claim_rev.locked_status IS TRUE
        ".$projectSql."
        AND p.type = ".ProjectStructure::TYPE_ROOT." AND p.deleted_at IS NULL
        AND claim_rev.deleted_at IS NULL
        ORDER BY claim_rev.post_contract_id, cert.updated_at, claim_rev.version DESC");
        
        $stmt->execute();
        
        $claimCertificateIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        $claimCertificates = [];

        if(!empty($claimCertificateIds) && !$onlyLatestSql)
        {
            $records = [];

            $claimCertCollection = Doctrine_Query::create()
            ->from('ClaimCertificate c')
            ->whereIn('c.id', $claimCertificateIds)
            ->execute();

            foreach($claimCertCollection as $record)
            {
                $records[] = $record;
            }

            unset($claimCertCollection);

            $claimCertificates = ClaimCertificateTable::getClaimCertInfo($records, false, true);
        }

        return $claimCertificates;
    }

    public static function getStandardBillClaimsByClaimCertificateIds(Array $claimCertificateIds, ProjectStructure $project=null)
    {
        if(empty($claimCertificateIds))
        {
            return [];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $claimCertificateProjectSql = ($project) ? " AND p.id = ".$project->id." " : null;
        $in = str_repeat('?,', count($claimCertificateIds) - 1) . '?';

        $stmt = $pdo->prepare("SELECT DISTINCT ON(bill.id, cert.id) bill.id AS bill_id, bill.title AS bill_title, p.id AS project_id,
        cert.id AS claim_certificate_id, r.version,
        SUM(cr.up_to_date_amount) AS up_to_date_amount
        FROM bs_post_contracts pc
        JOIN (SELECT bs_post_contract_claim_revisions.post_contract_id, MAX(version) AS version
        FROM bs_post_contract_claim_revisions
        JOIN bs_claim_certificates ON bs_post_contract_claim_revisions.id = bs_claim_certificates.post_contract_claim_revision_id
        JOIN bs_post_contracts ON bs_post_contract_claim_revisions.post_contract_id = bs_post_contracts.id
        JOIN bs_project_main_information ON bs_project_main_information.project_structure_id = bs_post_contracts.project_structure_id
        JOIN bs_project_structures p ON bs_project_main_information.project_structure_id = p.id
        WHERE bs_project_main_information.eproject_origin_id IS NOT NULL
        ".$claimCertificateProjectSql."
        AND bs_claim_certificates.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
        AND bs_post_contract_claim_revisions.locked_status IS TRUE
        AND bs_post_contract_claim_revisions.deleted_at IS NULL
        GROUP BY bs_post_contract_claim_revisions.post_contract_id) mr ON mr.post_contract_id = pc.id
        JOIN bs_post_contract_claim_revisions r ON r.post_contract_id = mr.post_contract_id AND r.version <= mr.version
        JOIN bs_claim_certificates cert ON r.id = cert.post_contract_claim_revision_id
        JOIN bs_project_structures p ON p.id = pc.project_structure_id
        JOIN bs_project_structures bill ON bill.root_id = p.id
        JOIN bs_bill_types bill_type ON bill.id = bill_type.project_structure_id
        JOIN bs_bill_elements element ON bill_type.project_structure_id = element.project_structure_id
        JOIN bs_bill_items i ON i.element_id = element.id
        JOIN bs_post_contract_standard_claim cr ON cr.bill_item_id = i.id AND cr.revision_id = r.id
        WHERE p.type = ".ProjectStructure::TYPE_ROOT."
        AND p.deleted_at IS NULL ".$claimCertificateProjectSql."
        AND cert.id IN (".$in.")
        AND bill.type = ".ProjectStructure::TYPE_BILL."
        AND bill_type.type <> ".BillType::TYPE_PRELIMINARY."
        AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND r.locked_status IS TRUE
        AND r.deleted_at IS NULL
        AND bill.deleted_at IS NULL AND bill_type.deleted_at IS NULL
        AND element.deleted_at IS NULL
        AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
        GROUP BY p.id, cert.id, r.id, bill.id
        ORDER BY bill.id, cert.id, r.version DESC");

        $stmt->execute($claimCertificateIds);

        $claims = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $claimProjectIds = array_column($claims, 'project_id');

        $previousClaims = [];

        if(!empty($claimProjectIds))
        {
            $stmt = $pdo->prepare("SELECT bill.id AS bill_id, cert.id AS claim_certificate_id, r.version, SUM(cr.up_to_date_amount) AS up_to_date_amount
            FROM bs_post_contracts pc
            JOIN (SELECT bs_post_contract_claim_revisions.post_contract_id, MAX(version) AS version
            FROM bs_post_contract_claim_revisions
            JOIN bs_claim_certificates ON bs_post_contract_claim_revisions.id = bs_claim_certificates.post_contract_claim_revision_id
            JOIN bs_post_contracts ON bs_post_contract_claim_revisions.post_contract_id = bs_post_contracts.id
            JOIN bs_project_main_information ON bs_project_main_information.project_structure_id = bs_post_contracts.project_structure_id
            JOIN bs_project_structures p ON bs_project_main_information.project_structure_id = p.id
            WHERE bs_project_main_information.eproject_origin_id IS NOT NULL
            ".$claimCertificateProjectSql."
            AND p.id IN (".implode(',', $claimProjectIds).")
            AND bs_claim_certificates.id IN (".$in.") 
            AND bs_claim_certificates.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
            AND bs_post_contract_claim_revisions.locked_status IS TRUE
            AND bs_post_contract_claim_revisions.deleted_at IS NULL
            GROUP BY bs_post_contract_claim_revisions.post_contract_id) mr ON mr.post_contract_id = pc.id
            JOIN bs_post_contract_claim_revisions r ON r.post_contract_id = mr.post_contract_id AND r.version <= mr.version
            JOIN bs_claim_certificates cert ON r.id = cert.post_contract_claim_revision_id
            JOIN bs_project_structures p ON p.id = pc.project_structure_id
            JOIN bs_project_structures bill ON bill.root_id = p.id
            JOIN bs_bill_types bill_type ON bill.id = bill_type.project_structure_id
            JOIN bs_bill_elements element ON bill_type.project_structure_id = element.project_structure_id
            JOIN bs_bill_items i ON i.element_id = element.id
            JOIN bs_post_contract_standard_claim cr ON cr.bill_item_id = i.id AND cr.revision_id = r.id
            WHERE p.type = ".ProjectStructure::TYPE_ROOT."
            AND p.deleted_at IS NULL ".$claimCertificateProjectSql."
            AND p.id IN (".implode(',', $claimProjectIds).")
            AND bill.type = ".ProjectStructure::TYPE_BILL."
            AND bill_type.type <> ".BillType::TYPE_PRELIMINARY."
            AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND r.locked_status IS TRUE
            AND r.deleted_at IS NULL
            AND bill.deleted_at IS NULL AND bill_type.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            GROUP BY cert.id, r.id, bill.id
            ORDER BY r.version ASC");

            $stmt->execute($claimCertificateIds);

            $previousClaims = $stmt->fetchAll(PDO::FETCH_ASSOC);
        }

        $records = [];

        foreach($claims as $idx => $claim)
        {
            if(!array_key_exists($claim['claim_certificate_id'], $records))
            {
                $records[$claim['claim_certificate_id']] = [];
            }

            $claim['previous_amount'] = 0;

            foreach($previousClaims as $prevIdx => $previousClaim)
            {
                if($previousClaim['bill_id'] == $claim['bill_id'] && $previousClaim['version'] < $claim['version'])
                {
                    $claim['previous_amount'] = $previousClaim['up_to_date_amount'];

                    unset($previousClaims[$prevIdx]);
                }
            }

            $claim['current_amount'] = $claim['up_to_date_amount'] - $claim['previous_amount'];

            $records[$claim['claim_certificate_id']][$claim['bill_id']] = $claim;

            unset($claims[$idx]);
        }
        
        return $records;
    }

    public static function getLatestStandardBillClaimsByClaimCertificateIds(Array $claimCertificateIds, ProjectStructure $project=null)
    {
        if(empty($claimCertificateIds))
        {
            return [];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $claimCertificateProjectSql = ($project) ? " AND p.id = ".$project->id." " : null;
        $in  = str_repeat('?,', count($claimCertificateIds) - 1) . '?';

        $stmt = $pdo->prepare("SELECT DISTINCT ON(bill.id, cert.id) bill.id AS bill_id, bill.title AS bill_title, p.id AS project_id,
        cert.id AS claim_certificate_id, r.version,
        SUM(cr.up_to_date_amount) AS up_to_date_amount
        FROM bs_post_contracts pc
        JOIN (SELECT bs_post_contract_claim_revisions.post_contract_id, MAX(version) AS version
        FROM bs_post_contract_claim_revisions
        JOIN bs_claim_certificates ON bs_post_contract_claim_revisions.id = bs_claim_certificates.post_contract_claim_revision_id
        JOIN bs_post_contracts ON bs_post_contract_claim_revisions.post_contract_id = bs_post_contracts.id
        JOIN bs_project_main_information ON bs_project_main_information.project_structure_id = bs_post_contracts.project_structure_id
        JOIN bs_project_structures p ON bs_project_main_information.project_structure_id = p.id
        WHERE bs_project_main_information.eproject_origin_id IS NOT NULL
        ".$claimCertificateProjectSql."
        AND bs_claim_certificates.id IN (".implode(',', $claimCertificateIds).") 
        AND bs_claim_certificates.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
        AND bs_post_contract_claim_revisions.locked_status IS TRUE
        AND bs_post_contract_claim_revisions.deleted_at IS NULL
        GROUP BY bs_post_contract_claim_revisions.post_contract_id) mr ON mr.post_contract_id = pc.id
        JOIN bs_post_contract_claim_revisions r ON r.post_contract_id = mr.post_contract_id AND r.version <= mr.version
        JOIN bs_claim_certificates cert ON r.id = cert.post_contract_claim_revision_id
        JOIN bs_project_structures p ON p.id = pc.project_structure_id
        JOIN bs_project_structures bill ON bill.root_id = p.id
        JOIN bs_bill_types bill_type ON bill.id = bill_type.project_structure_id
        JOIN bs_bill_elements element ON bill_type.project_structure_id = element.project_structure_id
        JOIN bs_bill_items i ON i.element_id = element.id
        JOIN bs_post_contract_standard_claim cr ON cr.bill_item_id = i.id AND cr.revision_id = r.id
        WHERE p.type = ".ProjectStructure::TYPE_ROOT."
        AND p.deleted_at IS NULL ".$claimCertificateProjectSql."
        AND cert.id IN (".$in.") 
        AND bill.type = ".ProjectStructure::TYPE_BILL."
        AND bill_type.type <> ".BillType::TYPE_PRELIMINARY."
        AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND r.locked_status IS TRUE
        AND r.deleted_at IS NULL
        AND bill.deleted_at IS NULL AND bill_type.deleted_at IS NULL
        AND element.deleted_at IS NULL
        AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
        GROUP BY p.id, cert.id, r.id, bill.id
        ORDER BY bill.id, cert.id, r.version DESC");

        $stmt->execute($claimCertificateIds);

        $claims = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $claimProjectIds = array_column($claims, 'project_id');

        $previousClaims = [];

        if(!empty($claimProjectIds))
        {
            $stmt = $pdo->prepare("SELECT bill.id AS bill_id, cert.id AS claim_certificate_id, r.version, SUM(cr.up_to_date_amount) AS up_to_date_amount
            FROM bs_post_contracts pc
            JOIN (SELECT bs_post_contract_claim_revisions.post_contract_id, MAX(version) AS version
            FROM bs_post_contract_claim_revisions
            JOIN bs_claim_certificates ON bs_post_contract_claim_revisions.id = bs_claim_certificates.post_contract_claim_revision_id
            JOIN bs_post_contracts ON bs_post_contract_claim_revisions.post_contract_id = bs_post_contracts.id
            JOIN bs_project_main_information ON bs_project_main_information.project_structure_id = bs_post_contracts.project_structure_id
            JOIN bs_project_structures p ON bs_project_main_information.project_structure_id = p.id
            WHERE bs_project_main_information.eproject_origin_id IS NOT NULL
            ".$claimCertificateProjectSql."
            AND bs_claim_certificates.id IN (".$in.") 
            AND bs_claim_certificates.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
            AND bs_post_contract_claim_revisions.locked_status IS TRUE
            AND bs_post_contract_claim_revisions.deleted_at IS NULL
            GROUP BY bs_post_contract_claim_revisions.post_contract_id) mr ON mr.post_contract_id = pc.id
            JOIN bs_post_contract_claim_revisions r ON r.post_contract_id = mr.post_contract_id AND r.version < mr.version
            JOIN bs_claim_certificates cert ON r.id = cert.post_contract_claim_revision_id
            JOIN bs_project_structures p ON p.id = pc.project_structure_id
            JOIN bs_project_structures bill ON bill.root_id = p.id
            JOIN bs_bill_types bill_type ON bill.id = bill_type.project_structure_id
            JOIN bs_bill_elements element ON bill_type.project_structure_id = element.project_structure_id
            JOIN bs_bill_items i ON i.element_id = element.id
            JOIN bs_post_contract_standard_claim cr ON cr.bill_item_id = i.id AND cr.revision_id = r.id
            WHERE p.type = ".ProjectStructure::TYPE_ROOT."
            AND p.deleted_at IS NULL ".$claimCertificateProjectSql."
            AND p.id IN (".implode(',', $claimProjectIds).")
            AND bill.type = ".ProjectStructure::TYPE_BILL."
            AND bill_type.type <> ".BillType::TYPE_PRELIMINARY."
            AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND r.locked_status IS TRUE
            AND r.deleted_at IS NULL
            AND bill.deleted_at IS NULL AND bill_type.deleted_at IS NULL
            AND element.deleted_at IS NULL
            AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
            GROUP BY cert.id, r.id, bill.id
            ORDER BY r.version DESC");

            $stmt->execute($claimCertificateIds);

            $previousClaims = $stmt->fetchAll(PDO::FETCH_ASSOC);
        }
        
        $records = [];

        foreach($claims as $idx => $claim)
        {
            $claim['previous_amount'] = 0;
            $claim['current_amount']  = $claim['up_to_date_amount'] - $claim['previous_amount'];

            $records[$claim['bill_id']] = $claim;

            unset($claims[$idx]);
        }

        foreach($records as $billId => $record)
        {
            foreach($previousClaims as $prevIdx => $previousClaim)
            {
                if($previousClaim['bill_id'] == $billId && $previousClaim['version'] < $record['version'])//we only care the first revision before latest revision
                {
                    $records[$billId]['previous_amount'] = $previousClaim['up_to_date_amount'];

                    $records[$billId]['current_amount'] = $records[$billId]['up_to_date_amount'] - $records[$billId]['previous_amount'];

                    unset($previousClaims[$prevIdx]);
                    break;
                }
            }
        }

        return $records;
    }

    public static function getPreliminaryBillClaimsByClaimCertificateIds(Array $claimCertificateIds, ProjectStructure $project=null)
    {
        if(empty($claimCertificateIds))
        {
            return [];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $claimCertificateProjectSql = ($project) ? " AND p.id = ".$project->id." " : null;
        $in  = str_repeat('?,', count($claimCertificateIds) - 1) . '?';
        $stmt = $pdo->prepare("SELECT DISTINCT ON(bill.id, cert.id) bill.id AS bill_id, bill.title AS bill_title, pc.id AS post_contract_id,
        cert.id AS claim_certificate_id, r.id AS post_contract_claim_revision_id, r.version
        FROM bs_post_contracts pc
        JOIN (SELECT bs_post_contract_claim_revisions.post_contract_id, MAX(version) AS version
        FROM bs_post_contract_claim_revisions
        JOIN bs_claim_certificates ON bs_post_contract_claim_revisions.id = bs_claim_certificates.post_contract_claim_revision_id
        JOIN bs_post_contracts ON bs_post_contract_claim_revisions.post_contract_id = bs_post_contracts.id
        JOIN bs_project_main_information ON bs_project_main_information.project_structure_id = bs_post_contracts.project_structure_id
        JOIN bs_project_structures p ON bs_project_main_information.project_structure_id = p.id
        WHERE bs_project_main_information.eproject_origin_id IS NOT NULL
        ".$claimCertificateProjectSql."
        AND bs_claim_certificates.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
        AND bs_post_contract_claim_revisions.locked_status IS TRUE
        AND bs_post_contract_claim_revisions.deleted_at IS NULL
        GROUP BY bs_post_contract_claim_revisions.post_contract_id) mr ON mr.post_contract_id = pc.id
        JOIN bs_post_contract_claim_revisions r ON r.post_contract_id = mr.post_contract_id AND r.version <= mr.version
        JOIN bs_claim_certificates cert ON r.id = cert.post_contract_claim_revision_id
        JOIN bs_project_structures p ON p.id = pc.project_structure_id
        JOIN bs_project_structures bill ON bill.root_id = p.id
        JOIN bs_bill_types bill_type ON bill.id = bill_type.project_structure_id
        JOIN bs_bill_elements element ON bill_type.project_structure_id = element.project_structure_id
        JOIN bs_bill_items i ON i.element_id = element.id
        WHERE p.type = ".ProjectStructure::TYPE_ROOT."
        AND p.deleted_at IS NULL ".$claimCertificateProjectSql."
        AND cert.id IN (".$in.") 
        AND bill.type = ".ProjectStructure::TYPE_BILL."
        AND bill_type.type = ".BillType::TYPE_PRELIMINARY."
        AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND r.locked_status IS TRUE
        AND r.deleted_at IS NULL
        AND bill.deleted_at IS NULL AND bill_type.deleted_at IS NULL
        AND element.deleted_at IS NULL
        AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
        GROUP BY p.id, pc.id, cert.id, r.id, bill.id
        ORDER BY bill.id, cert.id, r.version DESC");

        $stmt->execute($claimCertificateIds);

        $bills = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $postContractIds = array_unique(array_column($bills, 'post_contract_id'));
        $postContractClaimRevisionIds = array_unique(array_column($bills, 'post_contract_claim_revision_id'));

        $postContracts = Doctrine_Query::create()
        ->from('PostContract p')
        ->whereIn('p.id', $postContractIds)
        ->execute();

        $postContractClaimRevisionCollection = Doctrine_Query::create()
        ->from('PostContractClaimRevision r')
        ->whereIn('r.id', $postContractClaimRevisionIds)
        ->execute();

        $postContractClaimRevisions = [];
        foreach($postContractClaimRevisionCollection as $postContractClaimRevision)
        {
            $postContractClaimRevisions[$postContractClaimRevision->id] = $postContractClaimRevision;
        }

        unset($postContractClaimRevisionCollection);

        $records = [];

        foreach($postContracts as $idx => $postContract)
        {
            foreach($postContractClaimRevisions as $k => $postContractClaimRevision)
            {
                foreach($bills as $k => $bill)
                {
                    if(array_key_exists($bill['post_contract_claim_revision_id'], $postContractClaimRevisions) && $postContractClaimRevisions[$bill['post_contract_claim_revision_id']]->post_contract_id == $postContract->id)
                    {
                        list( $billTotal, $upToDateAmount, $currentAmount ) = PreliminariesClaimTable::getUpToDateAmountByBillId($postContract, $bill['bill_id'], $postContractClaimRevisions[$bill['post_contract_claim_revision_id']]);
                        
                        if(!array_key_exists($bill['claim_certificate_id'], $records))
                        {
                            $records[$bill['claim_certificate_id']] = [];
                        }

                        $records[$bill['claim_certificate_id']][$bill['bill_id']] = [
                            'claim_certificate_id' => $bill['claim_certificate_id'],
                            'revision_id'          => $bill['post_contract_claim_revision_id'],
                            'bill_id'              => $bill['bill_id'],
                            'bill_title'           => $bill['bill_title'],
                            'current_amount'       => $currentAmount,
                            'up_to_date_amount'    => $upToDateAmount
                        ];

                        unset($bills[$k]);
                    }
                }
            }

            unset($postContracts[$idx]);
        }

        unset($postContracts, $postContractClaimRevisions);

        return $records;
    }

    public static function getLatestPreliminaryBillClaimsByClaimCertificateIds(Array $claimCertificateIds, ProjectStructure $project=null)
    {
        if(empty($claimCertificateIds))
        {
            return [];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $claimCertificateProjectSql = ($project) ? " AND p.id = ".$project->id." " : null;
        $in  = str_repeat('?,', count($claimCertificateIds) - 1) . '?';
        $stmt = $pdo->prepare("SELECT DISTINCT ON(bill.id) bill.id AS bill_id, bill.title AS bill_title, pc.id AS post_contract_id,
        cert.id AS claim_certificate_id, r.id AS post_contract_claim_revision_id, r.version
        FROM bs_post_contracts pc
        JOIN (SELECT bs_post_contract_claim_revisions.post_contract_id, MAX(version) AS version
        FROM bs_post_contract_claim_revisions
        JOIN bs_claim_certificates ON bs_post_contract_claim_revisions.id = bs_claim_certificates.post_contract_claim_revision_id
        JOIN bs_post_contracts ON bs_post_contract_claim_revisions.post_contract_id = bs_post_contracts.id
        JOIN bs_project_main_information ON bs_project_main_information.project_structure_id = bs_post_contracts.project_structure_id
        JOIN bs_project_structures p ON bs_project_main_information.project_structure_id = p.id
        WHERE bs_project_main_information.eproject_origin_id IS NOT NULL
        ".$claimCertificateProjectSql."
        AND bs_claim_certificates.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
        AND bs_post_contract_claim_revisions.locked_status IS TRUE
        AND bs_post_contract_claim_revisions.deleted_at IS NULL
        GROUP BY bs_post_contract_claim_revisions.post_contract_id) mr ON mr.post_contract_id = pc.id
        JOIN bs_post_contract_claim_revisions r ON r.post_contract_id = mr.post_contract_id AND r.version <= mr.version
        JOIN bs_claim_certificates cert ON r.id = cert.post_contract_claim_revision_id
        JOIN bs_project_structures p ON p.id = pc.project_structure_id
        JOIN bs_project_structures bill ON bill.root_id = p.id
        JOIN bs_bill_types bill_type ON bill.id = bill_type.project_structure_id
        JOIN bs_bill_elements element ON bill_type.project_structure_id = element.project_structure_id
        JOIN bs_bill_items i ON i.element_id = element.id
        WHERE p.type = ".ProjectStructure::TYPE_ROOT."
        AND p.deleted_at IS NULL ".$claimCertificateProjectSql."
        AND cert.id IN (".$in.") 
        AND bill.type = ".ProjectStructure::TYPE_BILL."
        AND bill_type.type = ".BillType::TYPE_PRELIMINARY."
        AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND r.locked_status IS TRUE
        AND r.deleted_at IS NULL
        AND bill.deleted_at IS NULL AND bill_type.deleted_at IS NULL
        AND element.deleted_at IS NULL
        AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL
        GROUP BY p.id, pc.id, cert.id, r.id, bill.id
        ORDER BY bill.id, r.version DESC");

        $stmt->execute($claimCertificateIds);

        $bills = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $postContractIds = array_unique(array_column($bills, 'post_contract_id'));
        $postContractClaimRevisionIds = array_unique(array_column($bills, 'post_contract_claim_revision_id'));

        $postContracts = Doctrine_Query::create()
        ->from('PostContract p')
        ->whereIn('p.id', $postContractIds)
        ->execute();

        $postContractClaimRevisionCollection = Doctrine_Query::create()
        ->from('PostContractClaimRevision r')
        ->whereIn('r.id', $postContractClaimRevisionIds)
        ->execute();

        $postContractClaimRevisions = [];
        foreach($postContractClaimRevisionCollection as $postContractClaimRevision)
        {
            $postContractClaimRevisions[$postContractClaimRevision->id] = $postContractClaimRevision;
        }

        unset($postContractClaimRevisionCollection);

        $records = [];

        foreach($postContracts as $idx => $postContract)
        {
            foreach($postContractClaimRevisions as $k => $postContractClaimRevision)
            {
                foreach($bills as $k => $bill)
                {
                    if(array_key_exists($bill['post_contract_claim_revision_id'], $postContractClaimRevisions) && $postContractClaimRevisions[$bill['post_contract_claim_revision_id']]->post_contract_id == $postContract->id)
                    {
                        list( $billTotal, $upToDateAmount, $currentAmount ) = PreliminariesClaimTable::getUpToDateAmountByBillId($postContract, $bill['bill_id'], $postContractClaimRevisions[$bill['post_contract_claim_revision_id']]);
                        
                        $records[$bill['bill_id']] = [
                            'revision_id'       => $bill['post_contract_claim_revision_id'],
                            'bill_id'           => $bill['bill_id'],
                            'bill_title'        => $bill['bill_title'],
                            'current_amount'    => $currentAmount,
                            'up_to_date_amount' => $upToDateAmount
                        ];

                        unset($bills[$k]);
                    }
                }
            }

            unset($postContracts[$idx]);
        }

        unset($postContracts, $postContractClaimRevisions);

        return $records;
    }

    public static function getVariationOrdersByClaimCertificateIds(Array $claimCertificateIds, ProjectStructure $project=null)
    {
        if(empty($claimCertificateIds))
        {
            return [];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $claimCertificateProjectSql = ($project) ? " AND p.id = ".$project->id." " : null;
        $in  = str_repeat('?,', count($claimCertificateIds) - 1) . '?';

        $stmt = $pdo->prepare("SELECT cl.claim_certificate_id, cl.created_at
            FROM bs_claim_certificate_approval_logs cl
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON cert.id = cl.claim_certificate_id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
            WHERE cert.id IN (".$in.")
            AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND cl.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
            AND rev.locked_status IS TRUE");
        
        $stmt->execute($claimCertificateIds);

        $claimApprovedDates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $variationOrderProjectSql = ($project) ? " AND vo.project_structure_id = ".$project->id." " : null;

        $stmt = $pdo->prepare("SELECT i.id AS variation_order_item_id, i.variation_order_id AS variation_order_id,
            cert.id AS claim_certificate_id, cert.post_contract_claim_revision_id,
            CASE WHEN ((i.rate * i.addition_quantity) - (i.rate * i.omission_quantity) < 0)
                THEN -1 * ABS(SUM(ci.up_to_date_amount))
                ELSE SUM(ci.up_to_date_amount)
            END AS up_to_date_amount
            FROM ".VariationOrderTable::getInstance()->getTableName()." vo
            JOIN ".VariationOrderItemTable::getInstance()->getTableName()." i ON i.variation_order_id = vo.id
            JOIN ".VariationOrderClaimTable::getInstance()->getTableName()." c ON i.variation_order_id = c.variation_order_id
            JOIN ".VariationOrderClaimItemTable::getInstance()->getTableName()." ci ON ci.variation_order_claim_id = c.id AND ci.variation_order_item_id = i.id
            JOIN ".VariationOrderClaimClaimCertificateTable::getInstance()->getTableName()." xref ON xref.variation_order_claim_id = c.id
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON cert.id = xref.claim_certificate_id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
            JOIN (
                SELECT vo.id AS variation_order_id, cert.id AS claim_certificate_id, MAX(c.revision) AS revision
                FROM ".VariationOrderTable::getInstance()->getTableName()." vo
                JOIN ".VariationOrderItemTable::getInstance()->getTableName()." i ON i.variation_order_id = vo.id
                JOIN ".VariationOrderClaimTable::getInstance()->getTableName()." c ON c.variation_order_id = i.variation_order_id
                JOIN ".VariationOrderClaimItemTable::getInstance()->getTableName()." ci ON ci.variation_order_claim_id = c.id AND ci.variation_order_item_id = i.id
                JOIN ".VariationOrderClaimClaimCertificateTable::getInstance()->getTableName()." xref ON xref.variation_order_claim_id = c.id
                JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON cert.id = xref.claim_certificate_id
                JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
                WHERE i.type <> ".VariationOrderItem::TYPE_HEADER." AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
                AND c.status = ".VariationOrderClaim::STATUS_CLOSED."
                AND rev.locked_status IS TRUE AND vo.is_approved IS TRUE
                AND vo.deleted_at IS NULL AND rev.deleted_at IS NULL AND i.deleted_at IS NULL
                AND c.deleted_at IS NULL AND ci.deleted_at IS NULL
                GROUP BY vo.id, cert.id
            ) lc ON lc.variation_order_id = c.variation_order_id AND lc.claim_certificate_id = cert.id
            WHERE cert.id IN (".$in.") ".$variationOrderProjectSql."
            AND i.type <> ".VariationOrderItem::TYPE_HEADER." AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
            AND c.status = ".VariationOrderClaim::STATUS_CLOSED." AND c.revision = lc.revision
            AND ci.up_to_date_amount <> 0
            AND rev.locked_status IS TRUE AND vo.is_approved IS TRUE
            AND vo.deleted_at IS NULL AND rev.deleted_at IS NULL AND i.deleted_at IS NULL
            AND c.deleted_at IS NULL AND ci.deleted_at IS NULL
            GROUP BY cert.id, vo.id, i.id
            ORDER BY cert.post_contract_claim_revision_id, cert.id, i.variation_order_id");
        
        $stmt->execute($claimCertificateIds);

        $upToDateClaimItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $upToDateClaims = [];
        foreach($upToDateClaimItems as $upToDateClaimItem)
        {
            if(!array_key_exists($upToDateClaimItem['claim_certificate_id'], $upToDateClaims))
            {
                $upToDateClaims[$upToDateClaimItem['claim_certificate_id']] = [];
            }

            if(!array_key_exists($upToDateClaimItem['variation_order_id'], $upToDateClaims[$upToDateClaimItem['claim_certificate_id']]))
            {
                $upToDateClaims[$upToDateClaimItem['claim_certificate_id']][$upToDateClaimItem['variation_order_id']] = 0;
            }

            $upToDateClaims[$upToDateClaimItem['claim_certificate_id']][$upToDateClaimItem['variation_order_id']] += $upToDateClaimItem['up_to_date_amount'];
        }

        unset($upToDateClaimItems);

        $variationOrders = [];

        $stmt = $pdo->prepare("SELECT vo.id AS variation_order_id, vo.project_structure_id, i.id AS variation_order_item_id, c.id AS variation_order_claim_id,
            vo.description, cert.id AS claim_certificate_id, cert.post_contract_claim_revision_id AS revision_id,
            i.reference_amount,
            ROUND(
                (i.total_unit * i.addition_quantity * i.rate) - (i.total_unit * i.omission_quantity * i.rate)
            ) AS nett_omission_addition,
            CASE WHEN ((i.rate * i.addition_quantity) - (i.rate * i.omission_quantity) < 0)
                THEN -1 * ABS(SUM(ci.current_amount))
                ELSE SUM(ci.current_amount)
            END AS current_amount
            FROM ".VariationOrderTable::getInstance()->getTableName()." vo
            JOIN ".VariationOrderItemTable::getInstance()->getTableName()." i ON i.variation_order_id = vo.id
            JOIN ".VariationOrderClaimTable::getInstance()->getTableName()." c ON i.variation_order_id = c.variation_order_id
            LEFT JOIN ".VariationOrderClaimItemTable::getInstance()->getTableName()." ci ON ci.variation_order_claim_id = c.id AND ci.variation_order_item_id = i.id
            JOIN ".VariationOrderClaimClaimCertificateTable::getInstance()->getTableName()." xref ON xref.variation_order_claim_id = c.id
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON cert.id = xref.claim_certificate_id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
            WHERE cert.id IN (".$in.") ".$variationOrderProjectSql."
            AND i.type <> ".VariationOrderItem::TYPE_HEADER." AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
            AND rev.locked_status IS TRUE AND vo.is_approved IS TRUE
            AND vo.deleted_at IS NULL AND rev.deleted_at IS NULL
            AND i.deleted_at IS NULL AND c.deleted_at IS NULL AND ci.deleted_at IS NULL
            GROUP BY cert.id, c.id, vo.id, i.id
            ORDER BY vo.project_structure_id, c.revision DESC, cert.id, cert.post_contract_claim_revision_id, vo.priority, i.id
        ");

        $stmt->execute($claimCertificateIds);

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        foreach($records as $record)
        {
            if(!array_key_exists($record['claim_certificate_id'], $variationOrders))
            {
                $variationOrders[$record['claim_certificate_id']] = [];
            }

            if(!array_key_exists($record['variation_order_id'], $variationOrders[$record['claim_certificate_id']]))
            {
                $variationOrders[$record['claim_certificate_id']][$record['variation_order_id']] = [
                    'claim_certificate_id'   => $record['claim_certificate_id'],
                    'revision_id'            => $record['revision_id'],
                    'bill_id'                => $record['variation_order_id'],
                    'bill_title'             => $record['description'],
                    'reference_amount'       => 0,
                    'nett_omission_addition' => 0,
                    'current_amount'         => 0,
                    'up_to_date_amount'      => (array_key_exists($record['claim_certificate_id'], $upToDateClaims) && array_key_exists($record['variation_order_id'], $upToDateClaims[$record['claim_certificate_id']])) ? $upToDateClaims[$record['claim_certificate_id']][$record['variation_order_id']] : 0,
                    'created_at'             => (array_key_exists($record['claim_certificate_id'], $claimApprovedDates)) ? date('Y-m-d H:i:s', strtotime($claimApprovedDates[$record['claim_certificate_id']])) : null
                ];
            }

            $variationOrders[$record['claim_certificate_id']][$record['variation_order_id']]['reference_amount']       += $record['reference_amount'];
            $variationOrders[$record['claim_certificate_id']][$record['variation_order_id']]['nett_omission_addition'] += $record['nett_omission_addition'];
            $variationOrders[$record['claim_certificate_id']][$record['variation_order_id']]['current_amount']         += $record['current_amount'];
        }

        return $variationOrders;
    }

    public static function getLatestVariationOrdersByClaimCertificateIds(Array $claimCertificateIds, ProjectStructure $project=null)
    {
        if(empty($claimCertificateIds))
        {
            return [];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $claimCertificateProjectSql = ($project) ? " AND p.id = ".$project->id." " : null;
        $in  = str_repeat('?,', count($claimCertificateIds) - 1) . '?';
        $stmt = $pdo->prepare("SELECT c.id, r.id AS post_contract_claim_revision_id
            FROM ".PostContractTable::getInstance()->getTableName()." pc
            JOIN (SELECT bs_post_contract_claim_revisions.post_contract_id, MAX(version) AS version
            FROM bs_post_contract_claim_revisions
            JOIN bs_claim_certificates ON bs_post_contract_claim_revisions.id = bs_claim_certificates.post_contract_claim_revision_id
            JOIN bs_post_contracts ON bs_post_contract_claim_revisions.post_contract_id = bs_post_contracts.id
            JOIN bs_project_main_information ON bs_project_main_information.project_structure_id = bs_post_contracts.project_structure_id
            JOIN bs_project_structures p ON bs_project_main_information.project_structure_id = p.id
            WHERE bs_project_main_information.eproject_origin_id IS NOT NULL
            AND bs_claim_certificates.id IN (".$in.") ".$claimCertificateProjectSql."
            AND bs_claim_certificates.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
            AND bs_post_contract_claim_revisions.locked_status IS TRUE
            AND bs_post_contract_claim_revisions.deleted_at IS NULL
            GROUP BY bs_post_contract_claim_revisions.post_contract_id) mr ON mr.post_contract_id = pc.id
            JOIN bs_post_contract_claim_revisions r ON r.post_contract_id = mr.post_contract_id AND r.version <= mr.version
            JOIN bs_claim_certificates c ON r.id = c.post_contract_claim_revision_id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON p.id = pc.project_structure_id
            WHERE p.type = ".ProjectStructure::TYPE_ROOT." ".$claimCertificateProjectSql."
            AND p.deleted_at IS NULL
            AND c.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND r.locked_status IS TRUE
            AND r.deleted_at IS NULL
            GROUP BY c.id, r.id
            ORDER BY r.version");

        $stmt->execute($claimCertificateIds);

        $claimCertificateRecords = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $variationOrderProjectSql = ($project) ? " AND vo.project_structure_id = ".$project->id." " : null;

        $variationOrders = [];

        $stmt = $pdo->prepare("SELECT cl.claim_certificate_id, cl.created_at
            FROM bs_claim_certificate_approval_logs cl
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON cert.id = cl.claim_certificate_id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
            WHERE cert.id IN (".implode(',', array_keys($claimCertificateRecords)).")
            AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND cl.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
            AND rev.locked_status IS TRUE");
        
        $stmt->execute();

        $claimApprovedDates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare("SELECT DISTINCT i.id AS variation_order_item_id, i.variation_order_id AS variation_order_id,
            CASE WHEN ((i.rate * i.addition_quantity) - (i.rate * i.omission_quantity) < 0)
                THEN -1 * ABS(SUM(ci.current_amount))
                ELSE SUM(ci.current_amount)
            END AS current_amount
            FROM ".VariationOrderTable::getInstance()->getTableName()." vo
            JOIN ".VariationOrderItemTable::getInstance()->getTableName()." i ON i.variation_order_id = vo.id
            JOIN ".VariationOrderClaimTable::getInstance()->getTableName()." c ON i.variation_order_id = c.variation_order_id
            JOIN ".VariationOrderClaimItemTable::getInstance()->getTableName()." ci ON ci.variation_order_claim_id = c.id AND ci.variation_order_item_id = i.id
            JOIN ".VariationOrderClaimClaimCertificateTable::getInstance()->getTableName()." xref ON xref.variation_order_claim_id = c.id
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON cert.id = xref.claim_certificate_id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
            WHERE cert.id IN (".implode(',', array_keys($claimCertificateRecords)).") ".$variationOrderProjectSql."
            AND i.type <> ".VariationOrderItem::TYPE_HEADER." AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
            AND rev.locked_status IS TRUE AND vo.is_approved IS TRUE
            AND vo.deleted_at IS NULL AND rev.deleted_at IS NULL AND i.deleted_at IS NULL
            AND c.deleted_at IS NULL AND ci.deleted_at IS NULL
            GROUP BY i.id
            ORDER BY i.variation_order_id");
        
        $stmt->execute();

        $upToDateClaimItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $upToDateClaims = [];
        foreach($upToDateClaimItems as $upToDateClaimItem)
        {
            if(!array_key_exists($upToDateClaimItem['variation_order_id'], $upToDateClaims))
            {
                $upToDateClaims[$upToDateClaimItem['variation_order_id']] = 0;
            }

            $upToDateClaims[$upToDateClaimItem['variation_order_id']] += $upToDateClaimItem['current_amount'];
        }

        unset($upToDateClaimItems);

        $stmt = $pdo->prepare("SELECT i.id AS variation_order_item_id, i.variation_order_id AS variation_order_id, cert.id AS claim_certificate_id,
            CASE WHEN ((i.rate * i.addition_quantity) - (i.rate * i.omission_quantity) < 0)
                THEN -1 * ABS(SUM(ci.current_amount))
                ELSE SUM(ci.current_amount)
            END AS current_amount
            FROM ".PostContractTable::getInstance()->getTableName()." pc
            JOIN (SELECT post_contract_id, MAX(version) AS version
            FROM ".PostContractClaimRevisionTable::getInstance()->getTableName()."
            WHERE locked_status IS TRUE AND deleted_at IS NULL
            GROUP BY post_contract_id) mrev ON mrev.post_contract_id = pc.id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.post_contract_id = mrev.post_contract_id AND rev.version = mrev.version
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON rev.id = cert.post_contract_claim_revision_id
            JOIN ".VariationOrderClaimClaimCertificateTable::getInstance()->getTableName()." xref ON xref.claim_certificate_id = cert.id
            JOIN ".VariationOrderClaimTable::getInstance()->getTableName()." c ON xref.variation_order_claim_id = c.id
            JOIN ".VariationOrderTable::getInstance()->getTableName()." vo ON c.variation_order_id = vo.id
            JOIN ".VariationOrderItemTable::getInstance()->getTableName()." i ON i.variation_order_id = vo.id
            JOIN ".VariationOrderClaimItemTable::getInstance()->getTableName()." ci ON ci.variation_order_claim_id = c.id AND ci.variation_order_item_id = i.id
            WHERE cert.id IN (".implode(',', $claimCertificateIds).") ".$variationOrderProjectSql."
            AND i.type <> ".VariationOrderItem::TYPE_HEADER." AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
            AND ci.current_amount <> 0
            AND rev.locked_status IS TRUE AND vo.is_approved IS TRUE
            AND vo.deleted_at IS NULL AND rev.deleted_at IS NULL AND i.deleted_at IS NULL
            AND c.deleted_at IS NULL AND ci.deleted_at IS NULL
            GROUP BY cert.id, i.id
            ORDER BY cert.id, cert.post_contract_claim_revision_id, i.variation_order_id");
        
        $stmt->execute();

        $currentClaimItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $currentClaims = [];
        foreach($currentClaimItems as $currentClaimItem)
        {
            if(!array_key_exists($currentClaimItem['variation_order_id'], $currentClaims))
            {
                $currentClaims[$currentClaimItem['variation_order_id']] = 0;
            }

            $currentClaims[$currentClaimItem['variation_order_id']] += $currentClaimItem['current_amount'];
        }

        unset($currentClaimItems);

        $stmt = $pdo->prepare("SELECT vo.id AS variation_order_id, vo.project_structure_id, vo.description, cert.id AS claim_certificate_id,
            cert.post_contract_claim_revision_id AS revision_id, SUM(i.reference_amount) as reference_amount,
            ROUND(COALESCE(SUM((i.total_unit * i.addition_quantity * i.rate) - (i.total_unit * i.omission_quantity * i.rate))), 2) AS nett_omission_addition
            FROM ".VariationOrderTable::getInstance()->getTableName()." vo
            JOIN ".VariationOrderItemTable::getInstance()->getTableName()." i ON i.variation_order_id = vo.id
            JOIN ".VariationOrderClaimCertificateTable::getInstance()->getTableName()." vcx ON vcx.variation_order_id = vo.id
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON cert.id = vcx.claim_certificate_id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
            WHERE cert.id IN (".implode(',', array_keys($claimCertificateRecords)).") ".$variationOrderProjectSql."
            AND i.type <> ".VariationOrderItem::TYPE_HEADER." AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED."
            AND rev.locked_status IS TRUE AND vo.is_approved IS TRUE
            AND vo.deleted_at IS NULL AND rev.deleted_at IS NULL AND i.deleted_at IS NULL
            GROUP BY vo.id, cert.id
            ORDER BY vo.project_structure_id, cert.id, cert.post_contract_claim_revision_id, vo.priority");
        
        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach($records as $record)
        {
            if(!array_key_exists($record['project_structure_id'], $variationOrders))
            {
                $variationOrders[$record['project_structure_id']] = [];
            }

            $variationOrders[$record['project_structure_id']][$record['variation_order_id']] = [
                'claim_certificate_id'   => $record['claim_certificate_id'],
                'revision_id'            => $record['revision_id'],
                'bill_id'                => $record['variation_order_id'],
                'bill_title'             => $record['description'],
                'reference_amount'       => ($record['reference_amount']) ? $record['reference_amount'] : 0,
                'nett_omission_addition' => ($record['nett_omission_addition']) ? $record['nett_omission_addition'] : 0,
                'current_amount'         => 0,
                'up_to_date_amount'      => 0,
                'previous_amount'        => 0,
                'created_at'             => (array_key_exists($record['claim_certificate_id'], $claimApprovedDates)) ? date('Y-m-d H:i:s', strtotime($claimApprovedDates[$record['claim_certificate_id']])) : null
            ];

            if(array_key_exists($record['variation_order_id'], $currentClaims))
            {
                $variationOrders[$record['project_structure_id']][$record['variation_order_id']]['current_amount'] = $currentClaims[$record['variation_order_id']];
            }

            if(array_key_exists($record['variation_order_id'], $upToDateClaims))
            {
                $variationOrders[$record['project_structure_id']][$record['variation_order_id']]['up_to_date_amount'] = $upToDateClaims[$record['variation_order_id']];
            }
            
            $variationOrders[$record['project_structure_id']][$record['variation_order_id']]['previous_amount'] = $variationOrders[$record['project_structure_id']][$record['variation_order_id']]['up_to_date_amount'] - $variationOrders[$record['project_structure_id']][$record['variation_order_id']]['current_amount'];
        }

        return $variationOrders;
    }

    public static function getMaterialOnSitesByClaimCertificateIds(Array $claimCertificateIds, ProjectStructure $project=null)
    {
        if(empty($claimCertificateIds))
        {
            return [];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $claimCertificateProjectSql = ($project) ? " AND p.id = ".$project->id." " : null;
        $in  = str_repeat('?,', count($claimCertificateIds) - 1) . '?';

        $stmt = $pdo->prepare("SELECT cert.id AS claim_certificate_id, rev.id AS post_contract_claim_revision_id,
        rev.version, rev.post_contract_id, ROUND(SUM(mos.final_amount), 2) AS amount
        FROM ".PostContractClaimMaterialOnSiteTable::getInstance()->getTableName()." mos
        JOIN ".PostContractClaimItemTable::getInstance()->getTableName()." ci ON mos.post_contract_claim_item_id = ci.id
        JOIN ".PostContractClaimTable::getInstance()->getTableName()." c ON ci.post_contract_claim_id = c.id
        JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON c.claim_certificate_id = cert.id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
        JOIN ".PostContractTable::getInstance()->getTableName()." pc ON pc.id = rev.post_contract_id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON p.id = pc.project_structure_id
        WHERE cert.id IN (".$in.") ".$claimCertificateProjectSql."
        AND c.status = ".PostContractClaim::STATUS_APPROVED."
        AND c.type = ".PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE."
        AND p.type = ".ProjectStructure::TYPE_ROOT." AND p.deleted_at IS NULL
        AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND rev.locked_status IS TRUE
        AND rev.deleted_at IS NULL AND c.deleted_at IS NULL
        AND mos.deleted_at IS NULL AND ci.deleted_at IS NULL
        GROUP BY cert.id, rev.id");

        $stmt->execute($claimCertificateIds);

        $claims = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $materialOnSites = [];

        foreach($claims as $claim)
        {
            $materialOnSites[$claim['claim_certificate_id']] = [
                'claim_certificate_id' => $claim['claim_certificate_id'],
                'revision_id'          => $claim['post_contract_claim_revision_id'],
                'current_amount'       => $claim['amount'],
                'up_to_date_amount'    => 0
            ];
        }

        return $materialOnSites;
    }

    public static function getDebitCreditNotesByClaimCertificateIds(Array $claimCertificateIds, ProjectStructure $project=null)
    {
        if(empty($claimCertificateIds))
        {
            return [];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $claimCertificateProjectSql = ($project) ? " AND p.id = ".$project->id." " : null;
        $in  = str_repeat('?,', count($claimCertificateIds) - 1) . '?';

        $debitCreditNotes = [];

        $stmt = $pdo->prepare("
            SELECT ac.id AS account_code_id, pc.id AS post_contract_id, c.id AS claim_certificate_id, ac.description, rev.id AS revision_id, rev.version, ROUND(SUM((cni.rate * cni.quantity)), 2) AS total
            FROM ".DebitCreditNoteClaimItemTable::getInstance()->getTableName()." cni
            JOIN ".AccountCodeTable::getInstance()->getTableName()." ac ON ac.id = cni.account_code_id AND ac.deleted_at IS NULL
            JOIN ".AccountGroupTable::getInstance()->getTableName()." ag ON ag.id = ac.account_group_id AND ag.deleted_at IS NULL
            JOIN ".DebitCreditNoteClaimTable::getInstance()->getTableName()." cn ON cni.debit_credit_note_claim_id = cn.id
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." c ON cn.claim_certificate_id = c.id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON c.post_contract_claim_revision_id = rev.id
            JOIN ".PostContractTable::getInstance()->getTableName()." pc ON pc.id = rev.post_contract_id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON p.id = pc.project_structure_id
            WHERE c.id IN (".$in.") ".$claimCertificateProjectSql."
            AND p.type = ".ProjectStructure::TYPE_ROOT." AND p.deleted_at IS NULL
            AND (cni.rate * cni.quantity) <> 0
            AND c.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND rev.locked_status IS TRUE
            AND rev.deleted_at IS NULL
            AND cni.deleted_at IS NULL AND cn.deleted_at IS NULL AND rev.deleted_at IS NULL
            GROUP BY pc.id, c.id, ac.id, rev.id
        ");
        
        $stmt->execute($claimCertificateIds);

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("
            SELECT ac.id AS account_code_id, pc.id AS post_contract_id, rev.version, ROUND(SUM((cni.rate * cni.quantity)), 2) AS total
            FROM ".DebitCreditNoteClaimItemTable::getInstance()->getTableName()." cni
            JOIN ".AccountCodeTable::getInstance()->getTableName()." ac ON ac.id = cni.account_code_id AND ac.deleted_at IS NULL
            JOIN ".AccountGroupTable::getInstance()->getTableName()." ag ON ag.id = ac.account_group_id AND ag.deleted_at IS NULL
            JOIN ".DebitCreditNoteClaimTable::getInstance()->getTableName()." cn ON cni.debit_credit_note_claim_id = cn.id
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." c ON cn.claim_certificate_id = c.id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON c.post_contract_claim_revision_id = rev.id
            JOIN ".PostContractTable::getInstance()->getTableName()." pc ON pc.id = rev.post_contract_id
            JOIN (
                SELECT MAX(rx.version) AS version, pcx.id AS post_contract_id, cnix.account_code_id
                FROM ".DebitCreditNoteClaimItemTable::getInstance()->getTableName()." cnix
                JOIN ".DebitCreditNoteClaimTable::getInstance()->getTableName()." cnx ON cnix.debit_credit_note_claim_id = cnx.id
                JOIN ".ClaimCertificateTable::getInstance()->getTableName()." AS cx ON cnx.claim_certificate_id = cx.id
                JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rx ON rx.id = cx.post_contract_claim_revision_id
                JOIN ".PostContractTable::getInstance()->getTableName()." pcx ON pcx.id = rx.post_contract_id
                JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON p.id = pcx.project_structure_id
                WHERE cx.id IN (".$in.") ".$claimCertificateProjectSql."
                AND p.type = ".ProjectStructure::TYPE_ROOT." AND p.deleted_at IS NULL
                AND cx.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND rx.locked_status IS TRUE
                AND rx.deleted_at IS NULL AND cnix.deleted_at IS NULL AND cnx.deleted_at IS NULL
                GROUP BY pcx.id, cnix.account_code_id
            ) total ON total.post_contract_id = pc.id AND cni.account_code_id = total.account_code_id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON p.id = pc.project_structure_id
            WHERE p.type = ".ProjectStructure::TYPE_ROOT." AND p.deleted_at IS NULL ".$claimCertificateProjectSql."
            AND c.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND rev.locked_status IS TRUE
            AND rev.version <= total.version
            AND (cni.rate * cni.quantity) <> 0
            AND rev.deleted_at IS NULL
            AND cni.deleted_at IS NULL AND cn.deleted_at IS NULL AND rev.deleted_at IS NULL
            GROUP BY pc.id, ac.id, rev.id
        ");
        
        $stmt->execute($claimCertificateIds);

        $allRevisionRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach($records as $record)
        {
            if(!array_key_exists($record['claim_certificate_id'], $debitCreditNotes))
            {
                $debitCreditNotes[$record['claim_certificate_id']] = [];
            }

            if(!array_key_exists($record['account_code_id'], $debitCreditNotes[$record['claim_certificate_id']]))
            {
                $debitCreditNotes[$record['claim_certificate_id']][$record['account_code_id']] = [
                    'claim_certificate_id' => $record['claim_certificate_id'],
                    'revision_id'          => $record['revision_id'],
                    'bill_id'              => $record['account_code_id'],
                    'bill_title'           => ($record['description']) ? mb_strtoupper($record['description']) : null,
                    'current_amount'       => ($record['total']) ? $record['total'] : 0,
                    'up_to_date_amount'    => 0
                ];
            }

            foreach($allRevisionRecords as $idx => $allRevisionRecord)
            {
                if($allRevisionRecord['post_contract_id'] == $record['post_contract_id'] && $allRevisionRecord['account_code_id'] == $record['account_code_id'] && $allRevisionRecord['version'] <= $record['version'])
                {
                    $debitCreditNotes[$record['claim_certificate_id']][$record['account_code_id']]['up_to_date_amount'] += $allRevisionRecord['total'];
                }
            }
        }

        return $debitCreditNotes;
    }

    public static function getAdvancePaymentsByClaimCertificateIds(Array $claimCertificateIds, ProjectStructure $project=null)
    {
        if(empty($claimCertificateIds))
        {
            return [];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $claimCertificateProjectSql = ($project) ? " AND p.id = ".$project->id." " : null;
        $in  = str_repeat('?,', count($claimCertificateIds) - 1) . '?';

        $advancePayments = [];

        $stmt = $pdo->prepare("SELECT cert.id AS claim_certificate_id, rev.id AS post_contract_claim_revision_id,
        rev.version, rev.post_contract_id,
        ROUND(SUM(ci.quantity * ci.rate), 2) AS amount
        FROM ".AdvancePaymentTable::getInstance()->getTableName()." ap
        JOIN ".PostContractClaimTable::getInstance()->getTableName()." c ON ap.post_contract_claim_id = c.id
        JOIN ".PostContractClaimItemTable::getInstance()->getTableName()." ci ON ci.post_contract_claim_id = c.id
        JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON c.claim_certificate_id = cert.id
        JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
        JOIN ".PostContractTable::getInstance()->getTableName()." pc ON pc.id = rev.post_contract_id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON p.id = pc.project_structure_id
        WHERE cert.id IN (".$in.") ".$claimCertificateProjectSql."
        AND c.status = ".PostContractClaim::STATUS_APPROVED."
        AND c.type = ".PostContractClaim::TYPE_ADVANCED_PAYMENT."
        AND p.type = ".ProjectStructure::TYPE_ROOT." AND p.deleted_at IS NULL
        AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND rev.locked_status IS TRUE
        AND rev.deleted_at IS NULL AND c.deleted_at IS NULL AND ci.deleted_at IS NULL AND ap.deleted_at IS NULL
        GROUP BY cert.id, rev.id");

        $stmt->execute($claimCertificateIds);

        $claims = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("
            SELECT cert.id AS claim_certificate_id, rev.id AS post_contract_claim_revision_id,
            rev.version, rev.post_contract_id,
            ROUND(SUM(ci.quantity * ci.rate), 2) AS amount
            FROM ".AdvancePaymentTable::getInstance()->getTableName()." ap
            JOIN ".PostContractClaimTable::getInstance()->getTableName()." c ON ap.post_contract_claim_id = c.id
            JOIN ".PostContractClaimItemTable::getInstance()->getTableName()." ci ON ci.post_contract_claim_id = c.id
            JOIN ".ClaimCertificateTable::getInstance()->getTableName()." cert ON c.claim_certificate_id = cert.id
            JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rev ON rev.id = cert.post_contract_claim_revision_id
            JOIN ".PostContractTable::getInstance()->getTableName()." pc ON pc.id = rev.post_contract_id
            JOIN (
                SELECT MAX(rx.version) AS version, pcx.id AS post_contract_id
                FROM ".AdvancePaymentTable::getInstance()->getTableName()." apx
                JOIN ".PostContractClaimTable::getInstance()->getTableName()." cx ON apx.post_contract_claim_id = cx.id
                JOIN ".PostContractClaimItemTable::getInstance()->getTableName()." cix ON cix.post_contract_claim_id = cx.id
                JOIN ".ClaimCertificateTable::getInstance()->getTableName()." AS certx ON cx.claim_certificate_id = certx.id
                JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." rx ON rx.id = certx.post_contract_claim_revision_id
                JOIN ".PostContractTable::getInstance()->getTableName()." pcx ON pcx.id = rx.post_contract_id
                JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON p.id = pcx.project_structure_id
                WHERE certx.id IN (".$in.") ".$claimCertificateProjectSql."
                AND p.type = ".ProjectStructure::TYPE_ROOT." AND p.deleted_at IS NULL
                AND certx.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND rx.locked_status IS TRUE
                AND rx.deleted_at IS NULL AND cix.deleted_at IS NULL AND cx.deleted_at IS NULL AND apx.deleted_at IS NULL
                GROUP BY pcx.id
            ) maxRev ON maxRev.post_contract_id = pc.id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON p.id = pc.project_structure_id
            WHERE p.type = ".ProjectStructure::TYPE_ROOT." AND p.deleted_at IS NULL ".$claimCertificateProjectSql."
            AND rev.version <= maxRev.version
            AND c.status = ".PostContractClaim::STATUS_APPROVED."
            AND c.type = ".PostContractClaim::TYPE_ADVANCED_PAYMENT."
            AND cert.status = ".ClaimCertificate::STATUS_TYPE_APPROVED." AND rev.locked_status IS TRUE
            AND rev.deleted_at IS NULL AND c.deleted_at IS NULL
            AND ap.deleted_at IS NULL AND ci.deleted_at IS NULL
            GROUP BY cert.id, rev.id
        ");
        
        $stmt->execute($claimCertificateIds);

        $allRevisionRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach($claims as $claim)
        {
            $advancePayments[$claim['claim_certificate_id']] = [
                'claim_certificate_id' => $claim['claim_certificate_id'],
                'revision_id'          => $claim['post_contract_claim_revision_id'],
                'current_amount'       => $claim['amount'],
                'up_to_date_amount'    => 0
            ];

            foreach($allRevisionRecords as $idx => $allRevisionRecord)
            {
                if($allRevisionRecord['post_contract_id'] == $claim['post_contract_id'] && $allRevisionRecord['version'] <= $claim['version'])
                {
                    $advancePayments[$claim['claim_certificate_id']]['up_to_date_amount'] += $allRevisionRecord['amount'];
                }
            }
        }

        return $advancePayments;
    }
}