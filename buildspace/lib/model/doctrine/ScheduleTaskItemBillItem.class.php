<?php

/**
 * ScheduleTaskItemBillItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ScheduleTaskItemBillItem extends BaseScheduleTaskItemBillItem
{
    public function getQuantityPerUnit()
    {
        return ScheduleTaskItemBillItemTable::getQuantityPerUnitById($this->id, $this->ScheduleTaskItem->ProjectSchedule->sub_package_id);
    }

    public function getTotalUnit()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(COUNT(x.id), 0) AS total_unit
            FROM ".ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName()." x
            JOIN ".ScheduleTaskItemBillItemTable::getInstance()->getTableName()." AS t ON x.schedule_task_item_bill_item_id = t.id
            JOIN ".BillItemTable::getInstance()->getTableName()." i ON t.bill_item_id = i.id
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
            JOIN ".ProjectStructureTable::getInstance()->getTableName()." s ON e.project_structure_id = s.id
            WHERE s.root_id = ".$this->ScheduleTaskItem->ProjectSchedule->project_structure_id."
            AND t.id = ".$this->id."
            AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
            AND e.deleted_at IS NULL AND s.deleted_at IS NULL GROUP BY t.id");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN, 0);
    }

    public function setProductivity($value, Doctrine_Connection $con=null)
    {
        $value = is_numeric($value) ? $value : 0;

        $con = $con ? $con : $this->getTable()->getConnection();

        if($this->ProductivityInfo->isNew())
        {
            $this->ProductivityInfo->productivity_type = ScheduleBillItemProductivity::TYPE_UNIT_PER_HOUR;
        }

        $productivity = number_format($value, 2, '.', '');
        $numberOfGang = $this->ProductivityInfo->number_of_gang;
        $totalQuantity = $this->getQuantityPerUnit() * $this->getTotalUnit();

        if($productivity != 0)
        {
            $hours = ($totalQuantity / $productivity);

            $hours = $numberOfGang != 0 ? $hours / $numberOfGang : $hours;
        }
        else
        {
            $hours = 0;
        }

        $hoursPerDay = $this->ScheduleTaskItem->hours_per_day;

        $days = $hoursPerDay != 0 ? $hours / $hoursPerDay : 0;

        $this->ProductivityInfo->productivity = number_format($value, 2, '.', '');
        $this->ProductivityInfo->duration_hours = $hours;
        $this->ProductivityInfo->duration_days = $days;

        $this->ProductivityInfo->save($con);
    }

    public function setNumberOfGang($value, Doctrine_Connection $con=null)
    {
        $value = is_numeric($value) ? $value : 0;

        $con = $con ? $con : $this->getTable()->getConnection();

        if($this->ProductivityInfo->isNew())
        {
            $this->ProductivityInfo->productivity_type = ScheduleBillItemProductivity::TYPE_UNIT_PER_HOUR;
        }

        $productivity = $this->ProductivityInfo->productivity;
        $numberOfGang = $value;
        $totalQuantity = $this->getQuantityPerUnit() * $this->getTotalUnit();

        if($productivity != 0)
        {
            $hours = ($totalQuantity / $productivity);

            $hours = $numberOfGang != 0 ? $hours / $numberOfGang : $hours;
        }
        else
        {
            $hours = 0;
        }

        $hoursPerDay = $this->ScheduleTaskItem->hours_per_day;

        $days = $hoursPerDay != 0 ? $hours / $hoursPerDay : 0;

        $this->ProductivityInfo->number_of_gang = $value;
        $this->ProductivityInfo->duration_hours = $hours;
        $this->ProductivityInfo->duration_days = $days;

        $this->ProductivityInfo->save($con);
    }

    public function setDurationHours($value, Doctrine_Connection $con=null)
    {
        $value = is_numeric($value) ? $value : 0;

        $con = $con ? $con : $this->getTable()->getConnection();

        if($this->ProductivityInfo->isNew())
        {
            $this->ProductivityInfo->productivity_type = ScheduleBillItemProductivity::TYPE_UNIT_PER_HOUR;
        }

        $hoursPerDay = $this->ScheduleTaskItem->hours_per_day;

        $days = $hoursPerDay != 0 ? $value / $hoursPerDay : 0;

        $this->ProductivityInfo->productivity = 0;
        $this->ProductivityInfo->number_of_gang = 0;
        $this->ProductivityInfo->duration_hours = number_format($value, 2, '.', '');
        $this->ProductivityInfo->duration_days = $days;

        $this->ProductivityInfo->save($con);
    }

    public function setDurationDays($value, Doctrine_Connection $con=null)
    {
        $value = is_numeric($value) ? $value : 0;

        $con = $con ? $con : $this->getTable()->getConnection();

        if($this->ProductivityInfo->isNew())
        {
            $this->ProductivityInfo->productivity_type = ScheduleBillItemProductivity::TYPE_UNIT_PER_HOUR;
        }

        $hoursPerDay = $this->ScheduleTaskItem->hours_per_day;

        $hours = $value * $hoursPerDay;

        $this->ProductivityInfo->productivity = 0;
        $this->ProductivityInfo->number_of_gang = 0;
        $this->ProductivityInfo->duration_hours = $hours;
        $this->ProductivityInfo->duration_days = number_format($value, 2, '.', '');

        $this->ProductivityInfo->save($con);
    }

    public function updateTotalUnits(Array $selectedIds, Array $unselectedIds)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();
        $postContractId = $this->ScheduleTaskItem->ProjectSchedule->ProjectStructure->PostContract->id;
        $subPackageId = $this->ScheduleTaskItem->ProjectSchedule->sub_package_id;

        if(count($unselectedIds) > 0 && array_search("", $unselectedIds) === false)
        {
            $units = array();

            foreach($unselectedIds as $dirtyId)
            {
                $explodedId = explode("-", $dirtyId);

                if(is_numeric($explodedId[0]) && $explodedId[0] == $this->bill_column_setting_id)
                {
                    $units[] = $explodedId[1];
                }
            }

            if($units)
            {
                $typeReferences = array();

                if($subPackageId > 0)
                {
                    $stmt = $pdo->prepare("SELECT t.id FROM ".SubPackageTypeReferenceTable::getInstance()->getTableName()." t
                        JOIN ".ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName()." x ON x.sub_package_type_reference_id = t.id AND x.standard_type_reference_id IS NULL
                        JOIN ".ScheduleTaskItemBillItemTable::getInstance()->getTableName()." s ON x.schedule_task_item_bill_item_id = s.id
                        WHERE s.id = ".$this->id." AND t.bill_column_setting_id = ".$this->bill_column_setting_id."
                        AND t.sub_package_id = ".$subPackageId." AND t.counter IN (".implode(',', $units).")");

                    $stmt->execute();

                    $typeReferences = array_merge($typeReferences, $stmt->fetchAll(PDO::FETCH_COLUMN, 0));
                }
                else
                {
                    $stmt = $pdo->prepare("SELECT t.id FROM ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." t
                        JOIN ".ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName()." x ON x.standard_type_reference_id = t.id AND x.sub_package_type_reference_id IS NULL
                        JOIN ".ScheduleTaskItemBillItemTable::getInstance()->getTableName()." s ON x.schedule_task_item_bill_item_id = s.id
                        WHERE s.id = ".$this->id." AND t.bill_column_setting_id = ".$this->bill_column_setting_id."
                        AND t.post_contract_id = ".$postContractId." AND t.counter IN (".implode(',', array_values($units)).")");

                    $stmt->execute();

                    $typeReferences = array_merge($typeReferences, $stmt->fetchAll(PDO::FETCH_COLUMN, 0));
                }

                /*
                * Remove all tagged items from unselected bill items list
                */

                if($typeReferences)
                {
                    $sql = $subPackageId > 0 ? "x.sub_package_type_reference_id IN (".implode(',', $typeReferences).") AND x.standard_type_reference_id IS NULL" : "x.sub_package_type_reference_id IS NULL AND x.standard_type_reference_id IN (".implode(',', $typeReferences).")";

                    $stmt = $pdo->prepare("DELETE FROM ".ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName()." x WHERE ".$sql."
                    AND x.schedule_task_item_bill_item_id = ".$this->id);

                    $stmt->execute();
                }
            }
        }

        if(count($selectedIds) > 0 && array_search("", $selectedIds) === false)
        {
            $units = array();

            foreach($selectedIds as $dirtyId)
            {
                $explodedId = explode("-", $dirtyId);

                if(is_numeric($explodedId[0]) and $explodedId[0] == $this->bill_column_setting_id)
                {
                    $units[] = $explodedId[1];
                }
            }

            if($units)
            {
                $typeReferences = array();
                $newRecords = array();
                $typeReferenceIds = array();
                $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

                $counterList = $units;

                if($subPackageId > 0)
                {
                    $stmt = $pdo->prepare("SELECT id, counter FROM ".SubPackageTypeReferenceTable::getInstance()->getTableName()."
                        WHERE sub_package_id = ".$subPackageId." AND bill_column_setting_id =".$this->bill_column_setting_id."
                        AND counter IN (".implode(',', $counterList).")");

                    $stmt->execute();

                    $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

                    foreach($records as $existedCounter)
                    {
                        if(($key = array_search($existedCounter['counter'], $counterList)) !== false) {
                            unset($counterList[$key]);
                            $typeReferenceIds[] = $existedCounter['id'];
                        }
                    }

                    foreach($counterList as $counter)
                    {
                        $newRecords[] ="(".$this->bill_column_setting_id.", ".$counter.", ".$subPackageId.", NOW(), NOW(), ".$userId.", ".$userId.")";
                    }
                }
                else
                {
                    $stmt = $pdo->prepare("SELECT id, counter FROM ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()."
                        WHERE post_contract_id = ".$postContractId." AND bill_column_setting_id =".$this->bill_column_setting_id."
                        AND counter IN (".implode(',', $units).")");

                    $stmt->execute();

                    $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

                    foreach($records as $existedCounter)
                    {
                        if(($key = array_search($existedCounter['counter'], $counterList)) !== false) {
                            unset($counterList[$key]);
                            $typeReferenceIds[] = $existedCounter['id'];
                        }
                    }

                    foreach($counterList as $counter)
                    {
                        $newRecords[] = "(".$this->bill_column_setting_id.", ".$counter.", ".$postContractId.")";
                    }
                }

                if($newRecords)
                {
                    try
                    {
                        $pdo->beginTransaction();

                        $sqlInsert = $subPackageId > 0 ? 'INSERT INTO '.SubPackageTypeReferenceTable::getInstance()->getTableName().'
                        (bill_column_setting_id, counter, sub_package_id, created_at, updated_at, created_by, updated_by) VALUES '.implode(',', $newRecords) : 'INSERT INTO '.PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName().'
                        (bill_column_setting_id, counter, post_contract_id) VALUES '.implode(',', $newRecords);

                        $stmt = $pdo->prepare($sqlInsert);

                        $stmt->execute();

                        $pdo->commit();

                        unset($newRecords);
                    }
                    catch(PDOException $e)
                    {
                        $pdo->rollBack();
                        throw $e;
                    }
                }

                if($subPackageId > 0)
                {
                    $stmt = $pdo->prepare("SELECT id FROM ".SubPackageTypeReferenceTable::getInstance()->getTableName()."
                                WHERE bill_column_setting_id = ".$this->bill_column_setting_id." AND sub_package_id = ".$subPackageId." AND counter IN (".implode(',', $units).")
                                AND id NOT IN (SELECT t.id FROM ".SubPackageTypeReferenceTable::getInstance()->getTableName()." t
                                JOIN ".ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName()." x ON x.sub_package_type_reference_id = t.id AND x.standard_type_reference_id IS NULL
                                JOIN ".ScheduleTaskItemBillItemTable::getInstance()->getTableName()." s ON x.schedule_task_item_bill_item_id = s.id
                                WHERE s.id = ".$this->id." AND t.bill_column_setting_id = ".$this->bill_column_setting_id."
                                AND t.sub_package_id = ".$subPackageId." AND t.counter IN (".implode(',', $units)."))");

                    $stmt->execute();

                    $typeReferences = array_merge($typeReferences, $stmt->fetchAll(PDO::FETCH_COLUMN, 0));
                }
                else
                {
                    $stmt = $pdo->prepare("SELECT id FROM ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()."
                                WHERE bill_column_setting_id = ".$this->bill_column_setting_id." AND post_contract_id = ".$postContractId." AND counter IN (".implode(',', $units).")
                                AND id NOT IN (SELECT t.id FROM ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." t
                                JOIN ".ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName()." x ON x.standard_type_reference_id = t.id AND x.sub_package_type_reference_id IS NULL
                                JOIN ".ScheduleTaskItemBillItemTable::getInstance()->getTableName()." s ON x.schedule_task_item_bill_item_id = s.id
                                WHERE s.id = ".$this->id." AND t.bill_column_setting_id = ".$this->bill_column_setting_id."
                                AND t.post_contract_id = ".$postContractId." AND t.counter IN (".implode(',', $units)."))");

                    $stmt->execute();

                    $typeReferences = array_merge($typeReferences, $stmt->fetchAll(PDO::FETCH_COLUMN, 0));
                }

                if($typeReferences)
                {
                    $taggedUnits = array();
                    foreach($typeReferences as $typeReferenceId)
                    {
                        $taggedUnits[] ="(".$this->id.", ".$typeReferenceId.", NULL, NOW(), NOW(), ".$userId.", ".$userId.")";
                    }

                    if($taggedUnits)
                    {
                        try
                        {
                            $pdo->beginTransaction();

                            $sqlInsert = $subPackageId > 0 ? 'INSERT INTO '.ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName().'
                                    (schedule_task_item_bill_item_id, sub_package_type_reference_id, standard_type_reference_id, created_at, updated_at, created_by, updated_by) VALUES '.implode(',', $taggedUnits) :
                                'INSERT INTO '.ScheduleTaggedBillItemTypeReferenceTable::getInstance()->getTableName().'
                                    (schedule_task_item_bill_item_id, standard_type_reference_id, sub_package_type_reference_id, created_at, updated_at, created_by, updated_by) VALUES '.implode(',', $taggedUnits);

                            $stmt = $pdo->prepare($sqlInsert);

                            $stmt->execute();

                            $pdo->commit();
                        }
                        catch(PDOException $e)
                        {
                            $pdo->rollBack();
                            throw $e;
                        }
                    }
                }
            }
        }
    }

    public function recalculateProductivity()
    {
        if($this->ProductivityInfo->isNew())
        {
            $this->ProductivityInfo->productivity_type = ScheduleBillItemProductivity::TYPE_UNIT_PER_HOUR;
        }

        $productivity = $this->ProductivityInfo->productivity;
        $numberOfGang = $this->ProductivityInfo->number_of_gang;

        if($productivity != 0)
        {
            $hours = ($this->getTotalUnit() * $this->getQuantityPerUnit()) / $productivity;

            $hours = $numberOfGang != 0 ? $hours / $numberOfGang : $hours;
        }
        else if($productivity == 0 and $this->ProductivityInfo->duration_hours != 0)
        {
            $hours = $this->ProductivityInfo->duration_hours;
        }
        else
        {
            $hours = 0;
        }

        $days = $this->ScheduleTaskItem->hours_per_day != 0 ? $hours / $this->ScheduleTaskItem->hours_per_day : 0;

        $this->ProductivityInfo->duration_hours = $hours;
        $this->ProductivityInfo->duration_days = $days;

        $this->ProductivityInfo->save();
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        Doctrine_Query::create()
            ->delete('ScheduleTaggedBillItemTypeReference x')
            ->where('x.schedule_task_item_bill_item_id = ?', $this->id)
            ->execute();

        $this->ProductivityInfo->delete($conn);

        parent::delete($conn);
    }
}
