<?php

/**
 * BQLibraryBuildUpRateItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BQLibraryBuildUpRateItem extends BaseBQLibraryBuildUpRateItem
{
    const FORMULATED_COLUMN_NUMBER = 'number';
    const FORMULATED_COLUMN_CONSTANT = 'constant';
    const FORMULATED_COLUMN_RATE = 'rate';
    const FORMULATED_COLUMN_QUANTITY = 'quantity';
    const FORMULATED_COLUMN_WASTAGE = 'wastage';

    public function getFormulatedColumnByName($columnName, $hydrate=null)
    {
        return BQLibraryBuildUpRateItemTable::getFormulatedColumnByRelationIdAndColumnName($this->id, $columnName, $hydrate);
    }

    public function calculateTotal()
    {
        $query = DoctrineQuery::create()->select('c.id, c.final_value')
            ->from('BQLibraryBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $this->id)
            ->andWhere('c.column_name = ?',self::FORMULATED_COLUMN_RATE)
            ->andWhere('c.deleted_at IS NULL')
            ->limit(1);
        $query->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

        $rate = $query->fetchOne();

        $rate = $query->count() > 0 ? $rate['final_value'] : 0;

        $query = DoctrineQuery::create()->select('c.id, c.final_value')
            ->from('BQLibraryBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $this->id)
            ->andWhere('c.column_name = ?',self::FORMULATED_COLUMN_QUANTITY)
            ->andWhere('c.deleted_at IS NULL')
            ->limit(1);
        $query->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

        $quantity = $query->fetchOne();

        $quantity = $query->count() > 0 ? $quantity['final_value'] : 0;

        $price = $rate * $quantity;

        $query = DoctrineQuery::create()->select('MULTIPLY(c.final_value)*'.$price.' AS value')
            ->from('BQLibraryBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $this->id)
            ->andWhereIn('c.column_name',array(self::FORMULATED_COLUMN_NUMBER, self::FORMULATED_COLUMN_CONSTANT))
            ->andWhere('c.final_value IS NOT NULL')
            ->andWhere('c.deleted_at IS NULL')
            ->limit(1);
        $query->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

        $total = $query->fetchOne();

        if($this->total != $total['value'])
        {
            $this->total = $total['value'];
            $this->save();
        }

        return $this->total;
    }

    public function calculateLineTotal()
    {
        $query = DoctrineQuery::create()->select('c.id, c.final_value')
            ->from('BQLibraryBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $this->id)
            ->andWhere('c.column_name = ?',self::FORMULATED_COLUMN_WASTAGE)
            ->limit(1);
        $query->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

        $wastage = $query->fetchOne();

        $wastage = $query->count() > 0 ? $wastage['final_value'] : false;

        $markupRate = 0;

        if($wastage)
        {
            $wastagePercentage = $wastage / 100;

            $markupRate = $this->total * $wastagePercentage;
        }

        $lineTotal = $this->total + $markupRate;

        if($this->line_total != $lineTotal)
        {
            $this->line_total = $lineTotal;
            $this->save();
        }

        return $this->line_total;
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $buildUpRateItemIds = array();
        $affectedBuildUpRateItems = array();
        $formulatedColumnIds = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            foreach($this->FormulatedColumns as $formulatedColumn)
            {
                $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                if(is_array($nodes))
                {
                    foreach($nodes as $node)
                    {
                        $referencedNode = Doctrine_Core::getTable('BQLibraryBuildUpRateFormulatedColumn')->find($node['node_from']);

                        if($referencedNode)
                        {
                            $value = $itemId = str_ireplace('r'.$this->id, '#REF!', $referencedNode->value);
                            $referencedNode->setFormula($value);

                            $referencedNode->save();

                            $buildUpRateItemIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                        }
                    }
                }

                Doctrine_Manager::getInstance()->getCurrentConnection()
                    ->fetchAssoc("UPDATE ".$formulatedColumn->getTable()->getTableName()." SET
                    deleted_at = NOW()
                    WHERE id = ".$formulatedColumn->id);

                $formulatedColumnIds[] = $formulatedColumn->id;
            }

            if(count($formulatedColumnIds) > 0)
            {
                //now we can remove all edges after we've updated related nodes
                $query = Doctrine_Query::create()
                    ->delete('BQLibraryBuildUpRateEdge e')
                    ->whereIn('e.node_from', $formulatedColumnIds);
                $query->execute();

                $query = Doctrine_Query::create()
                    ->delete('BQLibraryBuildUpRateEdge e')
                    ->whereIn('e.node_to', $formulatedColumnIds);
                $query->execute();
            }

            parent::delete($conn);

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
        }

        foreach($buildUpRateItemIds as $buildUpRateItemId)
        {
            $affectedBuildUpRateItem = array();
            $buildUpRateItem = $this->getTable()->find($buildUpRateItemId);

            $affectedBuildUpRateItem['id'] = $buildUpRateItem->id;
            $affectedBuildUpRateItem['total'] = $buildUpRateItem->calculateTotal();
            $affectedBuildUpRateItem['line_total'] = $buildUpRateItem->calculateLineTotal();

            foreach($buildUpRateItem->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedBuildUpRateItem[$columnName."-final_value"] = $formulatedColumn->final_value;
                $affectedBuildUpRateItem[$columnName."-value"] = $formulatedColumn->value;
                $affectedBuildUpRateItem[$columnName.'-has_cell_reference'] = $formulatedColumn->hasCellReference();
                $affectedBuildUpRateItem[$columnName.'-has_formula'] = $formulatedColumn->hasFormula();
            }

            array_push($affectedBuildUpRateItems, $affectedBuildUpRateItem);
        }

        return $affectedBuildUpRateItems;
    }

    public function save(Doctrine_Connection $conn = null)
    {
        parent::save($conn);

        if($this->deleted_at == NULL)
        {
            $this->refresh();

            if($this->resource_item_library_id > 0)
            {
                if(trim($this->description) != trim($this->ResourceItemLibrary->description) or
                    $this->uom_id != $this->ResourceItemLibrary->uom_id)
                {
                    Doctrine_Manager::getInstance()->getCurrentConnection()
                        ->fetchAssoc("UPDATE ".$this->getTable()->getTableName()." SET
                    resource_item_library_id = NULL, resource_trade_library_id = NULL
                    WHERE id = ".$this->id);

                    Doctrine_Manager::getInstance()->getCurrentConnection()
                        ->fetchAssoc("UPDATE ".Doctrine_Core::getTable('BQLibraryBuildUpRateFormulatedColumn')->getTableName()." SET
                        linked = FALSE
                        WHERE relation_id = ".$this->id);
                }
            }

            BQItemTable::updateTimestamp($this->BQItem);
        }
    }

    public function moveTo($priority, $lastPosition=false)
    {
        $priority = $lastPosition ? $priority+1 : $priority;

        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $this->priority = $priority;
            $this->save();

            if(!$lastPosition)
            {
                $this->updatePriority($priority, $this->id);
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }

    }

    public function copyTo($targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $priorityToUpdate = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;

            $cloneItem = $this->copy();
            $cloneItem->priority = $priorityToUpdate;
            $cloneItem->save($con);

            if(!$lastPosition)
            {
                $this->updatePriority($priorityToUpdate, $cloneItem->id);
            }

            $cloneItem->copyFormulatedColumnsFromItem($this);

            $con->commit();

            $cloneItem->refresh(true);

            return $cloneItem;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyFormulatedColumnsFromItem(BQLibraryBuildUpRateItem $item)
    {
        $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('BQLibraryBuildUpRateItem');
        $edgeTable = Doctrine_Core::getTable('BQLibraryBuildUpRateEdge');

        foreach($formulatedColumnConstants as $constant)
        {
            $formulatedColumn = $item->getFormulatedColumnByName($constant);
            if($formulatedColumn)
            {
                $cloneFormulatedColumn = $formulatedColumn->copy();
                $cloneFormulatedColumn->relation_id = $this->id;
                $cloneFormulatedColumn->save();

                $sql = "INSERT INTO ".$edgeTable->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                        SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".$edgeTable->getTableName()." AS old
                        WHERE old.node_from = ".$formulatedColumn->id." AND old.deleted_at IS NULL";

                $edgeTable->getConnection()->fetchAssoc($sql);
            }
        }
    }

    private function updatePriority($priority, $excludeId)
    {
        $query = DoctrineQuery::create()->select('i.id')
            ->from('BQLibraryBuildUpRateItem i')
            ->where('i.bq_item_id = ?', $this->bq_item_id)
            ->andWhere('i.build_up_rate_resource_id = ?', $this->build_up_rate_resource_id)
            ->andWhere('i.priority >= ?',$priority)
            ->addOrderBy('i.priority ASC');

        $records = $query->execute();

        $priorityToUpdate = $priority + 1;

        foreach($records as $record)
        {
            if($record->id != $excludeId){
                $record->priority = $priorityToUpdate;
                $record->save();
            }
            $priorityToUpdate++;
        }
    }
}
