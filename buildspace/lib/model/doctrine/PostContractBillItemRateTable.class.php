<?php

/**
 * PostContractBillItemRateTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PostContractBillItemRateTable extends Doctrine_Table
{
	/**
	 * Returns an instance of this class.
	 *
	 * @return object PostContractBillItemRateTable
	 */
	public static function getInstance()
	{
		return Doctrine_Core::getTable('PostContractBillItemRate');
	}

	public static function getDataStructureForPrelimBillItemList(PostContract $postContract, BillElement $element, ProjectStructure $bill)
	{
		$pdo = self::getInstance()->getConnection()->getDbh();

		$claimViewSelectedProjectRevision = PostContractClaimRevisionTable::getCurrentSelectedProjectRevision($postContract);

		$billItemIds                      = array();
		$billItemTypeReferences           = array();
		$billItemTypeRefFormulatedColumns = array();
		$postContractBillItemRateIds      = array();
		$initialCostings                  = array();
		$timeBasedCostings                = array();
		$prevTimeBasedCostings            = array();
		$workBasedCostings                = array();
		$prevWorkBasedCostings            = array();
		$finalCostings                    = array();
		$includeInitialCostings           = array();
		$includeFinalCostings             = array();

		if($postContract['selected_type_rate'] == PostContract::RATE_TYPE_CONTRACTOR)
		{
			$stmt = $pdo->prepare("SELECT tc.id, tc.company_id FROM ".TenderSettingTable::getInstance()->getTableName()." ts
			JOIN ".TenderCompanyTable::getInstance()->getTableName()." tc ON tc.company_id = ts.awarded_company_id AND tc.project_structure_id = ts.project_structure_id
			WHERE ts.project_structure_id = ".$postContract['project_structure_id']." AND ts.deleted_at IS NULL");

			$stmt->execute();
			$tenderCompany = $stmt->fetch(PDO::FETCH_ASSOC);

			$sqlNOtListedField = ', (CASE i.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
					THEN tnl.description
					ELSE i.description
					END
				) AS description,
				(CASE i.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
					THEN tbinlq.final_value
					ELSE i.grand_total_quantity
					END
				) AS qty,
				(CASE i.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
					THEN uom_not_listed.id
					ELSE uom.id
					END
				) AS uom_id,
				(CASE i.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
					THEN uom_not_listed.symbol
					ELSE uom.symbol
					END
				) AS uom_symbol';

			$sqlNOtListed = "LEFT JOIN ".TenderBillItemNotListedTable::getInstance()->getTableName()." tnl ON tnl.bill_item_id = i.id AND tnl.tender_company_id = ".$tenderCompany['id']."
				LEFT JOIN ".TenderBillItemNotListedQuantityTable::getInstance()->getTableName()." tbinlq ON tbinlq.tender_bill_item_not_listed_id = tnl.id
				LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom_not_listed ON tnl.uom_id = uom_not_listed.id AND uom_not_listed.deleted_at IS NULL";
		}
		else if($postContract['selected_type_rate'] == PostContract::RATE_TYPE_RATIONALIZED)
		{
			$sqlNOtListedField = ', (CASE i.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
					THEN tnl.description
					ELSE i.description
					END
				) AS description,
				(CASE i.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
					THEN tbinlrq.final_value
					ELSE i.grand_total_quantity
					END
				) AS qty,
				(CASE i.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
					THEN uom_not_listed.id
					ELSE uom.id
					END
				) AS uom_id,
				(CASE i.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
					THEN uom_not_listed.symbol
					ELSE uom.symbol
					END
				) AS uom_symbol';

			$sqlNOtListed = "LEFT JOIN ".TenderBillItemNotListedRationalizedTable::getInstance()->getTableName()." tnl ON tnl.bill_item_id = i.id
			LEFT JOIN ".TenderBillItemNotListedRationalizedQuantityTable::getInstance()->getTableName()." tbinlrq ON tbinlrq.tender_bill_not_listed_item_rationalized_id = tnl.id
			LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom_not_listed ON uom_not_listed.id = tnl.uom_id";
		}
		else
		{
			$sqlNOtListedField = ', i.description, i.grand_total_quantity as qty, uom.id AS uom_id, uom.symbol AS uom_symbol';
			$sqlNOtListed      = '';
		}

		$stmt = $pdo->prepare("SELECT i.id, i.tender_origin_id, x.id AS post_contract_bill_item_rate_id, prec.claim_at_revision_id, i.type, i.lft, i.level, x.rate, x.grand_total,
		x.bill_ref_element_no, x.bill_ref_page_no, x.bill_ref_char, i.note,
		pc.supply_rate AS pc_supply_rate, pc.wastage_percentage AS pc_wastage_percentage,
		pc.wastage_amount AS pc_wastage_amount, pc.labour_for_installation AS pc_labour_for_installation,
		pc.other_cost AS pc_other_cost, pc.profit_percentage AS pc_profit_percentage,
		pc.profit_amount AS pc_profit_amount, pc.total AS pc_total ".$sqlNOtListedField."
		FROM ".self::getInstance()->getTableName()." x
		LEFT JOIN ".PreliminariesClaimTable::getInstance()->getTableName()." prec ON prec.post_contract_bill_item_rate_id = x.id AND prec.deleted_at IS NULL
		LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.id = x.bill_item_id AND i.deleted_at IS NULL
		LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON i.uom_id = uom.id AND uom.deleted_at IS NULL
		LEFT JOIN ".BillItemPrimeCostRateTable::getInstance()->getTableName()." pc ON i.id = pc.bill_item_id ".$sqlNOtListed."
		WHERE x.post_contract_id = ".$postContract->id." AND i.element_id = ".$element->id." AND i.deleted_at IS NULL
		AND pc.deleted_at IS NULL ORDER BY i.priority, i.lft, i.level");

		$stmt->execute();
		$billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

		if ( count($billItems) > 0 )
		{
			foreach ( $billItems as $billItem )
			{
				$billItemIds[]                 = $billItem['id'];
				$postContractBillItemRateIds[] = $billItem['post_contract_bill_item_rate_id'];
			}

			$implodedPostContractBillItemRateIds = implode(', ', $postContractBillItemRateIds);

			self::getPrelimItemClaimCostingByCategory($postContract, $implodedPostContractBillItemRateIds, $claimViewSelectedProjectRevision, $initialCostings, $finalCostings, $timeBasedCostings, $workBasedCostings, $includeInitialCostings, $includeFinalCostings, $prevTimeBasedCostings, $prevWorkBasedCostings);

			foreach($bill->BillColumnSettings as $billType)
			{
				$sql = "SELECT r.id, r.bill_item_id, r.include, r.total_quantity, r.quantity_per_unit_difference
				FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()." r
				WHERE r.bill_item_id IN (".implode(', ', $billItemIds).") AND r.bill_column_setting_id = ".$billType->id."
				AND r.deleted_at IS NULL";

				$stmt = $pdo->prepare($sql);
				$stmt->execute();

				$billItemTypeRefs = $stmt->fetchAll(PDO::FETCH_ASSOC);

				$billItemTypeRefIds = count($billItemTypeRefs) > 0 ? new SplFixedArray(count($billItemTypeRefs)) : null;

				foreach($billItemTypeRefs as $idx => $billItemTypeReference)
				{
					if(!array_key_exists($billType->id, $billItemTypeReferences))
					{
						$billItemTypeReferences[$billType->id] = array();
					}

					$billItemTypeReferences[$billType->id][$billItemTypeReference['bill_item_id']] = $billItemTypeReference;

					$billItemTypeRefIds[$idx] = $billItemTypeReference['id'];
				}

				if($billItemTypeRefIds instanceof SplFixedArray)
				{
					$implodedBillItemTypeRefIds = implode(',', $billItemTypeRefIds->toArray());

					$sql = "SELECT fc.relation_id, fc.has_build_up FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
						WHERE fc.relation_id IN (".$implodedBillItemTypeRefIds.") AND fc.deleted_at IS NULL";

					$stmt = $pdo->prepare($sql);
					$stmt->execute();

					$billItemTypeRefFormulatedColumnFetch = $stmt->fetchAll(PDO::FETCH_ASSOC);

					foreach($billItemTypeRefFormulatedColumnFetch as $fc)
					{
						if(!array_key_exists($fc['relation_id'], $billItemTypeRefFormulatedColumns))
						{
							$billItemTypeRefFormulatedColumns[$fc['relation_id']] = array();
						}

						array_push($billItemTypeRefFormulatedColumns[$fc['relation_id']], $fc);

						unset($fc);
					}

					unset($billItemTypeRefFormulatedColumnFetch);
				}
			}
		}

		return array($billItems, $billItemTypeReferences, $billItemTypeRefFormulatedColumns, $initialCostings, $timeBasedCostings, $prevTimeBasedCostings, $workBasedCostings, $prevWorkBasedCostings, $finalCostings, $includeInitialCostings, $includeFinalCostings);
	}

	public static function getPrintingPreviewDataStructureForPrelimBillItemList(PostContract $postContract, BillElement $element, ProjectStructure $bill, $itemIds)
	{
		$pdo = self::getInstance()->getConnection()->getDbh();

		$claimViewSelectedProjectRevision = PostContractClaimRevisionTable::getCurrentSelectedProjectRevision($postContract);
		$itemIds                          = json_decode($itemIds, true);
		$billItems                        = array();
		$billItemIds                      = array();
		$billItemTypeReferences           = array();
		$billItemTypeRefFormulatedColumns = array();
		$postContractBillItemRateIds      = array();
		$initialCostings                  = array();
		$timeBasedCostings                = array();
		$prevTimeBasedCostings            = array();
		$workBasedCostings                = array();
		$prevWorkBasedCostings            = array();
		$finalCostings                    = array();
		$includeInitialCostings           = array();
		$includeFinalCostings             = array();

		if ( count($itemIds) == 0 )
		{
			return array($billItems, $billItemTypeReferences, $billItemTypeRefFormulatedColumns, $initialCostings, $timeBasedCostings, $prevTimeBasedCostings, $workBasedCostings, $prevWorkBasedCostings, $finalCostings, $includeInitialCostings, $includeFinalCostings);
		}

		$stmt = $pdo->prepare("SELECT DISTINCT i.id, x.id AS post_contract_bill_item_rate_id, x.rate, x.bill_ref_element_no, x.bill_ref_page_no, x.bill_ref_char
		FROM ".BillItemTable::getInstance()->getTableName()." i
		LEFT JOIN ".self::getInstance()->getTableName()." x ON (x.bill_item_id = i.id)
		WHERE i.id IN (".implode(',', $itemIds).") AND x.id IS NOT NULL
		AND i.element_id = ".$element->id." AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL");

		$stmt->execute();
		$postContractBillItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

		if ( count($postContractBillItems) > 0 )
		{
			foreach ( $postContractBillItems as $billItem )
			{
				$billItemIds[]                 = $billItem['id'];
				$postContractBillItemRateIds[] = $billItem['post_contract_bill_item_rate_id'];

				$postContractBillItemsArray[$billItem['id']] = array(
					'post_contract_bill_item_rate_id' => $billItem['post_contract_bill_item_rate_id'],
					'rate'                            => $billItem['rate'],
					'grand_total'                     => 0,
					'bill_ref_element_no'             => $billItem['bill_ref_element_no'],
					'bill_ref_page_no'                => $billItem['bill_ref_page_no'],
					'bill_ref_char'                   => $billItem['bill_ref_char'],
				);
			}

			unset($postContractBillItems);

			$implodedPostContractBillItemRateIds = implode(', ', $postContractBillItemRateIds);

			self::getPrelimItemClaimCostingByCategory($postContract, $implodedPostContractBillItemRateIds, $claimViewSelectedProjectRevision, $initialCostings, $finalCostings, $timeBasedCostings, $workBasedCostings, $includeInitialCostings, $includeFinalCostings, $prevTimeBasedCostings, $prevWorkBasedCostings);

			foreach($bill->BillColumnSettings as $billType)
			{
				$sql = "SELECT r.id, r.bill_item_id, r.include, r.total_quantity, r.quantity_per_unit_difference
				FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()." r
				WHERE r.bill_item_id IN (".implode(', ', $billItemIds).") AND r.bill_column_setting_id = ".$billType->id."
				AND r.deleted_at IS NULL";

				$stmt = $pdo->prepare($sql);
				$stmt->execute();

				$billItemTypeRefs = $stmt->fetchAll(PDO::FETCH_ASSOC);

				$billItemTypeRefIds = count($billItemTypeRefs) > 0 ? new SplFixedArray(count($billItemTypeRefs)) : null;

				foreach($billItemTypeRefs as $idx => $billItemTypeReference)
				{
					if(!array_key_exists($billType->id, $billItemTypeReferences))
					{
						$billItemTypeReferences[$billType->id] = array();
					}

					$billItemTypeReferences[$billType->id][$billItemTypeReference['bill_item_id']] = $billItemTypeReference;

					$billItemTypeRefIds[$idx] = $billItemTypeReference['id'];
				}

				if($billItemTypeRefIds instanceof SplFixedArray)
				{
					$implodedBillItemTypeRefIds = implode(',', $billItemTypeRefIds->toArray());

					$sql = "SELECT fc.relation_id, fc.has_build_up FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
						WHERE fc.relation_id IN (".$implodedBillItemTypeRefIds.") AND fc.deleted_at IS NULL";

					$stmt = $pdo->prepare($sql);
					$stmt->execute();

					$billItemTypeRefFormulatedColumnFetch = $stmt->fetchAll(PDO::FETCH_ASSOC);

					foreach($billItemTypeRefFormulatedColumnFetch as $fc)
					{
						if(!array_key_exists($fc['relation_id'], $billItemTypeRefFormulatedColumns))
						{
							$billItemTypeRefFormulatedColumns[$fc['relation_id']] = array();
						}

						array_push($billItemTypeRefFormulatedColumns[$fc['relation_id']], $fc);

						unset($fc);
					}

					unset($billItemTypeRefFormulatedColumnFetch);
				}
			}

			if($postContract['selected_type_rate'] == PostContract::RATE_TYPE_CONTRACTOR)
			{
				$stmt = $pdo->prepare("SELECT tc.id, tc.company_id FROM ".TenderSettingTable::getInstance()->getTableName()." ts
				JOIN ".TenderCompanyTable::getInstance()->getTableName()." tc ON tc.company_id = ts.awarded_company_id AND tc.project_structure_id = ts.project_structure_id
				WHERE ts.project_structure_id = ".$postContract['project_structure_id']." AND ts.deleted_at IS NULL");

				$stmt->execute();
				$tenderCompany = $stmt->fetch(PDO::FETCH_ASSOC);

				$sqlNOtListedField = ', (CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
						THEN tnl.description
						ELSE p.description
						END
					) AS description,
					(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
						THEN tbinlq.final_value
						ELSE p.grand_total_quantity
						END
					) AS qty,
					(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
						THEN uom_not_listed.id
						ELSE uom.id
						END
					) AS uom_id,
					(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
						THEN uom_not_listed.symbol
						ELSE uom.symbol
						END
					) AS uom_symbol';

				$sqlNOtListed = "LEFT JOIN ".TenderBillItemNotListedTable::getInstance()->getTableName()." tnl ON tnl.bill_item_id = p.id AND tnl.tender_company_id = ".$tenderCompany['id']."
					LEFT JOIN ".TenderBillItemNotListedQuantityTable::getInstance()->getTableName()." tbinlq ON tbinlq.tender_bill_item_not_listed_id = tnl.id
					LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom_not_listed ON tnl.uom_id = uom_not_listed.id AND uom_not_listed.deleted_at IS NULL";
			}
			else if($postContract['selected_type_rate'] == PostContract::RATE_TYPE_RATIONALIZED)
			{
				$sqlNOtListedField = ', (CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
						THEN tnl.description
						ELSE p.description
						END
					) AS description,
					(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
						THEN tbinlrq.final_value
						ELSE p.grand_total_quantity
						END
					) AS qty,
					(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
						THEN uom_not_listed.id
						ELSE uom.id
						END
					) AS uom_id,
					(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
						THEN uom_not_listed.symbol
						ELSE uom.symbol
						END
					) AS uom_symbol';

				$sqlNOtListed = "LEFT JOIN ".TenderBillItemNotListedRationalizedTable::getInstance()->getTableName()." tnl ON tnl.bill_item_id = p.id
				LEFT JOIN ".TenderBillItemNotListedRationalizedQuantityTable::getInstance()->getTableName()." tbinlrq ON tbinlrq.tender_bill_not_listed_item_rationalized_id = tnl.id
				LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom_not_listed ON uom_not_listed.id = tnl.uom_id";
			}
			else
			{
				$sqlNOtListedField = ', p.description, p.grand_total_quantity as qty, uom.id AS uom_id, uom.symbol AS uom_symbol';
				$sqlNOtListed      = '';
			}

			// get actual tree data from db following the retrieved billItemIds
			$stmt = $pdo->prepare("SELECT DISTINCT p.id, p.type, p.note, p.priority, p.lft, p.level, pc.supply_rate AS pc_supply_rate, pc.wastage_percentage AS pc_wastage_percentage, pc.wastage_amount AS pc_wastage_amount, pc.labour_for_installation AS pc_labour_for_installation, pc.other_cost AS pc_other_cost, pc.profit_percentage AS pc_profit_percentage, pc.profit_amount AS pc_profit_amount, pc.total AS pc_total {$sqlNOtListedField}
			FROM ".BillItemTable::getInstance()->getTableName()." i
			LEFT JOIN ".BillItemTable::getInstance()->getTableName()." p ON (i.lft BETWEEN p.lft AND p.rgt AND i.root_id = p.root_id AND i.type <> ".BillItem::TYPE_HEADER.")
			LEFT JOIN ".BillItemPrimeCostRateTable::getInstance()->getTableName()." pc ON (pc.bill_item_id = p.id AND pc.deleted_at IS NULL)
			LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON (p.uom_id = uom.id AND uom.deleted_at IS NULL) {$sqlNOtListed}
			WHERE i.id IN (".implode(',', $billItemIds).") AND i.element_id = ".$element->id."
			AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
			AND p.project_revision_deleted_at IS NULL AND p.deleted_at IS NULL
			ORDER BY p.priority, p.lft, p.level");

			$stmt->execute();
			$billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

			foreach ( $billItems as $arrayKey => $billItem )
			{
				$billItems[$arrayKey]['rate']                            = 0;
				$billItems[$arrayKey]['post_contract_bill_item_rate_id'] = 0;
				$billItems[$arrayKey]['bill_ref_element_no']             = NULL;
				$billItems[$arrayKey]['bill_ref_page_no']                = NULL;
				$billItems[$arrayKey]['bill_ref_char']                   = NULL;

				if ( isset ($postContractBillItemsArray[$billItem['id']]) )
				{
					$grandTotal = $billItem['qty'] * $postContractBillItemsArray[$billItem['id']]['rate'];
					$postContractBillItemsArray[$billItem['id']]['grand_total'] = $grandTotal;

					$billItems[$arrayKey] = $billItem + $postContractBillItemsArray[$billItem['id']];
				}
			}
		}

		return array($billItems, $billItemTypeReferences, $billItemTypeRefFormulatedColumns, $initialCostings, $timeBasedCostings, $prevTimeBasedCostings, $workBasedCostings, $prevWorkBasedCostings, $finalCostings, $includeInitialCostings, $includeFinalCostings);
	}

	public static function getPrintingPreviewDataStructureForPrelimBillItemListByClaimType(PostContract $postContract, BillElement $element, ProjectStructure $bill, $claimType)
	{
		$pdo = self::getInstance()->getConnection()->getDbh();

		$claimViewSelectedProjectRevision = PostContractClaimRevisionTable::getCurrentSelectedProjectRevision($postContract);
		$currentClaimProjectRevision      = PostContractClaimRevisionTable::getCurrentProjectRevision($postContract);
		$billItems                        = array();
		$billItemIds                      = array();
		$billItemTypeReferences           = array();
		$billItemTypeRefFormulatedColumns = array();
		$postContractBillItemRateIds      = array();
		$initialCostings                  = array();
		$timeBasedCostings                = array();
		$prevTimeBasedCostings            = array();
		$workBasedCostings                = array();
		$prevWorkBasedCostings            = array();
		$finalCostings                    = array();
		$includeInitialCostings           = array();
		$includeFinalCostings             = array();

		$stmt = $pdo->prepare("SELECT DISTINCT i.id, i.grand_total_quantity as qty, x.id AS post_contract_bill_item_rate_id, x.rate, x.grand_total, x.bill_ref_element_no, x.bill_ref_page_no, x.bill_ref_char
		FROM ".BillItemTable::getInstance()->getTableName()." i
		LEFT JOIN ".self::getInstance()->getTableName()." x ON (x.bill_item_id = i.id)
		WHERE i.element_id = ".$element->id." AND x.id IS NOT NULL
		AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL");
		$stmt->execute();

		$postContractBillItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

		if ( count($postContractBillItems) > 0 )
		{
			foreach ( $postContractBillItems as $billItem )
			{
				$billItemIds[$billItem['id']]  = (int) $billItem['id'];
				$postContractBillItemRateIds[] = $billItem['post_contract_bill_item_rate_id'];
			}

			$implodedPostContractBillItemRateIds = implode(', ', $postContractBillItemRateIds);

			self::getPrelimItemClaimCostingByCategory($postContract, $implodedPostContractBillItemRateIds, $claimViewSelectedProjectRevision, $initialCostings, $finalCostings, $timeBasedCostings, $workBasedCostings, $includeInitialCostings, $includeFinalCostings, $prevTimeBasedCostings, $prevWorkBasedCostings);

			foreach($bill->BillColumnSettings as $billType)
			{
				$sql = "SELECT r.id, r.bill_item_id, r.include, r.total_quantity, r.quantity_per_unit_difference
				FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()." r
				WHERE r.bill_item_id IN (".implode(', ', $billItemIds).") AND r.bill_column_setting_id = ".$billType->id."
				AND r.deleted_at IS NULL";

				$stmt = $pdo->prepare($sql);
				$stmt->execute();

				$billItemTypeRefs = $stmt->fetchAll(PDO::FETCH_ASSOC);

				$billItemTypeRefIds = count($billItemTypeRefs) > 0 ? new SplFixedArray(count($billItemTypeRefs)) : null;

				foreach($billItemTypeRefs as $idx => $billItemTypeReference)
				{
					if(!array_key_exists($billType->id, $billItemTypeReferences))
					{
						$billItemTypeReferences[$billType->id] = array();
					}

					$billItemTypeReferences[$billType->id][$billItemTypeReference['bill_item_id']] = $billItemTypeReference;

					$billItemTypeRefIds[$idx] = $billItemTypeReference['id'];
				}

				if($billItemTypeRefIds instanceof SplFixedArray)
				{
					$implodedBillItemTypeRefIds = implode(',', $billItemTypeRefIds->toArray());

					$sql = "SELECT fc.relation_id, fc.has_build_up FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
						WHERE fc.relation_id IN (".$implodedBillItemTypeRefIds.") AND fc.deleted_at IS NULL";

					$stmt = $pdo->prepare($sql);
					$stmt->execute();

					$billItemTypeRefFormulatedColumnFetch = $stmt->fetchAll(PDO::FETCH_ASSOC);

					foreach($billItemTypeRefFormulatedColumnFetch as $fc)
					{
						if(!array_key_exists($fc['relation_id'], $billItemTypeRefFormulatedColumns))
						{
							$billItemTypeRefFormulatedColumns[$fc['relation_id']] = array();
						}

						array_push($billItemTypeRefFormulatedColumns[$fc['relation_id']], $fc);

						unset($fc);
					}

					unset($billItemTypeRefFormulatedColumnFetch);
				}
			}

			foreach ( $postContractBillItems as $billItem )
			{
				$billItem['item_total'] = Utilities::prelimRounding($billItem['rate'] * $billItem['qty']);

				PreliminariesClaimTable::calculateClaimRates($claimViewSelectedProjectRevision, $billItem, $currentClaimProjectRevision, $initialCostings, $finalCostings, $timeBasedCostings, $workBasedCostings, $prevTimeBasedCostings, $prevWorkBasedCostings, $includeInitialCostings, $includeFinalCostings);

				if ( $billItem[$claimType] == 0 )
				{
					unset($billItemIds[$billItem['id']]);
				}
				else
				{
					$postContractBillItemsArray[$billItem['id']] = $billItem;
				}

				unset($billItem);
			}

			unset($postContractBillItems);

			if (count($billItemIds) > 0)
			{
				if($postContract['selected_type_rate'] == PostContract::RATE_TYPE_CONTRACTOR)
				{
					$stmt = $pdo->prepare("SELECT tc.id, tc.company_id FROM ".TenderSettingTable::getInstance()->getTableName()." ts
					JOIN ".TenderCompanyTable::getInstance()->getTableName()." tc ON tc.company_id = ts.awarded_company_id AND tc.project_structure_id = ts.project_structure_id
					WHERE ts.project_structure_id = ".$postContract['project_structure_id']." AND ts.deleted_at IS NULL");

					$stmt->execute();
					$tenderCompany = $stmt->fetch(PDO::FETCH_ASSOC);

					$sqlNOtListedField = ', (CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
							THEN tnl.description
							ELSE p.description
							END
						) AS description,
						(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
							THEN tbinlq.final_value
							ELSE p.grand_total_quantity
							END
						) AS qty,
						(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
							THEN uom_not_listed.id
							ELSE uom.id
							END
						) AS uom_id,
						(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
							THEN uom_not_listed.symbol
							ELSE uom.symbol
							END
						) AS uom_symbol';

					$sqlNOtListed = "LEFT JOIN ".TenderBillItemNotListedTable::getInstance()->getTableName()." tnl ON tnl.bill_item_id = p.id AND tnl.tender_company_id = ".$tenderCompany['id']."
						LEFT JOIN ".TenderBillItemNotListedQuantityTable::getInstance()->getTableName()." tbinlq ON tbinlq.tender_bill_item_not_listed_id = tnl.id
						LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom_not_listed ON tnl.uom_id = uom_not_listed.id AND uom_not_listed.deleted_at IS NULL";
				}
				else if($postContract['selected_type_rate'] == PostContract::RATE_TYPE_RATIONALIZED)
				{
					$sqlNOtListedField = ', (CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
							THEN tnl.description
							ELSE p.description
							END
						) AS description,
						(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
							THEN tbinlrq.final_value
							ELSE p.grand_total_quantity
							END
						) AS qty,
						(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
							THEN uom_not_listed.id
							ELSE uom.id
							END
						) AS uom_id,
						(CASE p.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
							THEN uom_not_listed.symbol
							ELSE uom.symbol
							END
						) AS uom_symbol';

					$sqlNOtListed = "LEFT JOIN ".TenderBillItemNotListedRationalizedTable::getInstance()->getTableName()." tnl ON tnl.bill_item_id = p.id
					LEFT JOIN ".TenderBillItemNotListedRationalizedQuantityTable::getInstance()->getTableName()." tbinlrq ON tbinlrq.tender_bill_not_listed_item_rationalized_id = tnl.id
					LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom_not_listed ON uom_not_listed.id = tnl.uom_id";
				}
				else
				{
					$sqlNOtListedField = ', p.description, p.grand_total_quantity as qty, uom.id AS uom_id, uom.symbol AS uom_symbol';
					$sqlNOtListed      = '';
				}

				// get actual tree data from db following the retrieved billItemIds
				$stmt = $pdo->prepare("SELECT DISTINCT p.id, p.type, p.note, p.priority, p.lft, p.level, pc.supply_rate AS pc_supply_rate, pc.wastage_percentage AS pc_wastage_percentage, pc.wastage_amount AS pc_wastage_amount, pc.labour_for_installation AS pc_labour_for_installation, pc.other_cost AS pc_other_cost, pc.profit_percentage AS pc_profit_percentage, pc.profit_amount AS pc_profit_amount, pc.total AS pc_total {$sqlNOtListedField}
				FROM ".BillItemTable::getInstance()->getTableName()." i
				LEFT JOIN ".BillItemTable::getInstance()->getTableName()." p ON (i.lft BETWEEN p.lft AND p.rgt AND i.root_id = p.root_id AND i.type <> ".BillItem::TYPE_HEADER.")
				LEFT JOIN ".BillItemPrimeCostRateTable::getInstance()->getTableName()." pc ON (pc.bill_item_id = p.id AND pc.deleted_at IS NULL)
				LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON (p.uom_id = uom.id AND uom.deleted_at IS NULL) {$sqlNOtListed}
				WHERE i.id IN (".implode(', ', $billItemIds).") AND i.element_id = ".$element->id."
				AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
				AND p.project_revision_deleted_at IS NULL AND p.deleted_at IS NULL
				ORDER BY p.priority, p.lft, p.level");

				$stmt->execute();
				$billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

				foreach ( $billItems as $arrayKey => $billItem )
				{
					$billItems[$arrayKey]['rate']                            = 0;
					$billItems[$arrayKey]['post_contract_bill_item_rate_id'] = 0;
					$billItems[$arrayKey]['bill_ref_element_no']             = NULL;
					$billItems[$arrayKey]['bill_ref_page_no']                = NULL;
					$billItems[$arrayKey]['bill_ref_char']                   = NULL;

					if ( isset ($postContractBillItemsArray[$billItem['id']]) )
					{
						$billItems[$arrayKey] = $billItem + $postContractBillItemsArray[$billItem['id']];
					}
				}
			}
		}

		return array($billItems, $billItemTypeReferences, $billItemTypeRefFormulatedColumns, $initialCostings, $timeBasedCostings, $prevTimeBasedCostings, $workBasedCostings, $prevWorkBasedCostings, $finalCostings, $includeInitialCostings, $includeFinalCostings);
	}

	public static function getPrelimElementClaimCosting(PostContractClaimRevision $postContractClaimRevision, Array $elements)
	{
		if ( count($elements) == 0 ) return;

		$pdo                         = self::getInstance()->getConnection()->getDbh();
		$elementIds                  = array();
		$elementBillItems            = array();
		$postContractBillItemRateIds = array();
		$initialCostings             = array();
		$timeBasedCostings           = array();
		$prevTimeBasedCostings       = array();
		$workBasedCostings           = array();
		$prevWorkBasedCostings       = array();
		$finalCostings               = array();
		$includeInitialCostings      = array();
		$includeFinalCostings        = array();
		$postContract                = $postContractClaimRevision->PostContract;

		foreach ( $elements as $element )
		{
			$elementIds[] = $element['id'];
		}

		if($postContract->selected_type_rate == PostContract::RATE_TYPE_CONTRACTOR)
		{
			$stmt = $pdo->prepare("SELECT tc.id, tc.company_id FROM ".TenderSettingTable::getInstance()->getTableName()." ts
			JOIN ".TenderCompanyTable::getInstance()->getTableName()." tc ON tc.company_id = ts.awarded_company_id AND tc.project_structure_id = ts.project_structure_id
			WHERE ts.project_structure_id = ".$postContract->project_structure_id." AND ts.deleted_at IS NULL");

			$stmt->execute();
			$tenderCompany = $stmt->fetch(PDO::FETCH_ASSOC);

			$sqlNOtListedField = ', (CASE i.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
				THEN tbinlq.final_value
				ELSE i.grand_total_quantity
				END
			) AS grand_total_quantity';

			$sqlNOtListed = "LEFT JOIN ".TenderBillItemNotListedTable::getInstance()->getTableName()." tnl ON tnl.bill_item_id = i.id AND tnl.tender_company_id = ".$tenderCompany['id']."
				LEFT JOIN ".TenderBillItemNotListedQuantityTable::getInstance()->getTableName()." tbinlq ON tbinlq.tender_bill_item_not_listed_id = tnl.id";
		}
		else if($postContract->selected_type_rate == PostContract::RATE_TYPE_RATIONALIZED)
		{
			$sqlNOtListedField = ', (CASE i.type WHEN '.BillItem::TYPE_ITEM_NOT_LISTED.'
				THEN tbinlrq.final_value
				ELSE i.grand_total_quantity
				END
			) AS grand_total_quantity';

			$sqlNOtListed = "LEFT JOIN ".TenderBillItemNotListedRationalizedTable::getInstance()->getTableName()." tnl ON tnl.bill_item_id = i.id
			LEFT JOIN ".TenderBillItemNotListedRationalizedQuantityTable::getInstance()->getTableName()." tbinlrq ON tbinlrq.tender_bill_not_listed_item_rationalized_id = tnl.id";
		}
		else
		{
			$sqlNOtListedField = ', i.grand_total_quantity as grand_total_quantity';
			$sqlNOtListed      = '';
		}

		$stmt = $pdo->prepare("SELECT i.id, x.id AS post_contract_bill_item_rate_id, prec.claim_at_revision_id, i.element_id, COALESCE(x.rate, 0) as rate {$sqlNOtListedField}
		FROM ".self::getInstance()->getTableName()." x
		LEFT JOIN ".PreliminariesClaimTable::getInstance()->getTableName()." prec ON prec.post_contract_bill_item_rate_id = x.id AND prec.deleted_at IS NULL
		LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.id = x.bill_item_id AND i.deleted_at IS NULL {$sqlNOtListed}
		WHERE x.post_contract_id = ".$postContract->id." AND i.element_id IN (".implode(', ', $elementIds).") AND i.deleted_at IS NULL
		ORDER BY i.priority, i.lft, i.level");

		$stmt->execute();
		$billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

		if ( count($billItems) > 0 )
		{
			foreach ( $billItems as $billItem )
			{
				$elementBillItems[$billItem['element_id']][] = array(
					'post_contract_bill_item_rate_id' => $billItem['post_contract_bill_item_rate_id'],
					'id'                              => $billItem['id'],
					'item_total'                      => $billItem['rate'] * $billItem['grand_total_quantity'],
				);

				$postContractBillItemRateIds[] = $billItem['post_contract_bill_item_rate_id'];
			}

			$implodedPostContractBillItemRateIds = implode(', ', $postContractBillItemRateIds);

			self::getPrelimItemClaimCostingByCategory($postContract, $implodedPostContractBillItemRateIds, $postContractClaimRevision->toArray(), $initialCostings, $finalCostings, $timeBasedCostings, $workBasedCostings, $includeInitialCostings, $includeFinalCostings, $prevTimeBasedCostings, $prevWorkBasedCostings);
		}

		unset($billItems);

		return array($elementBillItems, $initialCostings, $timeBasedCostings, $prevTimeBasedCostings, $workBasedCostings, $prevWorkBasedCostings, $finalCostings, $includeInitialCostings, $includeFinalCostings);
	}

	public static function getPrelimItemClaimCosting(PostContractBillItemRate $postContractItemRate, PostContract $postContract, $recurringTotal)
	{
		$postContractItemRate->refresh(true);

		$pdo = self::getInstance()->getConnection()->getDbh();

		$currentClaimProjectRevision      = PostContractClaimRevisionTable::getCurrentProjectRevision($postContract);
		$claimViewSelectedProjectRevision = PostContractClaimRevisionTable::getCurrentSelectedProjectRevision($postContract);

		if ( $claimViewSelectedProjectRevision['version'] > PostContractClaimRevision::ORIGINAL_BILL_VERSION )
		{
			$claimViewPreviousProjectRevision = PostContractClaimRevisionTable::getPreviousProjectRevision($postContract, $claimViewSelectedProjectRevision['version']);
		}

		$item['rate']       = Utilities::prelimRounding($postContractItemRate->rate);
		$item['item_total'] = $recurringTotal;

		// get initial default claim
		$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.percentage, 0) AS percentage, COALESCE(x.amount, 0) AS amount, x.revision_id
		FROM ".PreliminariesInitialClaimTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id = ".$postContractItemRate->id."
		AND (
			x.revision_id <= ".$claimViewSelectedProjectRevision['id']."
		)
		AND x.deleted_at IS NULL";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$initialClaim = $stmt->fetch(PDO::FETCH_ASSOC);

		$item['initial-percentage']  = ($initialClaim) ? Utilities::prelimRounding($initialClaim['percentage']) : 0;
		$item['initial-amount']      = ($initialClaim) ? Utilities::prelimRounding($initialClaim['amount']) : 0;
		$item['initial-revision_id'] = ($initialClaim) ? $initialClaim['revision_id'] : $currentClaimProjectRevision['id'];

		unset($initialClaim);

		// get final default claim
		$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.percentage, 0) AS percentage, COALESCE(x.amount, 0) AS amount, x.revision_id
		FROM ".PreliminariesFinalClaimTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id = ".$postContractItemRate->id."
		AND (
			x.revision_id <= ".$claimViewSelectedProjectRevision['id']."
		)
		AND x.deleted_at IS NULL";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$finalClaim = $stmt->fetch(PDO::FETCH_ASSOC);

		$item['final-percentage']  = ($finalClaim) ? Utilities::prelimRounding($finalClaim['percentage']) : 0;
		$item['final-amount']      = ($finalClaim) ? Utilities::prelimRounding($finalClaim['amount']) : 0;
		$item['final-revision_id'] = ($finalClaim) ? $finalClaim['revision_id'] : $currentClaimProjectRevision['id'];

		unset($finalClaim);

		$recurringAmt                 = $recurringTotal - $item['initial-amount'] - $item['final-amount'];
		$item['recurring-percentage'] = Utilities::prelimRounding(Utilities::percent($recurringAmt, $recurringTotal));
		$item['recurring-amount']     = Utilities::prelimRounding($recurringAmt);

		// ========================================================================================================================================
		$item['timeBased-percentage']     = 0;
		$item['timeBased-amount']         = 0;
		$item['timeBased-applied']        = false;
		$item['timeBased-revision_id']    = $currentClaimProjectRevision['id'];

		$item['workBased-percentage']     = 0;
		$item['workBased-amount']         = 0;
		$item['workBased-applied']        = false;
		$item['workBased-revision_id']    = $currentClaimProjectRevision['id'];

		$item['previousClaim-amount']     = 0;
		$item['previousClaim-percentage'] = 0;

		// get time based claim
		$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.total, 0) AS total, x.revision_id
		FROM ".PreliminariesTimeBasedClaimTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id = ".$postContractItemRate->id."
		AND (
			x.revision_id = ".$claimViewSelectedProjectRevision['id']."
		)
		AND x.deleted_at IS NULL
		ORDER BY x.id DESC
		LIMIT 1";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$timeBasedClaim = $stmt->fetch(PDO::FETCH_ASSOC);

		if ( $timeBasedClaim['total'] != 0 )
		{
			$calculatedCosting = Utilities::prelimRounding($timeBasedClaim['total'] * 100);

			$amount = Utilities::prelimRounding($recurringAmt * ($calculatedCosting / 100));

			$item['timeBased-percentage']  = Utilities::prelimRounding(Utilities::percent($amount, $recurringAmt));
			$item['timeBased-amount']      = $amount;
			$item['timeBased-applied']     = true;
			$item['timeBased-revision_id'] = $timeBasedClaim['revision_id'];

			unset($amount, $calculatedCosting);
		}

		unset($timeBasedClaim);

		// get work based claim
		$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.total, 0) AS total, x.revision_id
		FROM ".PreliminariesWorkBasedClaimTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id = ".$postContractItemRate->id."
		AND (
			x.revision_id = ".$claimViewSelectedProjectRevision['id']."
		)
		AND x.deleted_at IS NULL
		ORDER BY x.id DESC
		LIMIT 1";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$workBasedClaim = $stmt->fetch(PDO::FETCH_ASSOC);

		if ( $workBasedClaim['total'] != 0 )
		{
			$calculatedCosting = Utilities::prelimRounding($workBasedClaim['total'] * 100);

			$amount = Utilities::prelimRounding($recurringAmt * ($calculatedCosting / 100));

			$item['workBased-percentage']  = Utilities::prelimRounding(Utilities::percent($amount, $recurringAmt));
			$item['workBased-amount']      = $amount;
			$item['workBased-applied']     = true;
			$item['workBased-revision_id'] = $workBasedClaim['revision_id'];

			unset($amount, $calculatedCosting);
		}

		unset($workBasedClaim);

		if ( isset ($claimViewPreviousProjectRevision) AND count($claimViewPreviousProjectRevision) > 0 )
		{
			// get previous time based claim
			$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.total, 0) AS total, x.revision_id
			FROM ".PreliminariesTimeBasedClaimTable::getInstance()->getTableName()." x
			WHERE x.post_contract_bill_item_rate_id = ".$postContractItemRate->id."
			AND (
				x.revision_id = ".$claimViewPreviousProjectRevision['id']."
			)
			AND x.deleted_at IS NULL
			ORDER BY x.id DESC
			LIMIT 1";
			$stmt = $pdo->prepare($sql);
			$stmt->execute();

			$prevTimeBasedClaim = $stmt->fetch(PDO::FETCH_ASSOC);

			if ( $prevTimeBasedClaim['total'] != 0 )
			{
				$calculatedCosting = Utilities::prelimRounding($prevTimeBasedClaim['total'] * 100);

				$amount = Utilities::prelimRounding($recurringAmt * ($calculatedCosting / 100));

				$item['previousClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($amount, $recurringTotal));
				$item['previousClaim-amount']     = $amount;

				unset($amount, $calculatedCosting);
			}

			unset($prevTimeBasedClaim);

			// get prev work based claim
			$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.total, 0) AS total, x.revision_id
			FROM ".PreliminariesWorkBasedClaimTable::getInstance()->getTableName()." x
			WHERE x.post_contract_bill_item_rate_id = ".$postContractItemRate->id."
			AND (
				x.revision_id = ".$claimViewPreviousProjectRevision['id']."
			)
			AND x.deleted_at IS NULL
			ORDER BY x.id DESC
			LIMIT 1";
			$stmt = $pdo->prepare($sql);
			$stmt->execute();

			$prevWorkBasedClaim = $stmt->fetch(PDO::FETCH_ASSOC);

			if ( $prevWorkBasedClaim['total'] != 0 )
			{
				$calculatedCosting = Utilities::prelimRounding($prevWorkBasedClaim['total'] * 100);

				$amount = Utilities::prelimRounding($recurringAmt * ($calculatedCosting / 100));

				$item['previousClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($amount, $recurringTotal));
				$item['previousClaim-amount']     = $amount;

				unset($amount, $calculatedCosting);
			}
		}
		// ========================================================================================================================================

		// ========================================================================================================================================
		// Get include status
		// ========================================================================================================================================
		$sql = "SELECT x.post_contract_bill_item_rate_id, x.include_at_revision_id
		FROM ".PreliminariesIncludeInitialTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id = ".$postContractItemRate->id."
		AND x.include_at_revision_id <= ".$claimViewSelectedProjectRevision['id']."
		LIMIT 1";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$includeInitialStatus = $stmt->fetch(PDO::FETCH_ASSOC);

		$sql = "SELECT x.post_contract_bill_item_rate_id, x.include_at_revision_id
		FROM ".PreliminariesIncludeFinalTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id = ".$postContractItemRate->id."
		AND x.include_at_revision_id <= ".$claimViewSelectedProjectRevision['id']."
		LIMIT 1";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$includeFinalStatus = $stmt->fetch(PDO::FETCH_ASSOC);
		// ========================================================================================================================================

		// ========================================================================================================================================
		$item['upToDateClaim-amount']    = $item['timeBased-amount'] + $item['workBased-amount'];
		$item['currentClaim-amount']     = $item['upToDateClaim-amount'] - $item['previousClaim-amount'];
		$item['currentClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($item['currentClaim-amount'], $recurringTotal));

		if ( $includeInitialStatus )
		{
			$item['upToDateClaim-amount'] += $item['initial-amount'];

			if ( $claimViewSelectedProjectRevision['id'] == $includeInitialStatus['include_at_revision_id'] )
			{
				$item['currentClaim-amount']     = $item['currentClaim-amount'] + $item['initial-amount'];
				$item['currentClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($item['currentClaim-amount'], $recurringTotal));
			}
			else if ( $claimViewSelectedProjectRevision['id'] <= $currentClaimProjectRevision['id'] )
			{
				$item['previousClaim-amount']     = $item['previousClaim-amount'] + $item['initial-amount'];
				$item['previousClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($item['previousClaim-amount'], $recurringTotal));
			}
		}

		if ( $includeFinalStatus )
		{
			$item['upToDateClaim-amount'] += $item['final-amount'];

			if ( $claimViewSelectedProjectRevision['id'] == $includeFinalStatus['include_at_revision_id'] )
			{
				$item['currentClaim-amount']     = $item['currentClaim-amount'] + $item['final-amount'];
				$item['currentClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($item['currentClaim-amount'], $recurringTotal));
			}
			else if ( $claimViewSelectedProjectRevision['id'] <= $currentClaimProjectRevision['id'] )
			{
				$item['previousClaim-amount']     = $item['previousClaim-amount'] + $item['final-amount'];
				$item['previousClaim-percentage'] = Utilities::prelimRounding(Utilities::percent($item['previousClaim-amount'], $recurringTotal));
			}
		}

		$item['upToDateClaim-percentage']       = Utilities::prelimRounding(Utilities::percent($item['upToDateClaim-amount'], $recurringTotal));
		$item['include_initial']                = $includeInitialStatus ? 'true' : 'false';
		$item['include_final']                  = $includeFinalStatus ? 'true' : 'false';
		$item['initial_include_at_revision_id'] = $includeInitialStatus ? $includeInitialStatus['include_at_revision_id'] : $currentClaimProjectRevision['id'];
		$item['final_include_at_revision_id']   = $includeFinalStatus ? $includeFinalStatus['include_at_revision_id'] : $currentClaimProjectRevision['id'];

		unset($includeInitialStatus, $includeFinalStatus);
		// ========================================================================================================================================

		$item['claim_at_revision_id'] = ( ! empty($postContractItemRate->PreliminariesClaim->claim_at_revision_id)) ? $postContractItemRate->PreliminariesClaim->claim_at_revision_id : $currentClaimProjectRevision['id'];

		return $item;
	}

	public static function getPrelimItemClaimCostingByCategory($postContract, $implodedPostContractBillItemRateIds, $claimViewSelectedProjectRevision, &$initialCostings, &$finalCostings, &$timeBasedCostings, &$workBasedCostings, &$includeInitialCostings, &$includeFinalCostings, &$prevTimeBasedCostings, &$prevWorkBasedCostings)
	{
		$pdo = self::getInstance()->getConnection()->getDbh();

		if ( $claimViewSelectedProjectRevision['version'] > PostContractClaimRevision::ORIGINAL_BILL_VERSION )
		{
			$claimViewPreviousProjectRevision = PostContractClaimRevisionTable::getPreviousProjectRevision($postContract, $claimViewSelectedProjectRevision['version']);
		}

		// get initial default claim
		$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.percentage, 0) AS percentage, COALESCE(x.amount, 0) AS amount, x.revision_id
		FROM ".PreliminariesInitialClaimTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id IN (".$implodedPostContractBillItemRateIds.")
		AND (
			x.revision_id <= ".$claimViewSelectedProjectRevision['id']."
		)
		AND x.deleted_at IS NULL";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$initialClaims = $stmt->fetchAll(PDO::FETCH_ASSOC);

		foreach ( $initialClaims as $initialClaim )
		{
			$initialCostings[$initialClaim['post_contract_bill_item_rate_id']] = array(
				'percentage'  => $initialClaim['percentage'],
				'amount'      => $initialClaim['amount'],
				'revision_id' => $initialClaim['revision_id'],
			);
		}

		unset($initialClaims);

		// get final default claim
		$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.percentage, 0) AS percentage, COALESCE(x.amount, 0) AS amount, x.revision_id
		FROM ".PreliminariesFinalClaimTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id IN (".$implodedPostContractBillItemRateIds.")
		AND (
			x.revision_id <= ".$claimViewSelectedProjectRevision['id']."
		)
		AND x.deleted_at IS NULL";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$finalClaims = $stmt->fetchAll(PDO::FETCH_ASSOC);

		foreach ( $finalClaims as $finalClaim )
		{
			$finalCostings[$finalClaim['post_contract_bill_item_rate_id']] = array(
				'percentage'  => $finalClaim['percentage'],
				'amount'      => $finalClaim['amount'],
				'revision_id' => $finalClaim['revision_id'],
			);
		}

		unset($finalClaims);

		// get time based claim
		$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.total, 0) AS total, x.revision_id
		FROM ".PreliminariesTimeBasedClaimTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id IN (".$implodedPostContractBillItemRateIds.")
		AND (
			x.revision_id = ".$claimViewSelectedProjectRevision['id']."
		)
		AND x.deleted_at IS NULL";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$timeBasedClaims = $stmt->fetchAll(PDO::FETCH_ASSOC);

		foreach ( $timeBasedClaims as $timeBasedClaim )
		{
			$timeBasedCostings[$timeBasedClaim['post_contract_bill_item_rate_id']] = array(
				'total'       => $timeBasedClaim['total'],
				'revision_id' => $timeBasedClaim['revision_id'],
			);
		}

		unset($timeBasedClaims);

		// get work based claim
		$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.total, 0) AS total, x.revision_id
		FROM ".PreliminariesWorkBasedClaimTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id IN (".$implodedPostContractBillItemRateIds.")
		AND (
			x.revision_id = ".$claimViewSelectedProjectRevision['id']."
		)
		AND x.deleted_at IS NULL";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$workBasedClaims = $stmt->fetchAll(PDO::FETCH_ASSOC);

		foreach ( $workBasedClaims as $workBasedClaim )
		{
			$workBasedCostings[$workBasedClaim['post_contract_bill_item_rate_id']] = array(
				'total'       => $workBasedClaim['total'],
				'revision_id' => $workBasedClaim['revision_id'],
			);
		}

		unset($workBasedClaims);

		// get include initial
		$sql = "SELECT x.post_contract_bill_item_rate_id, x.include_at_revision_id
		FROM ".PreliminariesIncludeInitialTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id IN (".$implodedPostContractBillItemRateIds.")
		AND x.include_at_revision_id <= ".$claimViewSelectedProjectRevision['id'];
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$includeInitials = $stmt->fetchAll(PDO::FETCH_ASSOC);

		foreach ( $includeInitials as $includeInitial )
		{
			$includeInitialCostings[$includeInitial['post_contract_bill_item_rate_id']] = array(
				'include_at_revision_id' => $includeInitial['include_at_revision_id'],
			);
		}

		unset($includeInitials);

		// get include final
		$sql = "SELECT x.post_contract_bill_item_rate_id, x.include_at_revision_id
		FROM ".PreliminariesIncludeFinalTable::getInstance()->getTableName()." x
		WHERE x.post_contract_bill_item_rate_id IN (".$implodedPostContractBillItemRateIds.")
		AND x.include_at_revision_id <= ".$claimViewSelectedProjectRevision['id'];
		$stmt = $pdo->prepare($sql);
		$stmt->execute();

		$includeFinals = $stmt->fetchAll(PDO::FETCH_ASSOC);

		foreach ( $includeFinals as $includeFinal )
		{
			$includeFinalCostings[$includeFinal['post_contract_bill_item_rate_id']] = array(
				'include_at_revision_id' => $includeFinal['include_at_revision_id'],
			);
		}

		unset($includeFinals);

		if ( isset ($claimViewPreviousProjectRevision) AND count($claimViewPreviousProjectRevision) > 0 )
		{
			// get previous time based claim
			$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.total, 0) AS total, x.revision_id
			FROM ".PreliminariesTimeBasedClaimTable::getInstance()->getTableName()." x
			WHERE x.post_contract_bill_item_rate_id IN (".$implodedPostContractBillItemRateIds.")
			AND (
				x.revision_id = ".$claimViewPreviousProjectRevision['id']."
			)
			AND x.deleted_at IS NULL";
			$stmt = $pdo->prepare($sql);
			$stmt->execute();

			$prevTimeBasedClaims = $stmt->fetchAll(PDO::FETCH_ASSOC);

			foreach ( $prevTimeBasedClaims as $prevTimeBasedClaim )
			{
				$prevTimeBasedCostings[$prevTimeBasedClaim['post_contract_bill_item_rate_id']] = array(
					'total'       => $prevTimeBasedClaim['total'],
					'revision_id' => $prevTimeBasedClaim['revision_id'],
				);
			}

			unset($prevTimeBasedClaims);

			// get previous work based claim
			$sql = "SELECT x.post_contract_bill_item_rate_id, COALESCE(x.total, 0) AS total, x.revision_id
			FROM ".PreliminariesWorkBasedClaimTable::getInstance()->getTableName()." x
			WHERE x.post_contract_bill_item_rate_id IN (".$implodedPostContractBillItemRateIds.")
			AND (
				x.revision_id = ".$claimViewPreviousProjectRevision['id']."
			)
			AND x.deleted_at IS NULL";
			$stmt = $pdo->prepare($sql);
			$stmt->execute();

			$prevWorkBasedClaims = $stmt->fetchAll(PDO::FETCH_ASSOC);

			foreach ( $prevWorkBasedClaims as $prevWorkBasedClaim )
			{
				$prevWorkBasedCostings[$prevWorkBasedClaim['post_contract_bill_item_rate_id']] = array(
					'total'       => $prevWorkBasedClaim['total'],
					'revision_id' => $prevWorkBasedClaim['revision_id'],
				);
			}

			unset($prevWorkBasedClaims);
		}
	}

	public static function getRemeasurementItemList(PostContract $postContract, BillColumnSetting $billType, BillElement $element, $filterBy)
	{
		$pdo                              = self::getInstance()->getConnection()->getDbh();
		$billItems                        = array();
		$remeasurementClaims              = array();
		$billItemTypeReferences           = array();
		$billItemTypeRefFormulatedColumns = array();
		$preItemIds                       = array();
		$filterByQuery                    = '';

		if ( $filterBy == PostContractBillItemRate::REMEASUREMENT_FILTER_BY_PROVISIONAL_ITEMS )
		{
			$filterByQuery = 'AND i.type = '.BillItem::TYPE_ITEM_PROVISIONAL.' ';
		}

		// query item first
		$sql = "SELECT i.id FROM ".BillItemTable::getInstance()->getTableName()." i WHERE i.element_id = ".$element->id." AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL {$filterByQuery}";
		$stmt = $pdo->prepare($sql);
		$stmt->execute();
		$items = $stmt->fetchAll(PDO::FETCH_ASSOC);

		if ( count($items) > 0 )
		{
			foreach ( $items as $item )
			{
				$preItemIds[] = $item['id'];
			}

			$stmt = $pdo->prepare("SELECT DISTINCT p.id, x.id AS post_contract_bill_item_rate_id, p.description, p.type, p.priority, p.lft, p.level, x.rate, COALESCE(pcbitt.qty_per_unit, 0) AS qty_per_unit,
                x.bill_ref_element_no, x.bill_ref_page_no, x.bill_ref_char, pcbitt.include, uom.id AS uom_id, uom.symbol AS uom_symbol, p.note, pc.supply_rate AS pc_supply_rate, pc.wastage_percentage AS pc_wastage_percentage, pc.wastage_amount AS pc_wastage_amount, pc.labour_for_installation AS pc_labour_for_installation, pc.other_cost AS pc_other_cost, pc.profit_percentage AS pc_profit_percentage, pc.profit_amount AS pc_profit_amount, pc.total AS pc_total
                FROM ".self::getInstance()->getTableName()." x
                LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.deleted_at IS NULL
                JOIN ".BillItemTable::getInstance()->getTableName()." p ON i.lft BETWEEN p.lft AND p.rgt AND p.id = x.bill_item_id
                LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
                LEFT JOIN ".BillItemPrimeCostRateTable::getInstance()->getTableName()." pc ON p.id = pc.bill_item_id
                LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pcbitt ON (pcbitt.post_contract_id = x.post_contract_id AND pcbitt.bill_item_id = p.id AND pcbitt.bill_column_setting_id = ".$billType->id.")
                WHERE i.root_id = p.root_id AND i.type <> ".BillItem::TYPE_HEADER."
                AND x.post_contract_id = ".$postContract->id." AND i.id IN (".implode(', ', $preItemIds).") AND p.deleted_at IS NULL
                AND pc.deleted_at IS NULL ORDER BY p.priority, p.lft, p.level");

			$stmt->execute();

			$billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

			unset($items);

			if ( count($billItems) > 0 )
			{
				foreach ( $billItems as $billItem )
				{
					$postContractBillItemIds[] = $billItem['post_contract_bill_item_rate_id'];
				}

				$stmt = $pdo->prepare("SELECT x.post_contract_bill_item_rate_id, bill_column_setting_id, qty_per_unit, total_per_unit, has_build_up
                    FROM ".PostContractRemeasurementClaimTable::getInstance()->getTableName()." x
                    WHERE x.post_contract_bill_item_rate_id IN (".implode(', ', $postContractBillItemIds).") AND x.bill_column_setting_id = ".$billType->id."
                    AND x.deleted_at IS NULL");

				$stmt->execute();

				$remeasurementClaimRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

				foreach ( $remeasurementClaimRecords as $remeasurementClaimRecord )
				{
					$remeasurementClaims[$remeasurementClaimRecord['post_contract_bill_item_rate_id']] = array(
						'qty_per_unit'   => $remeasurementClaimRecord['qty_per_unit'],
						'total_per_unit' => $remeasurementClaimRecord['total_per_unit'],
						'has_build_up'   => $remeasurementClaimRecord['has_build_up'],
					);

					unset($remeasurementClaimRecord);
				}

				unset($remeasurementClaimRecords);

				$stmt = $pdo->prepare("SELECT r.id, r.bill_item_id, r.include, r.total_quantity, r.quantity_per_unit_difference
				FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()." r
				WHERE r.bill_item_id IN (".implode(', ', $preItemIds).") AND r.bill_column_setting_id = ".$billType->id."
				AND r.deleted_at IS NULL");

				$stmt->execute();

				$billItemTypeRefs = $stmt->fetchAll(PDO::FETCH_ASSOC);

				$billItemTypeRefIds = count($billItemTypeRefs) > 0 ? new SplFixedArray(count($billItemTypeRefs)) : null;

				foreach($billItemTypeRefs as $idx => $billItemTypeReference)
				{
					if(!array_key_exists($billType->id, $billItemTypeReferences))
					{
						$billItemTypeReferences[$billType->id] = array();
					}

					$billItemTypeReferences[$billType->id][$billItemTypeReference['bill_item_id']] = $billItemTypeReference;

					$billItemTypeRefIds[$idx] = $billItemTypeReference['id'];
				}

				if($billItemTypeRefIds instanceof SplFixedArray)
				{
					$stmt = $pdo->prepare("SELECT fc.relation_id, fc.has_build_up
					FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
					WHERE fc.relation_id IN (".implode(',', $billItemTypeRefIds->toArray()).") AND fc.deleted_at IS NULL");

					$stmt->execute();

					$billItemTypeRefFormulatedColumnFetch = $stmt->fetchAll(PDO::FETCH_ASSOC);

					foreach($billItemTypeRefFormulatedColumnFetch as $fc)
					{
						if(!array_key_exists($fc['relation_id'], $billItemTypeRefFormulatedColumns))
						{
							$billItemTypeRefFormulatedColumns[$fc['relation_id']] = array();
						}

						array_push($billItemTypeRefFormulatedColumns[$fc['relation_id']], $fc);

						unset($fc);
					}

					unset($billItemTypeRefFormulatedColumnFetch);
				}
			}

			unset($preItemIds);
		}

		return array($billItems, $remeasurementClaims, $billItemTypeReferences, $billItemTypeRefFormulatedColumns);
	}

	public static function getSubPackageRemeasurementItemList(PostContract $postContract, SubPackage $subPackage, BillColumnSetting $billType, BillElement $element, $filterBy)
	{
		$pdo                              = self::getInstance()->getConnection()->getDbh();
		$billItems                        = array();
		$remeasurementClaims              = array();
		$billItemTypeReferences           = array();
		$billItemTypeRefFormulatedColumns = array();
		$preItemIds                       = array();
		$filterByQuery                    = '';

		if ( $filterBy == PostContractBillItemRate::REMEASUREMENT_FILTER_BY_PROVISIONAL_ITEMS )
		{
			$filterByQuery = 'AND i.type = '.BillItem::TYPE_ITEM_PROVISIONAL.' ';
		}

		// query item first
		$stmt = $pdo->prepare("SELECT i.id FROM ".SubPackagePostContractBillItemRateTable::getInstance()->getTableName()." rate
		JOIN ".BillItemTable::getInstance()->getTableName()." i ON (i.id = rate.bill_item_id AND i.deleted_at IS NULL)
		JOIN ".BillElementTable::getInstance()->getTableName()." e ON e.id = i.element_id
		WHERE rate.sub_package_id = ".$subPackage->id." AND e.id = ".$element->id."
		AND i.project_revision_deleted_at IS NULL {$filterByQuery}");

		$stmt->execute();
		$items = $stmt->fetchAll(PDO::FETCH_ASSOC);

		if ( count($items) > 0 )
		{
			foreach ( $items as $item )
			{
				$preItemIds[] = $item['id'];
			}

			$stmt = $pdo->prepare("SELECT DISTINCT p.id, sppcbir.id AS sub_package_post_contract_bill_item_rate_id, p.description, p.type, p.priority, p.lft, p.level, sppcbir.rate, COALESCE(pcbitt.qty_per_unit, 0) AS qty_per_unit,
			x.bill_ref_element_no, x.bill_ref_page_no, x.bill_ref_char, pcbitt.include, uom.id AS uom_id, uom.symbol AS uom_symbol, p.note, pc.supply_rate AS pc_supply_rate, pc.wastage_percentage AS pc_wastage_percentage, pc.wastage_amount AS pc_wastage_amount, pc.labour_for_installation AS pc_labour_for_installation, pc.other_cost AS pc_other_cost, pc.profit_percentage AS pc_profit_percentage, pc.profit_amount AS pc_profit_amount, pc.total AS pc_total
			FROM ".self::getInstance()->getTableName()." x
			LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i ON (i.deleted_at IS NULL)
			JOIN ".BillItemTable::getInstance()->getTableName()." p ON (i.lft BETWEEN p.lft AND p.rgt AND p.id = x.bill_item_id)
			JOIN ".SubPackagePostContractBillItemRateTable::getInstance()->getTableName()." sppcbir ON (sppcbir.bill_item_id = p.id)
			LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON (p.uom_id = uom.id AND uom.deleted_at IS NULL)
			LEFT JOIN ".BillItemPrimeCostRateTable::getInstance()->getTableName()." pc ON (p.id = pc.bill_item_id)
			LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pcbitt ON (pcbitt.post_contract_id = x.post_contract_id AND pcbitt.bill_item_id = p.id AND pcbitt.bill_column_setting_id = ".$billType->id.")
			WHERE i.id IN (".implode(', ', $preItemIds).") AND i.root_id = p.root_id AND i.type <> ".BillItem::TYPE_HEADER."
			AND sppcbir.sub_package_id = ".$subPackage->id." AND x.post_contract_id = ".$postContract->id."
			AND i.project_revision_deleted_at IS NULL AND p.project_revision_deleted_at IS NULL
			AND p.deleted_at IS NULL AND pc.deleted_at IS NULL ORDER BY p.priority, p.lft, p.level");

			$stmt->execute();
			$billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

			unset($items);

			if ( count($billItems) > 0 )
			{
				foreach ( $billItems as $billItem )
				{
					$postContractBillItemIds[] = $billItem['sub_package_post_contract_bill_item_rate_id'];
				}

				$stmt = $pdo->prepare("SELECT x.sub_package_post_contract_bill_item_rate_id, bill_column_setting_id, qty_per_unit, total_per_unit, has_build_up
				FROM ".PostContractSubPackageRemeasurementClaimTable::getInstance()->getTableName()." x
				WHERE x.sub_package_post_contract_bill_item_rate_id IN (".implode(', ', $postContractBillItemIds).") AND x.bill_column_setting_id = ".$billType->id."
				AND x.deleted_at IS NULL");

				$stmt->execute();
				$remeasurementClaimRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

				foreach ( $remeasurementClaimRecords as $remeasurementClaimRecord )
				{
					$remeasurementClaims[$remeasurementClaimRecord['sub_package_post_contract_bill_item_rate_id']] = array(
						'qty_per_unit'   => $remeasurementClaimRecord['qty_per_unit'],
						'total_per_unit' => $remeasurementClaimRecord['total_per_unit'],
						'has_build_up'   => $remeasurementClaimRecord['has_build_up'],
					);

					unset($remeasurementClaimRecord);
				}

				unset($remeasurementClaimRecords);

				$stmt = $pdo->prepare("SELECT r.id, r.bill_item_id, r.include, r.total_quantity, r.quantity_per_unit_difference
				FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()." r
				WHERE r.bill_item_id IN (".implode(', ', $preItemIds).") AND r.bill_column_setting_id = ".$billType->id."
				AND r.deleted_at IS NULL");

				$stmt->execute();
				$billItemTypeRefs = $stmt->fetchAll(PDO::FETCH_ASSOC);

				$billItemTypeRefIds = count($billItemTypeRefs) > 0 ? new SplFixedArray(count($billItemTypeRefs)) : null;

				foreach($billItemTypeRefs as $idx => $billItemTypeReference)
				{
					if(!array_key_exists($billType->id, $billItemTypeReferences))
					{
						$billItemTypeReferences[$billType->id] = array();
					}

					$billItemTypeReferences[$billType->id][$billItemTypeReference['bill_item_id']] = $billItemTypeReference;

					$billItemTypeRefIds[$idx] = $billItemTypeReference['id'];
				}

				if($billItemTypeRefIds instanceof SplFixedArray)
				{
					$implodedBillItemTypeRefIds = implode(',', $billItemTypeRefIds->toArray());

					$stmt = $pdo->prepare("SELECT fc.relation_id, fc.has_build_up
					FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
					WHERE fc.relation_id IN (".$implodedBillItemTypeRefIds.") AND fc.deleted_at IS NULL");

					$stmt->execute();
					$billItemTypeRefFormulatedColumnFetch = $stmt->fetchAll(PDO::FETCH_ASSOC);

					foreach($billItemTypeRefFormulatedColumnFetch as $fc)
					{
						if(!array_key_exists($fc['relation_id'], $billItemTypeRefFormulatedColumns))
						{
							$billItemTypeRefFormulatedColumns[$fc['relation_id']] = array();
						}

						array_push($billItemTypeRefFormulatedColumns[$fc['relation_id']], $fc);

						unset($fc);
					}

					unset($billItemTypeRefFormulatedColumnFetch);
				}
			}

			unset($preItemIds);
		}

		return array($billItems, $remeasurementClaims, $billItemTypeReferences, $billItemTypeRefFormulatedColumns);
	}

	public static function getRemeasurementItemListByItemIds(PostContract $postContract, BillColumnSetting $billType, Array $itemIds, $filterBy)
	{
		$pdo                              = self::getInstance()->getConnection()->getDbh();
		$elementIds                       = array();
		$billItems                        = array();
		$remeasurementClaims              = array();
		$billItemTypeReferences           = array();
		$billItemTypeRefFormulatedColumns = array();
		$preItemIds                       = array();
		$filterByQuery                    = '';

		if ( $filterBy == PostContractBillItemRate::REMEASUREMENT_FILTER_BY_PROVISIONAL_ITEMS )
		{
			$filterByQuery = 'AND i.type = '.BillItem::TYPE_ITEM_PROVISIONAL.' ';
		}

		// query item first
		$stmt = $pdo->prepare("SELECT i.id, i.element_id FROM ".BillItemTable::getInstance()->getTableName()." i WHERE i.id IN (".implode(',', $itemIds).") AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL {$filterByQuery}");

		$stmt->execute();
		$items = $stmt->fetchAll(PDO::FETCH_ASSOC);

		if ( count($items) > 0 )
		{
			foreach ( $items as $item )
			{
				$preItemIds[] = $item['id'];
				$elementIds[] = $item['element_id'];
			}

			$stmt = $pdo->prepare("SELECT DISTINCT p.id, p.element_id, x.id AS post_contract_bill_item_rate_id, p.description, p.type, p.priority, p.lft, p.level, x.rate, COALESCE(pcbitt.qty_per_unit, 0) AS qty_per_unit,
			x.bill_ref_element_no, x.bill_ref_page_no, x.bill_ref_char, pcbitt.include, uom.id AS uom_id, uom.symbol AS uom_symbol, p.note, pc.supply_rate AS pc_supply_rate, pc.wastage_percentage AS pc_wastage_percentage, pc.wastage_amount AS pc_wastage_amount, pc.labour_for_installation AS pc_labour_for_installation, pc.other_cost AS pc_other_cost, pc.profit_percentage AS pc_profit_percentage, pc.profit_amount AS pc_profit_amount, pc.total AS pc_total
			FROM ".self::getInstance()->getTableName()." x
			LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.deleted_at IS NULL
			JOIN ".BillItemTable::getInstance()->getTableName()." p ON i.lft BETWEEN p.lft AND p.rgt AND p.id = x.bill_item_id
			LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
			LEFT JOIN ".BillItemPrimeCostRateTable::getInstance()->getTableName()." pc ON p.id = pc.bill_item_id
			LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pcbitt ON (pcbitt.post_contract_id = x.post_contract_id AND pcbitt.bill_item_id = p.id AND pcbitt.bill_column_setting_id = ".$billType->id.")
			WHERE i.root_id = p.root_id AND i.type <> ".BillItem::TYPE_HEADER."
			AND x.post_contract_id = ".$postContract->id." AND i.id IN (".implode(', ', $preItemIds).")
			AND i.project_revision_deleted_at IS NULL
			AND p.deleted_at IS NULL AND p.project_revision_deleted_at IS NULL
			AND pc.deleted_at IS NULL ORDER BY p.priority, p.lft, p.level");

			$stmt->execute();
			$billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

			unset($items);

			if ( count($billItems) > 0 )
			{
				foreach ( $billItems as $billItem )
				{
					$postContractBillItemIds[] = $billItem['post_contract_bill_item_rate_id'];
				}

				$sql = "SELECT x.post_contract_bill_item_rate_id, bill_column_setting_id, qty_per_unit, total_per_unit, has_build_up
				FROM ".PostContractRemeasurementClaimTable::getInstance()->getTableName()." x
				WHERE x.post_contract_bill_item_rate_id IN (".implode(', ', $postContractBillItemIds).") AND x.bill_column_setting_id = ".$billType->id."
				AND x.deleted_at IS NULL";
				$stmt = $pdo->prepare($sql);
				$stmt->execute();

				$remeasurementClaimRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

				foreach ( $remeasurementClaimRecords as $remeasurementClaimRecord )
				{
					$remeasurementClaims[$remeasurementClaimRecord['post_contract_bill_item_rate_id']] = array(
						'qty_per_unit'   => $remeasurementClaimRecord['qty_per_unit'],
						'total_per_unit' => $remeasurementClaimRecord['total_per_unit'],
						'has_build_up'   => $remeasurementClaimRecord['has_build_up'],
					);

					unset($remeasurementClaimRecord);
				}

				unset($remeasurementClaimRecords);

				$sql = "SELECT r.id, r.bill_item_id, r.include, r.total_quantity, r.quantity_per_unit_difference
				FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()." r
				WHERE r.bill_item_id IN (".implode(', ', $preItemIds).") AND r.bill_column_setting_id = ".$billType->id."
				AND r.deleted_at IS NULL";

				$stmt = $pdo->prepare($sql);
				$stmt->execute();

				$billItemTypeRefs = $stmt->fetchAll(PDO::FETCH_ASSOC);

				$billItemTypeRefIds = count($billItemTypeRefs) > 0 ? new SplFixedArray(count($billItemTypeRefs)) : null;

				foreach($billItemTypeRefs as $idx => $billItemTypeReference)
				{
					if(!array_key_exists($billType->id, $billItemTypeReferences))
					{
						$billItemTypeReferences[$billType->id] = array();
					}

					$billItemTypeReferences[$billType->id][$billItemTypeReference['bill_item_id']] = $billItemTypeReference;

					$billItemTypeRefIds[$idx] = $billItemTypeReference['id'];
				}

				if($billItemTypeRefIds instanceof SplFixedArray)
				{
					$implodedBillItemTypeRefIds = implode(',', $billItemTypeRefIds->toArray());

					$sql = "SELECT fc.relation_id, fc.has_build_up
					FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
					WHERE fc.relation_id IN (".$implodedBillItemTypeRefIds.") AND fc.deleted_at IS NULL";

					$stmt = $pdo->prepare($sql);
					$stmt->execute();

					$billItemTypeRefFormulatedColumnFetch = $stmt->fetchAll(PDO::FETCH_ASSOC);

					foreach($billItemTypeRefFormulatedColumnFetch as $fc)
					{
						if(!array_key_exists($fc['relation_id'], $billItemTypeRefFormulatedColumns))
						{
							$billItemTypeRefFormulatedColumns[$fc['relation_id']] = array();
						}

						array_push($billItemTypeRefFormulatedColumns[$fc['relation_id']], $fc);

						unset($fc);
					}

					unset($billItemTypeRefFormulatedColumnFetch);
				}
			}

			unset($preItemIds);
		}

		return array($elementIds, $billItems, $remeasurementClaims, $billItemTypeReferences, $billItemTypeRefFormulatedColumns);
	}

	public static function getRemeasurementItemListWithAdditionOnly(ProjectStructure $bill, PostContract $postContract, BillColumnSetting $billType, $filterBy)
	{
		$pdo                              = self::getInstance()->getConnection()->getDbh();
		$elementIds                       = array();
		$billItems                        = array();
		$remeasurementClaims              = array();
		$billItemTypeReferences           = array();
		$billItemTypeRefFormulatedColumns = array();
		$preItemIds                       = array();
		$filterByQuery                    = '';

		if ( $filterBy == PostContractBillItemRate::REMEASUREMENT_FILTER_BY_PROVISIONAL_ITEMS )
		{
			$filterByQuery = 'AND i.type = '.BillItem::TYPE_ITEM_PROVISIONAL.' ';
		}

		// query item that has addition's value, then only we can proceed with query item's tree structure
		$stmt = $pdo->prepare("SELECT i.id, i.element_id, pcrc.post_contract_bill_item_rate_id, pcrc.bill_column_setting_id, pcrc.qty_per_unit, pcrc.total_per_unit, pcrc.has_build_up
		FROM ".PostContractRemeasurementClaimTable::getInstance()->getTableName()." pcrc
		JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." pcbir ON (pcrc.post_contract_bill_item_rate_id = pcbir.id)
		JOIN ".BillItemTable::getInstance()->getTableName()." i ON (pcbir.bill_item_id = i.id AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL {$filterByQuery})
		JOIN ".BillElementTable::getInstance()->getTableName()." e ON (i.element_id = e.id AND e.deleted_at IS NULL)
		JOIN ".PostContractTable::getInstance()->getTableName()." pc ON (pcbir.post_contract_id = pc.id)
		WHERE pc.id = ".$postContract->id." AND pcrc.bill_column_setting_id = ".$billType->id."
		AND pcrc.total_per_unit > 0 AND pcrc.deleted_at IS NULL");

		$stmt->execute();
		$remeasurementClaimRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

		if ( count($remeasurementClaimRecords) > 0 )
		{
			foreach ( $remeasurementClaimRecords as $remeasurementClaimRecord )
			{
				$preItemIds[]                                        = $remeasurementClaimRecord['id'];
				$elementIds[$remeasurementClaimRecord['element_id']] = $remeasurementClaimRecord['element_id'];

				$remeasurementClaims[$remeasurementClaimRecord['post_contract_bill_item_rate_id']] = array(
					'qty_per_unit'   => $remeasurementClaimRecord['qty_per_unit'],
					'total_per_unit' => $remeasurementClaimRecord['total_per_unit'],
					'has_build_up'   => $remeasurementClaimRecord['has_build_up'],
				);

				unset($remeasurementClaimRecord);
			}

			unset($remeasurementClaimRecords);

			$stmt = $pdo->prepare("SELECT r.id, r.bill_item_id, r.include, r.total_quantity, r.quantity_per_unit_difference
			FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()." r
			WHERE r.bill_item_id IN (".implode(', ', $preItemIds).") AND r.bill_column_setting_id = ".$billType->id."
			AND r.deleted_at IS NULL");

			$stmt->execute();
			$billItemTypeRefs = $stmt->fetchAll(PDO::FETCH_ASSOC);

			$billItemTypeRefIds = count($billItemTypeRefs) > 0 ? new SplFixedArray(count($billItemTypeRefs)) : null;

			foreach($billItemTypeRefs as $idx => $billItemTypeReference)
			{
				if(!array_key_exists($billType->id, $billItemTypeReferences))
				{
					$billItemTypeReferences[$billType->id] = array();
				}

				$billItemTypeReferences[$billType->id][$billItemTypeReference['bill_item_id']] = $billItemTypeReference;

				$billItemTypeRefIds[$idx] = $billItemTypeReference['id'];
			}

			if($billItemTypeRefIds instanceof SplFixedArray)
			{
				$implodedBillItemTypeRefIds = implode(',', $billItemTypeRefIds->toArray());

				$stmt = $pdo->prepare("SELECT fc.relation_id, fc.has_build_up
				FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
				WHERE fc.relation_id IN (".$implodedBillItemTypeRefIds.") AND fc.deleted_at IS NULL");

				$stmt->execute();
				$billItemTypeRefFormulatedColumnFetch = $stmt->fetchAll(PDO::FETCH_ASSOC);

				foreach($billItemTypeRefFormulatedColumnFetch as $fc)
				{
					if(!array_key_exists($fc['relation_id'], $billItemTypeRefFormulatedColumns))
					{
						$billItemTypeRefFormulatedColumns[$fc['relation_id']] = array();
					}

					array_push($billItemTypeRefFormulatedColumns[$fc['relation_id']], $fc);

					unset($fc);
				}

				unset($billItemTypeRefFormulatedColumnFetch);
			}

			// get item that is currently got addition's record
			if ( count($preItemIds) > 0 )
			{
				$billItems = self::getBillItemsByPostContractAndBillTypeAndItemIds($pdo, $postContract, $billType, $preItemIds);
			}

			unset($preItemIds, $billItemTypeRefIds);
		}

		return array($elementIds, $billItems, $remeasurementClaims, $billItemTypeReferences, $billItemTypeRefFormulatedColumns);
	}

	public static function getRemeasurementItemListWithBuildUpQtyOnly(PostContract $postContract, BillColumnSetting $billType, array $itemIds, $filterBy)
	{
		$pdo                              = self::getInstance()->getConnection()->getDbh();
		$elementIds                       = array();
		$billItems                        = array();
		$remeasureClaims                  = array();
		$newBuildUpQuantityItems          = array();
		$newBillBuildUpQuantitySummaries  = array();
		$billItemTypeReferences           = array();
		$billItemTypeRefFormulatedColumns = array();
		$preItemIds                       = array();
		$postContractItemRateIds          = array();
		$qtyTypes                         = array( PostContractRemeasurementBuildUpQuantityItem::OMISSION_TYPE_TEXT, PostContractRemeasurementBuildUpQuantityItem::ADDITION_TYPE_TEXT );
		$uomIds                           = array();
		$unitsDimensions                  = array();
		$quantityPerUnitByColumns         = array();
		$filterByQuery                    = '';
		$columnName                       = $billType->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

		if ( count($itemIds) == 0 )
		{
			return array($elementIds, $billItems, $remeasureClaims, $billItemTypeReferences, $billItemTypeRefFormulatedColumns, $newBuildUpQuantityItems, $newBillBuildUpQuantitySummaries, $quantityPerUnitByColumns, $unitsDimensions);
		}

		if ( $filterBy == PostContractBillItemRate::REMEASUREMENT_FILTER_BY_PROVISIONAL_ITEMS )
		{
			$filterByQuery = 'AND i.type = '.BillItem::TYPE_ITEM_PROVISIONAL.' ';
		}

		// query item that has omission or addition and build up, then only we can proceed with query item's tree structure
		$stmt = $pdo->prepare("SELECT DISTINCT i.id, i.element_id, pcrc.post_contract_bill_item_rate_id,
		pcrc.bill_column_setting_id, pcrc.qty_per_unit, pcrc.total_per_unit, pcrc.has_build_up, i.uom_id
		FROM ".PostContractRemeasurementClaimTable::getInstance()->getTableName()." pcrc
		JOIN ".PostContractBillItemRateTable::getInstance()->getTableName()." pcbir ON (pcrc.post_contract_bill_item_rate_id = pcbir.id)
		JOIN ".BillItemTable::getInstance()->getTableName()." i ON (pcbir.bill_item_id = i.id AND i.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL {$filterByQuery})
		LEFT JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." bitr ON (i.id = bitr.bill_item_id AND bitr.bill_column_setting_id = pcrc.bill_column_setting_id AND bitr.deleted_at IS NULL)
		LEFT JOIN ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." bitrfc ON (bitr.id = bitrfc.relation_id)
		JOIN ".BillElementTable::getInstance()->getTableName()." e ON (i.element_id = e.id AND e.deleted_at IS NULL)
		JOIN ".PostContractTable::getInstance()->getTableName()." pc ON (pcbir.post_contract_id = pc.id)
		WHERE pc.id = ".$postContract->id." AND i.id IN (".implode(',', $itemIds).")
		AND pcrc.bill_column_setting_id = ".$billType->id."
		AND ((pcrc.qty_per_unit <> 0 AND pcrc.has_build_up = TRUE AND pcrc.deleted_at IS NULL)
		OR (bitrfc.column_name = '{$columnName}' AND bitrfc.final_value <> 0 AND bitrfc.has_build_up = TRUE AND bitrfc.deleted_at IS NULL))");

		$stmt->execute();
		$remeasureClaimRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

		if ( count($remeasureClaimRecords) > 0 )
		{
			foreach ( $remeasureClaimRecords as $remeasureClaimRecord )
			{
				$pcItemRateId                            = $remeasureClaimRecord['post_contract_bill_item_rate_id'];
				$uomIds[$remeasureClaimRecord['uom_id']] = $remeasureClaimRecord['uom_id'];
				$postContractItemRateIds[$pcItemRateId]  = $pcItemRateId;

				$preItemIds[]                                    = $remeasureClaimRecord['id'];
				$elementIds[$remeasureClaimRecord['element_id']] = $remeasureClaimRecord['element_id'];

				$remeasureClaims[$pcItemRateId] = array(
					'qty_per_unit'   => $remeasureClaimRecord['qty_per_unit'],
					'total_per_unit' => $remeasureClaimRecord['total_per_unit'],
					'has_build_up'   => $remeasureClaimRecord['has_build_up'],
				);

				unset($remeasureClaimRecord);
			}

			unset($remeasureClaimRecords);

			$stmt = $pdo->prepare("SELECT r.id, r.bill_item_id, r.include, r.total_quantity, r.quantity_per_unit_difference
			FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()." r
			WHERE r.bill_item_id IN (".implode(', ', $preItemIds).") AND r.bill_column_setting_id = ".$billType->id."
			AND r.deleted_at IS NULL");

			$stmt->execute();
			$billItemTypeRefs = $stmt->fetchAll(PDO::FETCH_ASSOC);

			$billItemTypeRefIds = count($billItemTypeRefs) > 0 ? new SplFixedArray(count($billItemTypeRefs)) : null;

			foreach($billItemTypeRefs as $idx => $billItemTypeReference)
			{
				if(!array_key_exists($billType->id, $billItemTypeReferences))
				{
					$billItemTypeReferences[$billType->id] = array();
				}

				$billItemTypeReferences[$billType->id][$billItemTypeReference['bill_item_id']] = $billItemTypeReference;

				$billItemTypeRefIds[$idx] = $billItemTypeReference['id'];
			}

			if($billItemTypeRefIds instanceof SplFixedArray)
			{
				$implodedBillItemTypeRefIds = implode(',', $billItemTypeRefIds->toArray());

				$stmt = $pdo->prepare("SELECT fc.relation_id, fc.has_build_up
				FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
				WHERE fc.relation_id IN (".$implodedBillItemTypeRefIds.") AND fc.deleted_at IS NULL");

				$stmt->execute();
				$billItemTypeRefFormulatedColumnFetch = $stmt->fetchAll(PDO::FETCH_ASSOC);

				foreach($billItemTypeRefFormulatedColumnFetch as $fc)
				{
					if(!array_key_exists($fc['relation_id'], $billItemTypeRefFormulatedColumns))
					{
						$billItemTypeRefFormulatedColumns[$fc['relation_id']] = array();
					}

					array_push($billItemTypeRefFormulatedColumns[$fc['relation_id']], $fc);

					unset($fc);
				}

				unset($billItemTypeRefFormulatedColumnFetch);
			}

			// will get build up item depends on BillBuildUpQuantityItem or PostContractRemeasurementBuildUpQuantityItem
			$buildupSummaryType = $billType->use_original_quantity ? 1 : 2;

			foreach ( $qtyTypes as $qtyType )
			{
				if ( $qtyType == PostContractRemeasurementBuildUpQuantityItem::OMISSION_TYPE_TEXT )
				{
					$billItemColumn = 'bill_item_id';

					$buildUpQuantityItems = DoctrineQuery::create()
					->select('i.id, i.bill_item_id, i.bill_column_setting_id, i.description, i.sign, i.total, ifc.column_name, ifc.value, ifc.final_value')
					->from('BillBuildUpQuantityItem i')
					->whereIn('i.bill_item_id', $preItemIds);
				}
				else
				{
					$billItemColumn = 'post_contract_bill_item_rate_id';

					$buildUpQuantityItems = DoctrineQuery::create()
					->select('i.id, i.post_contract_bill_item_rate_id, i.bill_column_setting_id, i.description, i.sign, i.total, ifc.column_name, ifc.value, ifc.final_value')
					->from('PostContractRemeasurementBuildUpQuantityItem i')
					->whereIn('i.post_contract_bill_item_rate_id', $postContractItemRateIds);
				}

				$buildUpQuantityItems = $buildUpQuantityItems->leftJoin('i.FormulatedColumns ifc')
				->andWhere('i.bill_column_setting_id = ?', $billType->id)
				->andWhere('i.type = ?', $buildupSummaryType)
				->addOrderBy('i.priority ASC')
				->fetchArray();

				foreach ( $buildUpQuantityItems as $buildUpQuantityItem )
				{
					$newBuildUpQuantityItems[$qtyType][$buildUpQuantityItem[$billItemColumn]][] = $buildUpQuantityItem;

					unset($buildUpQuantityItem);
				}

				unset($buildUpQuantityItems);

				// get item(s) qty build up summary based on types
				$newBillBuildUpQuantitySummaries[$qtyType] = self::getItemsBuildUpSummaryByTypeAndItemIds($qtyType, $preItemIds, $postContractItemRateIds, $billItemColumn);

				// get item(s) qty per unit
				$quantityPerUnitByColumns[$qtyType] = self::getItemsQtyPerUnitByTypeAndItemIds($billType, $qtyType, $preItemIds, $postContractItemRateIds);
			}

			// get item that is currently got addition's record
			if ( count($preItemIds) > 0 )
			{
				$billItems = self::getBillItemsByPostContractAndBillTypeAndItemIds($pdo, $postContract, $billType, $preItemIds);
			}

			unset($preItemIds, $billItemTypeRefIds);

			// get unit's dimension
			if ( count($uomIds) > 0 )
			{
				$unitsDimensions = UnitOfMeasurementDimensionsTable::getUnitDimensionsByUnitIds($uomIds);
			}
		}

		return array($elementIds, $billItems, $remeasureClaims, $billItemTypeReferences, $billItemTypeRefFormulatedColumns, $newBuildUpQuantityItems, $newBillBuildUpQuantitySummaries, $quantityPerUnitByColumns, $unitsDimensions);
	}

	public static function getBillItemsByPostContractAndBillTypeAndItemIds(PDO $pdo, PostContract $postContract, BillColumnSetting $billType, array $preItemIds)
	{
		$stmt = $pdo->prepare("SELECT DISTINCT p.id, p.element_id, x.id AS post_contract_bill_item_rate_id, p.description, p.type, p.priority, p.lft, p.level, x.rate, COALESCE(pcbitt.qty_per_unit, 0) AS qty_per_unit, e.description as element_description,
		x.bill_ref_element_no, x.bill_ref_page_no, x.bill_ref_char, pcbitt.include, uom.id AS uom_id, uom.symbol AS uom_symbol, p.note, pc.supply_rate AS pc_supply_rate, pc.wastage_percentage AS pc_wastage_percentage, pc.wastage_amount AS pc_wastage_amount, pc.labour_for_installation AS pc_labour_for_installation, pc.other_cost AS pc_other_cost, pc.profit_percentage AS pc_profit_percentage, pc.profit_amount AS pc_profit_amount, pc.total AS pc_total
		FROM ".self::getInstance()->getTableName()." x
		LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.deleted_at IS NULL
		JOIN ".BillItemTable::getInstance()->getTableName()." p ON i.lft BETWEEN p.lft AND p.rgt AND p.id = x.bill_item_id
		JOIN ".BillElementTable::getInstance()->getTableName()." e ON e.id = p.element_id AND e.deleted_at IS NULL
		LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
		LEFT JOIN ".BillItemPrimeCostRateTable::getInstance()->getTableName()." pc ON p.id = pc.bill_item_id
		LEFT JOIN ".PostContractBillItemTypeTable::getInstance()->getTableName()." pcbitt ON (pcbitt.post_contract_id = x.post_contract_id AND pcbitt.bill_item_id = p.id AND pcbitt.bill_column_setting_id = ".$billType->id.")
		WHERE i.root_id = p.root_id AND i.type <> ".BillItem::TYPE_HEADER."
		AND x.post_contract_id = ".$postContract->id." AND i.id IN (".implode(', ', $preItemIds).")
		AND i.project_revision_deleted_at IS NULL
		AND p.deleted_at IS NULL AND p.project_revision_deleted_at IS NULL
		AND pc.deleted_at IS NULL ORDER BY p.priority, p.lft, p.level");

		$stmt->execute();

		return $stmt->fetchAll(PDO::FETCH_ASSOC);
	}

	public static function getItemsQtyPerUnitByTypeAndItemIds(BillColumnSetting $billType, $qtyType, $preItemIds, $postContractItemRateIds)
	{
		$pdo                      = self::getInstance()->getConnection()->getDbh();
		$quantityPerUnitByColumns = array();
		$quantityFieldName        = $billType->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

		if ($qtyType == PostContractRemeasurementBuildUpQuantityItem::OMISSION_TYPE_TEXT)
		{
			$stmt = $pdo->prepare("SELECT r.bill_item_id, COALESCE(fc.final_value, 0) AS value FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
			JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
			WHERE r.bill_item_id IN (" . implode(',', $preItemIds) . ") AND r.bill_column_setting_id = " . $billType->id . "
			AND r.include IS TRUE AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0
			AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");
		}
		else
		{
			$stmt = $pdo->prepare("SELECT r.post_contract_bill_item_rate_id, COALESCE(fc.final_value, 0) AS value FROM " . PostContractRemeasurementBuildUpQuantityFormulatedColumnTable::getInstance()->getTableName() . " fc
			JOIN " . PostContractRemeasurementItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
			WHERE r.post_contract_bill_item_rate_id IN (" . implode(',', $postContractItemRateIds) . ") AND r.bill_column_setting_id = " . $billType->id . "
			AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0
			AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");
		}

		$stmt->execute();
		$quantities = $stmt->fetchAll(PDO::FETCH_COLUMN | PDO::FETCH_GROUP);

		$quantityPerUnitByColumns[$billType->id] = $quantities;

		return $quantityPerUnitByColumns;
	}

	public static function getItemsBuildUpSummaryByTypeAndItemIds($qtyType, $preItemIds, $postContractItemRateIds, $billItemColumn)
	{
		$newBillBuildUpQuantitySummaries = array();

		if ($qtyType == PostContractRemeasurementBuildUpQuantityItem::OMISSION_TYPE_TEXT)
		{
			$billBuildUpQtySummaries = DoctrineQuery::create()
			->from('BillBuildUpQuantitySummary i')
			->whereIn('i.bill_item_id', $preItemIds);
		}
		else
		{
			$billBuildUpQtySummaries = DoctrineQuery::create()
			->from('PostContractRemeasurementBuildUpQuantitySummary i')
			->whereIn('i.post_contract_bill_item_rate_id', $postContractItemRateIds);
		}

		$billBuildUpQtySummaries = $billBuildUpQtySummaries->fetchArray();

		foreach ($billBuildUpQtySummaries as $billBuildUpRateSummary)
		{
			$newBillBuildUpQuantitySummaries[$billBuildUpRateSummary[$billItemColumn]] = $billBuildUpRateSummary;
		}

		unset($billBuildUpQtySummaries);

		return $newBillBuildUpQuantitySummaries;
	}
}