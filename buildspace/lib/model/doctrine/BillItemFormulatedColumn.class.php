<?php

/**
 * BillItemFormulatedColumn
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BillItemFormulatedColumn extends BaseBillItemFormulatedColumn
{
    public function save(Doctrine_Connection $conn = null, $updateMarkupColumns = true)
    {
        parent::save($conn);

        if($this->deleted_at == NULL)
        {
            $this->refresh();

            if($this->column_name == BillItem::FORMULATED_COLUMN_RATE)
            {
                $this->clearBuildUpRates();//reset all build up rates
                //Update Type Total Amount
                $this->BillItem->updateTypeTotalAmount();
            }

            if($updateMarkupColumns and $this->column_name != BillItem::FORMULATED_COLUMN_RATE)
            {
                $this->updateMarkupColumns($this->column_name, $conn);
            }

            $this->BillItem->Element->updateMarkupAmount();
        }
    }

    public function updateMarkupColumns($updatedColumnName, Doctrine_Connection $con = null)
    {
        switch($updatedColumnName)
        {
            case BillItem::FORMULATED_COLUMN_MARKUP_AMOUNT:
                $markupPercentage = $this->BillItem->grand_total != 0 ? $this->final_value / $this->BillItem->grand_total * 100 : 0;

                $markupPercentageFormulatedColumn = $this->getTable()->getByRelationIdAndColumnName($this->relation_id, BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE);

                $markupPercentageFormulatedColumn->setFormula(number_format($markupPercentage, 5, '.', ''));

                $markupPercentageFormulatedColumn->linked = false;
                $markupPercentageFormulatedColumn->has_build_up = false;

                $markupPercentageFormulatedColumn->save($con, false);
                break;
            case BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE:
                $markupAmount = $this->BillItem->grand_total * ($this->final_value / 100);

                $markupAmountFormulatedColumn = $this->getTable()->getByRelationIdAndColumnName($this->relation_id, BillItem::FORMULATED_COLUMN_MARKUP_AMOUNT);

                $markupAmountFormulatedColumn->setFormula(number_format($markupAmount, 5, '.', ''));

                $markupAmountFormulatedColumn->linked = false;
                $markupAmountFormulatedColumn->has_build_up = false;

                $markupAmountFormulatedColumn->save($con, false);
                break;
            default:
                break;
        }
    }

    public function clearBuildUpRates()
    {
        if($this->column_name == BillItem::FORMULATED_COLUMN_RATE and !$this->has_build_up)
        {
            BillItemTable::deleteBuildUpRatesByBillItemId($this->relation_id);
        }
    }

    public function parentSave(Doctrine_Connection $conn = null)
    {
        parent::save($conn);

        if($this->column_name != BillItem::FORMULATED_COLUMN_RATE)
        {
            $this->updateMarkupColumns($this->column_name, $conn);
        }

        $this->BillItem->updateTypeTotalAmount();

        $this->BillItem->Element->updateMarkupAmount();
    }
}
