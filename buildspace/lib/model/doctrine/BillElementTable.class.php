<?php

/**
 * BillElementTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillElementTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BillElementTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillElement');
    }

    public static function getFormulatedColumnByRelationIdAndColumnName($id, $columnName, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('BillElementFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?', $columnName)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->count() > 0 ? $query->fetchOne() : false;
    }

    public static function getOriginalGrandTotalByElementId($elementId)
    {
        // We'll fetch and SUM the latest grand_total from Bill Item
        $originalTotalRate = Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("SELECT COALESCE(SUM(item.grand_total),0) AS total_rate
            FROM ".BillItemTable::getInstance()->getTableName()." AS item
            WHERE item.project_revision_deleted_at IS NULL
            AND item.element_id = ".$elementId."
            AND item.deleted_at IS NULL");

        return $originalTotalRate[0]['total_rate'];
    }

    /*
     * Elements grand total is items original grand total + item markup(if any)
     */
    public static function getElementGrandTotalByElementId($elementId)
    {
        $element = self::getInstance()->find($elementId);
        $projectStructure = $element->ProjectStructure;

        return self::getElementGrandTotal($elementId, array(
            'item_markup_enabled' => $projectStructure->BillMarkupSetting->item_markup_enabled,
            'rounding_type' => $projectStructure->BillMarkupSetting->rounding_type
        ));
    }

    /*
     * Elements grand total is items original grand total + item markup(if any)
     */
    public static function getElementGrandTotal($elementId, Array $markupSettingsInfo)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        if($markupSettingsInfo && $markupSettingsInfo['item_markup_enabled'])
        {
            $sqlWithMarkup = "item.grand_total + COALESCE( ifc.final_value, 0)";

            switch($markupSettingsInfo['rounding_type'])
            {
                case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                    $sqlWithMarkup = 'CEIL('.$sqlWithMarkup.')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                    $sqlWithMarkup = 'FLOOR('.$sqlWithMarkup.')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                    $sqlWithMarkup = 'ROUND('.$sqlWithMarkup.')';
                    break;
                case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                    $sqlWithMarkup = 'ROUND(('.$sqlWithMarkup.') * 10) / 10';
                    break;
                default:
                    $sqlWithMarkup = 'ROUND('.$sqlWithMarkup.', 2)';
            }

            $rateSql = "SELECT COALESCE(SUM( ".$sqlWithMarkup." ),0) AS total_rate FROM
                ".BillItemTable::getInstance()->getTableName()." AS item LEFT JOIN
                ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS ifc ON ifc.relation_id = item.id
                AND ifc.deleted_at IS NULL AND ifc.column_name = '".BillItem::FORMULATED_COLUMN_MARKUP_AMOUNT."'
                WHERE item.project_revision_deleted_at IS NULL AND item.element_id = ".$elementId." AND item.grand_total <> 0 AND item.deleted_at IS NULL";
        }
        else
        {
            $rateSql = "SELECT COALESCE(SUM(item.grand_total),0) AS total_rate
                FROM ".BillItemTable::getInstance()->getTableName()." AS item
                WHERE item.project_revision_deleted_at IS NULL AND item.element_id = ".$elementId."
                AND item.deleted_at IS NULL AND item.grand_total <> 0";
        }

        $stmt = $pdo->prepare($rateSql);

        $stmt->execute(array());

        $elementGrandTotal = $stmt->fetch(PDO::FETCH_ASSOC);

        return $elementGrandTotal['total_rate'];
    }

    public static function updateMarkupAmountByElementId($elementId)
    {
        //to update element markup amount column based on grand_total * markup percentage
        if($percentageMarkupColumn = self::getFormulatedColumnByRelationIdAndColumnName($elementId, BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE, Doctrine_Core::HYDRATE_ARRAY))
        {
            $grandTotal = self::getElementGrandTotalByElementId($elementId);

            $amountMarkup =  $percentageMarkupColumn ? number_format($grandTotal * ($percentageMarkupColumn['final_value'] / 100), 5, '.', '') : 0;

            $pdo = self::getInstance()->getConnection()->getDbh();

            $stmt = $pdo->prepare("UPDATE ".BillElementFormulatedColumnTable::getInstance()->getTableName()." SET
            value = :amount_markup_txt, final_value = :amount_markup_num WHERE relation_id = ".$elementId." AND column_name = :column_name AND deleted_at IS NULL");

            $stmt->execute(array(
                'amount_markup_txt' => $amountMarkup,
                'amount_markup_num' => $amountMarkup,
                'column_name' => BillElement::FORMULATED_COLUMN_MARKUP_AMOUNT
            ));
        }

        /*
         * temporarily disabled markup at bill level
        // to update bill markup setting's markup amount
        $query = DoctrineQuery::create()->select('m.id')->from('BillMarkupSetting m')
            ->leftJoin('m.ProjectStructure p')->leftJoin('p.Elements e')
            ->where('e.id = ?', $elementId)
            ->limit(1);
        $query->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

        $billMarkupSetting = $query->fetchOne();

        BillMarkupSettingTable::updateBillMarkupAmountById($billMarkupSetting['id']);*/
    }


    public static function updateAllItemTotalAfterMarkupByElementId($elementId, $billColumnSettings, $billMarkupSetting)
    {
        $pdo = ProjectStructureTable::getInstance()->getConnection()->getDbh();

        //Get ExcludedIds
        $excludedIds = implode(',', BillMarkupSettingTable::getMarkupExcludedItemIds());

        /* Get Items With Markup Percentage */
        $stmt = $pdo->prepare("SELECT c.relation_id, i.element_id, COALESCE(markup.final_value, 0) AS ".BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE.", ROUND(COALESCE(c.final_value, 0), 2) AS ".BillItem::FORMULATED_COLUMN_RATE." FROM ".BillItemFormulatedColumnTable::getInstance()->getTableName()." c
            LEFT JOIN ".BillItemFormulatedColumnTable::getInstance()->getTableName()." markup ON markup.relation_id = c.relation_id  AND markup.column_name = '".BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE."' AND markup.deleted_at IS NULL
            LEFT JOIN ".BillItemTable::getInstance()->getTableName()." i ON c.relation_id = i.id
            WHERE i.element_id = ".$elementId." AND i.type NOT IN (".$excludedIds.") AND (c.column_name = '".BillItem::FORMULATED_COLUMN_RATE."')
            AND c.final_value <> 0 AND c.deleted_at IS NULL AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL ORDER BY i.id");

        $stmt->execute();

        $itemsWithColumn = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $con = self::getInstance()->getConnection();

        //Get Element Markup If Enabled
        if($billMarkupSetting['element_markup_enabled'])
        {
            //Get Element Markup Percentage
            $elementMarkupResult = $con->fetchAssoc("SELECT COALESCE(c.final_value, 0) as value FROM ".BillElementFormulatedColumnTable::getInstance()->getTableName()." c
            LEFT JOIN ".BillElementTable::getInstance()->getTableName()." e ON c.relation_id = e.id
            WHERE e.id = ".$elementId." AND c.column_name = '".BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
            AND c.deleted_at IS NULL AND c.final_value <> 0 AND e.deleted_at IS NULL");

            $elementMarkupPercentage = (count($elementMarkupResult) > 0) ? $elementMarkupResult[0]['value'] : 0;
        }

        //Get Item Ids to update
        $stmt = $pdo->prepare("SELECT item.id FROM ".BillItemTable::getInstance()->getTableName()." AS item
        WHERE item.element_id = ".$elementId." AND item.type NOT IN (".$excludedIds.") AND item.grand_total_quantity <> 0 AND item.deleted_at IS NULL");

        $stmt->execute();

        $itemIds = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

        $itemGrandTotals = array();

        $itemIdsToUpdate = array();

        if(count($itemsWithColumn) > 0 && !empty($itemIds))
        {
            foreach($billColumnSettings as $column)
            {
                $quantityFieldName = $column['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                $stmt = $pdo->prepare("SELECT r.bill_item_id, COALESCE(fc.final_value, 0) AS value FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
                    JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." r ON fc.relation_id = r.id
                    WHERE r.bill_item_id IN (".implode(',', $itemIds).") AND r.bill_column_setting_id = ".$column['id']."
                    AND r.include IS TRUE AND fc.column_name = '".$quantityFieldName."'
                    AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

                $stmt->execute();

                $quantities = $stmt->fetchAll(PDO::FETCH_ASSOC|PDO::FETCH_GROUP);

                $afterMarkupTotalCaseStatement = '';

                $totalCaseStatement = '';

                $totalQtyCaseStatement = '';

                foreach($itemsWithColumn as $item)
                {
                    if(!array_key_exists($item['relation_id'], $itemGrandTotals))
                    {
                        $itemGrandTotals[$item['relation_id']]['grand_total_after_markup'] = 0;
                        $itemGrandTotals[$item['relation_id']]['grand_total'] = 0;
                        $itemGrandTotals[$item['relation_id']]['grand_total_quantity'] = 0;
                    }

                    $quantity = (array_key_exists($item['relation_id'], $quantities)) ? $quantities[$item['relation_id']][0]['value'] : 0;

                    $totalPerUnit = $quantity * $item['rate'];

                    $typeTotal = number_format($totalPerUnit, 2, '.', '') * $column['quantity'];

                    $itemGrandTotals[$item['relation_id']]['grand_total'] += $typeTotal;

                    if($billMarkupSetting && ($billMarkupSetting['element_markup_enabled'] || $billMarkupSetting['item_markup_enabled']))
                    {
                        $rateAfterMarkup = $item['rate'];

                        if($billMarkupSetting['item_markup_enabled'])
                        {
                            $rateAfterMarkup = $rateAfterMarkup + ($rateAfterMarkup * $item[BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE] / 100);
                        }

                        if($billMarkupSetting['element_markup_enabled'])
                        {
                            $rateAfterMarkup = ($elementMarkupPercentage != 0) ? $rateAfterMarkup + ($rateAfterMarkup * $elementMarkupPercentage / 100) : $rateAfterMarkup;
                        }

                        switch($billMarkupSetting['rounding_type'])
                        {
                            case BillMarkupSetting::ROUNDING_TYPE_UPWARD:
                                $rateAfterMarkup = ceil($rateAfterMarkup);
                                break;
                            case BillMarkupSetting::ROUNDING_TYPE_DOWNWARD:
                                $rateAfterMarkup = floor($rateAfterMarkup);
                                break;
                            case BillMarkupSetting::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                                $rateAfterMarkup = round($rateAfterMarkup);
                                break;
                            case BillMarkupSetting::ROUNDING_TYPE_NEAREST_TENTH:
                                $rateAfterMarkup = round($rateAfterMarkup * 10) / 10;
                                break;
                            default:
                                $rateAfterMarkup = number_format($rateAfterMarkup, 2, '.', '');
                        }
                    }
                    else
                    {
                        $rateAfterMarkup = $item['rate'];
                    }

                    $totalPerUnitAfterMarkup = $quantity * $rateAfterMarkup;

                    $typeTotalAfterMarkup = number_format($totalPerUnitAfterMarkup, 2, '.', '') * $column['quantity'];

                    $itemGrandTotals[$item['relation_id']]['grand_total_after_markup'] += $typeTotalAfterMarkup;

                    $totalQty = $quantity * $column['quantity'];

                    $itemGrandTotals[$item['relation_id']]['grand_total_quantity'] += $totalQty;

                    if(in_array($item['relation_id'], $itemIds))
                    {
                        //Generate Case Statement
                        $afterMarkupTotalCaseStatement.=" WHEN ".$item['relation_id']." THEN (".$typeTotalAfterMarkup.")";
                        $totalCaseStatement.=" WHEN ".$item['relation_id']." THEN (".$typeTotal.")";
                        $totalQtyCaseStatement.=" WHEN ".$item['relation_id']." THEN (".$totalQty.")";

                        $itemIdsToUpdate[] = $item['relation_id'];
                    }
                }

                //Update Per Total Quantity
                if(!empty($itemIdsToUpdate))
                {
                    $con->execute("UPDATE ".BillItemTypeReferenceTable::getInstance()->getTableName()."
                    SET grand_total = (CASE bill_item_id".$totalCaseStatement." END),
                    total_quantity = (CASE bill_item_id ".$totalQtyCaseStatement." END),
                    grand_total_after_markup = (CASE bill_item_id".$afterMarkupTotalCaseStatement." END)
                    WHERE bill_item_id IN (".implode(',', $itemIdsToUpdate).") AND bill_column_setting_id = ".$column['id']." AND deleted_at IS NULL AND include IS TRUE");
                }

                unset($itemIdsToUpdate);
            }

            $originalGrandTotalCaseStatement = '';
            $afterMarkupGrandTotalCaseStatement = '';
            $grandTotalQtyCaseStatement = '';

            //Generate GrandTotal Update Statement
            foreach($itemGrandTotals as $itemId => $item)
            {
                if(in_array($itemId, $itemIds))
                {
                    $originalGrandTotalCaseStatement.=" WHEN ".$itemId." THEN (".$item['grand_total'].")";
                    $afterMarkupGrandTotalCaseStatement.=" WHEN ".$itemId." THEN (".$item['grand_total_after_markup'].")";
                    $grandTotalQtyCaseStatement.=" WHEN ".$itemId." THEN (".$item['grand_total_quantity'].")";

                    $itemIdsToUpdate[] = $itemId;
                }
            }

            if(!empty($itemIdsToUpdate))
            {
                //Update All Item Grand Total
                $con->execute("UPDATE ".BillItemTable::getInstance()->getTableName()." AS item
                SET grand_total = (CASE id".$originalGrandTotalCaseStatement." END),
                grand_total_after_markup = (CASE id".$afterMarkupGrandTotalCaseStatement." END),
                grand_total_quantity = (CASE id".$grandTotalQtyCaseStatement." END)
                WHERE item.id IN (".implode(',', $itemIdsToUpdate).")");
            }
        }
    }

    public static function importBQElements($targetElementId, Array $BQElementIds, ProjectStructure $bill)
    {
        $idList = array();

        if(count($BQElementIds) > 0)
        {
            $pdo = self::getInstance()->getConnection()->getDbh();

            $targetElement = $targetElementId > 0 ? self::getInstance()->find($targetElementId) : false;
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            $priority = $targetElement ? $targetElement->priority+1 : 0;

            $query = DoctrineQuery::create()->select('e.id, e.description')
                ->from('BQElement e')
                ->whereIn('e.id', $BQElementIds)
                ->addOrderBy('e.priority ASC')
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

            $elements = $query->execute();

            foreach($elements as $element)
            {
                DoctrineQuery::create()
                    ->update('BillElement')
                    ->set('priority', 'priority + 1')
                    ->where('priority >= ?', $priority)
                    ->andWhere('project_structure_id = ?', $bill->id)
                    ->execute();

                $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (description, priority, project_structure_id, created_at, updated_at, created_by, updated_by)
                    VALUES
                    (:description, :priority, :bill_id, NOW(), NOW(), :user_id, :user_id) RETURNING id");

                $stmt->execute(array(
                    'description' => $element['description'],
                    'priority' => $priority,
                    'bill_id' => $bill->id,
                    'user_id' => $userId
                ));

                $returningId = $stmt->fetchAll();

                array_push($idList, $returningId[0]['id']);

                $priority++;
            }
        }

        return $idList;
    }

    /*
     * This will return total cost from schedule of rate analysis. ONLY for unsorted.
     */
    public static function calculateTotalForScheduleOfRateAnalysisByProject(ProjectStructure $project)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sql = "SELECT DISTINCT be.id, COALESCE(SUM(bi.grand_total), 0) AS total, be.priority
        FROM ".ProjectStructureTable::getInstance()->getTableName()." AS s
        JOIN ".BillElementTable::getInstance()->getTableName()." AS be ON be.project_structure_id = s.id
        JOIN ".BillItemTable::getInstance()->getTableName()." AS bi ON bi.element_id = be.id
        WHERE s.root_id = ".$project->id." AND bi.id NOT IN (
            SELECT DISTINCT relation_id FROM ".BillItemFormulatedColumnTable::getInstance()->getTableName()." WHERE schedule_of_rate_item_formulated_column_id IS NOT NULL AND deleted_at IS NULL
        )
        AND bi.type <> ".BillItem::TYPE_HEADER." AND bi.type <> ".BillItem::TYPE_NOID." AND bi.type <> ".BillItem::TYPE_ITEM_PC_RATE." AND bi.type <> ".BillItem::TYPE_HEADER_N."
        AND bi.type <> ".BillItem::TYPE_ITEM_LUMP_SUM." AND bi.type <> ".BillItem::TYPE_ITEM_LUMP_SUM_PERCENT." AND bi.type <> ".BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE." AND bi.type <> ".BillItem::TYPE_ITEM_RATE_ONLY."
        AND bi.project_revision_deleted_at IS NULL AND bi.deleted_at IS NULL AND be.deleted_at IS NULL AND s.deleted_at IS NULL GROUP BY be.id, be.priority ORDER BY be.priority";

        $stmt = $pdo->prepare($sql);

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);

        return $records;
    }

    public static function getAffectedElementsAndItemsByBillId($billIds)
    {
        $data    = array();
        $pdo     = self::getInstance()->getConnection()->getDbh();
        $billIds = json_decode($billIds, true);

        if ( count($billIds) == 0 )
        {
            return $data;
        }

        $stmt = $pdo->prepare("SELECT i.id, e.project_structure_id as bill_id, i.element_id FROM ".BillItemTable::getInstance()->getTableName()." i
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON (e.id = i.element_id AND e.deleted_at IS NULL)
            WHERE e.project_structure_id IN (".implode(', ', $billIds).") AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($items) == 0 )
        {
            // to compensate returning data to be processed via front end if current bill selected is a
            // root level or normal level type
            foreach ( $billIds as $billId )
            {
                $data[$billId] = array();
            }

            return $data;
        }

        foreach ( $items as $item )
        {
            $data[$item['bill_id']][$item['element_id']][] = $item['id'];
        }

        return $data;
    }

    public static function getAffectedElementsAndItemsByBillIdGroupByTypes($billId, $typeIds)
    {
        $data = array();
        $pdo  = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT i.id, e.project_structure_id as bill_id, i.element_id FROM ".BillItemTable::getInstance()->getTableName()." i
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON (e.id = i.element_id AND e.deleted_at IS NULL)
            WHERE e.project_structure_id = ".$billId." AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($items) == 0 )
        {
            foreach ( $typeIds as $typeId )
            {
                $data[$typeId] = array();
            }
        }
        else
        {
            foreach ( $typeIds as $typeId )
            {
                foreach ( $items as $item )
                {
                    $data[$typeId][$item['element_id']][] = $item['id'];
                }
            }
        }

        return $data;
    }

    public static function getAffectedItemsAndBillsByElementId(ProjectStructure $bill, $elementIds)
    {
        $data       = array();
        $pdo        = self::getInstance()->getConnection()->getDbh();
        $elementIds = json_decode($elementIds, true);

        $elementIds = array_filter($elementIds, 'is_numeric');

        if ( count($elementIds) == 0 )
        {
            return $data;
        }

        $stmt = $pdo->prepare("SELECT i.id, i.element_id FROM ".BillItemTable::getInstance()->getTableName()." i
            WHERE i.element_id IN (".implode(',', $elementIds).") AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($items) == 0 )
        {
            return $data;
        }

        foreach ( $items as $item )
        {
            $data[$bill->id][$item['element_id']][] = $item['id'];
        }

        return $data;
    }

    public static function getAffectedItemsAndTypesByElementId(ProjectStructure $bill, $elementIds, $typeId)
    {
        $data       = array();
        $pdo        = self::getInstance()->getConnection()->getDbh();
        $elementIds = json_decode($elementIds, true);

        $elementIds = array_filter($elementIds, 'is_numeric');

        if ( count($elementIds) == 0 )
        {
            return $data;
        }

        $stmt = $pdo->prepare("SELECT i.id, i.element_id FROM ".BillItemTable::getInstance()->getTableName()." i
            WHERE i.element_id IN (".implode(',', $elementIds).") AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($items) == 0 )
        {
            return $data;
        }

        foreach ( $items as $item )
        {
            $data[$typeId][$item['element_id']][] = $item['id'];
        }

        return $data;
    }

    public static function getAffectedElementsAndBillsByItemIds($itemIds)
    {
        $itemIds    = json_decode($itemIds, true);
        $elementIds = array();
        $data       = array();

        $itemIds = array_filter($itemIds, 'is_numeric');

        if ( count($itemIds) == 0 )
        {
            return $data;
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT i.element_id FROM ".BillItemTable::getInstance()->getTableName()." i
            WHERE i.id IN (".implode(',', $itemIds).") AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $elements = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($elements) == 0 )
        {
            return $data;
        }

        foreach ( $elements as $element )
        {
            $elementIds[] = $element['element_id'];

            unset($element);
        }

        unset($elements);

        $stmt = $pdo->prepare("SELECT DISTINCT e.project_structure_id, e.id as element_id FROM ".BillElementTable::getInstance()->getTableName()." e
            WHERE e.id IN (".implode(',', $elementIds).") AND e.deleted_at IS NULL");

        $stmt->execute();

        $bills = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ($bills as $bill)
        {
            $data[$bill['project_structure_id']][$bill['element_id']] = NULL;
        }

        return $data;
    }

    public static function getAffectedElementsAndTypeByItemIds($itemIds, $typeId)
    {
        $itemIds    = json_decode($itemIds, true);
        $elementIds = array();
        $data       = array();

        $itemIds = array_filter($itemIds, 'is_numeric');

        if ( count($itemIds) == 0 )
        {
            return $data;
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT i.element_id FROM ".BillItemTable::getInstance()->getTableName()." i
            WHERE i.id IN (".implode(',', $itemIds).") AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $elements = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($elements) == 0 )
        {
            return $data;
        }

        foreach ( $elements as $element )
        {
            $elementIds[] = $element['element_id'];

            unset($element);
        }

        unset($elements);

        $stmt = $pdo->prepare("SELECT DISTINCT e.project_structure_id, e.id as element_id FROM ".BillElementTable::getInstance()->getTableName()." e
            WHERE e.id IN (".implode(',', $elementIds).") AND e.deleted_at IS NULL");

        $stmt->execute();

        $bills = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ($bills as $bill)
        {
            $data[$typeId][$bill['element_id']] = NULL;
        }

        return $data;
    }

    public static function getAffectedElementIdsByItemIds($itemIds)
    {
        $itemIds    = json_decode($itemIds, true);
        $elementIds = array();

        $itemIds = array_filter($itemIds, 'is_numeric');

        if ( count($itemIds) == 0 )
        {
            return $elementIds;
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT e.id, e.description, e.priority FROM ".BillItemTable::getInstance()->getTableName()." i
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON (i.element_id = e.id AND e.deleted_at IS NULL)
            WHERE i.id IN (".implode(',', $itemIds).") AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL ORDER BY e.priority ASC");

        $stmt->execute();

        $elements = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( count($elements) == 0 )
        {
            return $elementIds;
        }

        foreach ( $elements as $element )
        {
            $elementIds[$element['id']] = array(
                'description' => $element['description'],
            );
        }

        return $elementIds;
    }

    public static function getElementsByElementIds(array $elementIds)
    {
        $elementIds = array_filter($elementIds, 'is_numeric');

        if ( count($elementIds) == 0 )
        {
            return [];
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare('SELECT e.id, e.description FROM '.BillElementTable::getInstance()->getTableName().' e
        WHERE e.id IN ('.implode(',', $elementIds).') AND e.deleted_at IS NULL ORDER BY e.priority');

        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getElementsByProjectStructure(ProjectStructure $bill)
    {
        return DoctrineQuery::create()
            ->select('e.id, e.description, e.priority')
            ->from('BillElement e')
            ->andWhere('e.project_structure_id = ?', $bill->id)
            ->addOrderBy('e.priority ASC')
            ->fetchArray();
    }

    public static function getMarkupNonEditableElements(ProjectStructure $bill)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT e.id
            FROM ".BillItemTable::getInstance()->getTableName()." i
            JOIN ".BillElementTable::getInstance()->getTableName()." e ON (i.element_id = e.id AND e.deleted_at IS NULL)
            WHERE e.project_structure_id = {$bill->id}
            AND i.type in (".implode(',', BillItem::$noMarkupItemTypes).")
            AND i.project_revision_deleted_at IS NULL
            AND i.deleted_at IS NULL
            AND e.deleted_at IS NULL");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_COLUMN);
    }
}
