<?php

/**
 * BillPageItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillPageItemTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object BillPageItemTable
	 */
	public static function getInstance()
	{
		return Doctrine_Core::getTable('BillPageItem');
	}

	public static function getAffectedPages($itemIds)
	{
		$pageIds = array();

		$query = Doctrine_Query::create()
			->select('i.id, p.id')
			->from('BillPageItem i')
			->leftJoin('i.Page p')
			->whereIn('i.bill_item_id', $itemIds)
			->andWhere('p.new_revision_id IS NULL')
			->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
			->orderBy('p.id DESC')
			->execute();

		foreach ( $query as $item )
		{
			$pageIds[$item['Page']['id']] = $item['Page']['id'];
		}

		return $pageIds;
	}

    public static function updateAffectedPageItem($affectedItemId, BillItem $item, $currentBQAddendumId)
    {
        // get original bill page id associated with affectedItemId
        $affectedPage = Doctrine_Query::create()
            ->select('i.bill_page_id')
            ->from('BillPageItem i')
            ->where('i.bill_item_id = ?', $affectedItemId)
            ->orderBy('i.bill_page_id DESC')
            ->limit(1)
            ->fetchOne();

        if ( ! $affectedPage )
        {
            throw new LogicException('Bill Page does not exist');
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT bill_pages.id, project_revisions.version
            FROM ".BillPageTable::getInstance()->getTableName()." AS bill_pages
            JOIN ".BillPageItemTable::getInstance()->getTableName()." AS bill_page_items ON bill_page_items.bill_page_id = bill_pages.id
            JOIN ".ProjectRevisionTable::getInstance()->getTableName()." AS project_revisions ON bill_pages.revision_id = project_revisions.id
            WHERE bill_page_items.bill_item_id IN (SELECT bpi.bill_item_id FROM ".BillPageItemTable::getInstance()->getTableName()." AS bpi
            WHERE bpi.bill_page_id = ".$affectedPage->bill_page_id.")
            GROUP BY bill_pages.id, project_revisions.version ORDER BY project_revisions.version DESC LIMIT 1");

        $stmt->execute();

        $affectedBillPageId = $stmt->fetch(PDO::FETCH_COLUMN, 1);

        // update the original bill page id's new revision column
        BillPageTable::updateHasAddendum(array( $affectedBillPageId ), $currentBQAddendumId);

        $affectedPageNewItem                             = new BillPageItem();
        $affectedPageNewItem->bill_page_id               = $affectedBillPageId;
        $affectedPageNewItem->bill_item_id               = $item->id;
        $affectedPageNewItem->new_item_from_new_revision = true;
        $affectedPageNewItem->save();
    }

}
