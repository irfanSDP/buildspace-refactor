<?php

/**
 * VariationOrderClaimItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class VariationOrderClaimItem extends BaseVariationOrderClaimItem
{
    public function updateCurrentQuantity($value)
    {
        $variationOrderItem = $this->VariationOrderItem;
        //single unit qty
        $totalQty           = $variationOrderItem->addition_quantity - $variationOrderItem->omission_quantity;
        $singleUnitTotal    = ($variationOrderItem->addition_quantity * $variationOrderItem->rate) - ($variationOrderItem->omission_quantity * $variationOrderItem->rate);
        $previousClaim      = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }
        
        if(abs($previousUpToDateQuantity) + abs($value) > abs($totalQty))
        {
            $x = (($previousUpToDateQuantity > 0 and $totalQty < 0) or ($previousUpToDateQuantity < 0 and $totalQty > 0)) ? $totalQty + $previousUpToDateQuantity : $totalQty - $previousUpToDateQuantity;
            $neg = ($value < 0) ? -1 : 1;
            $value = abs($value) > abs($totalQty) ? $totalQty * $neg : $value;
            $currentQuantity = (($value > 0 and $x < 0) or ($value < 0 and $x > 0)) ? $value + $x : $value - $x ;
        }
        else
        {
            $currentQuantity = $value;
        }

        $currentQuantity   = round($currentQuantity, 2);
        $currentAmount     = round($variationOrderItem->rate * $currentQuantity * $variationOrderItem->total_unit, 2);
        $currentPercentage = round($currentAmount / $variationOrderItem->getNettOmissionAddition() * 100, 2);

        if($singleUnitTotal < 0)
        {
            $currentQuantity            = abs($currentQuantity) * -1;
            $currentAmount              = abs($currentAmount) * -1;
            $currentPercentage          = abs($currentPercentage) * -1;

            $previousUpToDateQuantity   = abs($previousUpToDateQuantity) * -1;
            $previousUpToDatePercentage = abs($previousUpToDatePercentage) * -1;
            $previousUpToDateAmount     = abs($previousUpToDateAmount) * -1;
        }

        if(($singleUnitTotal < 0 and $previousUpToDatePercentage + $currentPercentage < 100) or (($singleUnitTotal > 0 and $previousUpToDatePercentage + $currentPercentage > 100)))
        {
            $currentQuantity   = 0;
            $currentPercentage = 0;
            $currentAmount     = 0;
        }

        $this->current_quantity   = $currentQuantity;
        $this->current_percentage = $currentPercentage;
        $this->current_amount     = $currentAmount;

        $this->up_to_date_quantity   = round($previousUpToDateQuantity + $currentQuantity, 2);
        $this->up_to_date_percentage = round($previousUpToDatePercentage + $currentPercentage, 2);
        $this->up_to_date_amount     = round($previousUpToDateAmount + $currentAmount, 2);
    }

    public function updateUpToDateQuantity($value)
    {
        $variationOrderItem = $this->VariationOrderItem;
        //single unit qty
        $totalQty           = $variationOrderItem->addition_quantity - $variationOrderItem->omission_quantity;
        $singleUnitTotal    = ($variationOrderItem->addition_quantity * $variationOrderItem->rate) - ($variationOrderItem->omission_quantity * $variationOrderItem->rate);
        $previousClaim      = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if(abs($value) > abs($totalQty))
        {
            $upToDateQuantity = ($value < 0) ? abs($totalQty) * -1 : $totalQty;
        }
        else
        {
            $upToDateQuantity = $value;
        }

        $upToDateQuantity   = round($upToDateQuantity, 2);
        $upToDateAmount     = round($variationOrderItem->rate * $upToDateQuantity * $variationOrderItem->total_unit, 2);
        $upToDatePercentage = round($upToDateAmount / $variationOrderItem->getNettOmissionAddition() * 100, 2);

        if(abs($upToDatePercentage) < abs($previousUpToDatePercentage))
        {
            $upToDateQuantity   = $previousUpToDateQuantity;
            $upToDateAmount     = $previousUpToDateAmount;
            $upToDatePercentage = $previousUpToDatePercentage;
        }

        if($singleUnitTotal < 0)
        {
            $previousUpToDateQuantity   = abs($previousUpToDateQuantity) * -1;
            $previousUpToDatePercentage = abs($previousUpToDatePercentage) * -1;
            $previousUpToDateAmount     = abs($previousUpToDateAmount) * -1;
            $upToDateQuantity           = abs($upToDateQuantity) * -1;
            $upToDatePercentage         = abs($upToDatePercentage) * -1;
            $upToDateAmount             = abs($upToDateAmount) * -1;
        }

        $this->up_to_date_quantity   = $upToDateQuantity;
        $this->up_to_date_percentage = $upToDatePercentage;
        $this->up_to_date_amount     = round($upToDateAmount, 2);

        $this->current_quantity   = round($upToDateQuantity - $previousUpToDateQuantity, 2);
        $this->current_percentage = round($upToDatePercentage - $previousUpToDatePercentage, 2);
        $this->current_amount     = round($upToDateAmount - $previousUpToDateAmount, 2);
    }

    public function updateCurrentAmount($value)
    {
        $variationOrderItem = $this->VariationOrderItem;
        //single unit qty
        $totalQty      = $variationOrderItem->addition_quantity - $variationOrderItem->omission_quantity;
        $nettOmissionAddition = round(($variationOrderItem->addition_quantity * $variationOrderItem->rate * $variationOrderItem->total_unit) - ($variationOrderItem->omission_quantity * $variationOrderItem->rate * $variationOrderItem->total_unit), 2);

        $previousClaim = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if(abs($previousUpToDateAmount) + abs($value) > abs($nettOmissionAddition))
        {
            $x = (($previousUpToDateAmount > 0 and $nettOmissionAddition < 0) or ($previousUpToDateAmount < 0 and $nettOmissionAddition > 0)) ? $nettOmissionAddition + $previousUpToDateAmount : $nettOmissionAddition - $previousUpToDateAmount;
            $neg = ($value < 0) ? -1 : 1;
            $value = abs($value) > abs($nettOmissionAddition) ? $nettOmissionAddition * $neg : $value;
            $currentAmount = (($value > 0 and $x < 0) or ($value < 0 and $x > 0)) ? $value + $x : $value - $x ;
        }
        else
        {
            $currentAmount = $value;
        }

        $currentQuantity = ($variationOrderItem->rate != 0) ? round($currentAmount / $variationOrderItem->rate, 2) : 0;
        $currentPercentage = round($currentAmount / $variationOrderItem->getNettOmissionAddition() * 100, 2);

        if($nettOmissionAddition < 0)
        {
            $currentQuantity            = abs($currentQuantity) * -1;
            $currentAmount              = abs($currentAmount) * -1;
            $currentPercentage          = abs($currentPercentage) * -1;

            $previousUpToDateQuantity   = abs($previousUpToDateQuantity) * -1;
            $previousUpToDatePercentage = abs($previousUpToDatePercentage) * -1;
            $previousUpToDateAmount     = abs($previousUpToDateAmount) * -1;
        }

        if(($nettOmissionAddition < 0 and $previousUpToDatePercentage + $currentPercentage < 100) or (($nettOmissionAddition > 0 and $previousUpToDatePercentage + $currentPercentage > 100)))
        {
            $currentQuantity   = 0;
            $currentPercentage = 0;
            $currentAmount     = 0;
        }

        $this->current_quantity   = $currentQuantity;
        $this->current_percentage = $currentPercentage;
        $this->current_amount     = round($currentAmount, 2);

        $this->up_to_date_quantity   = round($previousUpToDateQuantity + $currentQuantity, 2);
        $this->up_to_date_percentage = round($previousUpToDatePercentage + $currentPercentage, 2);
        $this->up_to_date_amount     = round($previousUpToDateAmount + $currentAmount, 2);
    }

    public function updateCurrentPercentage($value)
    {
        $variationOrderItem = $this->VariationOrderItem;
        $singleUnitTotal    = ($variationOrderItem->addition_quantity * $variationOrderItem->rate) - ($variationOrderItem->omission_quantity * $variationOrderItem->rate);
        $previousClaim      = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if(abs($previousUpToDatePercentage) + abs($value) > 100)
        {
            $neg = ($value < 0) ? -1 : 1;
            $value = abs($value) > 100 ? 100 * $neg : $value;

            $x = ($previousUpToDatePercentage > 0) ? 100 - $previousUpToDatePercentage :100 + $previousUpToDatePercentage;
            $currentPercentage = (($value > 0 and $x < 0) or ($value < 0 and $x > 0)) ? $value + $x : $value - $x;
        }
        else
        {
            $currentPercentage = $value;
        }

        $currentPercentage = round($currentPercentage, 2);
        $currentAmount     = $currentPercentage / 100 * abs($variationOrderItem->getNettOmissionAddition());
        $currentQuantity   = ($variationOrderItem->rate != 0) ? round($currentAmount / $variationOrderItem->rate, 2) : 0;

        if($singleUnitTotal < 0)
        {
            $currentQuantity            = abs($currentQuantity) * -1;
            $currentAmount              = abs($currentAmount) * -1;
            $currentPercentage          = abs($currentPercentage) * -1;

            $previousUpToDateQuantity   = abs($previousUpToDateQuantity) * -1;
            $previousUpToDatePercentage = abs($previousUpToDatePercentage) * -1;
            $previousUpToDateAmount     = abs($previousUpToDateAmount) * -1;
        }

        if(($singleUnitTotal < 0 and $previousUpToDatePercentage + $currentPercentage < 100) or (($singleUnitTotal > 0 and $previousUpToDatePercentage + $currentPercentage > 100)))
        {
            $currentQuantity   = 0;
            $currentPercentage = 0;
            $currentAmount     = 0;
        }

        $this->current_quantity   = $currentQuantity;
        $this->current_percentage = $currentPercentage;
        $this->current_amount     = round($currentAmount, 2);

        $this->up_to_date_quantity   = round($previousUpToDateQuantity + $currentQuantity, 2);
        $this->up_to_date_percentage = round($previousUpToDatePercentage + $currentPercentage, 2);
        $this->up_to_date_amount     = round($previousUpToDateAmount + $currentAmount, 2);
    }

    public function updateUpToDateAmount($value)
    {
        $variationOrderItem = $this->VariationOrderItem;
        $singleUnitTotal    = ($variationOrderItem->addition_quantity * $variationOrderItem->rate) - ($variationOrderItem->omission_quantity * $variationOrderItem->rate);
        $previousClaim      = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if(abs($value) > abs($variationOrderItem->getNettOmissionAddition()))
        {
            $upToDateAmount = ($value < 0) ? abs($variationOrderItem->getNettOmissionAddition()) * -1 : $variationOrderItem->getNettOmissionAddition();
        }
        else
        {
            $upToDateAmount = $value;
        }

        $upToDateQuantity = ($variationOrderItem->rate != 0) ? round($upToDateAmount / $variationOrderItem->rate, 2) : 0;
        $upToDatePercentage = round(Utilities::percent($upToDateAmount, $variationOrderItem->getNettOmissionAddition()), 2);

        if(abs($upToDatePercentage) < abs($previousUpToDatePercentage))
        {
            $upToDateQuantity   = $previousUpToDateQuantity;
            $upToDateAmount     = $previousUpToDateAmount;
            $upToDatePercentage = $previousUpToDatePercentage;
        }

        if($singleUnitTotal < 0)
        {
            $previousUpToDateQuantity   = abs($previousUpToDateQuantity) * -1;
            $previousUpToDatePercentage = abs($previousUpToDatePercentage) * -1;
            $previousUpToDateAmount     = abs($previousUpToDateAmount) * -1;
            $upToDateQuantity           = abs($upToDateQuantity) * -1;
            $upToDatePercentage         = abs($upToDatePercentage) * -1;
            $upToDateAmount             = abs($upToDateAmount) * -1;
        }

        $this->up_to_date_quantity   = $upToDateQuantity;
        $this->up_to_date_percentage = $upToDatePercentage;
        $this->up_to_date_amount     = round($upToDateAmount, 2);

        $this->current_quantity   = round($upToDateQuantity - $previousUpToDateQuantity, 2);
        $this->current_percentage = round($upToDatePercentage - $previousUpToDatePercentage, 2);
        $this->current_amount     = round($upToDateAmount - $previousUpToDateAmount, 2);
    }

    public function updateUpToDatePercentage($value)
    {
        $variationOrderItem = $this->VariationOrderItem;
        $singleUnitTotal    = ($variationOrderItem->addition_quantity * $variationOrderItem->rate) - ($variationOrderItem->omission_quantity * $variationOrderItem->rate);
        $previousClaim      = $this->getPreviousClaimItem(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $previousUpToDateQuantity   = $previousClaim['up_to_date_quantity'];
            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $previousUpToDateQuantity   = 0;
            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        if(abs($value) > 100)
        {
            $upToDatePercentage = ($value < 0 ) ? -100 : 100;
        }
        else
        {
            $upToDatePercentage = $value;
        }

        $upToDatePercentage = round($upToDatePercentage, 2);
        $upToDateAmount     = $upToDatePercentage / 100 * abs($variationOrderItem->getNettOmissionAddition());
        $upToDateQuantity   = ($variationOrderItem->rate != 0) ? round($upToDateAmount / $variationOrderItem->rate, 2) : 0;

        if(abs($upToDatePercentage) < abs($previousUpToDatePercentage))
        {
            $upToDateQuantity   = $previousUpToDateQuantity;
            $upToDateAmount     = $previousUpToDateAmount;
            $upToDatePercentage = $previousUpToDatePercentage;
        }

        if($singleUnitTotal < 0)
        {
            $previousUpToDateQuantity   = abs($previousUpToDateQuantity) * -1;
            $previousUpToDatePercentage = abs($previousUpToDatePercentage) * -1;
            $previousUpToDateAmount     = abs($previousUpToDateAmount) * -1;
            $upToDateQuantity           = abs($upToDateQuantity) * -1;
            $upToDatePercentage         = abs($upToDatePercentage) * -1;
            $upToDateAmount             = abs($upToDateAmount) * -1;
        }

        $this->up_to_date_quantity   = $upToDateQuantity;
        $this->up_to_date_percentage = $upToDatePercentage;
        $this->up_to_date_amount     = round($upToDateAmount, 2);

        $this->current_quantity   = round($upToDateQuantity - $previousUpToDateQuantity, 2);
        $this->current_percentage = round($upToDatePercentage - $previousUpToDatePercentage, 2);
        $this->current_amount     = round($upToDateAmount - $previousUpToDateAmount, 2);
    }

    public function updateRemarks($value)
    {
        $this->remarks = trim($value);
    }

    public function getPreviousClaimItem($hydrate = null)
    {
        $previousClaim = $this->VariationOrderClaim->getPreviousClaim(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $query = Doctrine_Query::create()->select('i.*')
                ->from('VariationOrderClaimItem i')
                ->where('i.variation_order_claim_id = ?',$previousClaim['id'])
                ->andWhere('i.variation_order_item_id = ?', $this->variation_order_item_id)
                ->limit(1);

            if($hydrate)
            {
                $query->setHydrationMode($hydrate);
            }

            return $query->fetchOne();
        }

        return false;
    }
}
