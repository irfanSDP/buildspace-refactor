<?php

/**
 * SubProjectLatestApprovedClaimRevisionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SubProjectLatestApprovedClaimRevisionTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return SubProjectLatestApprovedClaimRevisionTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('SubProjectLatestApprovedClaimRevision');
    }

    public static function insertRecords(PostContractClaimRevision $claimRevision)
    {
        $project = $claimRevision->PostContract->ProjectStructure;

        $subProjects = ProjectStructureTable::getSubProjects($project);

        foreach($subProjects as $subProject)
        {
            $latestClaimRevision = $subProject->PostContract->getLatestApprovedClaimRevision();

            if(!$latestClaimRevision) continue;

            if($latestClaimRevision->MainProjectLatestApprovedClaimRevision->exists()) continue;

            $latestApprovedClaimCertificate = $latestClaimRevision->ClaimCertificate;

            if(!$latestApprovedClaimCertificate->exists()) continue;

            $record = new SubProjectLatestApprovedClaimRevision();

            $record->main_project_id                = $project->id;
            $record->main_project_claim_revision_id = $claimRevision->id;
            $record->sub_project_id                 = $subProject->id;
            $record->sub_project_claim_revision_id  = $latestClaimRevision->id;

            $record->save();
        }
    }

    public static function deleteRecords(PostContractClaimRevision $claimRevision)
    {
        Doctrine_Query::create()
            ->delete('SubProjectLatestApprovedClaimRevision splacr')
            ->where('splacr.main_project_claim_revision_id = ?', $claimRevision->id)
            ->execute();
    }

    public static function getLatestApprovedSubProjectClaimRevision(PostContractClaimRevision $mainProjectClaimRevision)
    {
        if(!$mainProjectClaimRevision->ClaimCertificate->exists()) return [];

        switch($mainProjectClaimRevision->ClaimCertificate->status)
        {
            case ClaimCertificate::STATUS_TYPE_APPROVED:
            case ClaimCertificate::STATUS_TYPE_PENDING_FOR_APPROVAL:
            case ClaimCertificate::STATUS_TYPE_REJECTED:
                $claimRevisions = self::getMatchingClaimRevisions($mainProjectClaimRevision);
                break;
            case ClaimCertificate::STATUS_TYPE_IN_PROGRESS:
                $claimRevisions = self::getLatestApprovedClaimRevisions($mainProjectClaimRevision);
                break;
            default:
                $claimRevisions = [];
        }

        return $claimRevisions;
    }

    protected static function getLatestApprovedClaimRevisions(PostContractClaimRevision $claimRevision)
    {
        $subProjectClaimRevisionsBySubProjectId = [];

        $subProjects = ProjectStructureTable::getSubProjects($claimRevision->PostContract->ProjectStructure);

        foreach($subProjects as $subProject)
        {
            if($claimRevision = $subProject->PostContract->getLatestApprovedClaimRevision())
            {
                if(!$claimRevision->MainProjectLatestApprovedClaimRevision->exists()) $subProjectClaimRevisionsBySubProjectId[$subProject->id] = $claimRevision;
            }
        }

        return $subProjectClaimRevisionsBySubProjectId;
    }

    protected static function getMatchingClaimRevisions(PostContractClaimRevision $claimRevision)
    {
        $subProjectClaimRevisionsBySubProjectId = [];

        $records = Doctrine_Query::create()
            ->from('SubProjectLatestApprovedClaimRevision p')
            ->where('p.main_project_claim_revision_id = ?',$claimRevision->id)
            ->execute();

        foreach($records as $record)
        {
            $subProjectClaimRevisionsBySubProjectId[$record->sub_project_id] = $record->SubProjectClaimRevision;
        }

        return $subProjectClaimRevisionsBySubProjectId;
    }
}