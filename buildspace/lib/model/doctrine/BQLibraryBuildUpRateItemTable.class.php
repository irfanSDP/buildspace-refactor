<?php

/**
 * BQLibraryBuildUpRateItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BQLibraryBuildUpRateItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BQLibraryBuildUpRateItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BQLibraryBuildUpRateItem');
    }

    public static function getFormulatedColumnByRelationIdAndColumnName($id, $columnName, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('BQLibraryBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?', $columnName)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getBuildUpRateItemsWithSummaryByItemIds(array $elements)
    {
        $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('BQLibraryBuildUpRateItem');
        $itemIds                   = array();
        $newItems                  = array();
        $newSummary                = array();

        foreach ( $elements as $elementItems )
        {
            foreach ($elementItems as $item)
            {
                $itemIds[$item['id']] = $item['id'];

                unset($item);
            }
        }

        $resourceTrades = BQLibraryBuildUpRateResourceTable::getResourceByItemIds($itemIds);

        $buildUpRateItems = DoctrineQuery::create()
        ->select('i.id, i.build_up_rate_resource_id, i.bq_item_id, i.description, i.uom_id, i.total, i.line_total,
        i.resource_item_library_id, ifc.column_name, ifc.value, ifc.final_value, ifc.linked, uom.symbol')
        ->from('BQLibraryBuildUpRateItem i')
        ->leftJoin('i.FormulatedColumns ifc')
        ->leftJoin('i.UnitOfMeasurement uom')
        ->leftJoin('i.BQLibraryBuildUpRateResource sorbr')
        ->whereIn('i.bq_item_id', $itemIds)
        ->addOrderBy('sorbr.id, i.priority ASC')
        ->fetchArray();

        foreach($buildUpRateItems as $buildUpRateItem)
        {
            $buildUpRateItem['uom_id']     = $buildUpRateItem['uom_id'] > 0 ? (string) $buildUpRateItem['uom_id'] : '-1';
            $buildUpRateItem['uom_symbol'] = $buildUpRateItem['uom_id'] > 0 ? $buildUpRateItem['UnitOfMeasurement']['symbol'] : '';
            $buildUpRateItem['linked']     = $buildUpRateItem['resource_item_library_id'] > 0 ? true : false;

            foreach($formulatedColumnConstants as $constant)
            {
                $buildUpRateItem[$constant . '-final_value'] = 0;
                $buildUpRateItem[$constant . '-has_formula'] = false;
            }

            foreach($buildUpRateItem['FormulatedColumns'] as $formulatedColumnKey => $formulatedColumn)
            {
                $columnName                                    = $formulatedColumn['column_name'];
                $buildUpRateItem[$columnName . '-final_value'] = $formulatedColumn['final_value'];
                $buildUpRateItem[$columnName . '-has_formula'] = $formulatedColumn['value'] != $formulatedColumn['final_value'] ? true : false;

                $buildUpRateItem['FormulatedColumns'][$formulatedColumnKey]['has_formula'] = $formulatedColumn['value'] != $formulatedColumn['final_value'] ? true : false;
            }

            $newItems[$buildUpRateItem['bq_item_id']][$buildUpRateItem['build_up_rate_resource_id']][] = $buildUpRateItem;

            unset($buildUpRateItem);
        }

        unset($buildUpRateItems);

        $buildUpRateSummaries = DoctrineQuery::create()
        ->from('BQLibraryBuildUpRateSummary s')
        ->whereIn('s.bq_item_id', $itemIds)
        ->fetchArray();

        foreach ($buildUpRateSummaries as $buildUpRateSummary)
        {
            $newSummary[$buildUpRateSummary['bq_item_id']] = $buildUpRateSummary;
        }

        unset($buildUpRateSummaries);

        return array($resourceTrades, $newItems, $newSummary);
    }

    public static function hasDanglingUnitOfMeasurement($uomId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $query = "SELECT buri.id AS build_up_rate_item_id
            FROM bs_bq_library_build_up_rate_items buri
            INNER JOIN bs_bq_items i ON i.id = buri.bq_item_id 
            INNER JOIN bs_bq_elements e ON e.id = i.element_id 
            INNER JOIN bs_bq_libraries l ON l.id = e.library_id 
            WHERE buri.deleted_at IS NULL 
            AND i.deleted_at IS NULL 
            AND e.deleted_at IS NULL
            AND l.deleted_at IS NULL 
            AND buri.uom_id = {$uomId};";

        $stmt = $pdo->prepare($query);
        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_COLUMN);

        return count($records) > 0;
    }
}