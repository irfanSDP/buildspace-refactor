<?php

/**
 * PurchaseOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PurchaseOrder extends BasePurchaseOrder
{

    public function getGeneratedReferenceNumber()
    {
        return $this->prefix . Utilities::generatePurchaseOrderReferenceNo($this->po_count);
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $isNew = $this->isNew();

        $previousPOInfo = PurchaseOrderTable::getPreviousRecordByProjectId($this->project_structure_id);

        if ( $isNew )
        {
            $user = sfContext::getInstance()->getUser()->getGuardUser();

            $this->created_by = $user->id;
            $this->updated_by = $user->id;

            unset($user);
        }

        parent::save($conn);

        if ( $isNew )
        {
            $this->refresh(true);

            $poRecord                       = new PurchaseOrderProject();
            $poRecord->purchase_order_id    = $this->id;
            $poRecord->project_structure_id = $this->project_structure_id;
            $poRecord->save();

            // will find previous PO's information for associated Project if available
            if ( $previousPOInfo )
            {
                $this->copyFromExistingPOInfo($previousPOInfo);
            }
            // create new Purchase Order Information
            else
            {
                $this->createNewPOInfo();
            }

            $request = sfContext::getInstance()->getRequest();

            $this->copyPreviousPurchaseOrderSupplierInfo($request->getParameter('company_id'));
        }
    }

    public function copyResourceItems(Array $resourceItemIds)
    {
        $pdo     = $this->getTable()->getConnection()->getDbh();
        $userId  = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
        $data    = array();
        $poItems = array();

        if ( empty($resourceItemIds) )
        {
            return $poItems;
        }

        // only select work item to be imported into build up
        $stmt = $pdo->prepare("SELECT i.id FROM ".ResourceItemTable::getInstance()->getTableName()." AS i
        WHERE i.id IN (". implode(',', $resourceItemIds) .") AND i.type = ".ResourceItem::TYPE_WORK_ITEM." AND i.deleted_at IS NULL
        ORDER BY i.priority, i.lft, i.level ASC");

        $stmt->execute();
        $resourceItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( empty($resourceItems) )
        {
            return $poItems;
        }

        foreach ( $resourceItems as $resourceItem )
        {
            $data[] = "({$this->id}, {$resourceItem['id']},  NOW(), NOW(), {$userId}, {$userId})";

            unset($resourceItem);
        }

        unset($resourceItems);

        $stmt = $pdo->prepare('INSERT INTO '.PurchaseOrderItemTable::getInstance()->getTableName().' (purchase_order_id, resource_item_id, created_at, updated_at, created_by, updated_by) VALUES '.implode(', ', $data));

        $stmt->execute();

        unset($data);
    }

    public function copyProjectResourceItems(Array $resourceItemLibraryIds, ProjectStructure $project, Resource $resource)
    {
        $totalCostAndQuantityByResourceItems = ResourceItemTable::calculateTotalForResourceAnalysis($resourceItemLibraryIds, $resource->id, $project->id);

        $pdo     = $this->getTable()->getConnection()->getDbh();
        $userId  = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
        $data    = array();
        $poItems = array();

        if ( empty($totalCostAndQuantityByResourceItems) )
        {
            return $poItems;
        }

        foreach ( $totalCostAndQuantityByResourceItems as $resourceItemId => $resourceItem )
        {
            $data[] = "({$this->id}, {$resourceItemId}, {$resourceItem['total_quantity']},  NOW(), NOW(), {$userId}, {$userId})";
        }

        $stmt = $pdo->prepare('INSERT INTO '.PurchaseOrderItemTable::getInstance()->getTableName().' (purchase_order_id, resource_item_id, quantity, created_at, updated_at, created_by, updated_by) VALUES '.implode(', ', $data));

        $stmt->execute();

        unset($data);
    }

    public function copyRequestForQuotationItems(RFQ $rfq, array $rfqItemIds)
    {
        if ( empty($rfqItemIds) )
        {
            return;
        }

        $pdo    = $this->getTable()->getConnection()->getDbh();
        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
        $data   = array();

        $stmt = $pdo->prepare("SELECT * FROM ".RFQItemTable::getInstance()->getTableName()." AS rfqi
        JOIN ".RFQTable::getInstance()->getTableName()." rfq ON rfq.id = rfqi.request_for_quotation_id
        WHERE rfqi.id IN (".implode(',', $rfqItemIds).") AND rfq.id = ".$rfq->id);

        $stmt->execute();

        $rfqItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( empty($rfqItems) )
        {
            return;
        }

        foreach ( $rfqItems as $rfqItem )
        {
            $remarkId = ($rfqItem['remark_id']) ? $rfqItem['remark_id'] : 'NULL';

            $data[] = "({$this->id}, {$rfqItem['resource_item_id']}, {$rfqItem['quantity']}, {$remarkId}, NOW(), NOW(), {$userId}, {$userId})";

            unset($rfqItem);
        }

        unset($rfqItems);

        $stmt = $pdo->prepare('INSERT INTO '.PurchaseOrderItemTable::getInstance()->getTableName().' (purchase_order_id, resource_item_id, quantity, remark_id, created_at, updated_at, created_by, updated_by) VALUES '.implode(', ', $data));

        $stmt->execute();

        unset($data);
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $this->PurchaseOrderProject->delete($conn);

        if ( ! $this->PurchaseOrderInformation->isNew() )
        {
            PurchaseOrderTaxTable::deleteAllByPurchaseOrder($this->PurchaseOrderInformation);

            $this->PurchaseOrderInformation->delete($conn);
        }

        PurchaseOrderSupplierTable::deleteAllByPurchaseOrder($this);

        PurchaseOrderItemTable::deleteAllByPurchaseOrder($this);

        return parent::delete($conn);
    }

    protected function copyFromExistingPOInfo(PurchaseOrder $previousPOInfo)
    {
        $poInformation = $previousPOInfo->PurchaseOrderInformation;
        $taxes         = $poInformation->PurchaseOrderTaxes;

        $clonedPOInformation = $poInformation->copy();

        $clonedPOInformation->purchase_order_id  = $this->id;
        $clonedPOInformation->status             = PurchaseOrderInformation::STATUS_PENDING;
        $clonedPOInformation->supplier_address_1 = null;
        $clonedPOInformation->supplier_address_2 = null;
        $clonedPOInformation->supplier_address_3 = null;

        $clonedPOInformation->save();

        foreach ( $taxes as $tax )
        {
            $clonedTax = $tax->copy();

            $clonedTax->purchase_order_information_id = $clonedPOInformation->id;
            $clonedTax->save();

            unset( $tax );
        }

        unset( $poInformation, $clonedPOInformation, $taxes );
    }

    protected function createNewPOInfo()
    {
        $poInformation = $this->PurchaseOrderInformation;

        if ( $myCompanyProfile = Doctrine_Core::getTable('myCompanyProfile')->find(1) )
        {
            $counter = 1;

            // the system will strip all the html tags and assign the address by 3 following rows
            $occupiedRows = Utilities::justify(strip_tags($myCompanyProfile->address), sfBuildspacePurchaseOrderGenerator::ADDRESS_MAX_CHAR);

            foreach ( $occupiedRows as $occupiedRow )
            {
                if ( $counter > 3 )
                {
                    break;
                }

                $poInformation->{"company_address_" . $counter} = $occupiedRow;

                unset( $occupiedRow );

                $counter ++;
            }

            unset( $occupiedRows );
        }

        $counter = 1;

        // the system will strip all the html tags and assign the address by 3 following rows
        $occupiedRows = Utilities::justify(strip_tags($this->Project->MainInformation->site_address), sfBuildspacePurchaseOrderGenerator::ADDRESS_MAX_CHAR);

        foreach ( $occupiedRows as $occupiedRow )
        {
            if ( $counter > 3 )
            {
                break;
            }

            $poInformation->{"ship_to_" . $counter} = $occupiedRow;

            unset( $occupiedRow );

            $counter ++;
        }

        unset( $occupiedRows );

        $poInformation->currency_id = $this->Project->MainInformation->currency_id;
        $poInformation->signature   = PurchaseOrderInformationTable::getDefaultSignature();

        $poInformation->save();

        unset( $poInformation );
    }

    private function copyPreviousPurchaseOrderSupplierInfo($selectedSupplierId)
    {
        if ( ! empty( $selectedSupplierId ) AND $selectedSupplierId > 0 )
        {
            $this->refresh();

            // will get previous Purchase Order Information based on latest PO and Supplier Id
            $previousPO = Doctrine_Query::create()
                ->from('PurchaseOrderSupplier p')
                ->where('p.company_id = ?', array( $selectedSupplierId ))
                ->orderBy('p.id DESC')
                ->limit(1)
                ->fetchOne();

            $previousPOInformation = $previousPO->PurchaseOrder->PurchaseOrderInformation;

            $poSupplier                    = $this->PurchaseOrderSupplier;
            $poSupplier->purchase_order_id = $this->id;
            $poSupplier->company_id        = $selectedSupplierId;

            $poSupplier->save();

            $newPOInformation                     = $this->PurchaseOrderInformation;
            $newPOInformation->supplier_address_1 = $previousPOInformation->supplier_address_1;
            $newPOInformation->supplier_address_2 = $previousPOInformation->supplier_address_2;
            $newPOInformation->supplier_address_3 = $previousPOInformation->supplier_address_3;

            $newPOInformation->save();
        }
    }

}