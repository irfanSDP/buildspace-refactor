<?php

/**
 * ScheduleOfRateBuildUpRateItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ScheduleOfRateBuildUpRateItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ScheduleOfRateBuildUpRateItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ScheduleOfRateBuildUpRateItem');
    }

    public static function getFormulatedColumnByRelationIdAndColumnName($id, $columnName, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('ScheduleOfRateBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?', $columnName)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function calculateTotalById($id)
    {
        $rate = DoctrineQuery::create()->select('c.id, c.final_value')
            ->from('ScheduleOfRateBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?',ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_RATE)
            ->andWhere('c.deleted_at IS NULL')
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $rate = isset($rate['final_value']) ? $rate['final_value'] : 0;

        $quantity = DoctrineQuery::create()->select('c.id, c.final_value')
            ->from('ScheduleOfRateBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?',ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_QUANTITY)
            ->andWhere('c.deleted_at IS NULL')
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $quantity = isset($quantity['final_value']) ? $quantity['final_value'] : 0;

        $price = $rate * $quantity;

        $total = DoctrineQuery::create()->select('MULTIPLY(c.final_value)*'.$price.' AS value')
            ->from('ScheduleOfRateBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhereIn('c.column_name',array(ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_NUMBER, ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_CONSTANT))
            ->andWhere('c.final_value IS NOT NULL')
            ->andWhere('c.deleted_at IS NULL')
            ->andWhere('c.final_value <> 0')
            ->limit(1)
            ->fetchOne();

        DoctrineQuery::create()
            ->update('ScheduleOfRateBuildUpRateItem')
            ->set('total', '?', $total['value'])
            ->where('id = ?', $id)
            ->andWhere('total <> ?', $total['value'])
            ->execute();

        return $total['value'];
    }

    public static function calculateLineTotalById($id)
    {
        $wastage = DoctrineQuery::create()->select('c.id, c.final_value')
            ->from('ScheduleOfRateBuildUpRateFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?',ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_WASTAGE)
            ->andWhere('c.final_value <> 0')
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $wastage = isset($wastage['final_value']) ? $wastage['final_value'] : false;

        $markupRate = 0;

        $total = DoctrineQuery::create()
            ->select('total')
            ->from('ScheduleOfRateBuildUpRateItem')
            ->where('id = ?', $id)
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        if($wastage)
        {
            $wastagePercentage = $wastage / 100;

            $markupRate = $total['total'] * $wastagePercentage;
        }

        $lineTotal = $total['total'] + $markupRate;

        DoctrineQuery::create()
            ->update('ScheduleOfRateBuildUpRateItem')
            ->set('line_total', '?', $lineTotal)
            ->where('id = ?', $id)
            ->andWhere('line_total <> ?', $lineTotal)
            ->execute();

        return $lineTotal;
    }

    public static function recalculateColumnsWithRowLinking(Array $buildUpRateItemIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        if(count($buildUpRateItemIds) == 0)
        {
            return;
        }

        $implodedItemIds = implode(', ', $buildUpRateItemIds);

        $sql = "SELECT id, value, final_value, column_name
        FROM ".ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName()."
        WHERE relation_id IN (".$implodedItemIds.") AND value ~* 'r.*' AND final_value <> 0 AND deleted_at IS NULL";

        $stmt = $pdo->prepare($sql);
        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach($records as $k => $record)
        {
            $references = ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->hasReferencesInFormula($record['value']);

            $mathExp = $record['value'];

            $evaluator = new EvalMath(true, true);
            $evaluator->suppress_errors = true;

            if(is_array($references))
            {
                try
                {
                    foreach($references as $key => $reference)
                    {
                        $itemId = str_ireplace('r', '', $reference);

                        if($column = self::getFormulatedColumnByRelationIdAndColumnName($itemId, $record['column_name'], Doctrine_Core::HYDRATE_ARRAY))
                        {
                            $finalValue = $column['final_value'];
                        }
                        else
                        {
                            $finalValue = 0;
                        }

                        $mathExp = str_replace($reference, $finalValue, $mathExp);

                        unset($references[$key], $reference, $column);
                    }
                }
                catch(Exception $e)
                {
                    throw $e;
                }
            }

            $evaluatedValue = $evaluator->evaluate($mathExp);

            if($record['column_name'] == ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_RATE)
            {
                $evaluatedValue = $evaluatedValue ? number_format($evaluatedValue, 2, '.', '') : 0;
            }

            $evaluatedValue = $evaluatedValue ? $evaluatedValue : 0;

            $sql = "UPDATE ".ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName()."
                    SET final_value = ".$evaluatedValue." WHERE id =".$record['id'];

            $stmt = $pdo->prepare($sql);
            $stmt->execute();

            unset($records[$k], $record, $evaluator);
        }
    }

    public static function getBuildUpRateItemsWithSummaryByItemIds(array $trades)
    {
        $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('ScheduleOfRateBuildUpRateItem');
        $itemIds                   = array();
        $newItems                  = array();
        $newSummary                = array();

        foreach ( $trades as $tradeItems )
        {
            foreach ($tradeItems as $item)
            {
                $itemIds[$item['id']] = $item['id'];

                unset($item);
            }
        }

        $resourceTrades = ScheduleOfRateBuildUpRateResourceTable::getResourceByItemIds($itemIds);

        $buildUpRateItems = DoctrineQuery::create()
        ->select('i.id, i.build_up_rate_resource_id, i.schedule_of_rate_item_id, i.description, i.uom_id, i.total, i.line_total,
        i.resource_item_library_id, ifc.column_name, ifc.value, ifc.final_value, ifc.linked, uom.symbol')
        ->from('ScheduleOfRateBuildUpRateItem i')
        ->leftJoin('i.FormulatedColumns ifc')
        ->leftJoin('i.UnitOfMeasurement uom')
        ->leftJoin('i.ScheduleOfRateBuildUpRateResource sorbr')
        ->whereIn('i.schedule_of_rate_item_id', $itemIds)
        ->addOrderBy('sorbr.id, i.priority ASC')
        ->fetchArray();

        foreach($buildUpRateItems as $buildUpRateItem)
        {
            $buildUpRateItem['uom_id']     = $buildUpRateItem['uom_id'] > 0 ? (string) $buildUpRateItem['uom_id'] : '-1';
            $buildUpRateItem['uom_symbol'] = $buildUpRateItem['uom_id'] > 0 ? $buildUpRateItem['UnitOfMeasurement']['symbol'] : '';
            $buildUpRateItem['linked']     = $buildUpRateItem['resource_item_library_id'] > 0 ? true : false;

            foreach($formulatedColumnConstants as $constant)
            {
                $buildUpRateItem[$constant . '-final_value'] = 0;
                $buildUpRateItem[$constant . '-has_formula'] = false;
            }

            foreach($buildUpRateItem['FormulatedColumns'] as $formulatedColumnKey => $formulatedColumn)
            {
                $columnName                                    = $formulatedColumn['column_name'];
                $buildUpRateItem[$columnName . '-final_value'] = $formulatedColumn['final_value'];
                $buildUpRateItem[$columnName . '-has_formula'] = $formulatedColumn['value'] != $formulatedColumn['final_value'] ? true : false;

                $buildUpRateItem['FormulatedColumns'][$formulatedColumnKey]['has_formula'] = $formulatedColumn['value'] != $formulatedColumn['final_value'] ? true : false;
            }

            $newItems[$buildUpRateItem['schedule_of_rate_item_id']][$buildUpRateItem['build_up_rate_resource_id']][] = $buildUpRateItem;

            unset($buildUpRateItem);
        }

        unset($buildUpRateItems);

        $buildUpRateSummaries = DoctrineQuery::create()
        ->from('ScheduleOfRateBuildUpRateSummary s')
        ->whereIn('s.schedule_of_rate_item_id', $itemIds)
        ->fetchArray();

        foreach ($buildUpRateSummaries as $buildUpRateSummary)
        {
            $newSummary[$buildUpRateSummary['schedule_of_rate_item_id']] = $buildUpRateSummary;
        }

        unset($buildUpRateSummaries);

        return array($resourceTrades, $newItems, $newSummary);
    }
}