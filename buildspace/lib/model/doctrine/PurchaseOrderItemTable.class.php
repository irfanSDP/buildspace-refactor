<?php

/**
 * PurchaseOrderItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PurchaseOrderItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PurchaseOrderItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PurchaseOrderItem');
    }

    public static function getResourceItemIdsByPurchaseOrder(PurchaseOrder $purchaseOrder)
    {
        $data  = array();
        $items = self::getItemListingByPurchaseOrder($purchaseOrder);

        if ( empty($items) )
        {
            return $data;
        }

        foreach ( $items as $item )
        {
            $data[$item['resource_item_id']] = $item['resource_item_id'];

            unset($item);
        }

        return $data;
    }

    public static function getItemListingByPurchaseOrder(PurchaseOrder $purchaseOrder)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT b.id, b.purchase_order_id, b.resource_item_id, b.quantity,
        COALESCE(b2.description, NULL) AS remark, b.rates, b.remark_id
        FROM ".PurchaseOrderItemTable::getInstance()->getTableName()." b
        LEFT JOIN ".RFQItemRemarkTable::getInstance()->getTableName()." b2 ON ( b.remark_id = b2.id )
        WHERE ( b.purchase_order_id = :poId AND b.deleted_at IS NULL )");

        $stmt->execute(array('poId' => $purchaseOrder->id));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getHierarchyItemListingFromResourceLibraryByPOItemIds(Array $poItemsId, Array $poFromDbItems)
    {
        $poTreeItems = array();
        $pdo         = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.root_id, p.description, p.type::text, p.uom_id, p.level, p.priority,
        p.lft, uom.symbol AS uom, rt.priority as rt_priority, r.id as resource_id
        FROM ".ResourceItemTable::getInstance()->getTableName()." c
        JOIN ".ResourceItemTable::getInstance()->getTableName()." p
        ON c.lft BETWEEN p.lft AND p.rgt
        LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." rt on p.resource_trade_id = rt.id AND rt.deleted_at IS NULL
        JOIN ".ResourceTable::getInstance()->getTableName()." r on rt.resource_id = r.id AND r.deleted_at IS NULL
        WHERE c.root_id = p.root_id AND c.type <> ".ResourceItem::TYPE_HEADER."
        AND c.id IN (". implode(', ', $poItemsId) .")
        AND c.deleted_at IS NULL AND p.deleted_at IS NULL
        ORDER BY r.id, rt.priority, p.priority, p.lft, p.level ASC");

        $stmt->execute(array());

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $results as $result )
        {
            if ( isset ($poFromDbItems[$result['id']]) )
            {
                $poItemId = $poFromDbItems[$result['id']]['poItemId'];
                $quantity = $poFromDbItems[$result['id']]['quantity'];
                $rates    = $poFromDbItems[$result['id']]['rates'];
                $remarks  = $poFromDbItems[$result['id']]['remarks'];
                $remarkId = $poFromDbItems[$result['id']]['poItemRemarkId'];
                $amount   = isset($poFromDbItems[$result['id']]['amount']) ? $poFromDbItems[$result['id']]['amount'] : 0;
            }
            else
            {
                $poItemId = - 1;
                $quantity = 0;
                $rates    = 0;
                $remarkId = - 1;
                $remarks  = null;
                $amount   = 0;
            }

            $poTreeItems[] = array(
                'poItemId'       => $poItemId,
                'id'             => $result['id'],
                'root_id'        => $result['root_id'],
                'description'    => $result['description'],
                'type'           => $result['type'],
                'uom'            => $result['uom'],
                'uom_id'         => $result['uom_id'],
                'level'          => $result['level'],
                'priority'       => $result['priority'],
                'lft'            => $result['lft'],
                'quantity'       => $quantity,
                'rates'          => $rates,
                'amount'         => $amount,
                'poItemRemarkId' => $remarkId,
                'remarks'        => $remarks,
            );

            unset($result);
        }

        unset($results, $poItemsId, $poFromDbItems);

        return $poTreeItems;
    }

    public static function deleteLikeResourceLibraryTree(PurchaseOrder $purchaseOrder, ResourceItem $resourceItem)
    {
        //we need to update any related column from formulated columns before deleting it
        $items = DoctrineQuery::create()
        ->select('i.id')
        ->from('ResourceItem i')
        ->andWhere('i.root_id = ?',$resourceItem->root_id)
        ->andWhere('i.lft >= ? AND i.rgt <= ?', array($resourceItem->lft, $resourceItem->rgt))
        ->addOrderBy('i.lft')
        ->fetchArray();

        $affectedItemIds  = array();
        $affectedItemList = array();

        foreach($items as $item)
        {
            $affectedItemIds[] = $item['id'];

            array_push($affectedItemList, $item);
        }

        if ( ! empty($affectedItemIds) )
        {
            Doctrine_Query::create()
            ->delete('PurchaseOrderItem i')
            ->where('i.purchase_order_id = ?', $purchaseOrder->id)
            ->andWhereIn('i.resource_item_id', $affectedItemIds)
            ->execute(array());
        }

        return $affectedItemList;
    }

    public static function deleteAllByPurchaseOrder(PurchaseOrder $purchaseOrder)
    {
        $con = self::getInstance()->getConnection();

        $con->fetchAssoc("UPDATE ".self::getInstance()->getTableName()." SET deleted_at = NOW() WHERE
        purchase_order_id = ".$purchaseOrder->id." AND deleted_at IS NULL");
    }

    public static function copyAllAssignedItemsByStockInInvoice(StockInInvoice $invoice)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $resourceItemIds = array();
        $poItemsInfo     = array();

        $poItems = self::getItemListingByPurchaseOrder($invoice->PurchaseOrder);

        foreach ( $poItems as $poItem )
        {
            $resourceItemIds[$poItem['resource_item_id']] = $poItem['resource_item_id'];

            $poItemsInfo[$poItem['resource_item_id']] = array(
                'quantity'  => $poItem['quantity'],
                'rates'     => $poItem['rates'],
                'remark_id' => $poItem['remark_id'],
            );

            unset($poItem);
        }

        unset($poItems);

        if ( empty($resourceItemIds) )
        {
            return false;
        }

        $rowsToBeInserted = array();

        foreach ( $resourceItemIds as $resourceItemId )
        {
            $additionalInfo = $poItemsInfo[$resourceItemId];

            $remarkId = is_null($additionalInfo['remark_id']) ? 'NULL' : $additionalInfo['remark_id'];

            $quantity = number_format((float) $additionalInfo['quantity'], 2, '.', '');
            $rates    = number_format((float) $additionalInfo['rates'], 2, '.', '');

            $total = StockInInvoiceItemTable::calculateTotalAmount($quantity, $rates);

            $rowsToBeInserted[] = "({$invoice->id}, {$resourceItemId}, {$quantity}, {$rates}, {$total}, {$total},
            {$remarkId}, NOW(), NOW())";

            unset($additionalInfo, $remarkId, $resourceItemId);
        }

        unset($resourceItemIds);

        $stmt = $pdo->prepare("INSERT INTO ".StockInInvoiceItemTable::getInstance()->getTableName()."
        (stock_in_invoice_id, resource_item_id, quantity, rates, total, total_without_tax, remark_id, created_at, updated_at) VALUES ".implode(', ', $rowsToBeInserted));

        $stmt->execute();

        return true;
    }
}