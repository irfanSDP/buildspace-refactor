<?php

/**
 * BillItemRateLogTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillItemRateLogTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BillItemRateLogTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillItemRateLog');
    }

    /**
     * Returns the Project Grand Total for a revision.
     * Also includes project grand total breakdown (by bill).
     *
     * @param ProjectStructure $project
     * @param ProjectRevision  $projectRevision
     *
     * @return array
     */
    public static function getBillTotalAmountByProjectAndRevision(ProjectStructure $project, ProjectRevision $projectRevision)
    {
        $billItemRates = self::getBillItemGrandTotalByProjectAndRevision($project, $projectRevision);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT b.id AS bill_id, i.id AS bill_item_id
        FROM ".ProjectStructureTable::getInstance()->getTableName()." p
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON r.project_structure_id = p.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = r.project_structure_id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON  e.project_structure_id = b.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
        WHERE r.id <> ".$projectRevision->id." AND r.version < ".$projectRevision->version."
        AND p.id = ".$project->id." AND b.type = ".ProjectStructure::TYPE_BILL."
        AND (i.deleted_at_project_revision_id IS NULL OR (i.deleted_at_project_revision_id = r.id AND i.deleted_at_project_revision_id <> ".$projectRevision->id."))
        AND e.deleted_at IS NULL AND p.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL AND r.deleted_at IS NULL
        GROUP BY b.id, i.id");

        $stmt->execute();

        $billItemsByBillsFromPreviousRevision = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("SELECT b.id AS bill_id, i.id AS bill_item_id
        FROM ".ProjectStructureTable::getInstance()->getTableName()." p
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON r.project_structure_id = p.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = r.project_structure_id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON  e.project_structure_id = b.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
        WHERE r.id = ".$projectRevision->id." AND r.version = ".$projectRevision->version."
        AND p.id = ".$project->id." AND b.type = ".ProjectStructure::TYPE_BILL."
        AND e.deleted_at IS NULL AND p.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL AND r.deleted_at IS NULL
        GROUP BY b.id, i.id");

        $stmt->execute();

        $billItemsByBillsFromProjectRevision = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $billItemsByBills = $billItemsByBillsFromProjectRevision + $billItemsByBillsFromPreviousRevision;

        $records = array(
            'project_total' => 0,
            'bills' => array()
        );

        foreach($billItemsByBills as $billId => $billItems)
        {
            if(!array_key_exists($billId, $records['bills']))
            {
                $records['bills'][$billId] = 0;
            }

            foreach($billItems as $billItem)
            {
                if(array_key_exists($billItem['bill_item_id'], $billItemRates))
                {
                    $records['bills'][$billId] += $billItemRates[$billItem['bill_item_id']];
                    $records['project_total'] += $billItemRates[$billItem['bill_item_id']];
                }
            }

            unset($billItems);
        }

        return $records;
    }

    /**
     * Returns the Bill Grand Total for a revision.
     * Also includes bill grand total breakdown (by element).
     *
     * @param ProjectStructure $bill
     * @param ProjectRevision  $projectRevision
     *
     * @return array
     */
    public static function getElementGrandTotalByBillAndRevision(ProjectStructure $bill, ProjectRevision $projectRevision)
    {
        $billItemRates = self::getBillItemGrandTotalByProjectAndRevision($bill->getRoot(), $projectRevision);

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT e.id AS bill_element_id, i.id AS bill_item_id
        FROM ".ProjectStructureTable::getInstance()->getTableName()." p
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON r.project_structure_id = p.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = r.project_structure_id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON  e.project_structure_id = b.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
        WHERE r.id <> ".$projectRevision->id." AND r.version < ".$projectRevision->version." AND b.id = ".$bill->id."
        AND (i.deleted_at_project_revision_id IS NULL OR (i.deleted_at_project_revision_id = r.id AND i.deleted_at_project_revision_id <> ".$projectRevision->id."))
        AND e.deleted_at IS NULL AND p.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL AND r.deleted_at IS NULL
        GROUP BY e.id, i.id");

        $stmt->execute();

        $billItemsByElementsFromPreviousRevision = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $stmt = $pdo->prepare("SELECT e.id AS bill_element_id, i.id AS bill_item_id
        FROM ".ProjectStructureTable::getInstance()->getTableName()." p
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON r.project_structure_id = p.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = r.project_structure_id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON  e.project_structure_id = b.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON i.element_id = e.id
        WHERE r.id = ".$projectRevision->id." AND r.version = ".$projectRevision->version." AND b.id = ".$bill->id."
        AND e.deleted_at IS NULL AND p.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL AND r.deleted_at IS NULL
        GROUP BY e.id, i.id");

        $stmt->execute();

        $billItemsByElementsFromProjectRevision = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $billItemsByElements = $billItemsByElementsFromProjectRevision + $billItemsByElementsFromPreviousRevision;

        $records = array(
            'bill_total' => 0,
            'elements' => array()
        );

        foreach($billItemsByElements as $elementId => $billItems)
        {
            if(!array_key_exists($elementId, $records['elements']))
            {
                $records['elements'][$elementId] = 0;
            }

            foreach($billItems as $billItem)
            {
                if(array_key_exists($billItem['bill_item_id'], $billItemRates))
                {
                    $records['elements'][$elementId] += $billItemRates[$billItem['bill_item_id']];
                    $records['bill_total'] += $billItemRates[$billItem['bill_item_id']];
                }
            }

            unset($billItems);
        }

        return $records;
    }

    public static function getBillItemGrandTotalByProjectAndRevision(ProjectStructure $project, ProjectRevision $projectRevision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT l.bill_item_id, COALESCE(l.grand_total, 0) AS total
        FROM ".BillItemRateLogTable::getInstance()->getTableName()." l
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON l.project_revision_id = r.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON r.project_structure_id = p.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON l.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id AND b.root_id = p.id
        WHERE p.id = ".$project->id." AND p.deleted_at IS NULL
        AND r.id <> ".$projectRevision->id." AND r.version < ".$projectRevision->version."
        AND (i.deleted_at_project_revision_id IS NULL OR (i.deleted_at_project_revision_id = r.id AND i.deleted_at_project_revision_id <> ".$projectRevision->id."))
        AND l.changes_count = (SELECT COALESCE(MAX(changes_count), 0)
            FROM ".BillItemRateLogTable::getInstance()->getTableName()."
            WHERE bill_item_id = i.id AND project_revision_id = r.id
            GROUP BY bill_item_id, project_revision_id)
        AND e.deleted_at IS NULL AND b.deleted_at IS NULL AND r.deleted_at IS NULL
        AND i.deleted_at IS NULL
        GROUP BY l.bill_item_id, l.project_revision_id, l.changes_count, r.version, l.grand_total
        ORDER BY r.version, l.changes_count ASC");

        $stmt->execute();

        $previousGrandTotal = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare("SELECT i.id AS bill_item_id, COALESCE(l.grand_total, 0) AS total
        FROM ".BillItemRateLogTable::getInstance()->getTableName()." l
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON l.project_revision_id = r.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON r.project_structure_id = p.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON l.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id AND b.root_id = p.id
        WHERE p.id = ".$project->id." AND p.deleted_at IS NULL
        AND r.id = ".$projectRevision->id." AND r.version = ".$projectRevision->version."
        AND l.changes_count = (SELECT COALESCE(MAX(changes_count), 0)
            FROM ".BillItemRateLogTable::getInstance()->getTableName()."
            WHERE bill_item_id = i.id AND project_revision_id = r.id
            GROUP BY bill_item_id, project_revision_id)
        AND e.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL");

        $stmt->execute();

        $logGrandTotal = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        return $logGrandTotal + $previousGrandTotal;
    }

    public static function getBillItemRatesByProjectAndRevision(ProjectStructure $project, ProjectRevision $projectRevision)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT l.bill_item_id, COALESCE(l.rate, 0) AS rate
        FROM ".BillItemRateLogTable::getInstance()->getTableName()." l
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON l.project_revision_id = r.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON r.project_structure_id = p.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON l.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id AND b.root_id = p.id
        WHERE p.id = ".$project->id." AND p.deleted_at IS NULL
        AND r.id <> ".$projectRevision->id." AND r.version < ".$projectRevision->version."
        AND (i.deleted_at_project_revision_id IS NULL OR (i.deleted_at_project_revision_id = r.id AND i.deleted_at_project_revision_id <> ".$projectRevision->id."))
        AND l.changes_count = (SELECT COALESCE(MAX(changes_count), 0)
            FROM ".BillItemRateLogTable::getInstance()->getTableName()."
            WHERE bill_item_id = i.id AND project_revision_id = r.id
            GROUP BY bill_item_id, project_revision_id)
        AND e.deleted_at IS NULL AND b.deleted_at IS NULL AND r.deleted_at IS NULL
        AND i.deleted_at IS NULL
        GROUP BY l.bill_item_id, l.project_revision_id, l.changes_count, r.version, l.rate
        ORDER BY r.version, l.changes_count ASC");

        $stmt->execute();

        $previousRates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare("SELECT i.id AS bill_item_id, COALESCE(l.rate, 0) AS rate
        FROM ".BillItemRateLogTable::getInstance()->getTableName()." l
        JOIN ".ProjectRevisionTable::getInstance()->getTableName()." r ON l.project_revision_id = r.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON r.project_structure_id = p.id
        JOIN ".BillItemTable::getInstance()->getTableName()." i ON l.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id AND b.root_id = p.id
        WHERE p.id = ".$project->id." AND p.deleted_at IS NULL
        AND r.id = ".$projectRevision->id." AND r.version = ".$projectRevision->version."
        AND l.changes_count = (SELECT COALESCE(MAX(changes_count), 0)
            FROM ".BillItemRateLogTable::getInstance()->getTableName()."
            WHERE bill_item_id = i.id AND project_revision_id = r.id
            GROUP BY bill_item_id, project_revision_id)
        AND e.deleted_at IS NULL AND b.deleted_at IS NULL
        AND i.deleted_at IS NULL");

        $stmt->execute();

        $logRates = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        return $logRates + $previousRates;
    }

    public static function insertBatchLogByBillId($billId, Array $data)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT r.id
                    FROM ".ProjectRevisionTable::getInstance()->getTableName()." r
                    JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON b.root_id = r.project_structure_id
                    WHERE b.id = ".$billId."  AND r.deleted_at IS NULL
                    AND b.deleted_at IS NULL
                    ORDER BY r.version DESC LIMIT 1");

        $stmt->execute();

        $revisionId = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        $stmt = $pdo->prepare("SELECT i.id, i.grand_total_after_markup
        FROM ".BillItemTable::getInstance()->getTableName()." i
        JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON e.project_structure_id = b.id
        WHERE b.id = ".$billId." AND b.deleted_at IS NULL
        AND e.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $stmt = $pdo->prepare("SELECT bill_item_id, MAX(changes_count) FROM ".self::getInstance()->getTableName()."
            WHERE bill_item_id IN (".implode(',', array_keys($records)).") AND project_revision_id = ".$revisionId."
            GROUP BY bill_item_id, project_revision_id");

        $stmt->execute();

        $billItemLogs = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $values = array();

        foreach($records as $billItemId => $grandTotalAfterMarkup)
        {
            if($grandTotalAfterMarkup != 0)
            {
                if(!empty($data) && isset($data[$billItemId]))
                {
                    $changesCount = array_key_exists($billItemId, $billItemLogs) ? $billItemLogs[$billItemId] + 1 : 1;

                    $values[] = "(".$billItemId.",".$data[$billItemId].",".$grandTotalAfterMarkup.",".$changesCount.",".$revisionId.", NOW(), NOW())";
                }
            }
        }

        if(!empty($values))
        {
            $stmt = $pdo->prepare("INSERT INTO bs_bill_item_rate_logs
            (bill_item_id, rate, grand_total, changes_count, project_revision_id, created_at, updated_at)
            VALUES ".implode(',', $values));

            $stmt->execute();
        }
    }
}