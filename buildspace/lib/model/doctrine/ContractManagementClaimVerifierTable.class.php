<?php

/**
 * ContractManagementClaimVerifierTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ContractManagementClaimVerifierTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ContractManagementClaimVerifierTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ContractManagementClaimVerifier');
    }

    public static function getVerifierList(ProjectStructure $project, $moduleIdentifier)
    {
        return EProjectProjectContractManagementModuleTable::getContractManagementVerifiers($project->MainInformation, $moduleIdentifier);
    }

    public static function initialiseVerifierList(ProjectStructure $project, $moduleIdentifier, $objectId)
    {
        $userIds = EProjectProjectContractManagementModuleTable::getContractManagementVerifiers($project->MainInformation, $moduleIdentifier);

        $object = PostContractClaim::getObjectByModuleIdentifier($moduleIdentifier, $objectId);

        if($object)
        {
            $topManagementVerifierIds = array_column(PostContractClaimTopManagementVerifier::getAllRecords($object)->toArray(), 'user_id');
    
            foreach($topManagementVerifierIds as $verifierId)
            {
                $userIds[$verifierId] = [
                    'id'             => $verifierId,
                    'days_to_verify' => null,
                ];
            }
        }

        if( count($userIds) < 1 ) return false;

        static::flushExistingVerifiers($project, $moduleIdentifier, $objectId);
        static::assignVerifiers($project, $userIds, $moduleIdentifier, $objectId);

        return true;
    }

    private static function flushExistingVerifiers(ProjectStructure $project, $moduleIdentifier, $objectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("UPDATE " . self::getInstance()->getTableName() . " set deleted_at = NOW() WHERE project_structure_id = {$project->id} AND module_identifier = {$moduleIdentifier} AND object_id = {$objectId}");

        $stmt->execute();
    }

    private static function assignVerifiers(ProjectStructure $project, $userIds, $moduleIdentifier, $objectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sequence_number = 0;
        foreach($userIds as $userId => $verifierInfo)
        {
            $daysToVerify = $verifierInfo['days_to_verify'];

            if(empty($daysToVerify)) $daysToVerify = 'null';

            $stmt = $pdo->prepare('INSERT INTO '.self::getInstance()->getTableName().' (project_structure_id, module_identifier, object_id, user_id, sequence_number, approved, verified_at, days_to_verify) VALUES ('.$project->id.', '.$moduleIdentifier.', '. $objectId . ', '. $userId.', '.(++$sequence_number).', null, null, '.$daysToVerify.') RETURNING id');
            $stmt->execute();
        }

        // Set start_at for next verifier.
        if($nextVerifierRecord = self::getCurrentVerifierRecord($project, $moduleIdentifier, $objectId))
        {
            $stmt = $pdo->prepare("UPDATE " . self::getInstance()->getTableName() . " set start_at = NOW() where id = {$nextVerifierRecord['id']}");
            $stmt->execute();
        }
    }

    public static function isApproved(ProjectStructure $project, $moduleIdentifier, $objectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT * FROM " . self::getInstance()->getTableName() . " 
            WHERE project_structure_id = " . $project->id . "
            AND module_identifier = " . $moduleIdentifier . "
            AND object_id = {$objectId}
            AND deleted_at IS NULL 
            AND (approved = false OR approved IS NULL)");

        $stmt->execute();

        $data = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return (count($data) == 0);
    }

    public static function isRejected(ProjectStructure $project, $moduleIdentifier, $objectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT * FROM " . self::getInstance()->getTableName() . " 
            WHERE project_structure_id = " . $project->id . "
            AND module_identifier = " . $moduleIdentifier . "
            AND object_id = {$objectId}
            AND approved = false
            AND deleted_at IS NULL");
        $stmt->execute();

        $data = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return (count($data) > 0);
    }

    public static function isPending(ProjectStructure $project, $moduleIdentifier, $objectId)
    {
        if( self::isRejected($project, $moduleIdentifier, $objectId) ) return false;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT * FROM " . self::getInstance()->getTableName() . " 
            WHERE project_structure_id = " . $project->id . "
            AND module_identifier = " . $moduleIdentifier . "
            AND object_id = {$objectId}
            AND approved IS NULL
            AND deleted_at IS NULL");
        $stmt->execute();

        $data = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return (count($data) > 0);
    }

    public static function getCurrentVerifierRecord(ProjectStructure $project, int $moduleIdentifier, $objectId)
    {
        if( ! self::isPending($project, $moduleIdentifier, $objectId) ) return false;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT * FROM " . self::getInstance()->getTableName() . " 
            WHERE project_structure_id = " . $project->id . "
            AND module_identifier = " . $moduleIdentifier . "
            AND object_id = {$objectId}
            AND approved is NULL
            AND deleted_at IS NULL
            ORDER BY sequence_number ASC
            LIMIT 1");

        $stmt->execute();

        $data = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return $data[0] ?? null;
    }

    public static function isCurrentVerifier($user, ProjectStructure $project, int $moduleIdentifier, $objectId)
    {
        if( ! $currentVerifierRecord = self::getCurrentVerifierRecord($project, $moduleIdentifier, $objectId) ) return false;

        return $user->id == $currentVerifierRecord['user_id'];
    }

    public static function approve(ProjectStructure $project, $user, $moduleIdentifier, $objectId, bool $approve, $remarks)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $record = DoctrineQuery::create()->select('*')
            ->from('ContractManagementClaimVerifier v')
            ->where('v.project_structure_id = ?', $project->id)
            ->andWhere('v.module_identifier = ?', $moduleIdentifier)
            ->andWhere('v.object_id = ?', $objectId)
            ->andWhere('v.user_id = ?', $user->id)
            ->andWhere('v.approved is NULL')
            ->andWhere('v.deleted_at is NULL')
            ->limit(1)
            ->fetchOne();

        if( ! ( $record && self::isCurrentVerifier($user, $project, $moduleIdentifier, $objectId) ) ) return false;

        $record->remarks  = $remarks;
        $record->approved = $approve;
        $record->save();

        $stmt = $pdo->prepare("UPDATE " . self::getInstance()->getTableName() . " set verified_at = NOW() where id = {$record->id}");
        $stmt->execute();

        // Set start_at for next verifier.
        if($approve && $nextVerifierRecord = self::getCurrentVerifierRecord($project, $moduleIdentifier, $objectId))
        {
            $stmt = $pdo->prepare("UPDATE " . self::getInstance()->getTableName() . " set start_at = NOW() where id = {$nextVerifierRecord['id']}");
            $stmt->execute();
        }

        return true;
    }

    public static function submittedAt(ProjectStructure $project, $moduleIdentifier, $objectId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT start_at
            FROM " . self::getInstance()->getTableName() . "
            WHERE project_structure_id = " . $project->id . "
            AND module_identifier = " . $moduleIdentifier . "
            AND object_id = {$objectId}
            AND deleted_at IS NULL
            ORDER BY sequence_number ASC");

        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_COLUMN);
    }

    public static function sendNotifications(ProjectStructure $project, $moduleIdentifier, $objectId)
    {
        $eProjectProject = $project->MainInformation->getEProjectProject();

        if( ! $eProjectProject ) return false;

        $client = new GuzzleHttp\Client(array(
            'verify'   => sfConfig::get('app_guzzle_ssl_verification'),
            'base_uri' => sfConfig::get('app_e_project_url')
        ));

        try
        {
            $user = sfContext::getInstance()->getUser()->getGuardUser()->Profile->getEProjectUser();

            $res = $client->post("buildspace/notifications/{$eProjectProject->id}/contract-management/{$moduleIdentifier}/claim/{$objectId}/review/send", [
                'form_params' => [
                    'userId' => $user->id,
                ]
            ]);

            $success = json_decode($res->getBody())->success;
        }
        catch(Exception $e)
        {
            throw $e;
        }

        return $success;
    }
}