<?php

/**
 * BillItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BillItem extends BaseBillItem
{
    const TYPE_HEADER = 1;
    const TYPE_WORK_ITEM = 2;
    const TYPE_NOID = 4;
    const TYPE_ITEM_HTML_EDITOR = 8;
    const TYPE_ITEM_PROVISIONAL = 16;
    const TYPE_ITEM_RATE_ONLY = 32;
    const TYPE_ITEM_NOT_LISTED = 64;
    const TYPE_ITEM_PC_RATE = 128;
    const TYPE_ITEM_LUMP_SUM = 256;
    const TYPE_ITEM_LUMP_SUM_PERCENT = 512;
    const TYPE_ITEM_LUMP_SUM_EXCLUDE = 1024;
    const TYPE_HEADER_N = 2048;

    const TYPE_HEADER_TEXT = 'HEAD';
    const TYPE_WORK_ITEM_TEXT = 'ITEM';
    const TYPE_NOID_TEXT = 'NOID';
    const TYPE_ITEM_HTML_EDITOR_TEXT = "ITEM-HE";
    const TYPE_ITEM_PROVISIONAL_TEXT = "ITEM-P";
    const TYPE_ITEM_RATE_ONLY_TEXT = 'ITEM-RO';
    const TYPE_ITEM_NOT_LISTED_TEXT = 'ITEM-NL';
    const TYPE_ITEM_PC_RATE_TEXT = 'ITEM-PC';
    const TYPE_ITEM_LUMP_SUM_TEXT = 'ITEM-LS';
    const TYPE_ITEM_LUMP_SUM_PERCENT_TEXT = 'ITEM-LS%';
    const TYPE_ITEM_LUMP_SUM_EXCLUDE_TEXT = 'ITEM-LSX';
    const TYPE_HEADER_N_TEXT = 'HEAD-N';

    const FORMULATED_COLUMN_RATE = 'rate';
    const FORMULATED_COLUMN_MARKUP_PERCENTAGE = 'markup_percentage';
    const FORMULATED_COLUMN_MARKUP_AMOUNT = 'markup_amount';

    const COPY_QUANTITY_CELL_ORIGINAL = 1;
    const COPY_QUANTITY_CELL_REMEASUREMENT = 2;

    const TYPE_IMPORT_LIBRARY = 1;
    const TYPE_IMPORT_PROJECT = 2;

    const ITEM_TYPE_PC_SUPPLIER_RATE_TEXT = 'Supply Rate';

    const PROJECT_ANALYZER_TRADE_ITEM = 'tradeItem';

    public $itemContainerAfterCopy = array();
    public $itemFormulatedColumnContainerAfterCopy = array();
    public $buildUpRatesContainerAfterCopy = array();
    public $buildUpRatesFormulatedColumnContainerAfterCopy = array();
    public $buildUpQuantitiesContainerAfterCopy = array();
    public $buildUpQuantitiesFormulatedColumnContainerAfterCopy = array();

    public static $noMarkupItemTypes = [
        BillItem::TYPE_ITEM_PC_RATE,
        BillItem::TYPE_ITEM_LUMP_SUM_PERCENT,
        BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE,
    ];

    public function getFormulatedColumnByName($columnName, $hydrate=null)
    {
        return BillItemTable::getFormulatedColumnByRelationIdAndColumnName($this->id, $columnName, $hydrate);
    }

    public function strikeThroughDelete($newRevisionId)
    {
        $result = DoctrineQuery::create()->select('i.id')
            ->from('BillItem i')
            ->where('i.root_id = ?',$this->root_id)
            ->andWhere('i.lft >= ? AND i.rgt <= ?', array($this->lft, $this->rgt))
            ->addOrderBy('i.lft')
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->execute();

        $ids = array_map('current', $result);

        Doctrine_Query::create()
            ->update('BillItem')
            ->set('bill_ref_element_no', '?', new Doctrine_Null())
            ->set('bill_ref_page_no', '?', new Doctrine_Null())
            ->set('bill_ref_char', '?', new Doctrine_Null())
            ->set('deleted_at_project_revision_id', '?', $newRevisionId)
            ->set('project_revision_deleted_at', '?', 'NOW()')
            ->set('grand_total', '?', 0)
            ->set('grand_total_quantity', '?', 0)
            ->whereIn('id', $ids)
            ->execute();

        Doctrine_Query::create()
            ->delete('BillItemFormulatedColumn')
            ->whereIn('relation_id', $ids)
            ->execute();

        Doctrine_Query::create()
            ->delete('BillBuildUpRateItem')
            ->whereIn('bill_item_id', $ids)
            ->execute();

        Doctrine_Query::create()
            ->delete('BillBuildUpRateSummary')
            ->whereIn('bill_item_id', $ids)
            ->execute();

        Doctrine_Query::create()
            ->delete('ScheduleOfQuantityBillItemXref')
            ->whereIn('bill_item_id', $ids)
            ->execute();

        Doctrine_Query::create()
            ->delete('BillBuildUpQuantityItem')
            ->whereIn('bill_item_id', $ids)
            ->execute();

        Doctrine_Query::create()
            ->delete('BillBuildUpQuantitySummary')
            ->whereIn('bill_item_id', $ids)
            ->execute();

        Doctrine_Query::create()
            ->delete('BillItemTypeReference')
            ->whereIn('bill_item_id', $ids)
            ->execute();

        EditorBillItemInfoTable::resetEditorBillItems($ids);

        BillItemCostDataItemTable::flushItemLinks($ids);
        BillItemCostDataPrimeCostRateTable::flushItemLinks($ids);
        BillItemCostDataPrimeCostSumItemTable::flushItemLinks($ids);
        BillItemCostDataPrimeCostSumColumnTable::flushItemLinks($ids);

        // get affected page associated with bill item id
        $affectedPages = BillPageItemTable::getAffectedPages($ids);

        if ( count($affectedPages) > 0 )
        {
            BillPageTable::updateHasAddendum($affectedPages, $newRevisionId);
        }

        return $ids;
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        //we need to update any related column from formulated columns before deleting it
        $items = DoctrineQuery::create()->select('*')
            ->from('BillItem i')
            ->andWhere('i.root_id = ?',$this->root_id)
            ->andWhere('i.lft >= ? AND i.rgt <= ?', array($this->lft, $this->rgt))
            ->addOrderBy('i.lft')
            ->execute();

        $affectedItemList = array();

        foreach($items as $item)
        {
            $affectedBillItems = $item->deleteFormulatedColumns($conn);
            $affectedItemList['affected_bill_items'] = $affectedBillItems;

            $affectedBillItemTypeReferences = $item->deleteBillItemTypeReferenceFormulatedColumns($conn);
            $affectedItemList['affected_bill_item_type_references'] = $affectedBillItemTypeReferences;
        }

        if($this->type == BillItem::TYPE_HEADER or $this->type == BillItem::TYPE_HEADER_N)
        {
            Doctrine_Query::create()
                ->delete('BillItem i')
                ->where('i.root_id = ?', $this->root_id)
                ->andWhere('i.element_id = ?', $this->element_id)
                ->andWhere('i.lft > ?', $this->lft)
                ->andWhere('i.rgt < ?', $this->rgt)
                ->execute();
        }
        elseif($this->type == BillItem::TYPE_ITEM_PC_RATE)
        {
            $this->PrimeCostRate->delete($conn);
        }
        elseif($this->type == BillItem::TYPE_ITEM_LUMP_SUM_PERCENT)
        {
            $this->LumpSumPercentage->delete($conn);
        }

        $this->deleteBuildUpRates($conn);
        $this->deleteBuildUpQuantities($conn);

        parent::delete($conn);

        //recalculate left-right values when deleting child nodes
        if(!$this->node->isRoot())
        {
            $first = $this->rgt + 1;
            $delta = $this->lft - $this->rgt - 1;

            Utilities::shiftRightLeftNestedSet(get_class($this), $first, $delta, $this->root_id, $conn);
        }

        return $affectedItemList;
    }

    public function deleteFormulatedColumns(Doctrine_Connection $conn = null)
    {
        $billItemIds = array();
        $affectedItems = array();
        $formulatedColumnIds = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            foreach($this->FormulatedColumns as $formulatedColumn)
            {
                $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                if(is_array($nodes))
                {
                    foreach($nodes as $node)
                    {
                        $referencedNode = Doctrine_Core::getTable('BillItemFormulatedColumn')->find($node['node_from']);

                        if($referencedNode)
                        {
                            $pattern = '/\b(R'.$this->id.')\b/i';
                            $value = preg_replace($pattern, '#REF!', $referencedNode->value);

                            $referencedNode->setFormula($value);

                            $referencedNode->save();

                            $billItemIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                        }
                    }
                }

                $formulatedColumn->delete($conn);

                $formulatedColumnIds[] = $formulatedColumn->id;
            }

            if(count($formulatedColumnIds) > 0)
            {
                //now we can remove all edges after we've updated related nodes
                Doctrine_Query::create()
                    ->delete('BillItemEdge e')
                    ->whereIn('e.node_from', $formulatedColumnIds)
                    ->execute();

                Doctrine_Query::create()
                    ->delete('BillItemEdge e')
                    ->whereIn('e.node_to', $formulatedColumnIds)
                    ->execute();
            }

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
            throw $e;
        }

        $elementMarkupPercentage = $this->Element->getFormulatedColumnByName(BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE, Doctrine_Core::HYDRATE_ARRAY);
        $elementMarkupPercentage = $elementMarkupPercentage ? $elementMarkupPercentage['final_value'] : 0;

        $billMarkupSetting = $this->Element->ProjectStructure->BillMarkupSetting;
        $markupSettingsInfo = array(
            'bill_markup_enabled' => $billMarkupSetting->bill_markup_enabled,
            'bill_markup_percentage' => $billMarkupSetting->bill_markup_percentage,
            'element_markup_enabled' => $billMarkupSetting->element_markup_enabled,
            'element_markup_percentage' => $elementMarkupPercentage,
            'item_markup_enabled' => $billMarkupSetting->item_markup_enabled,
            'rounding_type' => $billMarkupSetting->rounding_type
        );

        foreach($billItemIds as $billItemId)
        {
            $affectedItem = array();
            $affectedBillItem = $this->getTable()->find($billItemId);

            $affectedBillItem->updateBillItemTotalColumns();
            $affectedBillItem->refresh();

            $rateAfterMarkup = BillItemTable::calculateRateAfterMarkupById($affectedBillItem->id, $markupSettingsInfo);

            $affectedItem['id'] = $affectedBillItem->id;
            $affectedItem['grand_total_quantity']  =  $affectedBillItem->grand_total_quantity;
            $affectedItem['grand_total'] = $affectedBillItem->grand_total;
            $affectedItem['rate_after_markup'] = $rateAfterMarkup;
            $affectedItem['grand_total_after_markup'] = $affectedBillItem->getGrandTotalAfterMarkup();

            foreach($affectedBillItem->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedItem[$columnName."-final_value"] = $formulatedColumn->final_value;
                $affectedItem[$columnName."-value"] = $formulatedColumn->value;
                $affectedItem[$columnName.'-has_cell_reference'] = $formulatedColumn->hasCellReference();
                $affectedItem[$columnName.'-has_formula'] = $formulatedColumn->hasFormula();
            }

            array_push($affectedItems, $affectedItem);
            unset($affectedBillItem);
        }

        return $affectedItems;
    }

    public function deleteBillItemTypeReferenceFormulatedColumns(Doctrine_Connection $conn = null)
    {
        $billItemTypeRefIds = array();
        $affectedItems = array();
        $formulatedColumnIds = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            foreach($this->BillItemTypeReferences as $billItemTypeRef)
            {
                foreach($billItemTypeRef->FormulatedColumns as $formulatedColumn)
                {
                    $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                    if(is_array($nodes))
                    {
                        foreach($nodes as $node)
                        {
                            $referencedNode = Doctrine_Core::getTable('BillItemTypeReferenceFormulatedColumn')->find($node['node_from']);

                            if($referencedNode)
                            {
                                $pattern = '/\b(R'.$billItemTypeRef->id.')\b/i';
                                $value = preg_replace($pattern, '#REF!', $referencedNode->value);

                                $referencedNode->setFormula($value);

                                $referencedNode->save();

                                $billItemTypeRefIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                            }
                        }
                    }

                    $formulatedColumn->delete($conn);

                    $formulatedColumnIds[] = $formulatedColumn->id;
                }

                $billItemTypeRef->delete($conn);
            }

            if(count($formulatedColumnIds) > 0)
            {
                //now we can remove all edges after we've updated related nodes
                Doctrine_Query::create()
                    ->delete('BillItemTypeReferenceEdge e')
                    ->whereIn('e.node_from', $formulatedColumnIds)
                    ->execute();

                Doctrine_Query::create()
                    ->delete('BillItemTypeReferenceEdge e')
                    ->whereIn('e.node_to', $formulatedColumnIds)
                    ->execute();
            }

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
            throw $e;
        }

        $elementMarkupPercentage = $this->Element->getFormulatedColumnByName(BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE, Doctrine_Core::HYDRATE_ARRAY);
        $elementMarkupPercentage = $elementMarkupPercentage ? $elementMarkupPercentage['final_value'] : 0;

        foreach($billItemTypeRefIds as $billItemTypeRefId)
        {
            $affectedItem = array();
            $billItemTypeRef = Doctrine_Core::getTable('BillItemTypeReference')->find($billItemTypeRefId);
            $affectedBillItem = $billItemTypeRef->BillItem;
            $affectedBillItem->updateBillItemTotalColumns();
            $affectedBillItem->refresh();

            $column = $billItemTypeRef->BillColumnSetting;
            $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;
            $billMarkupSetting = $column->ProjectStructure->BillMarkupSetting;

            $rateAfterMarkup = BillItemTable::calculateRateAfterMarkupById($affectedBillItem->id, array(
                'bill_markup_enabled' => $billMarkupSetting->bill_markup_enabled,
                'bill_markup_percentage' => $billMarkupSetting->bill_markup_percentage,
                'element_markup_enabled' => $billMarkupSetting->element_markup_enabled,
                'element_markup_percentage' => $elementMarkupPercentage,
                'item_markup_enabled' => $billMarkupSetting->item_markup_enabled,
                'rounding_type' => $billMarkupSetting->rounding_type
            ));

            $affectedItem['id'] = $affectedBillItem->id;
            $affectedItem['grand_total_quantity']  =  $affectedBillItem->grand_total_quantity;
            $affectedItem['grand_total'] = $affectedBillItem->grand_total;
            $affectedItem['grand_total_after_markup'] = $affectedBillItem->getGrandTotalAfterMarkup();

            $quantity = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRefId, $quantityFieldName, Doctrine_Core::HYDRATE_ARRAY);
            $totalPerUnit = $quantity ? $rateAfterMarkup * $quantity['final_value'] : 0;
            $total = $totalPerUnit * $column->quantity;

            $affectedItem[$column->id.'-quantity_per_unit_difference'] = $billItemTypeRef->quantity_per_unit_difference;
            $affectedItem[$column->id.'-total_quantity'] = $billItemTypeRef->total_quantity;
            $affectedItem[$column->id.'-total_per_unit'] = $totalPerUnit;
            $affectedItem[$column->id.'-total'] = $total;

            foreach($billItemTypeRef->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedItem[$column->id.'-'.$columnName.'-final_value'] = $formulatedColumn->final_value;
                $affectedItem[$column->id.'-'.$columnName.'-value'] = $formulatedColumn->value;
            }

            array_push($affectedItems, $affectedItem);
            unset($billItemTypeRef, $formulatedColumn);
        }

        return $affectedItems;
    }

    public function getGrandTotalAfterMarkup()
    {
        $bill = $this->Element->ProjectStructure;
        $grandTotalAfterMarkup = 0;
        $elementMarkupPercentage = $this->Element->getFormulatedColumnByName(BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE, Doctrine_Core::HYDRATE_ARRAY);
        $elementMarkupPercentage = $elementMarkupPercentage ? $elementMarkupPercentage['final_value'] : 0;
        $billMarkupSetting = $bill->BillMarkupSetting;
        $rateAfterMarkup = BillItemTable::calculateRateAfterMarkupById($this->id, array(
            'bill_markup_enabled' => $billMarkupSetting->bill_markup_enabled,
            'bill_markup_percentage' => $billMarkupSetting->bill_markup_percentage,
            'element_markup_enabled' => $billMarkupSetting->element_markup_enabled,
            'element_markup_percentage' => $elementMarkupPercentage,
            'item_markup_enabled' => $billMarkupSetting->item_markup_enabled,
            'rounding_type' => $billMarkupSetting->rounding_type
        ));

        foreach($bill->BillColumnSettings as $column)
        {
            $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

            $billItemTypeRef = BillItemTypeReferenceTable::getByItemIdAndColumnId($this->id, $column->id, Doctrine_Core::HYDRATE_ARRAY);
            if($billItemTypeRef)
            {
                $quantity = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef['id'], $quantityFieldName, Doctrine_Core::HYDRATE_ARRAY);
                $totalPerUnit = $quantity ? $rateAfterMarkup * $quantity['final_value'] : 0;
                $total = $totalPerUnit * $column->quantity;
            }
            else
            {
                $total = 0;
            }

            $grandTotalAfterMarkup += $total;
        }

        return $grandTotalAfterMarkup;
    }

    public function moveTo(BillItem $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($targetItem->node->isRoot())
            {
                $priority       = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
                $this->priority = $priority;
                $this->save();

                if(!$this->node->isRoot() and $this->node->isValidNode())
                {
                    $this->node->makeRoot($this->id);
                    $this->save();
                }

                if(!$lastPosition)
                {
                    $this->updateRootPriority($priority, $this->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $this->node->moveAsNextSiblingOf($targetItem);
                }
                else
                {
                    $this->node->moveAsPrevSiblingOf($targetItem);
                }

                $this->priority = $targetItem->priority;
                $this->save();

                $this->refresh();
            }

            /*
             * Update priority for all nodes under the family to its root priority.
             * We exclude this step for case the target item is root node and $lastPosition is false
             * because the priority already been update by calling updateRootPriority()
             */
            if(($targetItem->node->isRoot() && $lastPosition) or !$targetItem->node->isRoot())
            {
                Doctrine_Query::create()->update('BillItem i')
                    ->set('priority', $this->priority)
                    ->where('i.lft BETWEEN ? AND ?', array($this->lft, $this->rgt))
                    ->andWhere('i.root_id = ?', $this->root_id)
                    ->andWhere('i.priority <> ?', $this->priority)
                    ->andWhere('i.project_revision_deleted_at IS NULL')
                    ->execute();
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyTo(BillItem $targetItem, $lastPosition=false, $currentBQAddendumId = 0)
    {
        $con = $this->getTable()->getConnection();

        $projectRevision = ProjectRevisionTable::getInstance()->find($currentBQAddendumId);
        $billColumnSettings = $this->Element->ProjectStructure->BillColumnSettings->toArray();
        $billColumnSettingWithRemeasurementQtyEnabled = array();

        foreach($billColumnSettings as $billColumnSetting)
        {
            if($billColumnSetting['remeasurement_quantity_enabled'])
            {
                $billColumnSettingWithRemeasurementQtyEnabled[$billColumnSetting['id']] = $billColumnSetting['id'];
            }
        }

        $affectedItemId = 0;

        if($projectRevision->version > 0)
        {
            if($targetItem->type != BillItem::TYPE_HEADER && $targetItem->type != BillItem::TYPE_HEADER_N)
            {
                $affectedItemId = $targetItem->id;
            }
            else
            {
                if($targetItem->node->hasChildren())
                {
                    $firstChild = $this->getTable()
                        ->createQuery('i')
                        ->select('i.id, i.type, i.description')
                        ->where('i.root_id = ?', $this->root_id)
                        ->addWhere('i.lft > ? AND i.rgt < ?', array($targetItem->lft, $targetItem->rgt))
                        ->andWhere('i.type <> ? AND i.type <> ?', array(BillItem::TYPE_HEADER, BillItem::TYPE_HEADER_N))
                        ->orderBy('i.lft ASC')
                        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY)
                        ->limit(1)
                        ->fetchOne();

                    if($firstChild)
                    {
                        $affectedItemId = $firstChild['id'];
                    }
                }
                else
                {
                    if($targetItem->node->isRoot())
                    {
                        $previousItem = $this->getTable()
                            ->createQuery('i')
                            ->select('i.id')
                            ->where('i.id = i.root_id')
                            ->addWhere('i.priority < ?', $targetItem->priority)
                            ->andWhere('i.type <> ? AND i.type <> ?', array(BillItem::TYPE_HEADER, BillItem::TYPE_HEADER_N))
                            ->andWhere('i.element_id = ?', $targetItem->element_id)
                            ->orderBy('i.priority DESC')
                            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY)
                            ->limit(1)
                            ->fetchOne();

                        if($previousItem)
                        {
                            $affectedItemId = $previousItem['id'];
                        }
                        else
                        {
                            $nextItem = $this->getTable()
                                ->createQuery('i')
                                ->select('i.id')
                                ->where('i.id = i.root_id')
                                ->addWhere('i.priority > ?', $targetItem->priority)
                                ->andWhere('i.type <> ? AND i.type <> ?', array(BillItem::TYPE_HEADER, BillItem::TYPE_HEADER_N))
                                ->andWhere('i.element_id = ?', $targetItem->element_id)
                                ->orderBy('i.priority ASC')
                                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY)
                                ->limit(1)
                                ->fetchOne();

                            if($nextItem)
                            {
                                $affectedItemId = $nextItem['id'];
                            }
                        }
                    }
                    else
                    {
                        $sibling = null;

                        if($targetItem->node->hasPrevSibling())
                        {
                            $sibling = $targetItem->node->getPrevSibling();
                        }
                        elseif($targetItem->node->hasNextSibling())
                        {
                            $sibling = $targetItem->node->getNextSibling();
                        }

                        if($sibling && $sibling->type != BillItem::TYPE_HEADER && $sibling->type != BillItem::TYPE_HEADER_N)
                        {
                            $affectedItemId = $sibling->id;
                        }
                    }
                }
            }
        }

        try
        {
            $con->beginTransaction();

            if($projectRevision->version > 0 and $affectedItemId == 0)
            {
                throw new Exception("Cannot copy addendum to the target item");
            }

            if($this->node->hasChildren())
            {
                $children = $this->getTable()
                    ->createQuery('i')
                    ->select('i.id, i.bill_ref, i.description, i.grand_total_quantity, i.note, i.uom_id, i.element_id, i.bq_library_item_id, i.type, i.level')
                    ->where('i.root_id = ?', $this->root_id)
                    ->addWhere('i.lft > ? AND i.rgt < ?', array($this->lft, $this->rgt))
                    ->orderBy('i.lft ASC')
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY)
                    ->execute();
            }
            else
            {
                $children = false;
            }

            $cloneItem                      = new BillItem();

            $cloneItem->description         = $this->description;
            $cloneItem->note                = $this->note;
            $cloneItem->bill_ref            = $this->bill_ref;
            $cloneItem->type                = $this->type;
            $cloneItem->element_id          = $this->element_id;
            $cloneItem->uom_id              = $this->uom_id;
            $cloneItem->bq_library_item_id  = $this->bq_library_item_id;
            $cloneItem->project_revision_id = $currentBQAddendumId;

            if($this->type == BillItem::TYPE_ITEM_LUMP_SUM or $this->type == BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE or $this->type == BillItem::TYPE_ITEM_LUMP_SUM_PERCENT)
            {
                $cloneItem->grand_total_quantity = $this->grand_total_quantity;
            }

            if($targetItem->node->isRoot())
            {
                $priority = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
                $cloneItem->priority = $priority;
                $cloneItem->save($con);

                $cloneItem->getTable()->getTree()->createRoot($cloneItem);

                if(!$lastPosition)
                {
                    $this->updateRootPriority($priority, $cloneItem->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $cloneItem->node->insertAsNextSiblingOf($targetItem);
                }
                else
                {
                    $cloneItem->node->insertAsPrevSiblingOf($targetItem);
                }

                $cloneItem->priority = $targetItem->priority;
                $cloneItem->save($con);
            }

            $cloneItem->refresh();

            if($projectRevision->version > 0 and $affectedItemId > 0)
            {
                BillPageItemTable::updateAffectedPageItem($affectedItemId, $cloneItem, $currentBQAddendumId);
            }

            array_push($this->itemContainerAfterCopy, array(
                'id' => $cloneItem->id,
                'origin' => $this->id
            ));

            if($children)
            {
                $this->_loadNestedSetData($children, $this, $cloneItem, $billColumnSettings, $projectRevision->version, $currentBQAddendumId, $affectedItemId);
            }

            if($cloneItem->type != BillItem::TYPE_HEADER and $cloneItem->type != BillItem::TYPE_HEADER_N and
                $cloneItem->type != BillItem::TYPE_NOID and $cloneItem->type != BillItem::TYPE_ITEM_LUMP_SUM and
                $cloneItem->type != BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE and $cloneItem->type != BillItem::TYPE_ITEM_LUMP_SUM_PERCENT)
            {
                switch($cloneItem->type)
                {
                    case BillItem::TYPE_ITEM_PC_RATE:
                        $cloneItem->copyPrimeCostRateFromBillItem($this);
                        break;
                    default:
                        $cloneItem->copyBuildUpRatesFromItem($this);
                }

                $cloneItem->copyFormulatedColumnsFromItem($this, $this);
            }

            // insert default empty row for item-type LS%
            if ( $cloneItem->type == BillItem::TYPE_ITEM_LUMP_SUM_PERCENT )
            {
                BillItemLumpSumPercentageTable::insertDefaultEmptyRow($cloneItem);
            }

            $this->updateItemRowLinkingAfterCopy();

            $con->commit();

            $cloneItem->refresh(true);

            return $cloneItem;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyQuantityCellFromItem($originBillItemTypeRefId, $targetBillColumnSettingId, $type)
    {
        $columnName = $type == BillItem::COPY_QUANTITY_CELL_ORIGINAL ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

        $originFormulatedColumn = BillItemTypeReferenceFormulatedColumnTable::getInstance()->getByRelationIdAndColumnName($originBillItemTypeRefId, $columnName);

        $targetBillItemTypeRef = $this->getBillItemTypeReferenceByColumnSettingId($targetBillColumnSettingId);

        if(!$targetBillItemTypeRef)
        {
            $targetBillItemTypeRef = new BillItemTypeReference();
            $targetBillItemTypeRef->bill_item_id = $this->id;
            $targetBillItemTypeRef->bill_column_setting_id = $targetBillColumnSettingId;
            $targetBillItemTypeRef->save();
        }

        $billBuildUpQuantityType = $type == BillItem::COPY_QUANTITY_CELL_ORIGINAL ? BillBuildUpQuantityItem::QUANTITY_PER_UNIT_ORIGINAL : BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT;

        BillItemTable::deleteBuildUpQuantityByItemIdAndColumnSettingId($this->id, $targetBillColumnSettingId, $billBuildUpQuantityType);

        $targetBillColumnSetting = BillColumnSettingTable::getInstance()->find($targetBillColumnSettingId);

        $buildUpSummaryFinalValue = $this->copyBuildUpQuantitiesFromItem($originFormulatedColumn->BillItemTypeReference->BillItem, $originFormulatedColumn->BillItemTypeReference, $targetBillColumnSetting, $billBuildUpQuantityType, $billBuildUpQuantityType, true);

        if($buildUpSummaryFinalValue)
        {
            $targetFormulatedColumn = BillItemTypeReferenceFormulatedColumnTable::getInstance()->getByRelationIdAndColumnName($targetBillItemTypeRef->id, $columnName);

            $targetFormulatedColumn->value = $buildUpSummaryFinalValue;
            $targetFormulatedColumn->final_value = $buildUpSummaryFinalValue;

            $targetFormulatedColumn->linked = $originFormulatedColumn->linked;
            $targetFormulatedColumn->has_build_up = $originFormulatedColumn->has_build_up;

            $targetFormulatedColumn->save();
        }
        else
        {
            $targetBillItemTypeRef->copyFormulatedColumnsFromBillItemTypeReference($originFormulatedColumn->BillItemTypeReference, $columnName);

            if($targetBillItemTypeRef->BillItem->uom_id == 0)
            {
                $targetBillItemTypeRef->BillItem->uom_id = $originFormulatedColumn->BillItemTypeReference->BillItem->uom_id;
                $targetBillItemTypeRef->BillItem->save();
            }
        }
    }

    public function copyRateCellFromItem(BillItem $item)
    {
        //we cannot copy rate from a different item's type
        if($this->type == BillItem::TYPE_ITEM_PC_RATE && $item->type != BillItem::TYPE_ITEM_PC_RATE or $this->type != BillItem::TYPE_ITEM_PC_RATE && $item->type == BillItem::TYPE_ITEM_PC_RATE)
        {
            return;
        }

        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($this->type != BillItem::TYPE_HEADER && $this->type != BillItem::TYPE_HEADER_N && $this->type != BillItem::TYPE_NOID)
            {
                if($this->hasBuildUpRates())
                {
                    $this->deleteBuildUpRates($con);
                }

                $this->copyFormulatedColumnsFromItem($item, $this);
                $this->copyBuildUpRatesFromItem($item);

                $this->updateItemRowLinkingAfterCopy();

                if($this->type == BillItem::TYPE_ITEM_PC_RATE)
                {
                    $this->copyPrimeCostRateFromBillItem($item);
                }

                if($this->type == BillItem::TYPE_ITEM_LUMP_SUM_PERCENT)
                {
                    $this->copyLumpSumPercentageFromBillItem($item);
                }

                $con->commit();
            }
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function indent()
    {
        $indented = false;
        $previousRoot = $this->getPreviousRoot();

        if($this->node->isRoot() and $previousRoot and ($previousRoot->type == BillItem::TYPE_HEADER or $previousRoot->type == BillItem::TYPE_HEADER_N))
        {
            $this->node->moveAsLastChildOf($previousRoot);
            $this->refresh();

            $pdo = $this->getTable()->getConnection()->getDbh();

            $stmt = $pdo->prepare("UPDATE ".$this->getTable()->getTableName()." SET priority = ".$previousRoot->priority."
            WHERE root_id = ".$previousRoot->root_id." AND priority <> ".$previousRoot->priority."
            AND element_id = ".$this->element_id." AND deleted_at IS NULL AND project_revision_deleted_at IS NULL");

            $stmt->execute();

            $indented = true;
        }
        else if(!$this->node->isRoot() and $this->node->hasPrevSibling() and ($this->node->getPrevSibling()->type == BillItem::TYPE_HEADER or $this->node->getPrevSibling()->type == BillItem::TYPE_HEADER_N))
        {
            $this->node->moveAsLastChildOf($this->node->getPrevSibling());

            $this->refresh();

            $indented = true;
        }

        return $indented;
    }

    public function outdent()
    {
        if(!$this->node->isRoot() and (($this->type == BillItem::TYPE_HEADER or $this->type == BillItem::TYPE_HEADER_N) or ($this->type != BillItem::TYPE_HEADER and $this->type != BillItem::TYPE_HEADER_N and !$this->node->hasNextSibling())))
        {
            $parent = $this->node->getParent();

            if(!$parent || !$parent->node)
            {
                return false;
            }
            
            $siblings = $this->getTable()
                ->createQuery('i')
                ->select('i.id')
                ->where('i.root_id = ?',$this->root_id)
                ->andWhere('i.level = ?', $this->level)
                ->andWhere('i.lft BETWEEN ? AND ?', array($parent->lft, $parent->rgt))
                ->andWhere('i.lft > ?', $this->rgt)
                ->addOrderBy('i.lft ASC')
                ->execute();

            foreach($siblings as $sibling)
            {
                $sibling->node->moveAsLastChildOf($this);

                $this->refresh();
            }

            unset($siblings);

            if(!$parent->node->isRoot())
            {
                $this->node->moveAsNextSiblingOf($parent);
            }
            else
            {
                $this->node->makeRoot($this->id);

                parent::save();

                $this->priority = $parent->priority + 1;

                $this->save();

                $this->updateRootPriority($parent->priority + 1, $this->id);
            }

            $this->refresh();

            return true;
        }
        else
        {
            return false;
        }
    }

    public function getPreviousRoot()
    {
        $rootId = $this->root_id > 0 ? $this->root_id : $this->id;
        $root = $this->getTable()->find($rootId);

        return $this->getTable()
            ->createQuery('i')
            ->select('i.id')
            ->where('i.root_id = i.id')
            ->addWhere('i.element_id = ?', $this->element_id)
            ->addWhere('i.priority < ?', $root->priority)
            ->orderBy('i.priority DESC')
            ->limit(1)
            ->fetchOne();
    }

    public function updateRootPriority($priority, $excludeId=null)
    {
        BillItemTable::updateRootPriority($priority, $this->element_id, $excludeId);
    }

    private function _loadNestedSetData(Array $nestedSetData, BillItem $containerScope, BillItem $parent, Array $billColumnSettings, $projectRevisionVersion = 0, $currentBQAddendumId = 0, $affectedItemId = 0)
    {
        $nestedSetData = array_reverse($nestedSetData, true);

        foreach($nestedSetData as $nestedSet)
        {
            $children = array();
            $originBillItem = $this->getTable()->find($nestedSet['id']);
            unset($nestedSet['id']);

            if($nestedSet['type'] != BillItem::TYPE_ITEM_LUMP_SUM and $nestedSet['type'] != BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE and $nestedSet['type'] != BillItem::TYPE_ITEM_LUMP_SUM_PERCENT)
            {
                unset($nestedSet['grand_total_quantity']);
            }

            if(array_key_exists('__children', $nestedSet))
            {
                $children = (array) $nestedSet['__children'];
                unset($nestedSet['__children']);
            }

            $obj = new BillItem();

            foreach($nestedSet as $key => $value)
            {
                $func = 'set' . Doctrine_Inflector::classify($key);
                $obj->$func($value);
            }

            $obj->project_revision_id = $currentBQAddendumId;

            $parent->node->addChild($obj);

            $obj->priority = $parent->priority;
            $obj->save();

            if($projectRevisionVersion > 0 && $affectedItemId > 0)
            {
                BillPageItemTable::updateAffectedPageItem($affectedItemId, $obj, $currentBQAddendumId);
            }

            array_push($containerScope->itemContainerAfterCopy, array(
                'id' => $obj->id,
                'origin' => $originBillItem->id
            ));

            if($obj->type != BillItem::TYPE_HEADER and $obj->type != BillItem::TYPE_HEADER_N and
                $obj->type != BillItem::TYPE_NOID and $obj->type != BillItem::TYPE_ITEM_LUMP_SUM and
                    $obj->type != BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE and $obj->type != BillItem::TYPE_ITEM_LUMP_SUM_PERCENT)
            {
                switch($obj->type)
                {
                    case BillItem::TYPE_ITEM_PC_RATE:
                        $obj->copyPrimeCostRateFromBillItem($originBillItem);
                        break;
                    default:
                        $obj->copyBuildUpRatesFromItem($originBillItem);
                }

                $obj->copyFormulatedColumnsFromItem($originBillItem, $containerScope);
            }

            // insert default empty row for item-type LS%
            if ( $obj->type == BillItem::TYPE_ITEM_LUMP_SUM_PERCENT )
            {
                BillItemLumpSumPercentageTable::insertDefaultEmptyRow($obj);
            }

            if(is_array($children) and !empty($children))
            {
                $this->_loadNestedSetData($children, $containerScope, $obj, $billColumnSettings, $projectRevisionVersion, $currentBQAddendumId, $affectedItemId);
            }
        }
    }

    public function calculateBuildUpTotalByResourceId($resourceId)
    {
        $result = DoctrineQuery::create()->select('COALESCE(SUM(b.line_total), 0) as total')
            ->from('BillBuildUpRateItem b')
            ->where('b.bill_item_id = ?', $this->id)
            ->andWhere('b.build_up_rate_resource_id = ?', $resourceId)
            ->andWhere('b.deleted_at IS NULL')
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $result['total'];
    }

    public function postSave($event)
    {
        if($this->deleted_at == NULL)
        {
            if($this->type != BillItem::TYPE_HEADER and $this->type != BillItem::TYPE_HEADER_N and $this->type != BillItem::TYPE_NOID and !$this->getFormulatedColumnByName(BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE))
            {
                $markupPercentage = new BillItemFormulatedColumn();
                $markupPercentage->column_name = BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE;
                $markupPercentage->relation_id = $this->id;
                $markupPercentage->save();
            }

            foreach($this->Element->ProjectStructure->BillColumnSettings as $billColumnSetting)
            {
                if( ! BillItemTypeReferenceTable::getByItemIdAndColumnId($this->id, $billColumnSetting->id) )
                {
                    $billItemTypeRef                         = new BillItemTypeReference();
                    $billItemTypeRef->bill_item_id           = $this->id;
                    $billItemTypeRef->bill_column_setting_id = $billColumnSetting->id;
                    $billItemTypeRef->save();

                    $billItemTypeRef->refresh();
                }
            }

            $this->refreshRelated('BillItemTypeReferences');

            /*
            * Create billItemTypeReference if empty since we need to set default quantity to 1
            */
            if($this->type == BillItem::TYPE_ITEM_LUMP_SUM or $this->type == BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE or $this->type == BillItem::TYPE_ITEM_LUMP_SUM_PERCENT)
            {
                foreach($this->BillItemTypeReferences as $billItemTypeRef)
                {
                    $formulatedColumn = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef->id, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT);

                    if(!$formulatedColumn or $formulatedColumn->final_value != 1)
                    {
                        $this->setTypeFormulatedColumn($billItemTypeRef, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT, 1);
                    }

                    if($billItemTypeRef->BillColumnSetting->remeasurement_quantity_enabled)
                    {
                        $formulatedColumn = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef->id, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT);
                        if(!$formulatedColumn or $formulatedColumn->final_value != 1)
                        {
                            $this->setTypeFormulatedColumn($billItemTypeRef, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT, 1);
                        }
                    }

                    unset($billItemTypeRef);
                }
            }
        }

        return parent::postSave($event);
    }

    public function importResourceItems(Array $resourceItemIds, BillBuildUpRateResource $resource)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();
        $buildUpRateItems = array();

        if(count($resourceItemIds) == 0)
            return $buildUpRateItems;

        $results = DoctrineQuery::create()->select('i.id, i.resource_item_library_id')
            ->from('BillBuildUpRateItem i')
            ->where('i.bill_item_id = ?', $this->id)
            ->andWhere('i.build_up_rate_resource_id = ?', $resource->id)
            ->andWhereIn('i.resource_item_library_id', $resourceItemIds)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->execute();

        foreach($results as $result)
        {
            //if resource already linked to build up, unset resource id from array
            if(($key = array_search($result['resource_item_library_id'], $resourceItemIds)) !== false) {
                unset($resourceItemIds[$key]);
            }
        }

        $existingTradeLibraryIds = null;

        if(count($resourceItemIds) > 0)
        {
            $implodedResourceItemIds = implode(',', $resourceItemIds);

            // only select work item to be imported into build up
            $stmt = $pdo->prepare("SELECT i.id, i.description, i.uom_id, i.priority, i.lft, i.level FROM
            ".ResourceItemTable::getInstance()->getTableName()." AS i
            WHERE i.id IN (".$implodedResourceItemIds.") AND i.type = ".ResourceItem::TYPE_WORK_ITEM." AND i.deleted_at IS NULL
            ORDER BY i.priority, i.lft, i.level ASC");

            $stmt->execute();

            $resourceItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

            /*
             * Get resource trade from resource items. It should returns one resource trade since from import resource items action
             * we only select resource items per trade when importing it into build up rate
             */
            $stmt = $pdo->prepare("SELECT t.id, t.description, t.priority FROM
            ".ResourceTradeTable::getInstance()->getTableName()." AS t JOIN
            ".ResourceItemTable::getInstance()->getTableName()." AS i ON i.resource_trade_id = t.id
            WHERE i.id IN (".$implodedResourceItemIds.") AND i.deleted_at IS NULL AND t.deleted_at IS NULL");

            $stmt->execute();

            $resourceTrade = $stmt->fetch(PDO::FETCH_ASSOC);

            if(!$trade = BillBuildUpRateResourceTradeTable::getByTradeLibraryIdAndBillItemId($resourceTrade['id'], $this->id))
            {
                $trade = new BillBuildUpRateResourceTrade();
                $trade->description = $resourceTrade['description'];
                $trade->priority = $resourceTrade['priority'];
                $trade->bill_item_id = $this->id;
                $trade->build_up_rate_resource_id = $resource->id;
                $trade->resource_trade_library_id = $resourceTrade['id'];
                $trade->save();
            }

            if($trade)
            {
                $priority = DoctrineQuery::create()->select('i.id, i.description, i.uom_id, i.priority')
                    ->from('BillBuildUpRateItem i')
                    ->where('i.bill_item_id = ?', $this->id)
                    ->andWhere('i.build_up_rate_resource_id = ?', $resource->id)
                    ->orderBy('i.priority DESC')
                    ->limit(1)
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                    ->fetchOne();

                $priority = $priority ? $priority['priority']+1 : 0;

                foreach($resourceItems as $item)
                {
                    $buildUpRateItem = new BillBuildUpRateItem();
                    $buildUpRateItem->bill_item_id = $this->id;
                    $buildUpRateItem->description = $item['description'];
                    $buildUpRateItem->build_up_rate_resource_id = $resource->id;
                    $buildUpRateItem->build_up_rate_resource_trade_id = $trade->id;
                    $buildUpRateItem->resource_item_library_id = $item['id'];
                    $buildUpRateItem->uom_id = $item['uom_id'];
                    $buildUpRateItem->priority = $priority;

                    $buildUpRateItem->save();

                    $columns = array(
                        BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT,
                        BillBuildUpRateItem::FORMULATED_COLUMN_RATE,
                        BillBuildUpRateItem::FORMULATED_COLUMN_WASTAGE
                    );

                    foreach($columns as $column)
                    {
                        $formulatedColumn = new BillBuildUpRateFormulatedColumn();
                        $formulatedColumn->relation_id = $buildUpRateItem->id;
                        $formulatedColumn->column_name = $column;
                        $formulatedColumn->linked = true;

                        $resourceItemFormulatedColumn = DoctrineQuery::create()->select('c.id, c.column_name, c.final_value')
                            ->from('ResourceItemFormulatedColumn c')
                            ->where('c.relation_id = ?', $item['id'])
                            ->andWhere('c.column_name = ?', $column)
                            ->limit(1)
                            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                            ->fetchOne();

                        if($resourceItemFormulatedColumn)
                        {
                            $formulatedColumn->value = $resourceItemFormulatedColumn['final_value'];
                            $formulatedColumn->final_value = $resourceItemFormulatedColumn['final_value'];
                        }

                        $formulatedColumn->save();

                        unset($formulatedColumn);
                    }

                    $priority++;

                    array_push($buildUpRateItems, $buildUpRateItem);
                }
            }
        }

        return $buildUpRateItems;
    }

    public function setTypeFormulatedColumn($billItemTypeRef, $columnName, $valueStr, Doctrine_Connection $con = null)
    {
        $matched = preg_match_all('/r[\d{1,}]+/i', $valueStr, $matches, PREG_PATTERN_ORDER);

        if($matched)
        {
            foreach($matches[0] as $match)
            {
                $billItemId = str_ireplace('r', '', $match);
                $billItem = BillItemTable::getInstance()->find($billItemId);
                $itemRef = $billItem->getBillItemTypeReferenceByColumnSettingId($billItemTypeRef->bill_column_setting_id, Doctrine_Core::HYDRATE_ARRAY);
                $val =  $itemRef ? 'R'.$itemRef['id'] : "#REF!";
                $valueStr = str_replace($match, $val, $valueStr);
            }
        }

        $formulatedColumn = BillItemTypeReferenceFormulatedColumnTable::getInstance()->getByRelationIdAndColumnName($billItemTypeRef->id, $columnName);

        $formulatedColumn->setFormula($valueStr);

        $formulatedColumn->linked = false;
        $formulatedColumn->has_build_up = false;

        $formulatedColumn->save($con);

        $formulatedColumn->refresh();
    }

    public function getBillItemTypeReferenceByColumnSettingId($columnSettingId, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('r.*')
            ->from('BillItemTypeReference r')
            ->andWhere('r.bill_item_id = ?', $this->id)
            ->addWhere('r.bill_column_setting_id = ?', $columnSettingId)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public function updateBillItemTotalColumns()
    {
        BillItemTable::updateBillItemTotalColumns($this->id, $this->element_id);

        $this->refresh();
    }

    /*
    * This method is use when updating type column in bill item.
    * We need to remove all information from it's formulated column and uom if the type is not work item
    * since only work item will have value in formulated column and uom.
    */
    public function updateType($type)
    {
        if(in_array($type, self::$noMarkupItemTypes))
        {
            $this->removeMarkup();
            $this->Element->removeMarkup();
        }

        $affectedItemList = array();
        if($type == self::TYPE_HEADER or $type == self::TYPE_HEADER_N or $type == self::TYPE_NOID)
        {
            $affectedBillItems = $this->deleteFormulatedColumns();
            $affectedItemList['affected_bill_items'] = $affectedBillItems;

            $affectedBillItemTypeReferences = $this->deleteBillItemTypeReferenceFormulatedColumns();
            $affectedItemList['affected_bill_item_type_references'] = $affectedBillItemTypeReferences;

            $this->deleteBuildUpRates();
            $this->deleteBuildUpQuantities();

            $this->resetBillItemTypeReferences();

            $this->uom_id = NULL;
        }
        elseif($type == self::TYPE_ITEM_RATE_ONLY)
        {
            $affectedBillItemTypeReferences = $this->deleteBillItemTypeReferenceFormulatedColumns();
            $affectedItemList['affected_bill_item_type_references'] = $affectedBillItemTypeReferences;

            $this->deleteBuildUpQuantities();

            $this->resetBillItemTypeReferences();
        }
        elseif($type == self::TYPE_ITEM_PC_RATE)
        {
            $affectedBillItems = $this->deleteFormulatedColumns();
            $affectedItemList['affected_bill_items'] = $affectedBillItems;

            $this->deleteBuildUpRates();

            $this->refreshRelated('BillItemTypeReferences');
        }
        elseif($type == self::TYPE_ITEM_LUMP_SUM or $type == self::TYPE_ITEM_LUMP_SUM_EXCLUDE)
        {
            $affectedItemList['affected_bill_item_type_references'] = array();

            /*
             * Create billItemTypeReference if empty since we need to set default quantity to 1
             */
            if($this->BillItemTypeReferences->count() == 0)
            {
                $bill = $this->Element->ProjectStructure;

                foreach($bill->BillColumnSettings as $billColumnSetting)
                {
                    $billItemTypeRef = new BillItemTypeReference();
                    $billItemTypeRef->bill_item_id = $this->id;
                    $billItemTypeRef->bill_column_setting_id = $billColumnSetting->id;
                    $billItemTypeRef->save();
                }

                $this->refreshRelated('BillItemTypeReferences');
            }

            $elementMarkupPercentage = $this->Element->getFormulatedColumnByName(BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE, Doctrine_Core::HYDRATE_ARRAY);
            $elementMarkupPercentage = $elementMarkupPercentage ? $elementMarkupPercentage['final_value'] : 0;

            $billMarkupSetting = $this->Element->ProjectStructure->BillMarkupSetting;

            $markupSettingsInfo = array(
                'bill_markup_enabled' => $billMarkupSetting->bill_markup_enabled,
                'bill_markup_percentage' => $billMarkupSetting->bill_markup_percentage,
                'element_markup_enabled' => $billMarkupSetting->element_markup_enabled,
                'element_markup_percentage' => $elementMarkupPercentage,
                'item_markup_enabled' => $billMarkupSetting->item_markup_enabled,
                'rounding_type' => $billMarkupSetting->rounding_type
            );

            foreach($this->BillItemTypeReferences as $billItemTypeRef)
            {
                $this->setTypeFormulatedColumn($billItemTypeRef, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT, 1);

                $formulatedColumn = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef->id, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT);

                $referencedNodes = $formulatedColumn->getNodesRelatedByColumnName(BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT);

                $column = $billItemTypeRef->BillColumnSetting;
                $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                foreach($referencedNodes as $referencedNode)
                {
                    if($node = Doctrine_Core::getTable('BillItemTypeReferenceFormulatedColumn')->find($referencedNode['node_from']))
                    {
                        $billItemTypeRefNode = $node->BillItemTypeReference;
                        $affectedBillItem = $billItemTypeRefNode->BillItem;
                        $affectedBillItem->updateBillItemTotalColumns();
                        $affectedBillItem->refresh();

                        $rateAfterMarkup = BillItemTable::calculateRateAfterMarkupById($affectedBillItem->id, $markupSettingsInfo);

                        $quantity = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef->id, $quantityFieldName, Doctrine_Core::HYDRATE_ARRAY);
                        $totalPerUnit = $quantity ? $rateAfterMarkup * $quantity['final_value'] : 0;
                        $total = $totalPerUnit * $column->quantity;

                        array_push($affectedItemList['affected_bill_item_type_references'], array(
                            'id' => $billItemTypeRefNode->bill_item_id,
                            $column->id.'-'.BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT.'-final_value' => $node->final_value,
                            $column->id.'-quantity_per_unit_difference' => $billItemTypeRefNode->quantity_per_unit_difference,
                            $column->id.'-total_quantity' => $billItemTypeRefNode->total_quantity,
                            $column->id.'-total_per_unit' => $totalPerUnit,
                            $column->id.'-total' => $total,
                            'grand_total_quantity' => $affectedBillItem->grand_total_quantity,
                            'grand_total' => $affectedBillItem->grand_total,
                            'grand_total_after_markup' => $affectedBillItem->getGrandTotalAfterMarkup()
                        ));
                    }

                    unset($billItemTypeRefNode, $affectedBillItem);
                }

                if($billItemTypeRef->BillColumnSetting->remeasurement_quantity_enabled)
                {
                    $this->setTypeFormulatedColumn($billItemTypeRef, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT, 1);

                    $formulatedColumn = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef->id, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT);

                    $referencedNodes = $formulatedColumn->getNodesRelatedByColumnName(BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT);

                    $column = $billItemTypeRef->BillColumnSetting;
                    $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                    foreach($referencedNodes as $referencedNode)
                    {
                        if($node = Doctrine_Core::getTable('BillItemTypeReferenceFormulatedColumn')->find($referencedNode['node_from']))
                        {
                            $billItemTypeRefNode = $node->BillItemTypeReference;
                            $affectedBillItem = $billItemTypeRefNode->BillItem;
                            $affectedBillItem->updateBillItemTotalColumns();

                            $rateAfterMarkup = BillItemTable::calculateRateAfterMarkupById($affectedBillItem->id, $markupSettingsInfo);

                            $quantity = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef->id, $quantityFieldName, Doctrine_Core::HYDRATE_ARRAY);
                            $totalPerUnit = $quantity ? $rateAfterMarkup * $quantity['final_value'] : 0;
                            $total = $totalPerUnit * $column->quantity;

                            array_push($affectedItemList['affected_bill_item_type_references'], array(
                                'id' => $billItemTypeRefNode->bill_item_id,
                                $column->id.'-'.BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT.'-final_value' => $node->final_value,
                                $column->id.'-quantity_per_unit_difference' => $billItemTypeRefNode->quantity_per_unit_difference,
                                $column->id.'-total_quantity' => $billItemTypeRefNode->total_quantity,
                                $column->id.'-total_per_unit' => $totalPerUnit,
                                $column->id.'-total' => $total,
                                'grand_total_quantity' => $affectedBillItem->grand_total_quantity,
                                'grand_total' => $affectedBillItem->grand_total,
                                'grand_total_after_markup' => $affectedBillItem->getGrandTotalAfterMarkup()
                            ));
                        }

                        unset($billItemTypeRefNode, $affectedBillItem);
                    }
                }
            }

            $this->deleteBuildUpQuantities();
        }
        elseif($type == self::TYPE_ITEM_LUMP_SUM_PERCENT)
        {
            $affectedBillItems = $this->deleteFormulatedColumns();
            $affectedItemList['affected_bill_items'] = $affectedBillItems;
            $affectedItemList['affected_bill_item_type_references'] = array();

            /*
             * Create billItemTypeReference if empty since we need to set default quantity to 1
             */
            if($this->BillItemTypeReferences->count() == 0)
            {
                foreach($this->Element->ProjectStructure->BillColumnSettings as $billColumnSetting)
                {
                    $billItemTypeRef = new BillItemTypeReference();
                    $billItemTypeRef->bill_item_id = $this->id;
                    $billItemTypeRef->bill_column_setting_id = $billColumnSetting->id;
                    $billItemTypeRef->save();
                }

                $this->refreshRelated('BillItemTypeReferences');
            }

            $elementMarkupPercentage = $this->Element->getFormulatedColumnByName(BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE, Doctrine_Core::HYDRATE_ARRAY);
            $elementMarkupPercentage = $elementMarkupPercentage ? $elementMarkupPercentage['final_value'] : 0;

            $billMarkupSetting = $this->Element->ProjectStructure->BillMarkupSetting;

            $markupSettingsInfo = array(
                'bill_markup_enabled' => $billMarkupSetting->bill_markup_enabled,
                'bill_markup_percentage' => $billMarkupSetting->bill_markup_percentage,
                'element_markup_enabled' => $billMarkupSetting->element_markup_enabled,
                'element_markup_percentage' => $elementMarkupPercentage,
                'item_markup_enabled' => $billMarkupSetting->item_markup_enabled,
                'rounding_type' => $billMarkupSetting->rounding_type
            );

            foreach($this->BillItemTypeReferences as $billItemTypeRef)
            {
                $this->setTypeFormulatedColumn($billItemTypeRef, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT, 1);

                $formulatedColumn = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef->id, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT);

                $referencedNodes = $formulatedColumn->getNodesRelatedByColumnName(BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT);

                $column = $billItemTypeRef->BillColumnSetting;
                $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                foreach($referencedNodes as $referencedNode)
                {
                    if($node = Doctrine_Core::getTable('BillItemTypeReferenceFormulatedColumn')->find($referencedNode['node_from']))
                    {
                        $billItemTypeRefNode = $node->BillItemTypeReference;
                        $affectedBillItem = $billItemTypeRefNode->BillItem;
                        $affectedBillItem->updateBillItemTotalColumns();
                        $affectedBillItem->refresh();

                        $rateAfterMarkup = BillItemTable::calculateRateAfterMarkupById($affectedBillItem->id, $markupSettingsInfo);

                        $quantity = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef->id, $quantityFieldName, Doctrine_Core::HYDRATE_ARRAY);
                        $totalPerUnit = $quantity ? $rateAfterMarkup * $quantity['final_value'] : 0;
                        $total = $totalPerUnit * $column->quantity;

                        array_push($affectedItemList['affected_bill_item_type_references'], array(
                            'id' => $billItemTypeRefNode->bill_item_id,
                            $column->id.'-'.BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT.'-final_value' => $node->final_value,
                            $column->id.'-quantity_per_unit_difference' => $billItemTypeRefNode->quantity_per_unit_difference,
                            $column->id.'-total_quantity' => $billItemTypeRefNode->total_quantity,
                            $column->id.'-total_per_unit' => $totalPerUnit,
                            $column->id.'-total' => $total,
                            'grand_total_quantity' => $affectedBillItem->grand_total_quantity,
                            'grand_total' => $affectedBillItem->grand_total,
                            'grand_total_after_markup' => $affectedBillItem->getGrandTotalAfterMarkup()

                        ));
                    }

                    unset($billItemTypeRefNode, $affectedBillItem);
                }

                if($billItemTypeRef->BillColumnSetting->remeasurement_quantity_enabled)
                {
                    $this->setTypeFormulatedColumn($billItemTypeRef, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT, 1);

                    $formulatedColumn = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef->id, BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT);

                    $referencedNodes = $formulatedColumn->getNodesRelatedByColumnName(BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT);

                    $column = $billItemTypeRef->BillColumnSetting;
                    $quantityFieldName = $column->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                    foreach($referencedNodes as $referencedNode)
                    {
                        if($node = Doctrine_Core::getTable('BillItemTypeReferenceFormulatedColumn')->find($referencedNode['node_from']))
                        {
                            $billItemTypeRefNode = $node->BillItemTypeReference;
                            $affectedBillItem = $billItemTypeRefNode->BillItem;
                            $affectedBillItem->updateBillItemTotalColumns();

                            $rateAfterMarkup = BillItemTable::calculateRateAfterMarkupById($affectedBillItem->id, $markupSettingsInfo);

                            $quantity = BillItemTypeReferenceTable::getFormulatedColumnByRelationIdAndColumnName($billItemTypeRef->id, $quantityFieldName, Doctrine_Core::HYDRATE_ARRAY);
                            $totalPerUnit = $quantity ? $rateAfterMarkup * $quantity['final_value'] : 0;
                            $total = $totalPerUnit * $column->quantity;

                            array_push($affectedItemList['affected_bill_item_type_references'], array(
                                'id' => $billItemTypeRefNode->bill_item_id,
                                $column->id.'-'.BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT.'-final_value' => $node->final_value,
                                $column->id.'-quantity_per_unit_difference' => $billItemTypeRefNode->quantity_per_unit_difference,
                                $column->id.'-total_quantity' => $billItemTypeRefNode->total_quantity,
                                $column->id.'-total_per_unit' => $totalPerUnit,
                                $column->id.'-total' => $total,
                                'grand_total_quantity' => $affectedBillItem->grand_total_quantity,
                                'grand_total' => $affectedBillItem->grand_total,
                                'grand_total_after_markup' => $affectedBillItem->getGrandTotalAfterMarkup()
                            ));
                        }

                        unset($billItemTypeRefNode, $affectedBillItem);
                    }
                }
            }

            $this->deleteBuildUpQuantities();
            $this->deleteBuildUpRates();
        }

        if($type != self::TYPE_ITEM_PC_RATE)
        {
            Doctrine_Query::create()
                ->delete('BillItemPrimeCostRate pc')
                ->where('pc.bill_item_id = ?', $this->id)
                ->execute();

            $this->refreshRelated('PrimeCostRate');
        }

        if($type != self::TYPE_ITEM_LUMP_SUM_PERCENT)
        {
            Doctrine_Query::create()
                ->delete('BillItemLumpSumPercentage ls')
                ->where('ls.bill_item_id = ?', $this->id)
                ->execute();

            $this->refreshRelated('LumpSumPercentage');
        }

        $this->type = (integer)$type;

        $this->save();

        return $affectedItemList;
    }
    /*
     * When we change unit of measurement for bill item, we need to flush
     * all build up quantities since information for build up quantity
     * were saved based on dimensions in unit of measurement.
     */
    public function updateUnitOfMeasurement($unitOfMeasurementId)
    {
        if(($this->BuildUpQuantities->count() > 0 or $this->ScheduleOfQuantities->count() > 0) && $this->uom_id != (integer)$unitOfMeasurementId)
        {
            $this->deleteBuildUpQuantities();

            $pdo = $this->getTable()->getConnection()->getDbh();

            $stmt = $pdo->prepare("DELETE FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc WHERE
            fc.relation_id IN (SELECT id FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()." WHERE
            bill_item_id = ".$this->id.")");

            $stmt->execute();

            //reset total amount in bill item type ref
            Doctrine_Query::create()
                ->update('BillItemTypeReference r')
                ->set('r.quantity_per_unit_difference', 0)
                ->set('r.total_quantity', 0)
                ->set('r.grand_total', 0)
                ->set('r.grand_total_after_markup', 0)
                ->where('r.bill_item_id = ?', $this->id)
                ->execute();

            $this->refreshRelated('BillItemTypeReferences');
        }

        $this->uom_id = $unitOfMeasurementId;
    }

    public function deleteBuildUpRates(Doctrine_Connection $conn = null)
    {
        BillItemTable::deleteBuildUpRatesByBillItemId($this->id);
    }

    public function deleteBuildUpQuantities(Doctrine_Connection $conn = null)
    {
        BillItemTable::deleteBuildUpQuantitiesByBillItemId($this->id);
    }

    /*
     * This method is used to reset/zero out amount columns
     */
    public function resetBillItemTypeReferences()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc WHERE
            fc.relation_id IN (SELECT id FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()." WHERE
            bill_item_id = ".$this->id.")");

        $stmt->execute();

        Doctrine_Query::create()
            ->update('BillItemTypeReference r')
            ->set('r.quantity_per_unit_difference', 'NULL')
            ->set('r.total_quantity', 0)
            ->set('r.grand_total', 0)
            ->set('r.grand_total_after_markup', 0)
            ->set('r.include', 'TRUE')
            ->where('r.bill_item_id = ?', $this->id)
            ->execute();

        $this->refreshRelated('BillItemTypeReferences');
    }

    public function getRoot()
    {
        if($this->node->isRoot())
        {
            return $this;
        }
        else
        {
            return $this->getTable()->find($this->root_id);
        }
    }

    public function copyFormulatedColumnsFromItem(BillItem $billItem, BillItem $containerScope)
    {
        if($formulatedColumn = $billItem->getFormulatedColumnByName(BillItem::FORMULATED_COLUMN_RATE))
        {
            $cloneFormulatedColumn = $this->getFormulatedColumnByName(BillItem::FORMULATED_COLUMN_RATE);

            $cloneFormulatedColumn = $cloneFormulatedColumn ? $cloneFormulatedColumn : new BillItemFormulatedColumn();

            $cloneFormulatedColumn->column_name = $formulatedColumn->column_name;
            $cloneFormulatedColumn->linked = $formulatedColumn->linked;
            $cloneFormulatedColumn->has_build_up = $formulatedColumn->has_build_up;
            $cloneFormulatedColumn->schedule_of_rate_item_formulated_column_id = $formulatedColumn->schedule_of_rate_item_formulated_column_id;
            $cloneFormulatedColumn->value = $formulatedColumn->value;
            $cloneFormulatedColumn->final_value = $formulatedColumn->final_value;
            $cloneFormulatedColumn->relation_id = $this->id;
            $cloneFormulatedColumn->save();

            array_push($containerScope->itemFormulatedColumnContainerAfterCopy, array(
                'id' => $cloneFormulatedColumn->id,
                'origin' => $formulatedColumn->id
            ));

            BillItemEdgeTable::getInstance()->getConnection()->fetchAssoc("INSERT INTO ".BillItemEdgeTable::getInstance()->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".BillItemEdgeTable::getInstance()->getTableName()." AS old
                WHERE old.node_from = ".$formulatedColumn->id." AND old.deleted_at IS NULL");
        }
    }

    public function updateItemRowLinkingAfterCopy()
    {
        if(count($this->itemFormulatedColumnContainerAfterCopy) > 0)
        {
            $formulatedColumnIdList = array();
            $formulatedColumnOriginList = array();

            foreach($this->itemFormulatedColumnContainerAfterCopy as $list)
            {
                array_push($formulatedColumnIdList, $list['id']);
                array_push($formulatedColumnOriginList, $list['origin']);
            }

            $records = DoctrineQuery::create()->select('e.id, e.node_from, e.node_to')
                ->from('BillItemEdge e')
                ->whereIn('e.node_from', $formulatedColumnIdList)
                ->andWhereIn('e.node_to', $formulatedColumnOriginList)
                ->addOrderBy('e.node_from ASC')
                ->execute();

            foreach($records as $record)
            {
                $nodeFrom = $record->NodeFrom;
                if($nodeFrom->hasCellReference())
                {
                    $value = $nodeFrom->value;
                    foreach($this->itemContainerAfterCopy as $list)
                    {
                        $pattern = '/\b(R'.$list['origin'].')\b/i';
                        $value = preg_replace($pattern, 'R'.$list['id'], $value);
                    }
                    $nodeFrom->value = $value;
                    $nodeFrom->save();
                }
                unset($nodeFrom);
            }

            $this->itemFormulatedColumnContainerAfterCopy = array();
            $this->itemContainerAfterCopy = array();
        }
    }

    public function copyBuildUpRatesFromItem(BillItem $billItem)
    {
        if($billItem->hasBuildUpRates())
        {
            $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('BillBuildUpRateItem');

            $buildUpRateResourceIds = array();
            $buildUpRateResourceTradeIds = array();

            foreach($billItem->BuildUpRateResources as $buildUpRateResource)
            {
                $cloneBuildUpRateResource = $buildUpRateResource->copy();
                $cloneBuildUpRateResource->bill_item_id = $this->id;
                $cloneBuildUpRateResource->save();

                $buildUpRateResourceIds[$buildUpRateResource->id] = $cloneBuildUpRateResource->id;

                unset($buildUpRateResource);
            }

            foreach($billItem->BuildUpRateResourceTrades as $resourceTrade)
            {
                $cloneBuildUpRateResourceTrade = $resourceTrade->copy();
                $cloneBuildUpRateResourceTrade->build_up_rate_resource_id = $buildUpRateResourceIds[$resourceTrade->build_up_rate_resource_id];
                $cloneBuildUpRateResourceTrade->bill_item_id = $this->id;
                $cloneBuildUpRateResourceTrade->save();

                $buildUpRateResourceTradeIds[$resourceTrade->id] = $cloneBuildUpRateResourceTrade->id;

                unset($resourceTrade);
            }

            foreach($billItem->BuildUpRateItems as $buildUpRate)
            {
                $cloneBuildUpRate = $buildUpRate->copy();

                $cloneBuildUpRate->bill_item_id = $this->id;
                $cloneBuildUpRate->build_up_rate_resource_id = $buildUpRateResourceIds[$buildUpRate->build_up_rate_resource_id];
                $cloneBuildUpRate->build_up_rate_resource_trade_id = $buildUpRateResourceTradeIds[$buildUpRate->build_up_rate_resource_trade_id];
                $cloneBuildUpRate->save();

                array_push($this->buildUpRatesContainerAfterCopy, array(
                    'id' => $cloneBuildUpRate->id,
                    'origin' => $buildUpRate->id
                ));

                foreach($formulatedColumnConstants as $constant)
                {
                    $formulatedColumn = $buildUpRate->getFormulatedColumnByName($constant);
                    if($formulatedColumn)
                    {
                        $cloneFormulatedColumn = $formulatedColumn->copy();
                        $cloneFormulatedColumn->relation_id = $cloneBuildUpRate->id;
                        $cloneFormulatedColumn->save();

                        array_push($this->buildUpRatesFormulatedColumnContainerAfterCopy, array(
                            'id' => $cloneFormulatedColumn->id,
                            'origin' => $formulatedColumn->id
                        ));

                        BillBuildUpRateEdgeTable::getInstance()->getConnection()->fetchAssoc("INSERT INTO ".BillBuildUpRateEdgeTable::getInstance()->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                        SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".BillBuildUpRateEdgeTable::getInstance()->getTableName()." AS old
                        WHERE old.node_from = ".$formulatedColumn->id." AND old.deleted_at IS NULL");
                    }
                }
            }

            $this->updateBuildUpRatesRowLinkingAfterCopy();

            $billBuildUpSummary = DoctrineQuery::create()->select('s.total_cost, s.markup, s.final_cost, s.apply_conversion_factor, s.conversion_factor_amount, s.conversion_factor_uom_id, s.conversion_factor_operator, s.rounding_type')
                ->from('BillBuildUpRateSummary s')
                ->where('s.bill_item_id = ?', $billItem->id)
                ->limit(1)
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->fetchOne();

            if($billBuildUpSummary)
            {
                $pdo = $this->getTable()->getConnection()->getDbh();
                $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

                $billBuildUpRateSummaryTable = BillBuildUpRateSummaryTable::getInstance();

                $applyConversionFactor = $billBuildUpSummary['apply_conversion_factor'] ? 1 : 0;
                $conversionFactorUomId = $billBuildUpSummary['conversion_factor_uom_id'] > 0 ? $billBuildUpSummary['conversion_factor_uom_id'] : NULL;

                $billBuildUpSummaryCount = DoctrineQuery::create()->select('s.id')
                    ->from('BillBuildUpRateSummary s')
                    ->where('s.bill_item_id = ?', $this->id)
                    ->limit(1)
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                    ->count();

                if($billBuildUpSummaryCount == 0)
                {
                    $sql = "INSERT INTO ".$billBuildUpRateSummaryTable->getTableName()." (bill_item_id, total_cost, markup, final_cost, apply_conversion_factor, conversion_factor_amount, conversion_factor_uom_id, conversion_factor_operator, rounding_type, created_at, updated_at, created_by, updated_by)
                    VALUES (:bill_item_id, :total_cost, :markup, :final_cost, :apply_conversion_factor, :conversion_factor_amount, :conversion_factor_uom_id, :conversion_factor_operator, :rounding_type, NOW(), NOW(), ".$userId.", ".$userId.")";
                }
                else
                {
                    $sql = "UPDATE ".$billBuildUpRateSummaryTable->getTableName()." SET total_cost = :total_cost, markup = :markup, final_cost = :final_cost, apply_conversion_factor = :apply_conversion_factor, conversion_factor_amount = :conversion_factor_amount,
                    conversion_factor_uom_id = :conversion_factor_uom_id, conversion_factor_operator = :conversion_factor_operator, rounding_type = :rounding_type, created_at = NOW(), updated_at = NOW(), created_by = ".$userId.", updated_by = ".$userId." WHERE bill_item_id = :bill_item_id";
                }

                $stmt = $pdo->prepare($sql);

                $stmt->execute(array(
                    'bill_item_id' => $this->id,
                    'total_cost' => $billBuildUpSummary['total_cost'],
                    'markup' => $billBuildUpSummary['markup'],
                    'final_cost' => $billBuildUpSummary['final_cost'],
                    'apply_conversion_factor' => $applyConversionFactor,
                    'conversion_factor_amount' => $billBuildUpSummary['conversion_factor_amount'],
                    'conversion_factor_operator' => $billBuildUpSummary['conversion_factor_operator'],
                    'conversion_factor_uom_id' => $conversionFactorUomId,
                    'rounding_type' => $billBuildUpSummary['rounding_type']
                ));
            }

            return true;
        }

        return false;
    }

    public function updateBuildUpRatesRowLinkingAfterCopy()
    {
        if(count($this->buildUpRatesFormulatedColumnContainerAfterCopy) > 0)
        {
            $formulatedColumnIdList = array();
            $formulatedColumnOriginList = array();

            foreach($this->buildUpRatesFormulatedColumnContainerAfterCopy as $list)
            {
                array_push($formulatedColumnIdList, $list['id']);
                array_push($formulatedColumnOriginList, $list['origin']);
            }

            $records = DoctrineQuery::create()->select('e.id, e.node_from, e.node_to')
                ->from('BillBuildUpRateEdge e')
                ->whereIn('e.node_from', $formulatedColumnIdList)
                ->andWhereIn('e.node_to', $formulatedColumnOriginList)
                ->addOrderBy('e.node_from ASC')
                ->execute();

            foreach($records as $record)
            {
                $nodeFrom = $record->NodeFrom;
                if($nodeFrom->hasCellReference())
                {
                    $value = $nodeFrom->value;
                    foreach($this->buildUpRatesContainerAfterCopy as $buildUpList)
                    {
                        $pattern = '/\b(R'.$buildUpList['origin'].')\b/i';
                        $value = preg_replace($pattern, 'R'.$buildUpList['id'], $value);
                    }

                    $nodeFrom->value = $value;
                    $nodeFrom->save();
                }
            }

            $this->buildUpRatesFormulatedColumnContainerAfterCopy = array();
            $this->buildUpRatesContainerAfterCopy = array();
        }
    }

    public function updateBuildUpQuantitiesRowLinkingAfterCopy()
    {
        if(count($this->buildUpQuantitiesFormulatedColumnContainerAfterCopy) > 0)
        {
            $formulatedColumnIdList = array();
            $formulatedColumnOriginList = array();

            foreach($this->buildUpQuantitiesFormulatedColumnContainerAfterCopy as $list)
            {
                array_push($formulatedColumnIdList, $list['id']);
                array_push($formulatedColumnOriginList, $list['origin']);
            }

            $records = DoctrineQuery::create()->select('e.id, e.node_from, e.node_to')
                ->from('BillBuildUpQuantityEdge e')
                ->whereIn('e.node_from', $formulatedColumnIdList)
                ->andWhereIn('e.node_to', $formulatedColumnOriginList)
                ->addOrderBy('e.node_from ASC')
                ->execute();

            foreach($records as $record)
            {
                $nodeFrom = $record->NodeFrom;
                if($nodeFrom->hasCellReference())
                {
                    $value = $nodeFrom->value;
                    foreach($this->buildUpQuantitiesContainerAfterCopy as $buildUpList)
                    {
                        $pattern = '/\b(R'.$buildUpList['origin'].')\b/i';
                        $value = preg_replace($pattern, 'R'.$buildUpList['id'], $value);
                    }

                    $nodeFrom->value = $value;
                    $nodeFrom->save();
                }
            }

            $this->buildUpQuantitiesFormulatedColumnContainerAfterCopy = array();
            $this->buildUpQuantitiesContainerAfterCopy = array();
        }
    }

    public function copyBuildUpQuantitiesFromItem(BillItem $originBillItem, BillItemTypeReference $originBillItemTypeReference, BillColumnSetting $targetBillColumnSetting, $originType, $targetType, $includeScheduleOfQuantity=false)
    {
        $originBillColumnSetting = $originBillItemTypeReference->BillColumnSetting;

        if($originBillItem->hasBuildUpQuantityByBillColumnSetting($originBillColumnSetting, $originType))
        {
            $buildUpSummary = DoctrineQuery::create()
                ->from('BillBuildUpQuantitySummary s')
                ->where('s.bill_item_id = ?', $this->id)
                ->andWhere('s.bill_column_setting_id = ?', $targetBillColumnSetting->id)
                ->andWhere('s.type = ?', $targetType)
                ->limit(1)
                ->fetchOne();

            $cloneBuildUpQuantitySummary = $buildUpSummary ? $buildUpSummary : new BillBuildUpQuantitySummary();

            $buildUpQuantities = $originBillItem->getBuildUpQuantitiesByBillColumnSetting($originBillColumnSetting, $originType, Doctrine_Core::HYDRATE_ARRAY);

            $dimensions = array();

            if($this->uom_id == 0)
            {
                $this->uom_id = $originBillItem->uom_id;
                $this->save();

                $this->refresh();
            }

            foreach($this->UnitOfMeasurement->Dimensions as $dimension)
            {
                $dimensions[$dimension->id.'-dimension_column'] = $dimension->id;
            }

            foreach($buildUpQuantities as $buildUpQuantity)
            {
                $cloneBuildUpQuantity = new BillBuildUpQuantityItem();
                $cloneBuildUpQuantity->bill_item_id = $this->id;
                $cloneBuildUpQuantity->bill_column_setting_id = $targetBillColumnSetting->id;
                $cloneBuildUpQuantity->description = $buildUpQuantity['description'];
                $cloneBuildUpQuantity->total = $buildUpQuantity['total'];
                $cloneBuildUpQuantity->sign = $buildUpQuantity['sign'];
                $cloneBuildUpQuantity->priority = $buildUpQuantity['priority'];
                $cloneBuildUpQuantity->type = $targetType;

                $cloneBuildUpQuantity->save();

                array_push($this->buildUpQuantitiesContainerAfterCopy, array(
                    'id' => $cloneBuildUpQuantity->id,
                    'origin' => $buildUpQuantity['id']
                ));

                $formulatedColumns = DoctrineQuery::create()->select('c.value, c.final_value, c.column_name')
                    ->from('BillBuildUpQuantityFormulatedColumn c')
                    ->where('c.relation_id = ?', $buildUpQuantity['id'])
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                    ->execute();

                foreach($formulatedColumns as $formulatedColumn)
                {
                    if($formulatedColumn['column_name'] == BillBuildUpQuantityItem::FORMULATED_COLUMN_FACTOR or array_key_exists($formulatedColumn['column_name'], $dimensions))
                    {
                        $cloneFormulatedColumn = new BillBuildUpQuantityFormulatedColumn();
                        $cloneFormulatedColumn->relation_id = $cloneBuildUpQuantity->id;
                        $cloneFormulatedColumn->value = $formulatedColumn['value'];
                        $cloneFormulatedColumn->final_value = $formulatedColumn['final_value'];
                        $cloneFormulatedColumn->column_name = $formulatedColumn['column_name'];

                        $cloneFormulatedColumn->save();

                        array_push($this->buildUpQuantitiesFormulatedColumnContainerAfterCopy, array(
                            'id' => $cloneFormulatedColumn->id,
                            'origin' => $formulatedColumn['id']
                        ));

                        BillBuildUpQuantityEdgeTable::getInstance()->getConnection()->fetchAssoc("INSERT INTO ".BillBuildUpQuantityEdgeTable::getInstance()->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                            SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".BillBuildUpQuantityEdgeTable::getInstance()->getTableName()." AS old
                            WHERE old.node_from = ".$formulatedColumn['id']." AND old.deleted_at IS NULL");
                    }
                }

                $cloneBuildUpQuantity->calculateTotal();

                unset($cloneBuildUpQuantity);
            }

            $this->updateBuildUpQuantitiesRowLinkingAfterCopy();

            if($includeScheduleOfQuantity)
            {
                $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

                $scheduleOfQuantityLinks = ScheduleOfQuantityBillItemXrefTable::getInstance()
                    ->createQuery('x')->select('x.schedule_of_quantity_item_id')
                    ->where('x.bill_item_id = ?', $originBillItem->id)
                    ->andWhere('x.bill_column_setting_id = ?', $originBillColumnSetting->id)
                    ->andWhere('x.type = ?', $originType)
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                    ->execute();

                $multiRowsInsert = array();

                foreach($scheduleOfQuantityLinks as $data)
                {
                    $multiRowsInsert[] = "(".$data['schedule_of_quantity_item_id'].", ".$this->id.", ".$targetBillColumnSetting->id.", ".$targetType.", NOW(), NOW(), ".$userId.", ".$userId.")";
                }

                if(count($multiRowsInsert) > 0)
                {
                    ScheduleOfQuantityBillItemXrefTable::getInstance()->getConnection()->fetchAssoc("INSERT INTO ".ScheduleOfQuantityBillItemXrefTable::getInstance()->getTableName()."
                    (schedule_of_quantity_item_id, bill_item_id, bill_column_setting_id, type, created_at, updated_at, created_by, updated_by) VALUES
                    ".implode(',', $multiRowsInsert));
                }
            }

            $originBillBuildUpQuantitySummary = DoctrineQuery::create()->select('s.linked_total_quantity, s.total_quantity, s.final_quantity, s.apply_conversion_factor, s.conversion_factor_amount, s.conversion_factor_operator, s.rounding_type, s.type')
                ->from('BillBuildUpQuantitySummary s')
                ->where('s.bill_item_id = ?', $originBillItem->id)
                ->andWhere('s.bill_column_setting_id = ?', $originBillColumnSetting->id)
                ->andWhere('s.type = ?', $originType)
                ->limit(1)
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->fetchOne();

            if($originBillBuildUpQuantitySummary)
            {
                if($cloneBuildUpQuantitySummary->isNew())
                {
                    $cloneBuildUpQuantitySummary->bill_item_id = $this->id;
                    $cloneBuildUpQuantitySummary->bill_column_setting_id = $targetBillColumnSetting->id;
                    $cloneBuildUpQuantitySummary->type = $targetType;
                }

                if($includeScheduleOfQuantity)
                {
                    $cloneBuildUpQuantitySummary->linked_total_quantity = $originBillBuildUpQuantitySummary['linked_total_quantity'];
                }

                $cloneBuildUpQuantitySummary->total_quantity = $originBillBuildUpQuantitySummary['total_quantity'];
                $cloneBuildUpQuantitySummary->final_quantity = $originBillBuildUpQuantitySummary['final_quantity'];
                $cloneBuildUpQuantitySummary->apply_conversion_factor = $originBillBuildUpQuantitySummary['apply_conversion_factor'];
                $cloneBuildUpQuantitySummary->conversion_factor_amount = $originBillBuildUpQuantitySummary['conversion_factor_amount'];
                $cloneBuildUpQuantitySummary->conversion_factor_operator = $originBillBuildUpQuantitySummary['conversion_factor_operator'];
                $cloneBuildUpQuantitySummary->rounding_type = strlen($originBillBuildUpQuantitySummary['rounding_type']) > 0 ? $originBillBuildUpQuantitySummary['rounding_type'] : BillBuildUpQuantitySummary::ROUNDING_TYPE_DISABLED;

                $cloneBuildUpQuantitySummary->save();

                $cloneBuildUpQuantitySummary->refresh();
            }

            return $cloneBuildUpQuantitySummary->getTotalQuantityAfterConversion();
        }

        return false;
    }

    public function copyPrimeCostRateFromBillItem(BillItem $billItem)
    {
        if($billItem->type == BillItem::TYPE_ITEM_PC_RATE)
        {
            $pdo = $this->getTable()->getConnection()->getDbh();
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
            $primeCostRate = $billItem->PrimeCostRate;

            if($this->PrimeCostRate->id > 0)
            {
                $sql = "UPDATE ".BillItemPrimeCostRateTable::getInstance()->getTableName()." SET supply_rate = ".$primeCostRate->supply_rate.", wastage_percentage = ".$primeCostRate->wastage_percentage.", wastage_amount = ".$primeCostRate->wastage_amount.", labour_for_installation = ".$primeCostRate->labour_for_installation.", other_cost = ".$primeCostRate->other_cost.",
                    profit_percentage = ".$primeCostRate->profit_percentage.", profit_amount = ".$primeCostRate->profit_amount.", total = ".$primeCostRate->total.", created_at = NOW(), updated_at = NOW(), created_by = ".$userId.", updated_by = ".$userId." WHERE bill_item_id = ".$this->id;
            }
            else
            {
                $sql = "INSERT INTO ".BillItemPrimeCostRateTable::getInstance()->getTableName()." (bill_item_id, supply_rate, wastage_percentage, wastage_amount, labour_for_installation, other_cost, profit_percentage, profit_amount, total, created_at, updated_at, created_by, updated_by)
                    VALUES
                    (".$this->id.", ".$primeCostRate->supply_rate.", ".$primeCostRate->wastage_percentage.", ".$primeCostRate->wastage_amount.", ".$primeCostRate->labour_for_installation.", ".$primeCostRate->other_cost.", ".$primeCostRate->profit_percentage.", ".$primeCostRate->profit_amount.", ".$primeCostRate->total.", NOW(), NOW(), ".$userId.", ".$userId.")";
            }

            $stmt = $pdo->prepare($sql);

            $stmt->execute();
        }
    }

    public function copyLumpSumPercentageFromBillItem(BillItem $billItem)
    {
        if($billItem->type == BillItem::TYPE_ITEM_LUMP_SUM_PERCENT)
        {
            $pdo = $this->getTable()->getConnection()->getDbh();
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
            $lumpSumPercentage = $billItem->LumpSumPercentage;

            if($this->LumpSumPercentage->id > 0)
            {
                $sql = "UPDATE ".BillItemLumpSumPercentageTable::getInstance()->getTableName()." SET rate = ".$lumpSumPercentage->rate.", percentage = ".$lumpSumPercentage->percentage.", amount = ".$lumpSumPercentage->amount."
                    created_at = NOW(), updated_at = NOW(), created_by = ".$userId.", updated_by = ".$userId." WHERE bill_item_id = ".$this->id;
            }
            else
            {
                $sql = "INSERT INTO ".BillItemLumpSumPercentageTable::getInstance()->getTableName()." (bill_item_id, rate, percentage, amount, created_at, updated_at, created_by, updated_by)
                    VALUES
                    (".$this->id.", ".$lumpSumPercentage->rate.", ".$lumpSumPercentage->percentage.", ".$lumpSumPercentage->amount.", NOW(), NOW(), ".$userId.", ".$userId.")";
            }

            $stmt = $pdo->prepare($sql);

            $stmt->execute();
        }
    }

    public function updateTypeTotalAmount()
    {
        $billColumnSettings = $this->Element->ProjectStructure->BillColumnSettings->toArray();

        $billMarkupSetting = $this->Element->ProjectStructure->BillMarkupSetting->toArray();

        $elementMarkupPercentage = 0;

        //Get Element Markup if enabled
        if($billMarkupSetting['element_markup_enabled'])
        {
            $con = $this->getTable()->getConnection();

            $result = $con->fetchAssoc("SELECT COALESCE(c.final_value, 0) as value FROM ".BillElementFormulatedColumnTable::getInstance()->getTableName()." c
                JOIN ".BillElementTable::getInstance()->getTableName()." e ON c.relation_id = e.id
                WHERE e.id = ".$this->element_id." AND c.column_name = '".BillElement::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
                AND c.deleted_at IS NULL AND c.final_value <> 0 AND e.deleted_at IS NULL");

            if(count($result) > 0)
                $elementMarkupPercentage = $result[0]['value'];
        }

        BillItemTable::updateTypeTotalAmount($this->id, $billColumnSettings, array(
            'bill_markup_enabled'       => $billMarkupSetting['bill_markup_enabled'],
            'bill_markup_percentage'    => $billMarkupSetting['bill_markup_percentage'],
            'element_markup_enabled'    => $billMarkupSetting['element_markup_enabled'],
            'element_markup_percentage' => $elementMarkupPercentage,
            'item_markup_enabled'       => $billMarkupSetting['item_markup_enabled'],
            'rounding_type'             => $billMarkupSetting['rounding_type']
        ));
    }

    public function isResourceLibraryExistsInBuildUpRate($resourceLibraryId)
    {
        return BillBuildUpRateResourceTable::isResourceFromLibraryExists($resourceLibraryId, $this->id);
    }

    public function createBuildUpRateResourceFromResourceLibrary(Resource $resource)
    {
        if($this->isResourceLibraryExistsInBuildUpRate($resource->id))
            throw new Exception("Resource id ".$resource->id." already exists for build up rate resource with bill item id ".$this->id);

        $buildUpRateResource = new BillBuildUpRateResource();
        $buildUpRateResource->bill_item_id = $this->id;
        $buildUpRateResource->resource_library_id = $resource->id;
        $buildUpRateResource->name = $resource->name;

        $buildUpRateResource->save();

        return $buildUpRateResource;
    }

    public function hasBuildUpRates()
    {
        return $this->BuildUpRateResources->count() > 0 ? true : false;
    }

    public function hasBuildUpQuantityByBillColumnSetting(BillColumnSetting $billColumnSetting, $type)
    {
        $countA = DoctrineQuery::create()->select('q.id')
            ->from('BillBuildUpQuantityItem q')
            ->where('q.bill_item_id = ?', $this->id)
            ->andWhere('q.bill_column_setting_id = ?', $billColumnSetting->id)
            ->andWhere('q.type = ?', $type)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->count();

        $countB = DoctrineQuery::create()->select('x.id')
            ->from('ScheduleOfQuantityBillItemXref x')
            ->where('x.bill_item_id = ?', $this->id)
            ->andWhere('x.bill_column_setting_id = ?', $billColumnSetting->id)
            ->andWhere('x.type = ?', $type)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->count();

        return ($countA + $countB) > 0 ? true : false;
    }

    public function getBuildUpQuantitiesByBillColumnSetting(BillColumnSetting $billColumnSetting, $type, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('q.*')
            ->from('BillBuildUpQuantityItem q')
            ->where('q.bill_item_id = ?', $this->id)
            ->andWhere('q.bill_column_setting_id = ?', $billColumnSetting->id)
            ->andWhere('q.type = ?', $type);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->execute();
    }

    public function importQuantityFromItemByBillItemTypeReference(BillColumnSetting $targetBillColumnSetting, BillItem $sourceBillItem, BillItemTypeReferenceFormulatedColumn $sourceBillItemTypeReferenceFormulatedColumn, $type)
    {
        //we cannot import rate into certain item types
        if($this->type == BillItem::TYPE_HEADER or
            $this->type == BillItem::TYPE_NOID or
            $this->type == BillItem::TYPE_HEADER_N or
            $this->type == BillItem::TYPE_ITEM_LUMP_SUM or
            $this->type == BillItem::TYPE_ITEM_LUMP_SUM_PERCENT or
            $this->type == BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE or
            $this->type == BillItem::TYPE_ITEM_RATE_ONLY or
            $this->type == BillItem::TYPE_ITEM_NOT_LISTED)
        {
            return;
        }

        $originType = $sourceBillItemTypeReferenceFormulatedColumn->column_name == BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT ? BillBuildUpQuantityItem::QUANTITY_PER_UNIT_ORIGINAL : BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT;

        switch($type)
        {
            case 'qty':
                $columnName = BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT;
                $billBuildUpQuantityType = BillBuildUpQuantityItem::QUANTITY_PER_UNIT_ORIGINAL;
                break;
            case 'qty_remeasurement':
                $columnName = BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;
                $billBuildUpQuantityType = BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT;
                break;
            default:
                throw new Exception('Invalid type');
        }

        $targetBillItemTypeRef = $this->getBillItemTypeReferenceByColumnSettingId($targetBillColumnSetting->id);

        if(!$targetBillItemTypeRef)
        {
            $targetBillItemTypeRef = new BillItemTypeReference();
            $targetBillItemTypeRef->bill_item_id = $this->id;
            $targetBillItemTypeRef->bill_column_setting_id = $targetBillColumnSetting->id;
            $targetBillItemTypeRef->save();
        }

        BillItemTable::deleteBuildUpQuantityByItemIdAndColumnSettingId($this->id, $targetBillColumnSetting->id, $billBuildUpQuantityType);

        //only copy schedule of qty if the origin bill item is under the same project as target bill item
        if($this->Element->ProjectStructure->root_id == $sourceBillItem->Element->ProjectStructure->root_id and $this->type != BillItem::TYPE_ITEM_LUMP_SUM and $this->type != BillItem::TYPE_ITEM_LUMP_SUM_EXCLUDE and $this->type != BillItem::TYPE_ITEM_LUMP_SUM_PERCENT and $this->type != BillItem::TYPE_ITEM_RATE_ONLY)
        {
            $includeScheduleOfQuantity = true;
        }
        else
        {
            $includeScheduleOfQuantity = false;
        }

        $buildUpSummaryFinalValue = $this->copyBuildUpQuantitiesFromItem($sourceBillItem, $sourceBillItemTypeReferenceFormulatedColumn->BillItemTypeReference, $targetBillColumnSetting, $originType, $billBuildUpQuantityType, $includeScheduleOfQuantity);

        /*
         * Save quantity value in bill item type reference. If build up quantity has changed, normally because of the target bill item has a different
         * uom with different dimensions from the source bill item which means we will only copy dimension columns based on the target bill item uom (if there's any).
         * By doing that, the final quantity will be different from the source's final quantity.
         */

        $targetFormulatedColumn = BillItemTypeReferenceFormulatedColumnTable::getInstance()->getByRelationIdAndColumnName($targetBillItemTypeRef->id, $columnName);

        if($buildUpSummaryFinalValue)
        {
            $value = $buildUpSummaryFinalValue;
            $finalValue = $value;
        }
        else
        {
            $value = $sourceBillItemTypeReferenceFormulatedColumn->hasCellReference() ? $sourceBillItemTypeReferenceFormulatedColumn->final_value : $sourceBillItemTypeReferenceFormulatedColumn->value;
            $finalValue = $sourceBillItemTypeReferenceFormulatedColumn->final_value;
        }

        $targetFormulatedColumn->value = $value;
        $targetFormulatedColumn->final_value = $finalValue;
        $targetFormulatedColumn->linked = $sourceBillItemTypeReferenceFormulatedColumn->linked;
        $targetFormulatedColumn->has_build_up = $sourceBillItemTypeReferenceFormulatedColumn->has_build_up;

        $targetFormulatedColumn->save();
    }

    public function linkToScheduleOfQuantities(BillColumnSetting $billColumnSetting, Array $scheduleOfQuantityItemIds, $type)
    {
        if(count($scheduleOfQuantityItemIds) > 0)
        {
            switch($type)
            {
                case BillBuildUpQuantityItem::QUANTITY_PER_UNIT_ORIGINAL:
                    break;
                case BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT:
                    break;
                default:
                    throw new Exception("invalid quantity type");
            }

            $pdo = $this->getTable()->getConnection()->getDbh();

            $stmt = $pdo->prepare("SELECT schedule_of_quantity_item_id FROM ".ScheduleOfQuantityBillItemXrefTable::getInstance()->getTableName()." WHERE
            bill_item_id = ".$this->id." AND bill_column_setting_id = ".$billColumnSetting->id." AND type = ".$type."
            AND schedule_of_quantity_item_id IN (".(implode(",", $scheduleOfQuantityItemIds)).") ORDER BY schedule_of_quantity_item_id ASC");

            $stmt->execute();

            $existingLinks = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

            //to find differences in 2 arrays since array_diff is too slow. This implementation is using hash maps approach.
            $newScheduleOfQuantityItemIds = array();
            $map = array();//map
            foreach($existingLinks as $val)
            {
                $map[$val] = 1;
            }

            foreach($scheduleOfQuantityItemIds as $val)
            {
                if(!array_key_exists($val, $map))
                {
                    $newScheduleOfQuantityItemIds[] = $val;
                }
            }

            unset($map, $existingLinks);

            if(count($newScheduleOfQuantityItemIds) > 0){
                try
                {
                    $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

                    $pdo->beginTransaction();

                    $stmt = $pdo->prepare("INSERT INTO ".ScheduleOfQuantityBillItemXrefTable::getInstance()->getTableName()."
                    (bill_item_id, bill_column_setting_id, type, schedule_of_quantity_item_id, created_at, updated_at, created_by, updated_by)
                    VALUES
                    (".$this->id.", ".$billColumnSetting->id.", ".$type.", :schedule_of_quantity_item_id, NOW(), NOW(), ".$userId.", ".$userId.")");

                    foreach($newScheduleOfQuantityItemIds as $scheduleOfQuantityItemId)
                    {
                        $stmt->execute(array(
                            'schedule_of_quantity_item_id' => $scheduleOfQuantityItemId
                        ));
                    }

                    $pdo->commit();
                }
                catch(Exeception $e)
                {
                    $pdo->rollBack();

                    throw $e;
                }
            }

            $buildUpSummary = DoctrineQuery::create()
                ->from('BillBuildUpQuantitySummary s')
                ->where('s.bill_item_id = ?', $this->id)
                ->andWhere('s.bill_column_setting_id = ?', $billColumnSetting->id)
                ->andWhere('s.type = ?', $type)
                ->limit(1)
                ->fetchOne();

            $buildUpQuantitySummary = $buildUpSummary ? $buildUpSummary : new BillBuildUpQuantitySummary();

            if($buildUpQuantitySummary->isNew())
            {
                $buildUpQuantitySummary->bill_item_id = $this->id;
                $buildUpQuantitySummary->bill_column_setting_id = $billColumnSetting;
                $buildUpQuantitySummary->type = $type;
                $buildUpQuantitySummary->conversion_factor_operator = '+';
                $buildUpQuantitySummary->rounding_type = BillBuildUpQuantitySummary::ROUNDING_TYPE_DISABLED;
            }

            $buildUpQuantitySummary->linked_total_quantity = $this->getScheduleOfQuantitiesTotalAmount($billColumnSetting, $type);

            $buildUpQuantitySummary->save();

            return $buildUpQuantitySummary->getTotalQuantityAfterConversion();
        }
        else
        {
            return false;
        }
    }

    public function getScheduleOfQuantitiesTotalAmount(BillColumnSetting $billColumnSetting, $type)
    {
        switch($type)
        {
            case BillBuildUpQuantityItem::QUANTITY_PER_UNIT_ORIGINAL:
                break;
            case BillBuildUpQuantityItem::QUANTITY_PER_UNIT_REMEASUREMENT:
                break;
            default:
                throw new Exception("invalid quantity type");
        }

        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(SUM(xfc.final_value), 0) AS total FROM ".ScheduleOfQuantityItemFormulatedColumnTable::getInstance()->getTableName()." xfc
            JOIN ".ScheduleOfQuantityBillItemXrefTable::getInstance()->getTableName()." x ON x.schedule_of_quantity_item_id = xfc.relation_id WHERE
            x.bill_item_id = ".$this->id." AND x.bill_column_setting_id = ".$billColumnSetting->id." AND x.type = ".$type."
            AND xfc.final_value <> 0 AND xfc.deleted_at IS NULL GROUP BY x.bill_item_id");

        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        return $result['total'];
    }

    public function getBuildUpRateResourceList()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT r.id, r_lib.name FROM " . ResourceTable::getInstance()->getTableName() . " AS r_lib JOIN
        " . BillBuildUpRateResourceTable::getInstance()->getTableName() . " AS r ON r.resource_library_id = r_lib.id
        WHERE r.bill_item_id = " . $this->id . " AND r.deleted_at IS NULL
        ORDER BY r.id ASC");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getBuildUpRateItemList(BillBuildUpRateResource $resource)
    {
        return BillItemTable::getBuildUpRateItemList($this->id, $resource->id);
    }

    public function isAddendumItem()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COALESCE(r.version, 0)
            FROM " . ProjectRevisionTable::getInstance()->getTableName() . " AS r
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS i ON r.id = i.project_revision_id
            WHERE i.id = " . $this->id . "
            AND r.deleted_at IS NULL AND i.deleted_at IS NULL");

        $stmt->execute();
        
        return ($stmt->fetch(PDO::FETCH_COLUMN, 0) > 0);
    }

    public function removeMarkup()
    {
        $formulatedColumn = BillItemFormulatedColumnTable::getInstance()->getByRelationIdAndColumnName($this->id, self::FORMULATED_COLUMN_MARKUP_PERCENTAGE);

        $formulatedColumn->setFormula(0);

        $formulatedColumn->linked = false;

        $formulatedColumn->has_build_up = false;

        $formulatedColumn->save();

        $formulatedColumn->refresh();

        $isFormulatedColumn = true;

        $this->updateTypeTotalAmount();
    }
}
