<?php

/**
 * VariationOrder
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class VariationOrder extends BaseVariationOrder
{
    const TYPE_STANDARD = 1;
    const TYPE_BUDGETARY = 2;
    const TYPE_CLAIMABLE = 4;
    const TYPE_NON_CLAIMABLE = 8;

    const STATUS_APPROVED = 1;
    const STATUS_PENDING = 2;
    const STATUS_PREPARING = 4;
    
    const TYPE_STANDARD_TEXT = "STANDARD";
    const TYPE_BUDGETARY_TEXT = "BUDGETARY";
    const TYPE_CLAIMABLE_TEXT = "CLAIMABLE";
    const TYPE_NON_CLAIMABLE_TEXT = "NON CLAIMABLE";

    public function getEProjectRequestForVariation()
    {
        return ($this->eproject_rfv_id) ? Doctrine_Query::create()
            ->from('EProjectRequestForVariation r')
            ->where('r.id = ?',$this->eproject_rfv_id)
            ->fetchOne() : null;
    }

    public static function getTypeText($type)
    {
        switch($type)
        {
            case VariationOrder::TYPE_STANDARD:
                return VariationOrder::TYPE_STANDARD_TEXT;
            case VariationOrder::TYPE_BUDGETARY:
                return VariationOrder::TYPE_BUDGETARY_TEXT;
            case VariationOrder::TYPE_CLAIMABLE:
                return VariationOrder::TYPE_CLAIMABLE_TEXT;
            case VariationOrder::TYPE_NON_CLAIMABLE:
                return VariationOrder::TYPE_NON_CLAIMABLE_TEXT;
            default:
                throw new Exception("Invalid Variation Order Type");
        }
    }

    public function canAddNewClaim()
    {
        $record = DoctrineQuery::create()->select('c.id')
            ->from('VariationOrderClaim c')
            ->where('c.variation_order_id = ?',$this->id)
            ->andWhere('c.status = ?', VariationOrderClaim::STATUS_PROGRESSING)
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $record ? false : true;
    }

    public function getViewingClaim()
    {
        $record = DoctrineQuery::create()->select('c.*')
            ->from('VariationOrderClaim c')
            ->where('c.variation_order_id = ?',$this->id)
            ->andWhere('c.is_viewing IS TRUE')
            ->limit(1)
            ->fetchOne();

        return $record;
    }

    public function canEditClaimAmount()
    {
        $record = DoctrineQuery::create()->select('c.id')
            ->from('VariationOrderClaim c')
            ->where('c.variation_order_id = ?',$this->id)
            ->andWhere('c.status = ?', VariationOrderClaim::STATUS_PROGRESSING)
            ->andWhere('c.is_viewing IS TRUE')
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $record ? true : false;
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM ".VariationOrderBuildUpQuantityItemTable::getInstance()->getTableName()."
        WHERE variation_order_item_id IN (SELECT id FROM ".VariationOrderItemTable::getInstance()->getTableName()."
        WHERE variation_order_id = ".$this->id.")");

        $stmt->execute();

        $stmt = $pdo->prepare("DELETE FROM ".VariationOrderBuildUpQuantitySummaryTable::getInstance()->getTableName()."
        WHERE variation_order_item_id IN (SELECT id FROM ".VariationOrderItemTable::getInstance()->getTableName()."
        WHERE variation_order_id = ".$this->id.")");

        $stmt->execute();

        $stmt = $pdo->prepare("DELETE FROM ".VariationOrderItemUnitTable::getInstance()->getTableName()."
        WHERE variation_order_item_id IN (SELECT id FROM ".VariationOrderItemTable::getInstance()->getTableName()."
        WHERE variation_order_id = ".$this->id.")");

        $stmt->execute();

        Doctrine_Query::create()
            ->delete('VariationOrderItem i')
            ->where('i.variation_order_id = ?', $this->id)
            ->execute();

        Doctrine_Query::create()
            ->delete('VariationOrderClaim c')
            ->where('c.variation_order_id = ?', $this->id)
            ->execute();

        parent::delete($conn);
    }

    public function preSave($event)
    {
        if( $this->isNew() ) $this->status = PostContractClaim::STATUS_PREPARING;

        return parent::preSave($event);
    }

    public function postSave($event)
    {
        if($this->ProjectStructure->PostContract->published_type == PostContract::PUBLISHED_TYPE_NEW && $this->type == VariationOrder::TYPE_STANDARD)
        {
            $this->type = VariationOrder::TYPE_BUDGETARY;

            $this->save();
        }

        if($this->is_approved and
        $this->ProjectStructure->PostContract->published_type == PostContract::PUBLISHED_TYPE_NEW and
        $openClaimRevision = $this->ProjectStructure->PostContract->getOpenClaimRevision() and $openClaimRevision->ClaimCertificate->id)
        {
            $count = Doctrine_Query::create()->select('x.variation_order_id')
                ->from('VariationOrderClaimCertificate x')
                ->andWhere('x.variation_order_id = ?', $this->id)
                ->count();

            if($count==0)
            {
                $xref = new VariationOrderClaimCertificate();
                $xref->variation_order_id = $this->id;
                $xref->claim_certificate_id = $openClaimRevision->ClaimCertificate->id;
                $xref->save();
                $openClaimRevision->ClaimCertificate->save();
            }
        }

        if($this->is_approved)
        {
            $proc = new BackgroundProcess("exec php ".Utilities::getEProjectArtisanPath()." external-app:manager ContractorVariationOrder ".$this->id." 2>&1 ");
            $proc->run();
        }

        if( $this->status == PostContractClaim::STATUS_PENDING )
        {
            ContractManagementClaimVerifierTable::initialiseVerifierList($this->ProjectStructure, PostContractClaim::TYPE_VARIATION_ORDER, $this->id);
            $this->onClaimReview();
        }
    }

    public function onClaimReview()
    {
        if( ContractManagementClaimVerifierTable::isApproved($this->ProjectStructure, PostContractClaim::TYPE_VARIATION_ORDER, $this->id) )
        {
            $this->status = PostContractClaim::STATUS_APPROVED;
            $this->is_approved = true;
            $this->save();
        }
        elseif(ContractManagementClaimVerifierTable::isRejected($this->ProjectStructure, PostContractClaim::TYPE_VARIATION_ORDER, $this->id))
        {
            $this->status = PostContractClaim::STATUS_PREPARING;
            $this->is_approved = false;
            $this->save();
        }
    }

    public function canBeEdited()
    {
        return $this->status == PostContractClaim::STATUS_PREPARING;
    }

    public function canClaim()
    {
        return ($this->status == PostContractClaim::STATUS_APPROVED) && ($this->Claims->count() > 0);
    }

}
