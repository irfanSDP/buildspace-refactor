<?php

/**
 * SubPackageBillItemRateTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SubPackageBillItemRateTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object SubPackageBillItemRateTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('SubPackageBillItemRate');
    }

    public static function createNewRecords(SubPackageCompany $subPackageCompany, sfGuardUser $currentUser, array $itemIds)
    {
        $pdo    = self::getInstance()->getConnection()->getDbh();
        $values = array();

        foreach ( $itemIds as $itemId )
        {
            $values[] = "({$subPackageCompany->id}, {$itemId}, {$currentUser->id}, {$currentUser->id}, NOW(), NOW())";
        }

        $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (sub_package_company_id, bill_item_id, created_by, updated_by, created_at, updated_at) VALUES ".implode(', ', $values));

        $stmt->execute();

        unset($values);
    }

    public static function insertImportedSupplierRatesFromExcel(SubPackageCompany $subPackageCompany, ProjectStructure $bill, sfGuardUser $currentUser, Array $data)
    {
        $pdo                          = self::getInstance()->getConnection()->getDbh();
        $billColumnSettings           = $bill->BillColumnSettings;
        $billColumnSettingIds         = Utilities::arrayValueRecursive('id', $billColumnSettings->toArray());
        $billColumnSettingsQuantities = array();
        $itemIds                      = array();
        $values                       = array();

        $stmt = $pdo->prepare("SELECT r.bill_column_setting_id, COALESCE(COUNT(r.id), 0) FROM ".SubPackageTypeReferenceTable::getInstance()->getTableName()." r
        JOIN ".SubPackageCompanyTable::getInstance()->getTableName()." spc ON spc.sub_package_id = r.sub_package_id
        WHERE spc.id = ".$subPackageCompany->id." AND r.bill_column_setting_id IN (".implode(', ', $billColumnSettingIds).") GROUP BY r.bill_column_setting_id");

        $stmt->execute();
        $totalUnitAssignedByBillColumnSettings = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_COLUMN);

        foreach ( $data['items'] as $key => $item )
        {
            if ( ! isset($item['id']) ) continue;

            $itemIds[$item['id']] = $item['id'];
        }

        // get existing item(s) quantity based on bill column settings if available
        if ( count($itemIds) > 0 )
        {
            foreach ( $billColumnSettings as $billColumnSetting )
            {
                $quantityFieldName = $billColumnSetting->use_original_quantity ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                $stmt = $pdo->prepare("SELECT r.bill_item_id, COALESCE(fc.final_value, 0) AS value FROM ".BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName()." fc
                    JOIN ".BillItemTypeReferenceTable::getInstance()->getTableName()." r ON fc.relation_id = r.id
                    WHERE r.bill_item_id IN (".implode(',' , $itemIds).") AND r.bill_column_setting_id = ".$billColumnSetting->id."
                    AND r.include IS TRUE AND fc.column_name = '".$quantityFieldName."' AND fc.final_value <> 0
                    AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

                $stmt->execute();
                $quantities = $stmt->fetchAll(PDO::FETCH_ASSOC);

                foreach ( $quantities as $quantity )
                {
                    $billColumnSettingsQuantities[$quantity['bill_item_id']][$billColumnSetting->id] = $quantity['value'];
                }

                unset($quantities);
            }
        }

        // query existed item id first, then only insert new records for item(s) that haven't be used yet
        $stmt = $pdo->prepare("SELECT s.bill_item_id FROM ".SubPackageBillItemRateTable::getInstance()->getTableName()." s
            WHERE s.sub_package_company_id = {$subPackageCompany->id} AND s.bill_item_id IN (".implode(', ', $itemIds).")");

        $stmt->execute();
        $billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $billItems as $billItem )
        {
            if ( isset($itemIds[$billItem['bill_item_id']]) ) unset($itemIds[$billItem['bill_item_id']]);
        }

        if ( count($itemIds) > 0 ) self::createNewRecords($subPackageCompany, $currentUser, $itemIds);

        unset($itemIds);

        foreach ( $data['items'] as $key => $item )
        {
            if ( ! isset($item['id']) ) continue;

            $singleUnitGrandTotal = 0;
            $grandTotal           = 0;
            $newRate              = $item['rate-final_value'];

            foreach ( $billColumnSettings as $billColumnSetting )
            {
                $quantity = 0;

                if ( isset($billColumnSettingsQuantities[$item['id']][$billColumnSetting->id]) )
                {
                    $quantity = $billColumnSettingsQuantities[$item['id']][$billColumnSetting->id];
                }

                $singleUnitGrandTotal += $newRate * $quantity;

                if(array_key_exists($billColumnSetting->id, $totalUnitAssignedByBillColumnSettings))
                {
                    $grandTotal += $newRate * $quantity * $totalUnitAssignedByBillColumnSettings[$billColumnSetting->id][0];
                }
            }

            $values[] = "({$item['id']}, {$newRate}, {$singleUnitGrandTotal}, {$grandTotal})";

            unset($item);
        }

        if ( count($values) > 0 )
        {
            // batch update
            $stmt = $pdo->prepare("UPDATE ".self::getInstance()->getTableName()." SET
            rate = newvalues.myrate, single_unit_grand_total = newvalues.mysingleUnitGrandTotal, grand_total = newvalues.grandTotal
            FROM (VALUES ".implode(', ', $values).") AS newvalues (item_id, myrate, mysingleUnitGrandTotal, grandTotal)
            WHERE sub_package_company_id = {$subPackageCompany->id} AND bill_item_id = newvalues.item_id");

            $stmt->execute();
        }

        unset($billColumnSettings, $values);
    }

    public static function getSubConRatesBySubPackageAndItemIds(SubPackage $subPackage, array $billItemIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT x.company_id, r.bill_item_id, r.rate, x.sub_package_id
        FROM ".SubPackageCompanyTable::getInstance()->getTableName()." AS x
        LEFT JOIN ".SubPackageBillItemRateTable::getInstance()->getTableName()." AS r ON x.id = r.sub_package_company_id
        LEFT JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON i.id = r.bill_item_id
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
        WHERE x.sub_package_id = ".$subPackage->id.' AND i.id IN ('.implode(',', $billItemIds).')');

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    public static function getContractorBillRatesByBillId( $billId, $tenderCompanyId )
    {
        $pdo = ProjectStructureTable::getInstance()->getConnection()->getDbh();

        //Get Element List
        $sql = "SELECT e.id, e.project_structure_id FROM ".BillElementTable::getInstance()->getTableName()." e 
        WHERE e.project_structure_id = :project_structure_id AND e.deleted_at IS NULL ORDER BY e.priority";

        $stmt = $pdo->prepare($sql);

        $stmt->execute(array(
            'project_structure_id' => $billId
        ));

        $elements = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $billTotalAmount = 0;

        if(count($elements))
        {
            //Get Root Items
            $sql = "SELECT i.element_id, i.id FROM ".BillItemTable::getInstance()->getTableName()." i
            WHERE i.id = i.root_id AND i.element_id IN (SELECT e.id FROM ".BillElementTable::getInstance()->getTableName()." e
            WHERE e.project_structure_id = :project_structure_id AND e.deleted_at IS NULL ORDER BY e.priority) AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL ORDER BY i.priority";

            $params = array(
                'project_structure_id' => $billId
            );

            $stmt = $pdo->prepare($sql);

            $stmt->execute($params);

            $roots = $stmt->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);

            //Excluded Item Type
            $excludedItemType = array( BillItem::TYPE_HEADER, BillItem::TYPE_NOID, BillItem::TYPE_HEADER_N );

            $billStructure = array(
                'total_amount' => 0,
                'elementsAndItems' => array()
            );

            foreach($elements as $element)
            {
                $elementTotalAmount = 0;

                $result = array(
                    'id' => $element['id'],
                    'total_amount' => 0,
                    'items' => array()
                );

                if(array_key_exists($element['id'], $roots) && $roots[$element['id']])
                {
                    $rootIds = $roots[$element['id']];

                    $implodedRootIds = implode(',', $rootIds);

                    $sql = "SELECT c.id, c.type, c.description, c.uom_id AS uom_id, t_rate.grand_total, t_rate.rate FROM ".BillItemTable::getInstance()->getTableName()." p 
                            JOIN ".BillItemTable::getInstance()->getTableName()." c ON c.lft BETWEEN p.lft AND p.rgt 
                            JOIN ".SubPackageBillItemRateTable::getInstance()->getTableName()." t_rate ON t_rate.bill_item_id = c.id AND t_rate.sub_package_company_id = ".$tenderCompanyId."
                            WHERE p.id IN (".$implodedRootIds.") AND p.id = c.root_id AND c.project_revision_deleted_at IS NULL 
                            AND c.deleted_at IS NULL AND t_rate.rate <> 0 AND c.type NOT IN (".implode(',', $excludedItemType).") ORDER BY p.priority, c.lft";

                    $stmt = $pdo->prepare($sql);

                    $stmt->execute();

                    $billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

                    if(count($billItems))
                    {
                        foreach($billItems as $k => $item)
                        {   
                            $elementTotalAmount+=$item['grand_total'];
                        }
                    }

                    $result['items'] = $billItems;
                }

                unset($element);

                $result['total_amount'] = $elementTotalAmount;

                $billStructure['total_amount']+=$elementTotalAmount;

                array_push($billStructure['elementsAndItems'], $result);
            }
        }

        return $billStructure;
    }

    public static function getGrandTotalBySubPackage(SubPackage $subPackage)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT i.id, e.project_structure_id, x.company_id, rate.single_unit_grand_total
            FROM ".BillItemTable::getInstance()->getTableName()." i
            LEFT JOIN ".SubPackageBillItemRateTable::getInstance()->getTableName()." rate ON rate.bill_item_id = i.id
            LEFT JOIN ".SubPackageCompanyTable::getInstance()->getTableName()." x ON rate.sub_package_company_id = x.id
            LEFT JOIN ".BillBuildUpRateItemTable::getInstance()->getTableName()." bur ON bur.bill_item_id = i.id AND bur.deleted_at IS NULL
            LEFT JOIN ".SubPackageResourceItemTable::getInstance()->getTableName()." AS xref ON bur.resource_item_library_id = xref.resource_item_id AND xref.sub_package_id = ".$subPackage->id."
            LEFT JOIN ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." ifc ON ifc.relation_id  = bur.id AND ifc.deleted_at IS NULL
            AND ifc.column_name = '".BillBuildUpRateItem::FORMULATED_COLUMN_RATE."' AND ifc.final_value <> 0
            LEFT JOIN ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS bifc ON bifc.relation_id = i.id
            LEFT JOIN ".ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName()." AS sifc ON sifc.id = bifc.schedule_of_rate_item_formulated_column_id
            LEFT JOIN ".ScheduleOfRateItemTable::getInstance()->getTableName()." AS si ON si.id = sifc.relation_id
            LEFT JOIN ".SubPackageScheduleOfRateItemTable::getInstance()->getTableName()." AS xref2 ON si.id = xref2.schedule_of_rate_item_id AND xref2.sub_package_id = ".$subPackage->id."
            LEFT JOIN ".BillElementTable::getInstance()->getTableName()." e ON i.element_id = e.id
            LEFT JOIN ".ProjectStructureTable::getInstance()->getTableName()." bill ON e.project_structure_id = bill.id
            WHERE bill.root_id = ".$subPackage->project_structure_id."
            AND bill.deleted_at IS NULL
            AND i.type != ".BillItem::TYPE_ITEM_NOT_LISTED." AND x.sub_package_id = ".$subPackage->id." AND NOT (xref.sub_package_id IS NULL AND xref2.sub_package_id IS NULL)
            AND e.deleted_at IS NULL
            AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL ORDER BY i.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getContractorRates($itemIds)
    {
        if( empty($itemIds) )
        {
            return array();
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("
            select
                companies.id as company_id,
                item_rates.bill_item_id,
                item_rates.rate
            from " . SubPackageBillItemRateTable::getInstance()->getTableName() . " item_rates
            left join " . BillItemTable::getInstance()->getTableName() . " items on items.id = item_rates.bill_item_id
            left join " . SubPackageCompanyTable::getInstance()->getTableName() . " sub_package_companies on sub_package_companies.id = item_rates.sub_package_company_id
            left join " . CompanyTable::getInstance()->getTableName() . " companies on companies.id = sub_package_companies.company_id
            where item_rates.bill_item_id in (" . implode(',', $itemIds) . ")
            and items.deleted_at is null
            order by item_rates.bill_item_id
            ");

        $stmt->execute();
        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $contractorRates = array();

        foreach($results as $contractorItemRate)
        {
            $companyId = $contractorItemRate['company_id'];
            if( ! array_key_exists($companyId, $contractorRates) )
            {
                $contractorRates[ $companyId ] = array();
            }

            $contractorRates[ $companyId ][ $contractorItemRate['bill_item_id'] ] = $contractorItemRate['rate'];
        }

        return $contractorRates;
    }

    public static function getElementEstimateTotals(SubPackage $subPackage, ProjectStructure $bill, Array $itemIds)
    {
        $estimationTotal = [];

        if(empty($itemIds))
            return $estimationTotal;
        
        $elements = DoctrineQuery::create()
            ->from('BillElement e')
            ->andWhere('e.project_structure_id = ?', $bill->id)
            ->addOrderBy('e.priority')
            ->execute();
        
        foreach($elements as $element)
        {
            $totalCostByBillItems  = $subPackage->getEstimatedTotalByBillItems($element);
            $totalCostByBillItems += $subPackage->getEstimatedTotalNoBuildUpByBillItems($element);

            $estimationTotal[$element->id] = 0;

            foreach($itemIds as $itemId)
            {
                $totalCost = (array_key_exists($itemId, $totalCostByBillItems)) ? $totalCostByBillItems[$itemId]['total_cost_after_conversion'] : 0 ;
                $estimationTotal[$element->id] += (array_key_exists($itemId, $totalCostByBillItems)) ? $totalCost * $totalCostByBillItems[$itemId]['total_qty'] : 0;
            }
        }

        return $estimationTotal;
    }

    public static function getElementContractorTotals(SubPackage $subPackage, $bill, $itemIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmtItem = $pdo->prepare("
            select
                items.id as item_id,
                items.element_id as element_id,
                companies.id as company_id,
                rates.rate,
                formulated_columns.final_value as final_value
            from " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " formulated_columns
            join " . BillItemTable::getInstance()->getTableName() . " items on items.id = formulated_columns.relation_id
            join " . SubPackageBillItemRateTable::getInstance()->getTableName() . " rates on rates.bill_item_id = items.id
            join " . SubPackageCompanyTable::getInstance()->getTableName() . " sp_companies on sp_companies.id = rates.sub_package_company_id
            join " . CompanyTable::getInstance()->getTableName() . " companies on companies.id = sp_companies.company_id
            where items.id in (" . implode(',', $itemIds) . ")
            and formulated_columns.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "'
            and items.deleted_at is null
            ");

        $stmtItem->execute();
        $records = $stmtItem->fetchAll(PDO::FETCH_ASSOC);

        $itemQuantities = self::getItemQuantities($subPackage, $bill, $itemIds);

        $contractorTotals = array();

        foreach($records as $itemRate)
        {
            if( ! array_key_exists($itemRate['company_id'], $contractorTotals) )
            {
                $contractorTotals[ $itemRate['company_id'] ] = array();
            }

            if( ! array_key_exists($itemRate['element_id'], $contractorTotals[ $itemRate['company_id'] ]) )
            {
                $contractorTotals[ $itemRate['company_id'] ][ $itemRate['element_id'] ] = 0;
            }

            $itemQuantity = $itemQuantities[ $itemRate['item_id'] ];

            $itemTotal = $itemRate['rate'] * $itemQuantity;

            $contractorTotals[ $itemRate['company_id'] ][ $itemRate['element_id'] ] += $itemTotal;
        }

        return $contractorTotals;
    }

    public static function getItemQuantities(SubPackage $subPackage, ProjectStructure $bill, Array $itemIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sqlFieldCond = '(
            CASE 
                WHEN spsori.sub_package_id is not null THEN spsori.sub_package_id
                WHEN spri.sub_package_id is not null THEN spri.sub_package_id
            ELSE
                spbi.sub_package_id
            END
            ) AS sub_package_id';

        $stmtItem = $pdo->prepare("SELECT DISTINCT c.id AS bill_column_setting_id, c.use_original_quantity, i.id AS bill_item_id, rate.final_value AS final_value, $sqlFieldCond
            FROM " . SubPackageTable::getInstance()->getTableName() . " sp
            JOIN " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " x ON x.sub_package_id = sp.id
            JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
            LEFT JOIN " . SubPackageResourceItemTable::getInstance()->getTableName() . " AS spri ON spri.sub_package_id = sp.id
            LEFT JOIN " . SubPackageScheduleOfRateItemTable::getInstance()->getTableName() . " AS spsori ON spsori.sub_package_id = sp.id
            JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
            JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id AND x.bill_column_setting_id = c.id
            JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
            LEFT JOIN " . BillBuildUpRateItemTable::getInstance()->getTableName() . " bur ON bur.bill_item_id = i.id AND bur.resource_item_library_id = spri.resource_item_id AND bur.deleted_at IS NULL
            LEFT JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sifc ON sifc.relation_id = spsori.schedule_of_rate_item_id AND sifc.deleted_at IS NULL
            LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS rate ON rate.relation_id = i.id
            LEFT JOIN " . SubPackageBillItemTable::getInstance()->getTableName() . " spbi ON spbi.bill_item_id = i.id AND spbi.sub_package_id = sp.id
            WHERE sp.id =" . $subPackage->id . " AND sp.deleted_at IS NULL
            AND bill.id = " . $bill->id . " AND bill.deleted_at IS NULL
            AND NOT (spri.sub_package_id IS NULL AND spsori.sub_package_id IS NULL AND spbi.id IS NULL)
            AND (rate.relation_id = bur.bill_item_id OR rate.schedule_of_rate_item_formulated_column_id = sifc.id OR rate.relation_id = spbi.bill_item_id)
            AND rate.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "' AND rate.final_value <> 0 AND rate.deleted_at IS NULL
            AND i.type <> " . BillItem::TYPE_ITEM_NOT_LISTED . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
            AND i.id in (" . implode(',', $itemIds) . ")
            AND c.deleted_at IS NULL ORDER BY i.id");

        $stmtItem->execute();
        $records = $stmtItem->fetchAll(PDO::FETCH_ASSOC);

        $billItems = array();
        if( count($records) > 0 )
        {
            $billRefSelector = 'p.bill_ref_element_no, p.bill_ref_page_no, p.bill_ref_char';

            $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.element_id, p.root_id, p.description, p.type, p.uom_id, uom.symbol AS uom_symbol, p.grand_total, p.grand_total_quantity, p.level, p.priority, p.lft, {$billRefSelector}
                FROM " . BillItemTable::getInstance()->getTableName() . " c
                JOIN " . BillItemTable::getInstance()->getTableName() . " p ON c.lft BETWEEN p.lft AND p.rgt
                LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
                WHERE c.root_id = p.root_id
                AND c.type != " . BillItem::TYPE_ITEM_NOT_LISTED . "
                AND p.id in (" . implode(',', $itemIds) . ")
                AND c.project_revision_deleted_at IS NULL
                AND c.deleted_at IS NULL
                AND p.project_revision_deleted_at IS NULL
                AND p.deleted_at IS NULL
                ORDER BY p.element_id, p.priority, p.lft, p.level ASC");

            $stmt->execute();

            $billItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach($records as $record)
            {
                foreach($billItems as $key => $billItem)
                {
                    if( ! isset( $billItems[ $key ]['total_qty'] ) )
                    {
                        $billItems[ $key ]['total_qty'] = 0;
                    }

                    if( $record['bill_item_id'] == $billItem['id'] )
                    {
                        $quantityFieldName = $record['use_original_quantity'] ? BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT : BillItemTypeReference::FORMULATED_COLUMN_QTY_PER_UNIT_REMEASUREMENT;

                        $stmt = $pdo->prepare("SELECT COUNT(x.counter)
                        FROM " . SubPackageTable::getInstance()->getTableName() . " sp
                        JOIN " . SubPackageTypeReferenceTable::getInstance()->getTableName() . " x ON x.sub_package_id = sp.id
                        LEFT JOIN " . ProjectStructureTable::getInstance()->getTableName() . " bill ON bill.root_id = sp.project_structure_id
                        JOIN " . BillElementTable::getInstance()->getTableName() . " e ON e.project_structure_id = bill.id
                        LEFT JOIN " . BillColumnSettingTable::getInstance()->getTableName() . " c ON c.project_structure_id = e.project_structure_id AND x.bill_column_setting_id = c.id
                        JOIN " . BillItemTable::getInstance()->getTableName() . " i ON i.element_id = e.id
                        WHERE sp.id =" . $subPackage->id . " AND sp.deleted_at IS NULL
                        AND bill.id = " . $bill->id . " AND bill.deleted_at IS NULL
                        AND x.bill_column_setting_id = " . $record['bill_column_setting_id'] . "
                        AND i.id = " . $record['bill_item_id'] . " AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL
                        AND c.deleted_at IS NULL");

                        $stmt->execute();

                        $totalAssignedUnit = $stmt->fetch(PDO::FETCH_COLUMN, 0);

                        $stmt = $pdo->prepare("SELECT SUM(COALESCE(fc.final_value, 0)) AS value
                        FROM " . BillItemTypeReferenceFormulatedColumnTable::getInstance()->getTableName() . " fc
                        JOIN " . BillItemTypeReferenceTable::getInstance()->getTableName() . " r ON fc.relation_id = r.id
                        WHERE r.bill_item_id = " . $record['bill_item_id'] . " AND r.bill_column_setting_id = " . $record['bill_column_setting_id'] . "
                        AND r.include IS TRUE AND fc.column_name = '" . $quantityFieldName . "' AND fc.final_value <> 0
                        AND r.deleted_at IS NULL AND fc.deleted_at IS NULL");

                        $stmt->execute();

                        $quantityPerType = $stmt->fetch(PDO::FETCH_COLUMN, 0) * $totalAssignedUnit;

                        $billItems[ $key ]['total_qty'] += $quantityPerType;
                    }
                }

                unset( $record );
            }

            unset( $records );
        }

        $itemQuantities = array();

        foreach($billItems as $item)
        {
            $itemQuantities[ $item['id'] ] = $item['total_qty'];
        }

        unset( $billItems );

        return $itemQuantities;
    }

    public static function getBillEstimateTotals(SubPackage $subPackage, Array $billIds)
    {
        $totalCostByBills          =  $subPackage->getEstimatedTotalByBills();
        $totalCostNoBuildUpByBills =  $subPackage->getEstimatedTotalNoBuildUpByBills();

        $estimationTotal = [];

        foreach($billIds as $billId)
        {
            $estimatedAmount = array_key_exists($billId, $totalCostByBills) ? $totalCostByBills[$billId] : 0;
            $estimatedAmount += array_key_exists($billId, $totalCostNoBuildUpByBills) ? $totalCostNoBuildUpByBills[$billId] : 0;

            $estimationTotal[ $billId ] = $estimatedAmount;
        }

        return $estimationTotal;
    }

    public static function getBillContractorTotals(SubPackage $subPackage, Array $billIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmtItem = $pdo->prepare("
            select
                project_structures.id as bill_id,
                items.id as item_id,
                items.element_id as element_id,
                companies.id as company_id,
                rates.rate,
                formulated_columns.final_value as final_value
            from " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " formulated_columns
            join " . BillItemTable::getInstance()->getTableName() . " items on items.id = formulated_columns.relation_id
            join " . SubPackageBillItemRateTable::getInstance()->getTableName() . " rates on rates.bill_item_id = items.id
            join " . SubPackageCompanyTable::getInstance()->getTableName() . " sp_companies on sp_companies.id = rates.sub_package_company_id
            join " . CompanyTable::getInstance()->getTableName() . " companies on companies.id = sp_companies.company_id
            join " .BillElementTable::getInstance()->getTableName(). " elements on elements.id = items.element_id
            join ". ProjectStructureTable::getInstance()->getTableName(). " project_structures on project_structures.id = elements.project_structure_id
            where project_structures.id in (".implode(',', $billIds).")
            and formulated_columns.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "'
            and items.deleted_at is null
            ");

        $stmtItem->execute();
        $records = $stmtItem->fetchAll(PDO::FETCH_ASSOC);

        // Get array of item_ids with bill_id as key to get item quantities
        $itemsIdsByBill = array();

        foreach($records as $record)
        {
            if(!array_key_exists($record['bill_id'], $itemsIdsByBill))
            {
                $itemsIdsByBill[$record['bill_id']] = array();
            }

            array_push($itemsIdsByBill[$record['bill_id']], $record['item_id']);
        }

        $billItemQuantities = array();

        foreach($itemsIdsByBill as $billId => $itemIds)
        {
            $bill = Doctrine_Core::getTable('ProjectStructure')->find($billId);
            $billItemQuantities[$billId] = self::getItemQuantities($subPackage, $bill, $itemIds );
        }

        $contractorTotals = array();
        foreach($records as $item)
        {
            if(!array_key_exists($item['company_id'], $contractorTotals) )
            {
                $contractorTotals[ $item['company_id'] ] = array();
            }

            if( ! array_key_exists($item['bill_id'], $contractorTotals[ $item['company_id'] ]) )
            {
                $contractorTotals[ $item['company_id'] ][ $item['bill_id'] ] = 0;
            }

            $itemQuantity = $billItemQuantities[$item['bill_id']][ $item['item_id'] ];

            $itemTotal = $item['rate'] * $itemQuantity;

            $contractorTotals[ $item['company_id'] ][ $item['bill_id'] ] += $itemTotal;
        }

        return $contractorTotals;
    }
}
