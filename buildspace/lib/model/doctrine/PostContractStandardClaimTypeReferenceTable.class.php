<?php

/**
 * PostContractStandardClaimTypeReferenceTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PostContractStandardClaimTypeReferenceTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PostContractStandardClaimTypeReferenceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PostContractStandardClaimTypeReference');
    }

    public static function getTypeReferenceByCounterAndColumnId($postContractId, $billColumnSettingId, $counter)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT t.id, t.post_contract_id, t.bill_column_setting_id, t.counter, t.new_name
            FROM ".PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName()." t
            WHERE t.post_contract_id = ".$postContractId." AND t.bill_column_setting_id = ".$billColumnSettingId."
            AND t.counter = ".$counter);

        $stmt->execute();

        return $typeItem = $stmt->fetch(PDO::FETCH_ASSOC);
    }

    public static function cloneUpToDateAmountByIdAndRevision($postContractId, $revision, $typeItemFrom, $typeItemToId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        //Clear all claim current revision
        $stmt = $pdo->prepare("DELETE FROM ".PostContractStandardClaimTable::getInstance()->getTableName()."
                WHERE claim_type_ref_id = ".$typeItemToId." AND revision_id = ".$revision['id']);

        $stmt->execute();

        $stmt = $pdo->prepare("INSERT INTO ".PostContractStandardClaimTable::getInstance()->getTableName()."
            (bill_item_id, revision_id, claim_type_ref_id, current_percentage, current_amount, up_to_date_amount, up_to_date_percentage, up_to_date_qty)
            SELECT c.bill_item_id, ".$revision['id']." AS revision_id, ".$typeItemToId." AS claim_type_ref_id,
            (COALESCE(c.up_to_date_percentage, 0) - COALESCE(pc.up_to_date_percentage, 0)) AS current_percentage, (COALESCE(c.up_to_date_amount, 0) - COALESCE(pc.up_to_date_amount, 0)) AS current_amount,
            COALESCE(c.up_to_date_amount, 0) AS up_to_date_amount, COALESCE(c.up_to_date_percentage, 0) AS up_to_date_percentage, COALESCE(c.up_to_date_qty, 0) AS up_to_date_qty
            FROM ".PostContractStandardClaimTable::getInstance()->getTableName()." c
            LEFT JOIN ".PostContractClaimRevisionTable::getInstance()->getTableName()." pr ON pr.post_contract_id = ".$postContractId." AND pr.version = (".$revision['version']." - 1)
            LEFT JOIN ".PostContractStandardClaimTable::getInstance()->getTableName()." pc ON pc.bill_item_id = c.bill_item_id AND pc.claim_type_ref_id = ".$typeItemToId." AND pc.revision_id = pr.id
            WHERE c.revision_id = ".$revision['id']." AND c.claim_type_ref_id = ".$typeItemFrom['id']);

        $stmt->execute();
    }

    public static function getOrNew($postContractId, $billColumnSettingId, $counter)
    {
        $typeItem = DoctrineQuery::create()
            ->select('t.id, t.post_contract_id, t.bill_column_setting_id, t.counter, t.new_name')
            ->from('PostContractStandardClaimTypeReference t')
            ->where('t.post_contract_id = ? AND t.bill_column_setting_id = ? AND t.counter = ?', array( $postContractId, $billColumnSettingId, $counter ))
            ->fetchOne();

        if ( !$typeItem )
        {
            $typeItem                         = new PostContractStandardClaimTypeReference();
            $typeItem->post_contract_id       = $postContractId;
            $typeItem->bill_column_setting_id = $billColumnSettingId;
            $typeItem->counter                = $counter;

            $typeItem->save();
        }

        return $typeItem;
    }

    public static function getStandardClaimTypeReferences(ProjectStructure $project)
    {
        if( ! is_null($project->PostContract) ) return array();

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT cs.id as bill_id, t.id, t.post_contract_id, t.bill_column_setting_id, t.counter, t.new_name
                FROM ". PostContractStandardClaimTypeReferenceTable::getInstance()->getTableName() ." t
                LEFT JOIN ".BillColumnSettingTable::getInstance()->getTableName() ." cs ON t.bill_column_setting_id = cs.id
                WHERE t.post_contract_id = {$project->PostContract->id}
                ORDER BY cs.id, t.counter");

        $stmt->execute();

        $standardClaimTypeReferences = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        foreach($standardClaimTypeReferences as $billColumnSettingId => $billRefData)
        {
            $sortedBillRefData = array();
            foreach($billRefData as $key => $unitData)
            {
                $sortedBillRefData[ $unitData['counter'] ] = $unitData;
            }
            unset( $standardClaimTypeReferences[ $billColumnSettingId ] );
            $standardClaimTypeReferences[ $billColumnSettingId ] = $sortedBillRefData;
        }

        return $standardClaimTypeReferences;
    }
}
