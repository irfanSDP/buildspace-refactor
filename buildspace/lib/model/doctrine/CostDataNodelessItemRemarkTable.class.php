<?php

/**
 * CostDataNodelessItemRemarkTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CostDataNodelessItemRemarkTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return CostDataNodelessItemRemarkTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('CostDataNodelessItemRemark');
    }

    public static function getRemarks($costDataId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT type, remarks
            FROM " . self::getInstance()->getTableName() . " r
            WHERE r.cost_data_id = :costDataId");

        $stmt->execute(array('costDataId' => $costDataId));

        $records = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        return array(
            MasterCostData::ITEM_TYPE_PROVISIONAL_SUM => $records[MasterCostData::ITEM_TYPE_PROVISIONAL_SUM] ?? "",
            MasterCostData::ITEM_TYPE_PRIME_COST_SUM  => $records[MasterCostData::ITEM_TYPE_PRIME_COST_SUM] ?? "",
            MasterCostData::ITEM_TYPE_PRIME_COST_RATE => $records[MasterCostData::ITEM_TYPE_PRIME_COST_RATE] ?? "",
        );
    }

    public static function updateRemarks($costDataId, $type, $remarks, $userId = null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT r.id
            FROM " . self::getInstance()->getTableName() . " r
            WHERE cost_data_id = :costDataId
            AND type = :type");

        $stmt->execute(array('costDataId' => $costDataId, 'type' => $type));

        $record = $stmt->fetch(PDO::FETCH_ASSOC);

        if(!$record)
        {
            $stmt = $pdo->prepare("INSERT INTO " . self::getInstance()->getTableName() . "
                (cost_data_id, type, remarks, created_at, updated_at, created_by, updated_by) VALUES
                (:costDataId, :type, :remarks, NOW(), NOW(), {$userId}, {$userId})");

            $stmt->execute(array('costDataId' => $costDataId, 'type' => $type, 'remarks' => $remarks));
        }
        else
        {
            $stmt = $pdo->prepare("UPDATE " . self::getInstance()->getTableName() . "
                SET remarks = :remarks, updated_at = NOW(), updated_by = {$userId}
                WHERE cost_data_id = :costDataId
                AND type = :type");

            $stmt->execute(array('costDataId' => $costDataId, 'type' => $type, 'remarks' => $remarks));
        }
    }
}