<?php

/**
 * MasterCostDataItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 *  
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class MasterCostDataItem extends BaseMasterCostDataItem
{
    CONST ITEM_LEVEL_PROJECT_OVERALL_COSTING = 1;
    CONST ITEM_LEVEL_WORK_CATEGORY = 2;
    CONST ITEM_LEVEL_ELEMENT = 3;

    public function save(Doctrine_Connection $conn = null)
    {
        $newRecord = $this->isNew();

        parent::save($conn);

        if( $newRecord && $this->level == self::ITEM_LEVEL_WORK_CATEGORY )
        {
            $this->addWorkCategoryColumns();
        }
    }

    public function addWorkCategoryColumns()
    {
        foreach(MasterCostDataItemColumnTable::getColumnDefinitions() as $columnName)
        {
            $itemColumn = new MasterCostDataItemColumn();
            $itemColumn->master_cost_data_item_id = $this->id;
            $itemColumn->column_name = $columnName;
            $itemColumn->save();
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        parent::delete($conn);
        $this->deleteDescendantsAndSelf();
        $this->recalculateSiblingPriorities();
    }

    protected function recalculateSiblingPriorities()
    {
        $parentClause = "parent_id = {$this->parent_id}";

        if( ! $this->parent_id )
        {
            $parentClause = "parent_id IS NULL";
        }

        Doctrine_Manager::getInstance()->getCurrentConnection()
            ->fetchAssoc("UPDATE {$this->getTable()->getTableName()} SET priority = priority-1 WHERE master_cost_data_id = {$this->master_cost_data_id} AND {$parentClause} AND priority > {$this->priority} AND deleted_at IS NULL");
    }

    protected function deleteDescendantsAndSelf()
    {
        $allIds = MasterCostDataItemTable::getDescendantIds([$this->id]);

        $allIds[] = $this->id;

        $implodedDescendantId = implode(',', $allIds);

        Doctrine_Manager::getInstance()->getCurrentConnection()
            ->fetchAssoc("UPDATE ".MasterCostDataItemTable::getInstance()->getTableName()." SET deleted_at = NOW() WHERE id in ({$implodedDescendantId}) AND deleted_at IS NULL");

        Doctrine_Manager::getInstance()->getCurrentConnection()
            ->fetchAssoc("UPDATE ".MasterCostDataItemColumnTable::getInstance()->getTableName()." SET deleted_at = NOW() WHERE master_cost_data_item_id in ({$implodedDescendantId}) AND deleted_at IS NULL");

        MasterCostDataItemColumnParticularTable::resetItems($allIds);
    }

    public function inUse()
    {
        return $this->descendantsHaveValues() || $this->descendantsLinkedToBillItem();
    }

    protected function descendantsHaveValues()
    {
        $allIds = MasterCostDataItemTable::getDescendantIds([ $this->id ]);

        $allIds[] = $this->id;

        $pdo = MasterCostDataItemTable::getInstance()->getConnection()->getDbh();

        $implodedMasterItemIds = implode(',', $allIds);

        $statement = "SELECT COUNT(i.id)
        FROM " . CostDataItemTable::getInstance()->getTableName() . " i
        JOIN " . MasterCostDataItemTable::getInstance()->getTableName() . " m on m.id = i.master_cost_data_item_id
        WHERE m.id in ({$implodedMasterItemIds})
        AND (i.approved_cost != 0 OR i.awarded_cost != 0)
        AND m.deleted_at IS NULL";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        $numberOfUsedItems = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $numberOfUsedItems > 0;
    }

    protected function descendantsLinkedToBillItem()
    {
        $allIds = MasterCostDataItemTable::getDescendantIds([ $this->id ]);

        $allIds[] = $this->id;

        $pdo = MasterCostDataItemTable::getInstance()->getConnection()->getDbh();

        $implodedMasterItemIds = implode(',', $allIds);

        $statement = "SELECT COUNT(pivot.id)
        FROM " . BillItemCostDataItemTable::getInstance()->getTableName() . " pivot
        JOIN " . CostDataItemTable::getInstance()->getTableName() . " i on i.id = pivot.cost_data_item_id
        JOIN " . MasterCostDataItemTable::getInstance()->getTableName() . " m on m.id = i.master_cost_data_item_id
        WHERE m.id in ({$implodedMasterItemIds})
        AND m.deleted_at IS NULL";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        $numberOfLinks = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $numberOfLinks > 0;
    }
}
