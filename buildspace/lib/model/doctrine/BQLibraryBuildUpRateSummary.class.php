<?php

/**
 * BQLibraryBuildUpRateSummary
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BQLibraryBuildUpRateSummary extends BaseBQLibraryBuildUpRateSummary
{
    public function calculateTotalCost()
    {
        $query = DoctrineQuery::create()->select('SUM(b.line_total) as total')
            ->from('BQLibraryBuildUpRateItem b')
            ->where('b.bq_item_id = ?', $this->bq_item_id)
            ->limit(1);

        $result = $query->fetchOne();
        $totalCost = $result['total'] ? $result['total'] : 0;

        if($totalCost != $this->total_cost)
        {
            $this->total_cost = $totalCost;
            $this->save();
        }

        return $this->total_cost;
    }

    public function getTotalCostAfterConversion()
    {
        $totalCost = $this->calculateTotalCost();
        $conversionFactorAmount = $this->conversion_factor_amount;
        $operator = $this->conversion_factor_operator;

        if($this->apply_conversion_factor)
        {
            $exp = $totalCost.$operator.$conversionFactorAmount;

            $evaluator = new EvalMath(true, true);
            $evaluator->suppress_errors = true;
            $evaluatedValue = $evaluator->evaluate($exp);

            return $evaluatedValue ? $evaluatedValue : 0;
        }

        return $totalCost;
    }

    public function calculateFinalCost()
    {
        $totalCost = $this->getTotalCostAfterConversion();

        $markupPrice = $totalCost * ($this->markup/100);

        $finalCost = $totalCost + $markupPrice;

        if($finalCost != $this->final_cost)
        {
            $this->final_cost = $finalCost;
            $this->save();
        }

        return $this->final_cost;
    }

    public function preSave($event)
    {
        //reset all conversion factor information when it's disabled
        if($this->apply_conversion_factor === 'false')
        {
            $this->conversion_factor_amount = 0;
            $this->conversion_factor_uom_id = NULL;
            $this->conversion_factor_operator = Constants::ARITHMETIC_OPERATOR_MULTIPLICATION;
        }

        return parent::preSave($event);
    }

    public function postSave($event)
    {
        if($this->deleted_at == NULL)
        {
            //update bq library item rate to set flag has_build_up to true;
            $bqItem = $this->BQItem;
            $bqItemFormulatedColumn = $bqItem->getFormulatedColumnByName(BQItem::FORMULATED_COLUMN_RATE);

            if(!$bqItemFormulatedColumn)
            {
                $bqItemFormulatedColumn = new BQItemFormulatedColumn();
                $bqItemFormulatedColumn->relation_id = $bqItem->id;
                $bqItemFormulatedColumn->column_name = BQItem::FORMULATED_COLUMN_RATE;
            }

            $bqItemFormulatedColumn->value = $this->final_cost;
            $bqItemFormulatedColumn->final_value = $this->final_cost;
            $bqItemFormulatedColumn->has_build_up = true;
            $bqItemFormulatedColumn->save();
        }

        return parent::postSave($event);
    }
}
