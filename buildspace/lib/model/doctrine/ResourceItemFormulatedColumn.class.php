<?php

/**
 * ResourceItemFormulatedColumn
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ResourceItemFormulatedColumn extends BaseResourceItemFormulatedColumn
{

    /**
     * update the rates/constant/wastage to SoR
     * @param  [object] $conn [Doctrine_Connection]
     * @return [null]
     */
    public function updateLinkedSorValues(Doctrine_Connection $conn = null)
    {
        $pdo = $conn ? $conn->getDbh() : $this->getTable()->getConnection()->getDbh();

        $updateValuesForLinkedItem = "UPDATE ".ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName()."
        SET value = :value, final_value = :final_value
        WHERE id IN (SELECT sorbufc.id FROM ".ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." sorbufc
        JOIN ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()." sorburi
        ON (sorburi.id = sorbufc.relation_id AND sorburi.resource_item_library_id = :relationId AND sorburi.deleted_at IS NULL)
        WHERE sorbufc.linked = true AND sorbufc.column_name = :columnName AND sorbufc.deleted_at IS NULL)
        AND deleted_at IS NULL RETURNING id";

        $updateItemStatusToRecalculate =
        "UPDATE ".ScheduleOfRateItemTable::getInstance()->getTableName()." set recalculate_resources_library_status = true
        WHERE id IN (SELECT sori.id FROM ".ScheduleOfRateItemTable::getInstance()->getTableName()." sori
        JOIN ".ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." sorbufc ON (sorbufc.linked = true AND sorbufc.column_name = :columnName AND sorbufc.deleted_at IS NULL)
        JOIN ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()." sorburi
        ON (sorburi.schedule_of_rate_item_id = sori.id AND
        sorburi.id = sorbufc.relation_id AND sorburi.resource_item_library_id = :relationId AND sorburi.deleted_at IS NULL))
        AND deleted_at IS NULL";

        $updateTradeStatusToRecalculate =
        "UPDATE ".ScheduleOfRateTradeTable::getInstance()->getTableName()." set recalculate_resources_library_status = true
        WHERE id IN (SELECT sort.id FROM ".ScheduleOfRateTradeTable::getInstance()->getTableName()." sort
        JOIN ".ScheduleOfRateItemTable::getInstance()->getTableName()." sori ON (sori.trade_id = sort.id)
        JOIN ".ScheduleOfRateBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." sorbufc ON (sorbufc.linked = true AND sorbufc.column_name = :columnName AND sorbufc.deleted_at IS NULL)
        JOIN ".ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName()." sorburi
        ON (sorburi.schedule_of_rate_item_id = sori.id AND
        sorburi.id = sorbufc.relation_id AND sorburi.resource_item_library_id = :relationId AND sorburi.deleted_at IS NULL))
        AND deleted_at IS NULL";

        try
        {
            $params = array(
                'value'       => $this->final_value,
                'final_value' => $this->final_value,
                'relationId'  => $this->relation_id,
                'columnName'  => $this->column_name
            );

            $stmt = $pdo->prepare($updateValuesForLinkedItem);
            $stmt->execute($params);

            $params2 = array(
                'relationId' => $this->relation_id,
                'columnName' => $this->column_name
            );

            $stmt = $pdo->prepare($updateItemStatusToRecalculate);
            $stmt->execute($params2);

            $stmt = $pdo->prepare($updateTradeStatusToRecalculate);
            $stmt->execute($params2);

            $referencedNodes = $this->getNodesRelatedByColumnName($this->column_name);

            foreach($referencedNodes as $referencedNode)
            {
                $node = Doctrine_Query::create()
                ->select('u.relation_id, u.value, u.final_value')
                ->from('ResourceItemFormulatedColumn u')
                ->where('u.id = ?', $referencedNode['node_from'])
                ->limit(1)
                ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

                if ( $node )
                {
                    $params = array(
                        'value'       => $node['final_value'],
                        'final_value' => $node['final_value'],
                        'relationId'  => $node['relation_id'],
                        'columnName'  => $this->column_name
                    );

                    $stmt = $pdo->prepare($updateValuesForLinkedItem);
                    $stmt->execute($params);

                    $params2 = array(
                        'relationId' => $node['relation_id'],
                        'columnName' => $this->column_name
                    );

                    $stmt = $pdo->prepare($updateItemStatusToRecalculate);
                    $stmt->execute($params2);

                    $stmt = $pdo->prepare($updateTradeStatusToRecalculate);
                    $stmt->execute($params2);
                }
            }
        }
        catch(Exception $e)
        {
            throw $e;
        }
    }

}