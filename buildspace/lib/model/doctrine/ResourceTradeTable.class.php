<?php

/**
 * ResourceTradeTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ResourceTradeTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ResourceTradeTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ResourceTrade');
    }

    public static function getMaxPriorityByResourceId($resourceId)
    {
        $queryResult = DoctrineQuery::create()->select('max(e.priority)')
            ->from('ResourceTrade e')
            ->where('e.resource_id = ?', $resourceId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $queryResult['max'];
    }

    public static function calculateTotalForResourceAnalysis($resourceId, ProjectStructure $project)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        // get total cost by trades
        $stmt = $pdo->prepare("SELECT r_trade.id, bur.bill_item_id, burfc.relation_id, burfc.final_value, burfc.column_name, bur.build_up_rate_resource_id, bur.build_up_rate_resource_trade_id
        FROM ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." AS burfc
        JOIN ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur ON burfc.relation_id = bur.id
        JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON bur.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        JOIN ".BillBuildUpRateResourceTable::getInstance()->getTableName()." AS r ON bur.build_up_rate_resource_id = r.id AND r.bill_item_id = i.id
        JOIN ".BillBuildUpRateResourceTradeTable::getInstance()->getTableName()." AS t ON bur.build_up_rate_resource_trade_id = t.id
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." r_trade ON r_trade.id = t.resource_trade_library_id
        JOIN ".ResourceItemTable::getInstance()->getTableName()." r_item ON r_item.id =  bur.resource_item_library_id AND r_trade.id = r_item.resource_trade_id
        WHERE s.root_id = ".$project->id." AND r.resource_library_id = ".$resourceId."
        AND burfc.column_name <> '".BillBuildUpRateItem::FORMULATED_COLUMN_WASTAGE."'
        AND burfc.final_value IS NOT NULL AND burfc.final_value <> 0
        AND r_trade.deleted_at IS NULL AND r_item.deleted_at is NULL
        AND burfc.deleted_at IS NULL AND r.deleted_at IS NULL AND t.deleted_at IS NULL AND bur.deleted_at IS NULL
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL
        AND s.deleted_at IS NULL ORDER BY r_trade.priority, t.priority");

        $stmt->execute();
    
        $billBuildUpRateFormulatedColumns = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);
        
        $stmt = $pdo->prepare("SELECT DISTINCT r_trade.id, sum.bill_item_id, sum.conversion_factor_operator, sum.conversion_factor_amount, r_trade.priority
        FROM ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." AS sum
        JOIN ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur ON bur.bill_item_id = sum.bill_item_id
        JOIN ".BillBuildUpRateResourceTradeTable::getInstance()->getTableName()." AS t ON bur.build_up_rate_resource_trade_id = t.id
        JOIN ".BillBuildUpRateResourceTable::getInstance()->getTableName()." AS r ON bur.build_up_rate_resource_id = r.id
        JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON r.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." r_trade ON r_trade.id = t.resource_trade_library_id
        JOIN ".ResourceItemTable::getInstance()->getTableName()." r_item ON r_item.id =  bur.resource_item_library_id AND r_trade.id = r_item.resource_trade_id
        WHERE s.root_id = ".$project->id." AND sum.apply_conversion_factor IS TRUE
        AND r.resource_library_id = ".$resourceId."
        AND r_trade.deleted_at IS NULL AND r_item.deleted_at is NULL
        AND bur.resource_item_library_id IS NOT NULL
        AND sum.deleted_at IS NULL AND r.deleted_at IS NULL AND t.deleted_at IS NULL AND bur.deleted_at IS NULL
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL
        AND s.deleted_at IS NULL ORDER BY r_trade.priority, sum.bill_item_id");

        $stmt->execute();

        $buildUpRateSummaryRecords = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

        $buildUpRateSummaries = [];

        foreach($buildUpRateSummaryRecords as $tradeId => $buildUpRateSummaryByTrade)
        {
            $buildUpRateSummaries[$tradeId] = [];

            foreach($buildUpRateSummaryByTrade as $buildUpRateSummary)
            {
                $buildUpRateSummaries[$tradeId][$buildUpRateSummary['bill_item_id']] = [
                    'conversion_factor_operator' => $buildUpRateSummary['conversion_factor_operator'],
                    'conversion_factor_amount'   => $buildUpRateSummary['conversion_factor_amount']
                ];
            }
        }

        $buildUpRateSummaryRecords = null;
        unset($buildUpRateSummaryRecords);

        $stmt = $pdo->prepare("SELECT DISTINCT i.id, i.grand_total_quantity
        FROM ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur
        JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON bur.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        JOIN ".BillBuildUpRateResourceTable::getInstance()->getTableName()." AS r ON bur.build_up_rate_resource_id = r.id AND r.bill_item_id = i.id
        JOIN ".BillBuildUpRateResourceTradeTable::getInstance()->getTableName()." AS t ON bur.build_up_rate_resource_trade_id = t.id
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." r_trade ON r_trade.id = t.resource_trade_library_id
        JOIN ".ResourceItemTable::getInstance()->getTableName()." r_item ON r_item.id =  bur.resource_item_library_id AND r_trade.id = r_item.resource_trade_id
        WHERE s.root_id = ".$project->id." AND r.resource_library_id = ".$resourceId."
        AND bur.resource_item_library_id IS NOT NULL
        AND i.grand_total_quantity IS NOT NULL AND i.grand_total_quantity <> 0
        AND r_trade.deleted_at IS NULL AND r_item.deleted_at is NULL
        AND r.deleted_at IS NULL AND t.deleted_at IS NULL AND bur.deleted_at IS NULL
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL
        AND s.deleted_at IS NULL ORDER BY i.id");

        $stmt->execute();

        $billItemGrandTotalQuantities = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $billBuildUpRateItems = [];

        foreach($billBuildUpRateFormulatedColumns as $tradeId => $formulatedColumnsByTrade)
        {
            $billBuildUpRateItems[$tradeId] = [];

            foreach($formulatedColumnsByTrade as $billBuildUpRateFormulatedColumn)
            {
                $billBuildUpRateItems[$tradeId][$billBuildUpRateFormulatedColumn['relation_id']]['bill_item_id'] = $billBuildUpRateFormulatedColumn['bill_item_id'];
                $billBuildUpRateItems[$tradeId][$billBuildUpRateFormulatedColumn['relation_id']][$billBuildUpRateFormulatedColumn['column_name']] = $billBuildUpRateFormulatedColumn['final_value'];
            }
        }

        $billBuildUpRateFormulatedColumns = null;
        unset($billBuildUpRateFormulatedColumns);

        $result = [];

        foreach($billBuildUpRateItems as $tradeId => $billBuildUpRateItemsByTrade)
        {
            $result[$tradeId] = 0;

            foreach($billBuildUpRateItemsByTrade as $billBuildUpRateItem)
            {
                if(array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY, $billBuildUpRateItem))
                {
                    $quantity = $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY];
                    $number   = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_NUMBER, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_NUMBER] : 1;
                    $constant = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT] : 1;
                    $rate     = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_RATE, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_RATE] : 0;

                    $billItemQuantity = array_key_exists($billBuildUpRateItem['bill_item_id'], $billItemGrandTotalQuantities) ? $billItemGrandTotalQuantities[$billBuildUpRateItem['bill_item_id']] : 0;

                    if(array_key_exists($tradeId, $buildUpRateSummaries) && array_key_exists($billBuildUpRateItem['bill_item_id'], $buildUpRateSummaries[$tradeId]))
                    {
                        switch($buildUpRateSummaries[$tradeId][$billBuildUpRateItem['bill_item_id']]['conversion_factor_operator'])
                        {
                            case '/':
                                $rate = $number * $constant * $quantity / $buildUpRateSummaries[$tradeId][$billBuildUpRateItem['bill_item_id']]['conversion_factor_amount'] * $rate;
                                break;
                            case '*':
                                $rate = $number * $constant * $quantity * $buildUpRateSummaries[$tradeId][$billBuildUpRateItem['bill_item_id']]['conversion_factor_amount'] * $rate;
                                break;
                            default:
                                throw new Exception('Invalid conversion factor operator');
                        }
                    }
                    else
                    {
                        $rate = $number * $constant * $quantity * $rate;
                    }

                    $cost = round($rate, 2) * $billItemQuantity;

                    $result[$tradeId] += $cost;
                }
            }
        }

        unset($billBuildUpRateItems, $buildUpRateSummaries);

        // end total cost by trades

        // get total cost for unsorted items
        
        $stmt = $pdo->prepare("SELECT bur.bill_item_id, burfc.relation_id, burfc.final_value, burfc.column_name
        FROM ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." AS burfc
        JOIN ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur ON burfc.relation_id = bur.id
        JOIN ".BillBuildUpRateResourceTable::getInstance()->getTableName()." AS r ON bur.build_up_rate_resource_id = r.id
        JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON r.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        WHERE s.root_id = ".$project->id." AND r.resource_library_id = ".$resourceId."
        AND bur.build_up_rate_resource_trade_id IS NULL
        AND bur.resource_item_library_id IS NULL
        AND i.grand_total_quantity IS NOT NULL AND i.grand_total_quantity <> 0
        AND burfc.column_name <> '".BillBuildUpRateItem::FORMULATED_COLUMN_WASTAGE."'
        AND burfc.final_value IS NOT NULL AND burfc.final_value <> 0
        AND burfc.deleted_at IS NULL AND r.deleted_at IS NULL AND bur.deleted_at IS NULL
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL
        AND s.deleted_at IS NULL ORDER BY burfc.relation_id");
        
        $stmt->execute();
        
        $billBuildUpRateFormulatedColumns = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $stmt = $pdo->prepare("SELECT DISTINCT sum.bill_item_id, sum.conversion_factor_operator, sum.conversion_factor_amount
        FROM ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." AS sum
        JOIN ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur ON sum.bill_item_id = bur.bill_item_id
        JOIN ".BillBuildUpRateResourceTable::getInstance()->getTableName()." AS r ON bur.build_up_rate_resource_id = r.id
        JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON r.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        WHERE s.root_id = ".$project->id." AND sum.apply_conversion_factor IS TRUE
        AND r.resource_library_id = ".$resourceId."
        AND bur.build_up_rate_resource_trade_id IS NULL
        AND bur.resource_item_library_id IS NULL
        AND sum.deleted_at IS NULL AND r.deleted_at IS NULL AND bur.deleted_at IS NULL
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL
        AND s.deleted_at IS NULL ORDER BY sum.bill_item_id");

        $stmt->execute();

        $buildUpRateSummaryRecords = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $buildUpRateSummaries = [];
        foreach($buildUpRateSummaryRecords as $buildUpRateSummary)
        {
            $buildUpRateSummaries[$buildUpRateSummary['bill_item_id']] = array(
                'conversion_factor_operator' => $buildUpRateSummary['conversion_factor_operator'],
                'conversion_factor_amount'   => $buildUpRateSummary['conversion_factor_amount']
            );
        }

        $buildUpRateSummaryRecords = null;
        unset($buildUpRateSummaryRecords);

        $billBuildUpRateItems = [];

        foreach($billBuildUpRateFormulatedColumns as $billBuildUpRateFormulatedColumn)
        {
            $billBuildUpRateItems[$billBuildUpRateFormulatedColumn['relation_id']]['bill_item_id'] = $billBuildUpRateFormulatedColumn['bill_item_id'];
            $billBuildUpRateItems[$billBuildUpRateFormulatedColumn['relation_id']][$billBuildUpRateFormulatedColumn['column_name']] = $billBuildUpRateFormulatedColumn['final_value'];
        }

        $billBuildUpRateFormulatedColumns = null;
        unset($billBuildUpRateFormulatedColumns);
        
        $stmt = $pdo->prepare("SELECT DISTINCT i.id, i.grand_total_quantity
        FROM ".BillBuildUpRateItemTable::getInstance()->getTableName()." AS bur
        JOIN ".BillBuildUpRateResourceTable::getInstance()->getTableName()." AS r ON bur.build_up_rate_resource_id = r.id
        JOIN ".BillItemTable::getInstance()->getTableName()." AS i ON r.bill_item_id = i.id
        JOIN ".BillElementTable::getInstance()->getTableName()." AS e ON i.element_id = e.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." AS s ON e.project_structure_id = s.id
        WHERE s.root_id = ".$project->id." AND r.resource_library_id = ".$resourceId."
        AND bur.build_up_rate_resource_trade_id IS NULL
        AND bur.resource_item_library_id IS NULL
        AND i.grand_total_quantity IS NOT NULL AND i.grand_total_quantity <> 0
        AND r.deleted_at IS NULL AND bur.deleted_at IS NULL
        AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND e.deleted_at IS NULL
        AND s.deleted_at IS NULL GROUP BY i.id, i.grand_total_quantity ORDER BY i.id");

        $stmt->execute();

        $billItemGrandTotalQuantities = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        $result['unsorted'] = 0;

        foreach($billBuildUpRateItems as $billBuildUpRateItem)
        {
            if(array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY, $billBuildUpRateItem))
            {
                $quantity = $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_QUANTITY];
                $number   = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_NUMBER, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_NUMBER] : 1;
                $constant = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_CONSTANT] : 1;
                $rate     = array_key_exists(BillBuildUpRateItem::FORMULATED_COLUMN_RATE, $billBuildUpRateItem) ? $billBuildUpRateItem[BillBuildUpRateItem::FORMULATED_COLUMN_RATE] : 0;

                $billItemQuantity = array_key_exists($billBuildUpRateItem['bill_item_id'], $billItemGrandTotalQuantities) ? $billItemGrandTotalQuantities[$billBuildUpRateItem['bill_item_id']] : 0;

                if(array_key_exists($billBuildUpRateItem['bill_item_id'], $buildUpRateSummaries))
                {
                    switch($buildUpRateSummaries[$billBuildUpRateItem['bill_item_id']]['conversion_factor_operator'])
                    {
                        case '/':
                            $rate = $number * $constant * $quantity / $buildUpRateSummaries[$billBuildUpRateItem['bill_item_id']]['conversion_factor_amount'] * $rate;
                            break;
                        case '*':
                            $rate = $number * $constant * $quantity * $buildUpRateSummaries[$billBuildUpRateItem['bill_item_id']]['conversion_factor_amount'] * $rate;
                            break;
                        default:
                            throw new Exception('Invalid conversion factor operator');
                    }
                }
                else
                {
                    $rate = $number * $constant * $quantity * $rate;
                }

                $cost = round($rate, 2) * $billItemQuantity;

                $result['unsorted'] += $cost;
            }
        }

        unset($billBuildUpRateItems, $buildUpRateSummaries);

        return $result;
    }

    public static function getRecordsByBQLibraryAndIds(Resource $resource, array $ids)
    {
        return DoctrineQuery::create()
        ->from('ResourceTrade t')
        ->whereIn('t.id', $ids)
        ->andWhere('t.resource_id = ?', array($resource->id))
        ->addOrderBy('t.priority ASC')
        ->fetchArray();
    }

    public static function getRecordsThatHasStockInsByProject(ProjectStructure $project, Resource $resource)
    {
        $pdo  = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT rt.id, rt.description, COALESCE(SUM(b.total), 0) as total_cost
        FROM ".StockInInvoiceItemTable::getInstance()->getTableName()." b
        JOIN ".StockInInvoiceTable::getInstance()->getTableName()." sii
        ON (sii.id = b.stock_in_invoice_id AND sii.deleted_at IS NULL)
        JOIN ".ResourceItemTable::getInstance()->getTableName()." ri
        ON (ri.id = b.resource_item_id AND ri.deleted_at IS NULL)
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." rt
        ON (rt.id = ri.resource_trade_id AND rt.deleted_at IS NULL)
        WHERE ( sii.project_structure_id = :projectId AND rt.resource_id = :resourceId AND b.deleted_at IS NULL )
        GROUP BY rt.id ORDER BY rt.priority ASC");

        $stmt->execute(array('projectId' => $project->id, 'resourceId' => $resource->id));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getAffectedItemIdsThatHasStockInsByProjectAndResourceTradeIds(ProjectStructure $project, Resource $resource, $resourceTradeIds)
    {
        $data             = array();
        $resourceTradeIds = json_decode($resourceTradeIds);

        if ( empty($resourceTradeIds) )
        {
            return $data;
        }

        $pdo  = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT ri.id, ri.resource_trade_id
        FROM ".StockInInvoiceItemTable::getInstance()->getTableName()." b
        JOIN ".StockInInvoiceTable::getInstance()->getTableName()." sii
        ON (sii.id = b.stock_in_invoice_id AND sii.deleted_at IS NULL)
        JOIN ".ResourceItemTable::getInstance()->getTableName()." ri
        ON (ri.id = b.resource_item_id AND ri.deleted_at IS NULL)
        JOIN ".ResourceTradeTable::getInstance()->getTableName()." rt
        ON (rt.id = ri.resource_trade_id AND rt.deleted_at IS NULL)
        WHERE ( sii.project_structure_id = :projectId AND rt.id IN (".implode(',', $resourceTradeIds).")
        AND rt.resource_id = :resourceId AND b.deleted_at IS NULL )");

        $stmt->execute(array('projectId' => $project->id, 'resourceId' => $resource->id));

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $results as $result )
        {
            $data[$result['resource_trade_id']][] = $result['id'];
        }

        return $data;
    }

    public static function getRecordsByIds(array $resourceTradeIds)
    {
        return DoctrineQuery::create()
            ->select('e.id, e.description, r.name')
            ->from('ResourceTrade e')
            ->leftJoin('e.Resource r')
            ->whereIn('e.id', $resourceTradeIds)
            ->orderBy('r.id, e.priority ASC')
            ->fetchArray();
    }
}