<?php

/**
 * BillBuildUpRateResourceTradeTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillBuildUpRateResourceTradeTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BillBuildUpRateResourceTradeTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillBuildUpRateResourceTrade');
    }

    public static function getByTradeLibraryIdAndBillItemId($tradeLibraryId, $billItemId, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('t.*')
            ->from('BillBuildUpRateResourceTrade t')
            ->where('t.resource_trade_library_id = ?', $tradeLibraryId)
            ->andWhereIn('t.bill_item_id', $billItemId)
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function getExistingRecordFromResourceTrade($billItemId, $billBuildUpRateResourceId, $resourceTradeLibraryId)
    {
        $resourceTradeId = $resourceTradeLibraryId;
        $pdo = self::getInstance()->getConnection()->getDbh();

        if( empty($resourceTradeId) OR is_null($resourceTradeId) )
        {
            return null;
        }

        $stmt = $pdo->prepare("SELECT t.id, t.description, t.bill_item_id, t.build_up_rate_resource_id, t.resource_trade_library_id, t.priority FROM ".self::getInstance()->getTableName()." t WHERE t.bill_item_id = ".$billItemId." AND t.build_up_rate_resource_id = ".$billBuildUpRateResourceId." AND t.resource_trade_library_id =".$resourceTradeId." AND t.deleted_at IS NULL");
        $stmt->execute();

        $billBuildUpRateResourceTrade = $stmt->fetch(PDO::FETCH_ASSOC);

        if(!$billBuildUpRateResourceTrade)
        {
            $sth = $pdo->prepare("SELECT id, description, priority FROM ".ResourceTradeTable::getInstance()->getTableName()." WHERE id = ".$resourceTradeId);
            $sth->execute();

            if($resourceTrade = $sth->fetch(PDO::FETCH_ASSOC))
            {
                $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

                $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (description, bill_item_id, build_up_rate_resource_id, resource_trade_library_id, priority, created_at, updated_at, created_by, updated_by) VALUES ('".($resourceTrade['description'])."', ".$billItemId.", ".$billBuildUpRateResourceId.", ".$resourceTrade['id'].", ".$resourceTrade['priority'].", NOW(), NOW(), ".$userId.", ".$userId.") RETURNING id, description, bill_item_id, build_up_rate_resource_id, resource_trade_library_id, priority");
                $stmt->execute();

                $billBuildUpRateResourceTrade = $stmt->fetch(PDO::FETCH_ASSOC);
            }
            else
            {
                throw new Exception('Resource trade with id: '.$resourceTradeId.' does not exist');
            }
        }

        return $billBuildUpRateResourceTrade;
    }

    public static function getExistingRecordFromBillBuildUpRateResourceTrade($targetItemId, $billBuildUpRateResourceId, $resourceTradeLibraryId)
    {
        $resourceTradeId = $resourceTradeLibraryId;
        $pdo = self::getInstance()->getConnection()->getDbh();

        if ( empty($resourceTradeId) OR is_null($resourceTradeId) )
        {
            return null;
        }

        $stmt = $pdo->prepare("SELECT t.id, t.description, t.bill_item_id, t.build_up_rate_resource_id, t.resource_trade_library_id, t.priority FROM ".self::getInstance()->getTableName()." t WHERE t.bill_item_id = ".$targetItemId." AND t.build_up_rate_resource_id = ".$billBuildUpRateResourceId." AND t.resource_trade_library_id =".$resourceTradeId." AND t.deleted_at IS NULL");
        $stmt->execute();

        $billBuildUpRateResourceTrade = $stmt->fetch(PDO::FETCH_ASSOC);

        if( ! $billBuildUpRateResourceTrade )
        {
            $sth = $pdo->prepare("SELECT id, description, priority FROM ".ResourceTradeTable::getInstance()->getTableName()." WHERE id = ".$resourceTradeId);
            $sth->execute();

            if($resourceTrade = $sth->fetch(PDO::FETCH_ASSOC))
            {
                $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

                $stmt = $pdo->prepare("INSERT INTO ".self::getInstance()->getTableName()." (description, bill_item_id, build_up_rate_resource_id, resource_trade_library_id, priority, created_at, updated_at, created_by, updated_by) VALUES ('".pg_escape_string($resourceTrade['description'])."', ".$targetItemId.", ".$billBuildUpRateResourceId.", ".$resourceTrade['id'].", ".$resourceTrade['priority'].", NOW(), NOW(), ".$userId.", ".$userId.") RETURNING id, description, bill_item_id, build_up_rate_resource_id, resource_trade_library_id, priority");
                $stmt->execute();

                $billBuildUpRateResourceTrade = $stmt->fetch(PDO::FETCH_ASSOC);
            }
            else
            {
                throw new Exception('Resource trade with id: '.$resourceTradeId.' does not exist');
            }
        }

        return $billBuildUpRateResourceTrade;
    }
}