<?php

/**
 * SupplyOfMaterialElement
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SupplyOfMaterialElement extends BaseSupplyOfMaterialElement
{
    public function getTotalEstimationRates()
    {
        return SupplyOfMaterialElementTable::getTotalRateByElementId($this->id);
    }

    public function copyTo(SupplyOfMaterialElement $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $priorityToUpdate = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;

            $cloneElement = $this->copy();
            $cloneElement->priority = $priorityToUpdate;
            $cloneElement->save($con);

            if(!$lastPosition)
            {
                $this->updatePriority($priorityToUpdate, $cloneElement->id);
            }

            $roots = DoctrineQuery::create()
                ->select('i.id, i.description, i.note, i.type, i.supply_rate, i.uom_id, i.level, i.lft, i.rgt, i.priority')
                ->from('SupplyOfMaterialItem i')
                ->where('i.element_id = ?', array($this->id))
                ->andWhere('i.root_id = i.id')
                ->orderBy('i.priority ASC')
                ->fetchArray();

            $pdo = $this->getTable()->getConnection()->getDbh();
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            $rootSql = "INSERT INTO ".SupplyOfMaterialItemTable::getInstance()->getTableName()." (element_id, description, note, type, supply_rate, uom_id, level, lft, rgt, priority, created_at, updated_at, created_by, updated_by)
                    VALUES (".$cloneElement->id.", :description, :note, :type, :supply_rate, :uom_id, :level, :lft, :rgt, :priority, NOW(), NOW(), ".$userId.", ".$userId.") RETURNING id";

            $itemSql = "INSERT INTO ".SupplyOfMaterialItemTable::getInstance()->getTableName()." (element_id, description, note, type, supply_rate, uom_id, root_id, level, lft, rgt, priority, created_at, updated_at, created_by, updated_by)
                    VALUES (".$cloneElement->id.", :description, :note, :type, :supply_rate, :uom_id, :root_id, :level, :lft, :rgt, :priority, NOW(), NOW(), ".$userId.", ".$userId.") RETURNING id";

            $rootStmt = $pdo->prepare($rootSql);
            $itemStmt = $pdo->prepare($itemSql);

            foreach($roots as $root)
            {
                $rootStmt->execute(array(
                    'description' => $root['description'],
                    'note'        => $root['note'],
                    'type'        => $root['type'],
                    'uom_id'      => $root['uom_id'],
                    'level'       => $root['level'],
                    'lft'         => $root['lft'],
                    'rgt'         => $root['rgt'],
                    'priority'    => $root['priority'],
                    'supply_rate' => $root['supply_rate'],
                ));

                $rootReturningId = $rootStmt->fetch(PDO::FETCH_ASSOC);

                Doctrine_Query::create()->update('SupplyOfMaterialItem i')
                    ->set('i.root_id', $rootReturningId['id'])
                    ->where('i.id = ?', $rootReturningId['id'])
                    ->execute();

                $items = DoctrineQuery::create()
                    ->select('i.id, i.description, i.note, i.type, i.supply_rate, i.uom_id, i.element_id, i.level, i.lft, i.rgt, i.priority')
                    ->from('SupplyOfMaterialItem i')
                    ->where('i.root_id = ?', $root['id'])
                    ->andWhere('i.element_id = ?', array($this->id))
                    ->andWhere('i.lft > ? AND i.rgt < ?', array($root['lft'], $root['rgt']))
                    ->addOrderBy('i.lft ASC')
                    ->fetchArray();

                foreach($items as $item)
                {
                    $itemStmt->execute(array(
                        'description' => $item['description'],
                        'note'        => $item['note'],
                        'type'        => $item['type'],
                        'uom_id'      => $item['uom_id'],
                        'root_id'     => $rootReturningId['id'],
                        'level'       => $item['level'],
                        'lft'         => $item['lft'],
                        'rgt'         => $item['rgt'],
                        'priority'    => $item['priority'],
                        'supply_rate' => $item['supply_rate'],
                    ));
                }
            }

            $con->commit();

            return $cloneElement;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function moveTo($priority, $lastPosition=false)
    {
        $priority = $lastPosition ? $priority+1 : $priority;

        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            $this->priority = $priority;
            $this->save();

            if(!$lastPosition)
            {
                $this->updatePriority($priority, $this->id);
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }

    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            /*
             * delete all items that belong to the element
             */
            Doctrine_Manager::getInstance()->getCurrentConnection()
                ->fetchAssoc("UPDATE ".SupplyOfMaterialItemTable::getInstance()->getTableName()." SET deleted_at = NOW() WHERE element_id = ".$this->id);

            Doctrine_Query::create()
                ->delete('SupplyOfMaterialElement e')
                ->where('e.id = ?', $this->id)
                ->execute();

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
            throw $e;
        }
    }

    private function updatePriority($priority, $excludeId)
    {
        $records = DoctrineQuery::create()->select('e.id')
            ->from('SupplyOfMaterialElement e')
            ->where('e.project_structure_id = ?', $this->project_structure_id)
            ->andWhere('e.priority >= ?',$priority)
            ->addOrderBy('e.priority ASC')
            ->execute();

        $priorityToUpdate = $priority + 1;

        foreach($records as $record)
        {
            if($record->id != $excludeId)
            {
                $record->priority = $priorityToUpdate;
                $record->save();
            }

            $priorityToUpdate++;
        }
    }
}
