<?php

/**
 * StockInInvoice
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class StockInInvoice extends BaseStockInInvoice
{

    const TERM_DEFAULT_ID = -1;
    const TERM_CASH_ID = 1;
    const TERM_30_DAYS_ID = 2;
    const TERM_60_DAYS_ID = 4;

    const TERM_DEFAULT_TEXT = 'Term';
    const TERM_CASH_TEXT = 'Cash';
    const TERM_30_DAYS_TEXT = '30 days';
    const TERM_60_DAYS_TEXT = '60 days';

    public function save(Doctrine_Connection $conn = null)
    {
        $isNew = $this->isNew();

        if ( $isNew )
        {
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            $this->created_by = $userId;
            $this->updated_by = $userId;
        }

        parent::save($conn);

        // if current object is new, then will copy assigned Purchase Order's Item into Stock In as well
        if ( $isNew )
        {
            $this->refresh(true);

            $this->copyAllItemsAssignedByPurchaseOrder($this);
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        StockInDeliveryOrderTable::deleteRecordsByStockInInvoice($this);

        StockInInvoiceItemTable::deleteRecordsByStockInInvoice($this);

        return parent::delete($conn);
    }

    public function deleteAttachedFile(Doctrine_Connection $conn = null)
    {
        $this->invoice_upload = NULL;

        parent::save($conn);

        return true;
    }

    public function copyResourceItems(Array $resourceItemIds)
    {
        $pdo          = $this->getTable()->getConnection()->getDbh();
        $userId       = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');
        $data         = array();
        $stockInItems = array();

        if ( empty($resourceItemIds) )
        {
            return $stockInItems;
        }

        // only select work item to be imported into build up
        $stmt = $pdo->prepare("SELECT i.id FROM ".ResourceItemTable::getInstance()->getTableName()." AS i
        WHERE i.id IN (". implode(',', $resourceItemIds) .") AND i.type = ".ResourceItem::TYPE_WORK_ITEM." AND i.deleted_at IS NULL
        ORDER BY i.priority, i.lft, i.level ASC");

        $stmt->execute();
        $resourceItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( empty($resourceItems) )
        {
            return $stockInItems;
        }

        foreach ( $resourceItems as $resourceItem )
        {
            $data[] = "({$this->id}, {$resourceItem['id']},  NOW(), NOW(), {$userId}, {$userId})";

            unset($resourceItem);
        }

        unset($resourceItems);

        $stmt = $pdo->prepare('INSERT INTO '.StockInInvoiceItemTable::getInstance()->getTableName().' (stock_in_invoice_id, resource_item_id, created_at, updated_at, created_by, updated_by) VALUES '.implode(', ', $data));

        $stmt->execute();

        unset($data);
    }

    private function copyAllItemsAssignedByPurchaseOrder(StockInInvoice $purchaseOrder)
    {
        return PurchaseOrderItemTable::copyAllAssignedItemsByStockInInvoice($purchaseOrder);
    }

}