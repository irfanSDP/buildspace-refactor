<?php

/**
 * ItemCodeSetting
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 *  
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ItemCodeSetting extends BaseItemCodeSetting
{
    public static function getItemCodeSettings($projectStructure)
    {
        $records = DoctrineQuery::create()->select('*')
                    ->from('ItemCodeSetting ics')
                    ->where('ics.project_structure_id = ?', $projectStructure->id)
                    ->fetchArray(); 

        return $records;
    }

    public static function getItemCodeSettingBreakdownsTotalAmount($projectStructure, $claimCertificate)
    {
        $pdo = ItemCodeSettingTable::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("select SUM(COALESCE((amount))) as total
                    from bs_item_code_setting_objects o
                    inner join bs_item_code_setting_object_breakdowns ob on o.id = ob.item_code_setting_object_id 
                    where o.project_structure_id = {$projectStructure->id}
                    and ob.claim_certificate_id = {$claimCertificate->id}");

        $stmt->execute();

        return floatval($stmt->fetchColumn(0));
    }

    public static function checkClaimCertificateAccountingExportValidity($projectStructure, $claimCertificate)
    {
        $currentViewingClaimRevision = $claimCertificate->PostContractClaimRevision;
        $accountCodeSetting = $projectStructure->MainInformation->getEProjectProject()->AccountCodeSetting;
        $itemCodeSettings = self::getItemCodeSettings($projectStructure);
        $totalCurrentClaimAmount = 0.0;

        $thisRevisionBillWorkDoneClaims = [];

        if($currentViewingClaimRevision->getPreviousClaimRevision())
        {
            $thisRevisionBillUpToDateClaims = PostContractTable::getUpToDateAmountGroupByBills($projectStructure, $currentViewingClaimRevision->toArray());
            $previousRevisionBillUpToDateClaims = PostContractTable::getUpToDateAmountGroupByBills($projectStructure, $currentViewingClaimRevision->getPreviousClaimRevision()->toArray());
            
            foreach($thisRevisionBillUpToDateClaims as $billId => $amount)
            {
                if(array_key_exists($billId, $previousRevisionBillUpToDateClaims))
                {
                    $thisRevisionBillWorkDoneClaims[$billId] = ($thisRevisionBillUpToDateClaims[$billId] - $previousRevisionBillUpToDateClaims[$billId]);
                }
                else
                {
                    $thisRevisionBillWorkDoneClaims[$billId] = $thisRevisionBillUpToDateClaims[$billId];
                }
            }
        }
        else
        {
            $thisRevisionBillWorkDoneClaims = PostContractTable::getUpToDateAmountGroupByBills($projectStructure, $currentViewingClaimRevision->toArray());
        }

        $bills = DoctrineQuery::create()
            ->select('s.id, s.title, s.type, s.level, t.type AS bill_type, t.status')
            ->from('ProjectStructure s')
            ->leftJoin('s.BillType t')
            ->where('s.lft >= ? AND s.rgt <= ?', array( $projectStructure->lft, $projectStructure->rgt ))
            ->andWhere('s.root_id = ?', $projectStructure->id)
            ->andWhere('s.type = ?', ProjectStructure::TYPE_BILL)
            ->addOrderBy('s.lft ASC')
            ->fetchArray();
        
        $pdo  = PostContractTable::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT b.id AS bill_id, e.id
        FROM ".BillElementTable::getInstance()->getTableName()." e
        JOIN ".BillTypeTable::getInstance()->getTableName()." t ON t.project_structure_id = e.project_structure_id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." b ON t.project_structure_id = b.id
        JOIN ".ProjectStructureTable::getInstance()->getTableName()." p ON b.root_id = p.id
        WHERE p.id = ".$projectStructure->id." AND b.type = ".ProjectStructure::TYPE_BILL."
        AND t.type = ".BillType::TYPE_PRELIMINARY."
        AND b.lft  >= ".$projectStructure->lft." AND b.rgt <= ".$projectStructure->rgt."
        AND e.deleted_at IS NULL AND t.deleted_at IS NULL AND b.deleted_at IS NULL
        ORDER BY b.lft ASC");
        $stmt->execute();
        $prelimBillsElements = $stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);

        $postContract = PostContractTable::getInstance()->findOneBy('project_structure_id', $projectStructure->id);

        $prelimBillsAmount = [];

        foreach($prelimBillsElements as $billId => $prelimBillElements)
        {
            list(
                $elementBillItems, $initialCostings, $timeBasedCostings, $prevTimeBasedCostings, $workBasedCostings, $prevWorkBasedCostings, $finalCostings, $includeInitialCostings, $includeFinalCostings
            ) = PostContractBillItemRateTable::getPrelimElementClaimCosting($currentViewingClaimRevision, $prelimBillElements);
            
            $prelimBillsAmount[$billId] = 0;

            foreach ( $elementBillItems as $elementId => $billItems )
            {
                foreach($billItems as $billItem)
                {
                    PreliminariesClaimTable::calculateClaimRates($currentViewingClaimRevision->toArray(), $billItem, $currentViewingClaimRevision->toArray(), $initialCostings, $finalCostings, $timeBasedCostings, $workBasedCostings, $prevTimeBasedCostings, $prevWorkBasedCostings, $includeInitialCostings, $includeFinalCostings);
                    $prelimBillsAmount[$billId] += $billItem['currentClaim-amount'];

                    unset( $billItem );
                }
            }

            unset($elementBillItems, $initialCostings, $timeBasedCostings, $prevTimeBasedCostings, $workBasedCostings, $prevWorkBasedCostings, $finalCostings, $includeInitialCostings, $includeFinalCostings);
        }

        foreach($bills as &$bill)
        {
            if($bill['bill_type'] == BillType::TYPE_PRELIMINARY)
            {
                $thisRevisionBillAmount = array_key_exists($bill['id'], $prelimBillsAmount) ? $prelimBillsAmount[$bill['id']] : 0.0;
            }
            else
            {
                $thisRevisionBillAmount = array_key_exists($bill['id'], $thisRevisionBillWorkDoneClaims) ? $thisRevisionBillWorkDoneClaims[ $bill['id'] ] : 0.0;
            }

            $totalCurrentClaimAmount += $thisRevisionBillAmount;
        }

        // vo claim
        $voCurrentClaim = $currentViewingClaimRevision->ClaimCertificate->getClaimCertInfo()['currentVoWorkDone'];
        $totalCurrentClaimAmount += $voCurrentClaim;

        // rfv claim
        $rfvCurrentClaim = $currentViewingClaimRevision->ClaimCertificate->getClaimCertInfo()['currentRequestForVariationWorkDone'];
        $totalCurrentClaimAmount += $rfvCurrentClaim;

        // Material-On-Site (if included when submitting Letter of Award)
        $newPostContractFormInformation = $projectStructure->NewPostContractFormInformation;
        $includesMaterialOnSite = LetterOfAwardRetentionSumModulesTable::isIncluded($newPostContractFormInformation->id, PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE);

        if($includesMaterialOnSite)
        {
            $mosTotalAmount = self::calculateMaterialOnSiteAmount($currentViewingClaimRevision->ClaimCertificate, $projectStructure);

            if($currentViewingClaimRevision->getPreviousClaimRevision())
            {
                $previousTotalAmount = self::calculateMaterialOnSiteAmount($currentViewingClaimRevision->getPreviousClaimRevision()->ClaimCertificate, $projectStructure);
                $mosTotalAmount -= $previousTotalAmount;
            }

            $totalCurrentClaimAmount += $mosTotalAmount;
        }

        $itemCodeSettingBreakdownsTotalAmount = self::getItemCodeSettingBreakdownsTotalAmount($projectStructure, $claimCertificate);

        $totalCurrentClaimAmount = number_format($totalCurrentClaimAmount, 2, '.', '');

        $isValid = (strval($totalCurrentClaimAmount) == strval($itemCodeSettingBreakdownsTotalAmount));

        return $isValid;
    }

    // calculation ignores payback
    public static function calculateMaterialOnSiteAmount(ClaimCertificate $claimCertificate, ProjectStructure $project)
    {
        $records = Doctrine_Query::create()->select('id, description, claim_certificate_id, status, updated_at')
                    ->from('PostContractClaim')
                    ->where('project_structure_id = ?', $project->id)
                    ->andWhere('type = ?', PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
                    ->andWhere('claim_certificate_id = ?', $claimCertificate->id)
                    ->fetchArray();
    
        $totalAmount = 0.0;

        foreach ( $records as $key => $record )
        {
            $postContractClaim = Doctrine_Core::getTable('PostContractClaim')->find($record['id']);

            foreach($postContractClaim->PostContractClaimItems as $postContractClaimItem )
            {
                if($postContractClaimItem->PostContractClaimMaterialOnSite)
                {
                    $totalAmount += $postContractClaimItem->PostContractClaimMaterialOnSite->final_amount;
                }
            }
        }

        return $totalAmount;
    }
}