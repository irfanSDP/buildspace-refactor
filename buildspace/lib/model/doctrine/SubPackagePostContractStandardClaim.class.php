<?php

/**
 * SubPackagePostContractStandardClaim
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SubPackagePostContractStandardClaim extends BaseSubPackagePostContractStandardClaim
{
    const CLAIM_FIELD_CURRENT_PERCENTAGE = "current_percentage";
    const CLAIM_FIELD_CURRENT_AMOUNT = "current_amount";
    const CLAIM_FIELD_UP_TO_DATE_PERCENTAGE = "up_to_date_percentage";
    const CLAIM_FIELD_UP_TO_DATE_AMOUNT = "up_to_date_amount";
    const CLAIM_FIELD_UP_TO_DATE_QTY = "up_to_date_qty";

    public function calculateClaimColumn($fieldName, $fieldValue, SubPackagePostContractClaimRevision $revision, $subPackageId)
    {
        $this->{'update'.sfInflector::camelize($fieldName)}(number_format($fieldValue, 2, '.', ''), $revision, $subPackageId);

        $this->save();
    }

    public function updateCurrentAmount($value, SubPackagePostContractClaimRevision $revision, $subPackageId, $updateUpToDateQty=true)
    {
        $typeRef = $this->PostContractStandardClaimTypeReference;

        $previousClaim = $this->getPreviousClaimItemByRevision($revision, $subPackageId, Doctrine_Core::HYDRATE_ARRAY);

        $typeItem = DoctrineQuery::create()->select('t.total_per_unit, t.qty_per_unit')
            ->from('PostContractBillItemType t')
            ->where('t.post_contract_id = ? AND t.bill_item_id = ? AND t.bill_column_setting_id = ? ',
                array($typeRef->PostContract->id, $this->bill_item_id, $typeRef->bill_column_setting_id))
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->limit(1)
            ->fetchOne();

        $itemRate = DoctrineQuery::create()->select('r.rate')
            ->from('SubPackagePostContractBillItemRate r')
            ->where('r.sub_package_id = ? AND r.bill_item_id = ? ',
                array($subPackageId, $this->bill_item_id))
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->limit(1)
            ->fetchOne();

        $totalPerUnit = number_format($typeItem['qty_per_unit'] * $itemRate['rate'], 2, '.', '');

        if($previousClaim)
        {
            $this->current_amount = (($previousClaim['up_to_date_amount'] + $value) > $totalPerUnit) ? 0 : $value;

            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $this->current_amount = ($value > $totalPerUnit ) ? 0 : $value;

            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        $percentage = $this->current_amount / $totalPerUnit * 100;

        $this->current_percentage = number_format($percentage, 2, '.', '');

        $this->up_to_date_percentage = number_format($previousUpToDatePercentage + $this->current_percentage, 2, '.', '');
        $this->up_to_date_amount     = number_format($previousUpToDateAmount + $this->current_amount, 2, '.', '');

        if($updateUpToDateQty)
        {
            $currentQty = ($this->current_percentage / 100) * $typeItem['qty_per_unit'];
            $this->up_to_date_qty = ($previousClaim) ? $previousClaim['up_to_date_qty'] + $currentQty : $currentQty;
        }
    }

    public function updateCurrentPercentage($value, SubPackagePostContractClaimRevision $revision, $subPackageId)
    {
        $typeRef = $this->PostContractStandardClaimTypeReference;

        $previousClaim = $this->getPreviousClaimItemByRevision($revision, $subPackageId, Doctrine_Core::HYDRATE_ARRAY);

        $typeItem = DoctrineQuery::create()->select('t.total_per_unit, t.qty_per_unit')
            ->from('PostContractBillItemType t')
            ->where('t.post_contract_id = ? AND t.bill_item_id = ? AND t.bill_column_setting_id = ? ',
                array($typeRef->PostContract->id, $this->bill_item_id, $typeRef->bill_column_setting_id))
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->limit(1)
            ->fetchOne();

        $itemRate = DoctrineQuery::create()->select('r.rate')
            ->from('SubPackagePostContractBillItemRate r')
            ->where('r.sub_package_id = ? AND r.bill_item_id = ? ',
                array($subPackageId, $this->bill_item_id))
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->limit(1)
            ->fetchOne();

        $totalPerUnit = number_format($typeItem['qty_per_unit'] * $itemRate['rate'], 2, '.', '');

        if($previousClaim)
        {
            $this->current_percentage = ($previousClaim['up_to_date_percentage'] + $value) > 100 ? 0 : $value;

            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $this->current_percentage = ($value > 100 ) ? 0 : $value;

            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        $amount = $this->current_percentage / 100 * $totalPerUnit;

        $this->current_amount = number_format($amount, 2, '.', '');

        $this->up_to_date_percentage = number_format($previousUpToDatePercentage + $this->current_percentage, 2, '.', '');
        $this->up_to_date_amount     = number_format($previousUpToDateAmount + $this->current_amount, 2, '.', '');

        $currentQty = ($this->current_percentage / 100) * $typeItem['qty_per_unit'];
        $this->up_to_date_qty = ($previousClaim) ? $previousClaim['up_to_date_qty'] + $currentQty : $currentQty;
    }

    public function updateUpToDateAmount($value, SubPackagePostContractClaimRevision $revision, $subPackageId)
    {
        $typeRef = $this->PostContractStandardClaimTypeReference;

        $previousClaim = $this->getPreviousClaimItemByRevision($revision, $subPackageId, Doctrine_Core::HYDRATE_ARRAY);

        $typeItem = DoctrineQuery::create()->select('t.total_per_unit, t.qty_per_unit')
            ->from('PostContractBillItemType t')
            ->where('t.post_contract_id = ? AND t.bill_item_id = ? AND t.bill_column_setting_id = ? ',
                array($typeRef->PostContract->id, $this->bill_item_id, $typeRef->bill_column_setting_id))
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->limit(1)
            ->fetchOne();

        $itemRate = DoctrineQuery::create()->select('r.rate')
            ->from('SubPackagePostContractBillItemRate r')
            ->where('r.sub_package_id = ? AND r.bill_item_id = ? ',
                array($subPackageId, $this->bill_item_id))
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->limit(1)
            ->fetchOne();

        $totalPerUnit = number_format($typeItem['qty_per_unit'] * $itemRate['rate'], 2, '.', '');

        if($previousClaim)
        {
            $this->up_to_date_amount = ($value > $totalPerUnit) ? $previousClaim['up_to_date_amount'] : $value;

            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $this->up_to_date_amount = ($value > $totalPerUnit) ? $totalPerUnit : $value;

            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        $percentage = $this->up_to_date_amount / $totalPerUnit * 100;

        $this->up_to_date_percentage = number_format($percentage, 2, '.', '');

        $this->current_percentage = number_format($this->up_to_date_percentage -  $previousUpToDatePercentage, 2, '.', '');
        $this->current_amount     = number_format($this->up_to_date_amount - $previousUpToDateAmount, 2, '.', '');

        $currentQty = ($this->current_percentage / 100) * $typeItem['qty_per_unit'];
        $this->up_to_date_qty = ($previousClaim) ? $previousClaim['up_to_date_qty'] + $currentQty : $currentQty;
    }

    public function updateUpToDatePercentage($value, SubPackagePostContractClaimRevision $revision, $subPackageId)
    {
        $typeRef = $this->PostContractStandardClaimTypeReference;

        $previousClaim = $this->getPreviousClaimItemByRevision($revision, $subPackageId, Doctrine_Core::HYDRATE_ARRAY);

        $typeItem = DoctrineQuery::create()->select('t.total_per_unit, t.qty_per_unit')
            ->from('PostContractBillItemType t')
            ->where('t.post_contract_id = ? AND t.bill_item_id = ? AND t.bill_column_setting_id = ? ',
                array($typeRef->PostContract->id, $this->bill_item_id, $typeRef->bill_column_setting_id))
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->limit(1)
            ->fetchOne();

        $itemRate = DoctrineQuery::create()->select('r.rate')
            ->from('SubPackagePostContractBillItemRate r')
            ->where('r.sub_package_id = ? AND r.bill_item_id = ? ',
                array($subPackageId, $this->bill_item_id))
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->limit(1)
            ->fetchOne();

        $totalPerUnit = number_format($typeItem['qty_per_unit'] * $itemRate['rate'], 2, '.', '');

        if($previousClaim)
        {
            $this->up_to_date_percentage = ($value > 100) ? $previousClaim['up_to_date_percentage'] : $value;

            $previousUpToDatePercentage = $previousClaim['up_to_date_percentage'];
            $previousUpToDateAmount     = $previousClaim['up_to_date_amount'];
        }
        else
        {
            $this->up_to_date_percentage = ($value > 100) ? 100 : $value;

            $previousUpToDatePercentage = 0;
            $previousUpToDateAmount     = 0;
        }

        $amount = $this->up_to_date_percentage / 100 * $totalPerUnit;

        $this->up_to_date_amount = number_format($amount, 2, '.', '');

        $this->current_percentage = number_format($this->up_to_date_percentage -  $previousUpToDatePercentage, 2, '.', '');
        $this->current_amount     = number_format($this->up_to_date_amount - $previousUpToDateAmount, 2, '.', '');

        $currentQty = ($this->current_percentage / 100) * $typeItem['qty_per_unit'];
        $this->up_to_date_qty = ($previousClaim) ? $previousClaim['up_to_date_qty'] + $currentQty : $currentQty;
    }

    public function updateUpToDateQty($value, SubPackagePostContractClaimRevision $revision, $subPackageId)
    {
        $typeRef = $this->PostContractStandardClaimTypeReference;

        $previousClaim = $this->getPreviousClaimItemByRevision($revision, $subPackageId, Doctrine_Core::HYDRATE_ARRAY);

        $typeItem = DoctrineQuery::create()->select('t.qty_per_unit, t.total_per_unit')
            ->from('PostContractBillItemType t')
            ->where('t.post_contract_id = ? AND t.bill_item_id = ? AND t.bill_column_setting_id = ? ',
                array($typeRef->PostContract->id, $this->bill_item_id, $typeRef->bill_column_setting_id))
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->limit(1)
            ->fetchOne();

        $itemRate = DoctrineQuery::create()->select('r.rate')
            ->from('SubPackagePostContractBillItemRate r')
            ->where('r.sub_package_id = ? AND r.bill_item_id = ? ',
                array($subPackageId, $this->bill_item_id))
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->limit(1)
            ->fetchOne();

        if($previousClaim)
        {
            $this->up_to_date_qty = ($value > $typeItem['qty_per_unit']) ? $previousClaim['up_to_date_qty'] : $value;

            $qty = $this->up_to_date_qty - $previousClaim['up_to_date_qty'];
        }
        else
        {
            $qty = $this->up_to_date_qty = ($value > $typeItem['qty_per_unit']) ? $typeItem['qty_per_unit'] : $value;
        }

        $this->updateCurrentAmount(number_format($qty * $itemRate['rate'], 2, '.', ''), $revision, $subPackageId, false);
    }

    public function getPreviousClaimItemByRevision(SubPackagePostContractClaimRevision $revision, $subPackageId, $hydrate = null)
    {
        $typeRef = $this->PostContractStandardClaimTypeReference;

        $query = DoctrineQuery::create()->select('*')
            ->from('SubPackagePostContractStandardClaim c')
            ->leftJoin('c.SubPackagePostContractClaimRevision r ON r.id = c.revision_id')
            ->where('r.sub_package_id = ? AND c.claim_type_ref_id = ? AND c.bill_item_id = ? AND r.version = ?',
                array($subPackageId, $typeRef->id, $this->bill_item_id, ($revision->version - 1)))
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }
}
