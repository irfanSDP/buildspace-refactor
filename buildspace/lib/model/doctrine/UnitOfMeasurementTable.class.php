<?php

/**
 * UnitOfMeasurementTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UnitOfMeasurementTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object UnitOfMeasurementTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('UnitOfMeasurement');
    }

    public static function canBeDeletedById($id)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $billHasDanglingUom = BillItemTable::hasDanglingUnitOfMeasurement($id);
        $bqItemHasDanglingUom = BQItemTable::hasDanglingUnitOfMeasurement($id);
        $bqLibraryBuildUpRateItemHasDandlingUom = BQLibraryBuildUpRateItemTable::hasDanglingUnitOfMeasurement($id);

        if($billHasDanglingUom || $bqItemHasDanglingUom || $bqLibraryBuildUpRateItemHasDandlingUom)
        {
            return false;
        }

        $tableClasses = array(
            array('class'=>'BillBuildUpRateItemTable', 'column'=>'uom_id'),
            array('class'=>'BillBuildUpRateSummaryTable', 'column' => 'conversion_factor_uom_id'),
            array('class'=>'BQLibraryBuildUpRateSummaryTable', 'column'=>'conversion_factor_uom_id'),
            array('class'=>'ResourceItemTable', 'column' => 'uom_id'),
            array('class'=>'ScheduleOfRateBuildUpRateItemTable', 'column' => 'uom_id'),
            array('class'=>'ScheduleOfRateBuildUpRateSummaryTable', 'column' => 'conversion_factor_uom_id'),
            array('class'=>'ScheduleOfRateItemTable', 'column' => 'uom_id'),
            array('class'=>'ScheduleOfQuantityItemTable', 'column' => 'uom_id')
        );

        foreach($tableClasses as $tableClass)
        {
            $stmt = $pdo->prepare("SELECT COUNT(id) FROM ".$tableClass['class']::getInstance()->getTableName()."
            WHERE ".$tableClass['column']." = ".$id." AND deleted_at IS NULL");

            $stmt->execute();

            $count = $stmt->fetch(PDO::FETCH_COLUMN, 0);

            if($count > 0)
                return false;
        }

        return true;
    }

    public function getDimensionFormulatedColumnConstant($uomId)
    {
        $constantQueryResult = DoctrineQuery::create()->select('u.id, u.name, m.id, d.id, d.name, d.slug')
            ->from('UnitOfMeasurement u')
            ->leftJoin('u.DimensionToUnitOfMeasurement as m')
            ->leftJoin('m.Dimension as d')
            ->where('u.id =?', $uomId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $constantArray = array();

        foreach($constantQueryResult['DimensionToUnitOfMeasurement'] as $constant)
        {
            $constantArray[] = $constant['Dimension']['slug'];
        }

        return $constantArray;
    }

    public function getDimensionFormulatedColumn($uomId)
    {
        return DoctrineQuery::create()->select('u.id, u.name, m.id, d.id, d.name, d.slug')
            ->from('UnitOfMeasurement u')
            ->leftJoin('u.DimensionToUnitOfMeasurement as m')
            ->leftJoin('m.Dimension as d')
            ->where('u.id =?', $uomId)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();
    }

    public static function getUnitOfMeasurementBySymbol($uomSymbol)
    {
        return DoctrineQuery::create()->select('u.id, u.name, u.symbol, u.type')
            ->from('UnitOfMeasurement u')
            ->where("LOWER(u.symbol) LIKE LOWER(?)", $uomSymbol)
            ->andWhere("u.display = TRUE")
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();
    }

    public static function resetBillItemUom(UnitOfMeasurement $uom, Doctrine_Connection $con)
    {
        $pdo = $con->getDbh();

        // update uom ID for bill items that relate with current deleted uom ID
        $q = $pdo->prepare('UPDATE '.BillItemTable::getInstance()->getTableName().'
        SET uom_id = NULL WHERE uom_id = '.$uom->id.' AND deleted_at IS NOT NULL');

        $q->execute();
    }

    public static function resetBillBuildUpRateItemUom(UnitOfMeasurement $uom, Doctrine_Connection $con)
    {
        $pdo = $con->getDbh();

        // update uom ID for bill items that relate with current deleted uom ID
        $q = $pdo->prepare('UPDATE '.BillBuildUpRateItemTable::getInstance()->getTableName().'
        SET uom_id = NULL WHERE uom_id = '.$uom->id.' AND deleted_at IS NOT NULL');

        $q->execute();
    }

    public static function resetResourceItemUom(UnitOfMeasurement $uom, Doctrine_Connection $con)
    {
        $pdo = $con->getDbh();

        // update uom ID for bill items that relate with current deleted uom ID
        $q = $pdo->prepare('UPDATE '.ResourceItemTable::getInstance()->getTableName().'
        SET uom_id = NULL WHERE uom_id = '.$uom->id.' AND deleted_at IS NOT NULL');

        $q->execute();
    }

    public static function resetScheduleOfRateItemUom(UnitOfMeasurement $uom, Doctrine_Connection $con)
    {
        $pdo = $con->getDbh();

        // update uom ID for bill items that relate with current deleted uom ID
        $q = $pdo->prepare('UPDATE '.ScheduleOfRateItemTable::getInstance()->getTableName().'
        SET uom_id = NULL WHERE uom_id = '.$uom->id.' AND deleted_at IS NOT NULL');

        $q->execute();
    }

    public static function resetScheduleOfRateBuildUpRateItemUom(UnitOfMeasurement $uom, Doctrine_Connection $con)
    {
        $pdo = $con->getDbh();

        // update uom ID for bill items that relate with current deleted uom ID
        $q = $pdo->prepare('UPDATE '.ScheduleOfRateBuildUpRateItemTable::getInstance()->getTableName().'
        SET uom_id = NULL WHERE uom_id = '.$uom->id.' AND deleted_at IS NOT NULL');

        $q->execute();
    }

    public static function resetBQLibraryItemUom(UnitOfMeasurement $uom, Doctrine_Connection $con)
    {
        $pdo = $con->getDbh();

        // update uom ID for bill items that relate with current deleted uom ID
        $q = $pdo->prepare('UPDATE '.BQItemTable::getInstance()->getTableName().'
        SET uom_id = NULL WHERE uom_id = '.$uom->id.' AND deleted_at IS NOT NULL');

        $q->execute();
    }

    public static function resetBQLibraryBuildUpRateItemUom(UnitOfMeasurement $uom, Doctrine_Connection $con)
    {
        $pdo = $con->getDbh();

        // update uom ID for bill items that relate with current deleted uom ID
        $q = $pdo->prepare('UPDATE '.BQLibraryBuildUpRateItemTable::getInstance()->getTableName().'
        SET uom_id = NULL WHERE uom_id = '.$uom->id.' AND deleted_at IS NOT NULL');

        $q->execute();
    }
}