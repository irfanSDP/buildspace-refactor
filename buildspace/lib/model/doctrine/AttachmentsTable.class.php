<?php

/**
 * AttachmentsTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class AttachmentsTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object AttachmentsTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Attachments');
    }

    public static function saveAttachment($itemId, $itemClass, $filePath, $filename, $extension, $user)
    {
        $record = new Attachments();
        $record->object_id = $itemId;
        $record->object_class = $itemClass;
        $record->filepath = $filePath;
        $record->filename = $filename;
        $record->extension = $extension;
        $record->created_by = $user->id;
        $record->updated_by = $user->id;

        return $record->save();
    }

    public static function deleteAttachment($recordId)
    {
        self::deleteAttachments([ $recordId ]);
    }

    public static function deleteAttachments(array $attachmentIds)
    {
        if( count($attachmentIds) < 1 ) return;

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT attachment.filepath
            FROM " . self::getInstance()->getTableName() . " attachment
            WHERE attachment.id IN (" . implode(',', $attachmentIds) . ")");

        $stmt->execute();

        $itemAttachments = $stmt->fetchAll(PDO::FETCH_COLUMN);

        if( count($itemAttachments) < 1 ) return;

        foreach($itemAttachments as $filePath)
        {
            $pathToFile = self::getAbsolutePath($filePath);

            if( file_exists($pathToFile) ) unlink($pathToFile);
        }

        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("DELETE FROM " . self::getInstance()->getTableName() . " WHERE id IN (" . implode(',', $attachmentIds) . ")");

        $stmt->execute();
    }

    public static function deleteItemAttachments($itemId, $itemClass)
    {
        $itemAttachments = self::getAttachments($itemId, $itemClass);

        if(count($itemAttachments) < 1) return;

        $attachmentIds = Utilities::arrayValueRecursive('id', $itemAttachments);

        self::deleteAttachments($attachmentIds);
    }

    public static function getAttachments($itemId, $itemClass)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT attachment.id, attachment.filename, attachment.filepath, attachment.extension, attachment.updated_by, attachment.updated_at, p.name FROM " . self::getInstance()->getTableName() . " attachment
            JOIN " . sfGuardUserTable::getInstance()->getTableName() . " u on u.id = attachment.updated_by 
            JOIN " . sfGuardUserProfileTable::getInstance()->getTableName() . " p on p.user_id = u.id 
            WHERE attachment.object_id = " . $itemId. "
            AND attachment.object_class = '" . $itemClass . "'
            ORDER BY attachment.created_at DESC");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function createAbsolutePath($itemClass, $itemId, $filename, $extension)
    {
        return Utilities::createFilePath(array( sfConfig::get('sf_upload_dir'), 'module-attachments', 'class-' . $itemClass,'itemId-' . $itemId), $filename, $extension);
    }

    public static function getAbsolutePath($uploadPath)
    {
        return sfConfig::get('sf_upload_dir') . substr($uploadPath, strlen(DIRECTORY_SEPARATOR . 'uploads'));
    }

    public static function getUploadPath($absolutePath)
    {
        return DIRECTORY_SEPARATOR . 'uploads' . substr($absolutePath, strlen(sfConfig::get('sf_upload_dir')));
    }
}