<?php

/**
 * BQItemTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BQItemTable extends Doctrine_Table
{
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BQItem');
    }

    public static function updateTimestamp(BQItem $item)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("UPDATE ".BQItemTable::getInstance()->getTableName()." SET updated_at = NOW() WHERE id = ".$item->id." AND deleted_at IS NULL");
        $stmt->execute(array());

        $stmt = $pdo->prepare("UPDATE ".BQElementTable::getInstance()->getTableName()." SET updated_at = NOW() WHERE id = ".$item->element_id." AND deleted_at IS NULL");
        $stmt->execute(array());
    }

    public static function createItemFromLastRow($previousItem, $elementId, $fieldName=null, $fieldValue=null)
    {
        $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('BQItem');

        $item = new BQItem();

        $item->element_id = $elementId;
        if($fieldName)
        {
            if(!in_array($fieldName, $formulatedColumnConstants))
            {
                $item->{'set'.sfInflector::camelize($fieldName)}($fieldValue);
            }
        }

        if($fieldName != 'type')
        {
            $item->type = BQItem::TYPE_WORK_ITEM;
        }

        $asRoot = true;
        $priority = 0;

        if($previousItem)
        {
            if($previousItem->node->isRoot())
            {
                $priority = $previousItem->priority + 1;
            }
            else
            {
                $asRoot = false;
                $item->node->insertAsNextSiblingOf($previousItem);

                $priority = $previousItem->priority;
            }
        }

        $item->priority = $priority;
        $item->save();

        if($asRoot)
        {
            $item->getTable()->getTree()->createRoot($item);

            $item->updateRootPriority($priority, $item->id);
        }

        return $item;
    }

    public static function createItem(BQItem $nextItem, $elementId)
    {
        $item = new BQItem();

        $item->element_id = $elementId;
        $item->type = BQItem::TYPE_WORK_ITEM;

        if($nextItem->node->isRoot())
        {
            $priority = $nextItem->priority;

            $item->priority = $priority;

            $item->save();

            $node = $item->node;

            if ($node->isValidNode())
            {
                $node->makeRoot($item->id);
            }
            else
            {
                $item->getTable()->getTree()->createRoot($item);
            }

            $item->updateRootPriority($priority, $item->id);
        }
        else
        {
            $item->node->insertAsPrevSiblingOf($nextItem);
            $item->priority = $nextItem->priority;
        }

        $item->save();

        return $item;
    }

    public static function getFormulatedColumnByRelationIdAndColumnName($id, $columnName, $hydrate=null)
    {
        $query = DoctrineQuery::create()->select('*')
            ->from('BQItemFormulatedColumn c')
            ->where('c.relation_id = ?', $id)
            ->andWhere('c.column_name = ?', $columnName)
            ->limit(1);

        if(!is_null($hydrate))
        {
            $query->setHydrationMode($hydrate);
        }

        return $query->fetchOne();
    }

    public static function deleteBuildUpRatesByBQItemId($bqItemId)
    {
        $con = self::getInstance()->getConnection();

        $con->fetchAssoc("UPDATE ".BQLibraryBuildUpRateResourceTable::getInstance()->getTableName()." SET deleted_at = NOW() WHERE
        bq_item_id = ".$bqItemId." AND deleted_at IS NULL");

        $formulatedColumnIds = $con->fetchAssoc("UPDATE ".BQLibraryBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." SET deleted_at = NOW() WHERE
        relation_id IN (SELECT id FROM ".BQLibraryBuildUpRateItemTable::getInstance()->getTableName()." WHERE bq_item_id = ".$bqItemId." AND deleted_at IS NULL) RETURNING id");

        $idList = array();

        foreach($formulatedColumnIds as $formulatedColumnId)
        {
            if(array_key_exists('id', $formulatedColumnId))
            {
                $idList[] = $formulatedColumnId['id'];
            }
        }

        if(count($idList) > 0)
        {
            //now we can remove all edges after we've updated related nodes
            Doctrine_Query::create()
                ->delete('BQLibraryBuildUpRateEdge e')
                ->whereIn('e.node_from', $idList)
                ->execute();

            Doctrine_Query::create()
                ->delete('BQLibraryBuildUpRateEdge e')
                ->whereIn('e.node_to', $idList)
                ->execute();
        }

        Doctrine_Query::create()
            ->delete('BQLibraryBuildUpRateItem i')
            ->where('i.bq_item_id = ?', $bqItemId)
            ->execute();

        Doctrine_Query::create()
            ->delete('BQLibraryBuildUpRateSummary s')
            ->where('s.bq_item_id = ?', $bqItemId)
            ->execute();

        Doctrine_Query::create()->update('BQItemFormulatedColumn c')
            ->set('c.has_build_up', 'FALSE')
            ->where('c.relation_id = ?', $bqItemId)
            ->andWhere('c.column_name = ?', BillItem::FORMULATED_COLUMN_RATE)
            ->andWhere('deleted_at IS NULL')
            ->execute();
    }

    public static function updateRootPriority($priority, $elementId, $excludeId = null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $sqlUpdateRoot = "UPDATE ".self::getInstance()->getTableName()." SET priority = priority + 1
            WHERE element_id =".$elementId." AND priority >=".$priority." AND id = root_id";

        if($excludeId and $excludeId > 0)
        {
            $sqlUpdateRoot .= " AND id <> ".$excludeId;
        }

        $sqlUpdateRoot .= " AND deleted_at IS NULL";

        $stmt = $pdo->prepare($sqlUpdateRoot);

        $stmt->execute();

        //update children priority same as root priority
        $stmt = $pdo->prepare("UPDATE ".self::getInstance()->getTableName()." AS i SET priority = r.priority
            FROM ".self::getInstance()->getTableName()." AS r
            WHERE i.root_id = r.id AND i.id <> r.id AND i.priority <> r.priority AND i.element_id = ".$elementId."
            AND i.deleted_at IS NULL");

        $stmt->execute();
    }

    public static function getSelectedItemsByItemIds(BQLibrary $bqLibrary, array $itemIds)
    {
        $pdo               = self::getInstance()->getConnection()->getDbh();
        $newItemIds        = array();
        $elementIds        = array();
        $newItems          = array();
        $formulatedColumns = array();

        if ( empty($itemIds) )
        {
            return array(array(), array(), array());
        }

        // will get selected item(s) first, then only get affected trade(s)
        // so that we can display it in print preview
        $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.element_id, p.description, p.type, uom.id as uom_id, p.priority, p.lft, p.level,
        p.updated_at, uom.symbol AS uom_symbol
        FROM ".BQItemTable::getInstance()->getTableName()." i
        JOIN ".BQItemTable::getInstance()->getTableName()." p
        ON (i.lft BETWEEN p.lft AND p.rgt AND p.deleted_at IS NULL)
        JOIN ".BQElementTable::getInstance()->getTableName()." sort ON p.element_id = sort.id AND sort.deleted_at IS NULL
        LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
        WHERE sort.library_id = ".$bqLibrary->id." AND i.id IN (".implode(',', $itemIds).") AND i.type <> ".BQItem::TYPE_HEADER."
        AND i.root_id = p.root_id ORDER BY p.priority, p.lft, p.level");

        $stmt->execute();
        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( empty($items) )
        {
            return array(array(), array(), array());
        }

        foreach ( $items as $item )
        {
            $newItems[$item['element_id']][] = $item;

            $newItemIds[$item['id']]       = $item['id'];
            $elementIds[$item['element_id']] = $item['element_id'];

            unset($item);
        }

        unset($items);

        $stmt = $pdo->prepare("SELECT ifc.relation_id, ifc.column_name, ifc.final_value, ifc.value, ifc.has_build_up
        FROM ".BQItemFormulatedColumnTable::getInstance()->getTableName()." ifc
        JOIN ".BQItemTable::getInstance()->getTableName()." i ON i.id = ifc.relation_id
        WHERE i.id IN (".implode(',', $newItemIds).") AND ifc.deleted_at IS NULL AND i.deleted_at IS NULL AND ifc.final_value <> 0");

        $stmt->execute();
        $itemFormulatedColumns = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach($itemFormulatedColumns as $itemFormulatedColumn)
        {
            if(!array_key_exists($itemFormulatedColumn['relation_id'], $formulatedColumns))
            {
                $formulatedColumns[$itemFormulatedColumn['relation_id']] = array();
            }

            array_push($formulatedColumns[$itemFormulatedColumn['relation_id']], $itemFormulatedColumn);

            unset($itemFormulatedColumn);
        }

        unset($itemFormulatedColumns);

        $elements = BQElementTable::getRecordsByBQLibraryAndIds($bqLibrary, $elementIds);

        return array($elements, $newItems, $formulatedColumns);
    }

    public static function getSelectedItemsWithRatesByItemIds(BQLibrary $bqLibrary, array $itemIds)
    {
        $pdo               = self::getInstance()->getConnection()->getDbh();
        $newItemIds        = array();
        $elementIds        = array();
        $newItems          = array();
        $formulatedColumns = array();

        if ( empty($itemIds) )
        {
            return array(array(), array(), array());
        }

        // then only get item(s) hierarchy that has the build up available
        $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.element_id, p.description, p.type, uom.id as uom_id, p.priority, p.lft, p.level,
        p.updated_at, uom.symbol AS uom_symbol
        FROM ".BQItemTable::getInstance()->getTableName()." i
        JOIN ".BQItemTable::getInstance()->getTableName()." p
        ON (i.lft BETWEEN p.lft AND p.rgt AND p.deleted_at IS NULL)
        JOIN ".BQElementTable::getInstance()->getTableName()." sort ON p.element_id = sort.id AND sort.deleted_at IS NULL
        LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
        WHERE i.id IN (".implode(',', $itemIds).") AND sort.library_id = ".$bqLibrary->id." AND i.type <> ".BQItem::TYPE_HEADER."
        AND i.root_id = p.root_id ORDER BY p.priority, p.lft, p.level");

        $stmt->execute();
        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( empty($items) )
        {
            return array(array(), array(), array());
        }

        foreach ( $items as $item )
        {
            $newItems[$item['element_id']][] = $item;
            $elementIds[$item['element_id']] = $item['element_id'];

            $newItemIds[$item['id']] = $item['id'];

            unset($item);
        }

        // will get item(s) that has build up in place
        $stmt = $pdo->prepare("SELECT ifc.relation_id, ifc.column_name, ifc.final_value, ifc.value, ifc.has_build_up
        FROM ".BQItemFormulatedColumnTable::getInstance()->getTableName()." ifc
        JOIN ".BQItemTable::getInstance()->getTableName()." i ON i.id = ifc.relation_id
        JOIN ".BQElementTable::getInstance()->getTableName()." sort ON sort.id = i.element_id AND sort.deleted_at IS NULL
        WHERE i.id IN (".implode(',', $newItemIds).") AND sort.library_id = ".$bqLibrary->id."
        AND ifc.deleted_at IS NULL AND i.deleted_at IS NULL AND ifc.final_value <> 0");

        $stmt->execute();
        $itemFormulatedColumns = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach($itemFormulatedColumns as $itemFormulatedColumn)
        {
            $itemId = $itemFormulatedColumn['relation_id'];

            if(!array_key_exists($itemId, $formulatedColumns))
            {
                $formulatedColumns[$itemId] = array();
            }

            array_push($formulatedColumns[$itemId], $itemFormulatedColumn);

            unset($itemFormulatedColumn);
        }

        $elements = BQElementTable::getRecordsByBQLibraryAndIds($bqLibrary, $elementIds);

        return array($elements, $newItems, $formulatedColumns);
    }

    public static function getSelectedItemsWithBuildUpRatesByItemIds(BQLibrary $bqLibrary, array $itemIds)
    {
        $pdo               = self::getInstance()->getConnection()->getDbh();
        $newItemIds        = array();
        $elementIds        = array();
        $newItems          = array();
        $formulatedColumns = array();

        if ( empty($itemIds) )
        {
            return array(array(), array(), array());
        }

        // will get item(s) that has build up in place
        $stmt = $pdo->prepare("SELECT ifc.relation_id, ifc.column_name, ifc.final_value, ifc.value, ifc.has_build_up
        FROM ".BQItemFormulatedColumnTable::getInstance()->getTableName()." ifc
        JOIN ".BQItemTable::getInstance()->getTableName()." i ON i.id = ifc.relation_id
        JOIN ".BQElementTable::getInstance()->getTableName()." sort ON sort.id = i.element_id AND sort.deleted_at IS NULL
        WHERE sort.library_id = ".$bqLibrary->id." AND i.id IN (".implode(',', $itemIds).")
        AND ifc.deleted_at IS NULL AND i.deleted_at IS NULL AND ifc.has_build_up = TRUE AND ifc.final_value <> 0");

        $stmt->execute();
        $itemFormulatedColumns = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ( empty($itemFormulatedColumns) )
        {
            return array(array(), array(), array());
        }

        foreach($itemFormulatedColumns as $itemFormulatedColumn)
        {
            $itemId              = $itemFormulatedColumn['relation_id'];
            $newItemIds[$itemId] = $itemId;

            if(!array_key_exists($itemId, $formulatedColumns))
            {
                $formulatedColumns[$itemId] = array();
            }

            array_push($formulatedColumns[$itemId], $itemFormulatedColumn);

            unset($itemFormulatedColumn);
        }

        // then only get item(s) hierarchy that has the build up available
        $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.element_id, p.description, p.type, uom.id as uom_id, p.priority, p.lft, p.level,
        p.updated_at, uom.symbol AS uom_symbol
        FROM ".BQItemTable::getInstance()->getTableName()." i
        JOIN ".BQItemTable::getInstance()->getTableName()." p
        ON (i.lft BETWEEN p.lft AND p.rgt AND p.deleted_at IS NULL)
        JOIN ".BQElementTable::getInstance()->getTableName()." sort ON p.element_id = sort.id AND sort.deleted_at IS NULL
        LEFT JOIN ".UnitOfMeasurementTable::getInstance()->getTableName()." uom ON p.uom_id = uom.id AND uom.deleted_at IS NULL
        WHERE sort.library_id = ".$bqLibrary->id." AND i.id IN (".implode(',', $newItemIds).") AND i.type <> ".BQItem::TYPE_HEADER."
        AND i.root_id = p.root_id ORDER BY p.priority, p.lft, p.level");

        $stmt->execute();
        $items = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ( $items as $item )
        {
            $newItems[$item['element_id']][] = $item;
            $elementIds[$item['element_id']] = $item['element_id'];

            unset($item);
        }

        $elements = BQElementTable::getRecordsByBQLibraryAndIds($bqLibrary, $elementIds);

        return array($elements, $newItems, $formulatedColumns);
    }

    public static function hasDanglingUnitOfMeasurement($uomId)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $query = "SELECT i.id AS bq_item_id
            FROM bs_bq_items i
            INNER JOIN bs_bq_elements e ON e.id = i.element_id 
            INNER JOIN bs_bq_libraries l ON l.id = e.library_id 
            WHERE i.deleted_at IS NULL 
            AND e.deleted_at IS NULL
            AND l.deleted_at IS NULL 
            AND i.uom_id = {$uomId};";

        $stmt = $pdo->prepare($query);
        $stmt->execute();

        $records = $stmt->fetchAll(PDO::FETCH_COLUMN);

        return count($records) > 0;
    }
}