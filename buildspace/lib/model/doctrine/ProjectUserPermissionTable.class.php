<?php

use GuzzleHttp\Client;

/**
 * ProjectUserPermissionTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProjectUserPermissionTable extends Doctrine_Table {
    /**
     * Returns an instance of this class.
     *
     * @return object ProjectUserPermissionTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ProjectUserPermission');
    }

    public static function getAssignedUserIdsByProjectAndStatus(ProjectStructure $project, $projectStatus)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT p.user_id AS id
            FROM " . ProjectUserPermissionTable::getInstance()->getTableName() . " p
            JOIN " . sfGuardUserTable::getInstance()->getTableName() . " u ON p.user_id = u.id
            WHERE p.project_structure_id = " . $project->id . " AND p.project_status = " . $projectStatus . "
            AND u.is_super_admin IS FALSE AND u.deleted_at IS NULL AND u.is_active IS TRUE ORDER BY u.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function getProjectUserPermissionByProjectUserAndStatus(ProjectStructure $project, sfGuardUser $user, $projectStatus)
    {
        return DoctrineQuery::create()
                ->from('ProjectUserPermission p')
                ->where('p.project_structure_id = ?', $project->id)
                ->andWhere('p.user_id = ?', $user->id)
                ->andWhere('p.status = ?', $status)
                ->fetchOne();
    }

    public static function getAssignedUserIdsByProjectAndStatusAndGroup(ProjectStructure $project, sfGuardGroup $group, $projectStatus)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT p.user_id AS id
            FROM " . ProjectUserPermissionTable::getInstance()->getTableName() . " p
            JOIN " . sfGuardUserTable::getInstance()->getTableName() . " u ON p.user_id = u.id
            JOIN " . sfGuardUserGroupTable::getInstance()->getTableName() . " ug ON ug.user_id = u.id
            JOIN " . sfGuardGroupTable::getInstance()->getTableName() . " g ON g.id = ug.group_id
            WHERE p.project_structure_id = " . $project->id . " AND p.project_status = " . $projectStatus . "
            AND g.id = " . $group->id . "
            AND u.is_super_admin IS FALSE AND u.deleted_at IS NULL AND u.is_active IS TRUE ORDER BY u.id");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public static function assignUsersPermission(ProjectStructure $project, $projectStatus, array $selectedUserIds, array $deselectedUserIds)
    {
        static::deselectUsers($project, $projectStatus, $deselectedUserIds);

        static::selectUsers($project, $projectStatus, $selectedUserIds, false);
    }

    public static function copyExistingUsersPermissionByStatus(ProjectStructure $project, $fromStatus = ProjectUserPermission::STATUS_PROJECT_BUILDER, $toStatus = ProjectUserPermission::STATUS_PROJECT_BUILDER, $actingUser = null)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT p.user_id, p.is_admin FROM " . self::getInstance()->getTableName() . " p
            WHERE p.project_structure_id = " . $project->id . " AND p.project_status = " . $fromStatus);

        $stmt->execute();

        $fromStatusUsers = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        if( ! empty( $fromStatusUsers ) )
        {
            $toStatusUsersPermission = self::getAssignedUserIdsByProjectAndStatus($project, $toStatus);
            //delete any record with status $toStatus because we don't want any duplicate record
            if( ! empty( $toStatusUsersPermission ) )
            {
                Doctrine_Query::create()
                    ->delete('ProjectUserPermission p')
                    ->where('p.project_structure_id = ?', $project->id)
                    ->andWhere('p.project_status = ?', $toStatus)
                    ->execute();
            }

            $sfGuardUserId = $actingUser->id ?? sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            $values = array();

            foreach($fromStatusUsers as $userId => $isAdmin)
            {
                $isAdmin  = $isAdmin ? 'TRUE' : 'FALSE';
                $values[] = "(" . $project->id . ", " . $userId . ", " . $toStatus . ", " . $isAdmin . ", " . $sfGuardUserId . ", " . $sfGuardUserId . ", NOw(), NOW())";
            }

            $sql = "INSERT INTO " . self::getInstance()->getTableName() . "
            (project_structure_id, user_id, project_status, is_admin, created_by, updated_by, created_at, updated_at) VALUES ";

            $stmt = $pdo->prepare($sql . implode(',', $values));

            $stmt->execute();
        }
    }

    public static function deselectUsers(ProjectStructure $project, $projectStatus, array $deselectedUserIds)
    {
        if( ! empty( $deselectedUserIds ) )
        {
            Doctrine_Query::create()
                ->delete('ProjectUserPermission p')
                ->where('p.project_structure_id = ?', $project->id)
                ->andWhere('p.project_status = ?', $projectStatus)
                ->andWhereIn('p.user_id', $deselectedUserIds)
                ->execute();
        }
    }

    public static function selectUsers(ProjectStructure $project, $projectStatus, array $selectedUserIds, $isAdmin, $actingUser = null)
    {
        if( ! empty( $selectedUserIds ) )
        {
            $pdo = self::getInstance()->getConnection()->getDbh();

            $stmt = $pdo->prepare("SELECT p.user_id FROM " . self::getInstance()->getTableName() . " p
            WHERE p.project_structure_id = " . $project->id . " AND p.project_status = " . $projectStatus . "
            AND p.user_id IN (" . implode(',', $selectedUserIds) . ")");

            $stmt->execute();

            $existingUsers = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);

            $selectedUserIds = array_diff(array_merge($selectedUserIds, $existingUsers), $existingUsers);
        }

        if( ! empty( $selectedUserIds ) )
        {
            $sfGuardUserId = $actingUser->id ?? sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            $con = self::getInstance()->getConnection();

            $sql = "INSERT INTO " . self::getInstance()->getTableName() . "
            (project_structure_id, user_id, project_status, is_admin, created_by, updated_by, created_at, updated_at) VALUES ";

            $values = array();

            $isAdmin = $isAdmin ? 'TRUE' : 'FALSE';

            foreach($selectedUserIds as $userId)
            {
                $values[] = "(" . $project->id . ", " . $userId . ", " . $projectStatus . ", " . $isAdmin . ", " . $sfGuardUserId . ", " . $sfGuardUserId . ", NOW(), NOW())";
            }

            $con->fetchAssoc($sql . implode(',', $values));
        }
    }

    /**
     * Assigns users automatically based on the project stage.
     *
     * @param ProjectStructure $project
     * @param                  $projectStatus
     * @param null             $actingUser
     */
    public static function automaticallyAssignUsers(ProjectStructure $project, $projectStatus, $actingUser = null)
    {
        switch($projectStatus)
        {
            case ProjectUserPermission::STATUS_TENDERING:

                $eProjectUserIds = static::getDefaultTenderingStageEProjectUsers($project->MainInformation);

                break;

            case ProjectUserPermission::STATUS_POST_CONTRACT:

                $eProjectUserIds = static::getDefaultPostContractStageEProjectUsers($project->MainInformation);

                break;

            default:

                $eProjectUserIds = array();

            // Do nothing.
        }

        static::assignUsers($project, $eProjectUserIds, $projectStatus, $actingUser);
    }

    /**
     * Returns the default eProject users for the Tendering stage.
     *
     * @param ProjectMainInformation $mainInfo
     *
     * @return \Psr\Http\Message\ResponseInterface
     * @throws Exception
     */
    protected static function getDefaultTenderingStageEProjectUsers(ProjectMainInformation $mainInfo)
    {
        $projectOriginId = $mainInfo->eproject_origin_id;

        // $projectOriginId has been set to null before, no identifiable cause.
        if( empty( $projectOriginId ) )
        {
            throw new Exception('Column eproject_origin_id is null (in ' . ProjectMainInformationTable::getInstance()->getTableName() . ' table)');
        }

        $client = new Client(array(
            'verify'   => sfConfig::get('app_guzzle_ssl_verification'),
            'base_uri' => sfConfig::get('app_e_project_url')
        ));

        try
        {
            $res = $client->post("project_get_default_tendering_stage_users/" . $projectOriginId);

            return json_decode($res->getBody())->userIds;
        }
        catch(Exception $e)
        {
            throw $e;
        }
    }

    /**
     * Returns the default eProject users for the Post Contract stage.
     *
     * @param ProjectMainInformation $mainInfo
     *
     * @return \Psr\Http\Message\ResponseInterface
     * @throws Exception
     */
    protected static function getDefaultPostContractStageEProjectUsers(ProjectMainInformation $mainInfo)
    {
        $projectOriginId = $mainInfo->eproject_origin_id;

        // $projectOriginId has been set to null before, no identifiable cause.
        if( empty( $projectOriginId ) )
        {
            throw new Exception('Column eproject_origin_id is null (in ' . ProjectMainInformationTable::getInstance()->getTableName() . ' table)');
        }

        $client = new Client(array(
            'verify'   => sfConfig::get('app_guzzle_ssl_verification'),
            'base_uri' => sfConfig::get('app_e_project_url')
        ));

        try
        {
            $res = $client->post("project_get_default_post_contract_stage_users/" . $projectOriginId);

            return json_decode($res->getBody())->userIds;
        }
        catch(Exception $e)
        {
            throw $e;
        }
    }

    /**
     * Assigns the new users and unassigns the existing users.
     *
     * @param      $project
     * @param      $eProjectUserIds
     * @param      $projectStatus
     * @param null $actingUser
     */
    private static function assignUsers($project, $eProjectUserIds, $projectStatus, $actingUser = null)
    {
        $selectedUsers = array();

        foreach($eProjectUserIds as $eProjectUserId)
        {
            $eProjectUser    = EProjectUserTable::getInstance()->find($eProjectUserId);
            $selectedUsers[] = $eProjectUser->getBuildSpaceUser()->user_id;
        }

        $deselectedUsers        = array();
        $currentlyAssignedUsers = self::getAssignedUserIdsByProjectAndStatus($project, $projectStatus);

        foreach($currentlyAssignedUsers as $user)
        {
            $deselectedUsers[] = $user['id'];
        }

        self::deselectUsers($project, $projectStatus, $deselectedUsers);
        self::selectUsers($project, $projectStatus, $selectedUsers, true, $actingUser);
    }

}
