<?php

/**
 * ScheduleOfRateItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ScheduleOfRateItem extends BaseScheduleOfRateItem
{
    const TYPE_HEADER = 1;
    const TYPE_WORK_ITEM = 2;
    const TYPE_NOID = 4;

    const TYPE_HEADER_TEXT = 'HEAD';
    const TYPE_WORK_ITEM_TEXT = 'ITEM';
    const TYPE_NOID_TEXT = 'NOID';

    const FORMULATED_COLUMN_RATE = 'rate';

    public $itemContainerAfterCopy = array();
    public $itemFormulatedColumnContainerAfterCopy = array();
    public $buildUpRatesContainerAfterCopy = array();
    public $buildUpRatesFormulatedColumnContainerAfterCopy = array();

    public function getFormulatedColumnByName($columnName, $hydrate=null)
    {
        return ScheduleOfRateItemTable::getFormulatedColumnByRelationIdAndColumnName($this->id, $columnName, $hydrate);
    }

    /*
     * This method is use when updating type column in schedule of rate item.
     * We need to remove all information from it's formulated column and uom if the type is not work item
     * since only work item will have value in formulated column and uom.
     */
    public function updateType($type)
    {
        $affectedItems = array();
        if($type != self::TYPE_WORK_ITEM)
        {
            $affectedItems = $this->deleteFormulatedColumns();
            $this->uom_id = NULL;
        }

        $this->deleteBuildUpRates();

        $this->type = (integer)$type;

        $this->save();

        return $affectedItems;
    }

    public function save(Doctrine_Connection $conn = null)
    {
        parent::save($conn);

        ScheduleOfRateItemTable::updateTimestamp($this);
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        //we need to update any related column from formulated columns before deleting it
        $items = DoctrineQuery::create()->select('i.*, t.*')
            ->from('ScheduleOfRateItem i')
            ->leftJoin('i.FormulatedColumns t')
            ->andWhere('i.root_id = ?',$this->root_id)
            ->andWhere('i.lft >= ? AND i.rgt <= ?', array($this->lft, $this->rgt))
            ->addOrderBy('i.lft')
            ->execute();

        $affectedFormulatedColumnId = array();
        $affectedItemList           = array();

        foreach($items as $item)
        {
            foreach ( $item['FormulatedColumns'] as $formulatedColumn )
            {
                array_push($affectedFormulatedColumnId, $formulatedColumn['id']);
            }

            $affectedItems = $item->deleteFormulatedColumns($conn);

            array_push($affectedItemList, $affectedItems);
        }

        // unlink bill item that is linked to SoR, if available
        if ( count($affectedFormulatedColumnId) > 0 )
        {
            BillItemFormulatedColumnTable::unlinkFormulatedColumnFromSor($affectedFormulatedColumnId);
        }

        // we delete all item subsets under this item (if any)
        if($this->type == ScheduleOfRateItem::TYPE_HEADER)
        {
            Doctrine_Query::create()
                ->delete('ScheduleOfRateItem i')
                ->where('i.root_id = ?', $this->root_id)
                ->andWhere('i.trade_id = ?', $this->trade_id)
                ->andWhere('i.lft > ?', $this->lft)
                ->andWhere('i.rgt < ?', $this->rgt)
                ->execute();
        }

        // delete any build up rates
        if($this->type == self::TYPE_WORK_ITEM)
        {
            $this->deleteBuildUpRates($conn);
        }

        parent::delete($conn);

        //recalculate left-right values when deleting child nodes
        if(!$this->node->isRoot())
        {
            $first = $this->rgt + 1;
            $delta = $this->lft - $this->rgt - 1;

            Utilities::shiftRightLeftNestedSet(get_class($this), $first, $delta, $this->root_id, $conn);
        }

        return $affectedItemList;
    }

    public function deleteBuildUpRates(Doctrine_Connection $conn = null)
    {
        ScheduleOfRateItemTable::deleteBuildUpRatesByScheduleOfRateItemId($this->id);
    }

    public function deleteFormulatedColumns(Doctrine_Connection $conn = null)
    {
        $scheduleOfRateItemIds = array();
        $affectedItems = array();
        $formulatedColumnIds = array();
        $nodes = null;

        $conn = $conn ? $conn : $this->getTable()->getConnection();

        try
        {
            $conn->beginTransaction();

            foreach($this->FormulatedColumns as $formulatedColumn)
            {
                $nodes = $formulatedColumn->getNodesRelatedByColumnName($formulatedColumn->column_name);

                if(is_array($nodes))
                {
                    foreach($nodes as $node)
                    {
                        $referencedNode = Doctrine_Core::getTable('ScheduleOfRateItemFormulatedColumn')->find($node['node_from']);

                        if($referencedNode)
                        {
                            $pattern = '/\b(R'.$this->id.')\b/i';
                            $value = preg_replace($pattern, '#REF!', $referencedNode->value);

                            $referencedNode->setFormula($value);

                            $referencedNode->save();

                            $scheduleOfRateItemIds[$referencedNode->relation_id] = $referencedNode->relation_id;
                        }
                    }
                }

                $formulatedColumn->delete($conn);

                $formulatedColumnIds[] = $formulatedColumn->id;
            }

            if(count($formulatedColumnIds) > 0)
            {
                //now we can remove all edges after we've updated related nodes
                Doctrine_Query::create()
                    ->delete('ScheduleOfRateItemEdge e')
                    ->whereIn('e.node_from', $formulatedColumnIds)
                    ->execute();

                Doctrine_Query::create()
                    ->delete('ScheduleOfRateItemEdge e')
                    ->whereIn('e.node_to', $formulatedColumnIds)
                    ->execute();
            }

            $conn->commit();
        }
        catch(Exception $e)
        {
            $conn->rollback();
        }

        foreach($scheduleOfRateItemIds as $scheduleOfRateItemId)
        {
            $affectedItem = array();
            $scheduleOfRateItem = $this->getTable()->find($scheduleOfRateItemId);

            $affectedItem['id'] = $scheduleOfRateItem->id;

            foreach($scheduleOfRateItem->FormulatedColumns as $formulatedColumn)
            {
                $columnName = $formulatedColumn->column_name;
                $affectedItem[$columnName."-final_value"] = $formulatedColumn->final_value;
                $affectedItem[$columnName."-value"] = $formulatedColumn->value;
                $affectedItem[$columnName.'-has_cell_reference'] = $formulatedColumn->hasCellReference();
                $affectedItem[$columnName.'-has_formula'] = $formulatedColumn->hasFormula();
            }

            array_push($affectedItems, $affectedItem);
        }

        return $affectedItems;
    }

    public function moveTo(ScheduleOfRateItem $targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($targetItem->node->isRoot())
            {
                $priority       = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
                $this->priority = $priority;
                $this->save();

                if(!$this->node->isRoot() and $this->node->isValidNode())
                {
                    $this->node->makeRoot($this->id);
                    $this->save();
                }

                if(!$lastPosition)
                {
                    $this->updateRootPriority($priority, $this->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $this->node->moveAsNextSiblingOf($targetItem);
                }
                else
                {
                    $this->node->moveAsPrevSiblingOf($targetItem);
                }

                $this->priority = $targetItem->priority;
                $this->save();

                $this->refresh();
            }

            /*
             * Update priority for all nodes under the family to its root priority.
             * We exclude this step for case the target item is root node and $lastPosition is false
             * because the priority already been update by calling updateRootPriority()
             */
            if(($targetItem->node->isRoot() && $lastPosition) or !$targetItem->node->isRoot())
            {
                Doctrine_Query::create()->update('ScheduleOfRateItem i')
                    ->set('priority', $this->priority)
                    ->where('i.lft BETWEEN ? AND ?', array($this->lft, $this->rgt))
                    ->andWhere('i.root_id = ?', $this->root_id)
                    ->andWhere('i.priority <> ?', $this->priority)
                    ->execute();
            }

            $con->commit();

            return true;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyTo($targetItem, $lastPosition=false)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($this->node->hasChildren())
            {
                $children = Doctrine_Core::getTable('ScheduleOfRateItem')
                    ->createQuery('i')
                    ->select('i.id, i.description, i.uom_id, i.trade_id, i.type, i.level, i.recalculate_resources_library_status')
                    ->where('i.root_id = ?', $this->root_id)
                    ->addWhere('i.lft > ? AND i.rgt < ?', array($this->lft, $this->rgt))
                    ->orderBy('i.lft ASC')
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY)
                    ->execute();
            }
            else
            {
                $children = false;
            }

            $cloneItem = new ScheduleOfRateItem();
            $cloneItem->description = $this->description;
            $cloneItem->type = $this->type;
            $cloneItem->trade_id = $this->trade_id;
            $cloneItem->uom_id = $this->uom_id;
            $cloneItem->recalculate_resources_library_status = $this->recalculate_resources_library_status;

            if($targetItem->node->isRoot())
            {
                $priority = $lastPosition ? $targetItem->priority + 1 : $targetItem->priority;
                $cloneItem->priority = $priority;
                $cloneItem->save($con);

                $cloneItem->getTable()->getTree()->createRoot($cloneItem);

                if(!$lastPosition)
                {
                    $this->updateRootPriority($priority, $cloneItem->id);
                }
            }
            else
            {
                if($lastPosition)
                {
                    $cloneItem->node->insertAsNextSiblingOf($targetItem);
                }
                else
                {
                    $cloneItem->node->insertAsPrevSiblingOf($targetItem);
                }

                $cloneItem->priority = $targetItem->priority;
                $cloneItem->save($con);
            }

            $cloneItem->refresh();

            array_push($this->itemContainerAfterCopy, array(
                'id' => $cloneItem->id,
                'origin' => $this->id
            ));

            if($children)
            {
                $this->_loadNestedSetData($children, $this, $cloneItem);
            }

            $cloneItem->copyFormulatedColumnsFromItem($this, $this);
            $cloneItem->copyBuildUpRatesFromItem($this);

            $this->updateItemRowLinkingAfterCopy();

            $con->commit();

            $cloneItem->refresh(true);

            return $cloneItem;
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function copyRateCellFromItem(ScheduleOfRateItem $item)
    {
        $con = $this->getTable()->getConnection();

        try
        {
            $con->beginTransaction();

            if($this->type != ScheduleOfRateItem::TYPE_HEADER && $this->type != ScheduleOfRateItem::TYPE_NOID)
            {
                if($this->hasBuildUpRates())
                {
                    $this->deleteBuildUpRates($con);
                }

                $this->copyFormulatedColumnsFromItem($item, $this);
                $this->copyBuildUpRatesFromItem($item);
                $this->updateItemRowLinkingAfterCopy();

                $this->recalculate_resources_library_status = $item->recalculate_resources_library_status;
                $this->save($con);

                $con->commit();
                $this->refresh(true);
            }
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function indent()
    {
        $indented = false;
        $previousRoot = $this->getPreviousRoot();

        if($this->node->isRoot() and $previousRoot and $previousRoot->type == ScheduleOfRateItem::TYPE_HEADER)
        {
            $this->node->moveAsLastChildOf($previousRoot);
            $this->refresh();

            $pdo = $this->getTable()->getConnection()->getDbh();

            $stmt = $pdo->prepare("UPDATE ".$this->getTable()->getTableName()." SET priority = ".$previousRoot->priority."
            WHERE root_id = ".$previousRoot->root_id." AND priority <> ".$previousRoot->priority."
            AND trade_id = ".$this->trade_id." AND deleted_at IS NULL");

            $stmt->execute();

            $indented = true;
        }
        else if(!$this->node->isRoot() and $this->node->hasPrevSibling() and $this->node->getPrevSibling()->type == ScheduleOfRateItem::TYPE_HEADER)
        {
            $this->node->moveAsLastChildOf($this->node->getPrevSibling());

            $this->refresh();

            $indented = true;
        }

        return $indented;
    }

    public function outdent()
    {
        if(!$this->node->isRoot() and ($this->type == ScheduleOfRateItem::TYPE_HEADER or ($this->type != ScheduleOfRateItem::TYPE_HEADER and !$this->node->hasNextSibling())))
        {
            $parent = $this->node->getParent();

            if(!$parent || !$parent->node)
            {
                return false;
            }
            
            $siblings = $this->getTable()
                ->createQuery('i')
                ->select('i.id')
                ->where('i.root_id = ?',$this->root_id)
                ->andWhere('i.level = ?', $this->level)
                ->andWhere('i.lft BETWEEN ? AND ?', array($parent->lft, $parent->rgt))
                ->andWhere('i.lft > ?', $this->rgt)
                ->addOrderBy('i.lft ASC')
                ->execute();

            foreach($siblings as $sibling)
            {
                $sibling->node->moveAsLastChildOf($this);

                $this->refresh();
            }

            unset($siblings);

            if(!$parent->node->isRoot())
            {
                $this->node->moveAsNextSiblingOf($parent);
            }
            else
            {
                $this->node->makeRoot($this->id);

                parent::save();

                $this->priority = $parent->priority + 1;

                $this->save();

                $this->updateRootPriority($parent->priority + 1, $this->id);
            }

            $this->refresh();

            return true;
        }
        else
        {
            return false;
        }
    }

    public function hasBuildUpRates()
    {
        return $this->BuildUpRateResources->count() > 0 ? true : false;
    }

    /*
     * Well this is fuckin tricky. The problem is when we successfully cloned schedule of rate item, we need to update
     * row linking (if any). The rules are:
     * 1. If the link id are included in the list of copy items, then all linked items in the copy list
     * will be updated to point it's linked value to the newly copied record
     * 2. If the link id is not included in the list of copy item, all linked items in the copy list
     * will remain same (nothing change)
     *
     * So we need to store origin id and the newly created id (from copy) into a container so later once we created
     * all records we will then update the linked id respectively based on the the new id -> origin id list
     *
     * To see this crazy ass solution in action and for better understanding, please refer to copyTo() method in
     * ScheduleOfRateItem and ScheduleOfRateTrade classes
     */
    public function copyFormulatedColumnsFromItem(ScheduleOfRateItem $scheduleOfRateItem, $containerScope)
    {
        $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('ScheduleOfRateItem');

        foreach($formulatedColumnConstants as $constant)
        {
            $formulatedColumn = $scheduleOfRateItem->getFormulatedColumnByName($constant);
            if($formulatedColumn)
            {
                $cloneFormulatedColumn = $this->getFormulatedColumnByName(ScheduleOfRateItem::FORMULATED_COLUMN_RATE);
                $cloneFormulatedColumn = $cloneFormulatedColumn ? $cloneFormulatedColumn : new ScheduleOfRateItemFormulatedColumn();
                $cloneFormulatedColumn->has_build_up = $formulatedColumn->has_build_up;
                $cloneFormulatedColumn->column_name = $formulatedColumn->column_name;
                $cloneFormulatedColumn->value = $formulatedColumn->value;
                $cloneFormulatedColumn->final_value = $formulatedColumn->final_value;
                $cloneFormulatedColumn->relation_id = $this->id;
                $cloneFormulatedColumn->save();

                array_push($containerScope->itemFormulatedColumnContainerAfterCopy, array(
                    'id' => $cloneFormulatedColumn->id,
                    'origin' => $formulatedColumn->id
                ));

                ScheduleOfRateItemEdgeTable::getInstance()->getConnection()->fetchAssoc("INSERT INTO ".ScheduleOfRateItemEdgeTable::getInstance()->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                        SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".ScheduleOfRateItemEdgeTable::getInstance()->getTableName()." AS old
                        WHERE old.node_from = ".$formulatedColumn->id." AND old.deleted_at IS NULL");
            }
        }
    }

    public function updateItemRowLinkingAfterCopy()
    {
        if(count($this->itemFormulatedColumnContainerAfterCopy) > 0)
        {
            $formulatedColumnIdList = array();
            $formulatedColumnOriginList = array();

            foreach($this->itemFormulatedColumnContainerAfterCopy as $list)
            {
                array_push($formulatedColumnIdList, $list['id']);
                array_push($formulatedColumnOriginList, $list['origin']);
            }

            $records = DoctrineQuery::create()->select('e.id, e.node_from, e.node_to')
                ->from('ScheduleOfRateItemEdge e')
                ->whereIn('e.node_from', $formulatedColumnIdList)
                ->andWhereIn('e.node_to', $formulatedColumnOriginList)
                ->addOrderBy('e.node_from ASC')
                ->execute();

            foreach($records as $record)
            {
                $nodeFrom = $record->NodeFrom;
                if($nodeFrom->hasCellReference())
                {
                    $value = $nodeFrom->value;
                    foreach($this->itemContainerAfterCopy as $list)
                    {
                        $pattern = '/\b(R'.$list['origin'].')\b/i';
                        $value = preg_replace($pattern, 'R'.$list['id'], $value);
                    }
                    $nodeFrom->value = $value;
                    $nodeFrom->save();
                }
                unset($nodeFrom);
            }

            $this->itemFormulatedColumnContainerAfterCopy = array();
            $this->itemContainerAfterCopy = array();
        }
    }

    public function updateBuildUpRatesRowLinkingAfterCopy()
    {
        if(count($this->buildUpRatesFormulatedColumnContainerAfterCopy) > 0)
        {
            $formulatedColumnIdList = array();
            $formulatedColumnOriginList = array();

            foreach($this->buildUpRatesFormulatedColumnContainerAfterCopy as $list)
            {
                array_push($formulatedColumnIdList, $list['id']);
                array_push($formulatedColumnOriginList, $list['origin']);
            }

            $records = DoctrineQuery::create()->select('e.id, e.node_from, e.node_to')
                ->from('ScheduleOfRateBuildUpRateEdge e')
                ->whereIn('e.node_from', $formulatedColumnIdList)
                ->andWhereIn('e.node_to', $formulatedColumnOriginList)
                ->addOrderBy('e.node_from ASC')
                ->execute();

            foreach($records as $record)
            {
                $nodeFrom = $record->NodeFrom;
                if($nodeFrom->hasCellReference())
                {
                    $value = $nodeFrom->value;
                    foreach($this->buildUpRatesContainerAfterCopy as $buildUpList)
                    {
                        $pattern = '/\b(R'.$buildUpList['origin'].')\b/i';
                        $value = preg_replace($pattern, 'R'.$buildUpList['id'], $value);
                    }

                    $nodeFrom->value = $value;
                    $nodeFrom->save();
                }
            }

            $this->buildUpRatesFormulatedColumnContainerAfterCopy = array();
            $this->buildUpRatesContainerAfterCopy = array();
        }
    }

    public function copyBuildUpRatesFromItem(ScheduleOfRateItem $scheduleOfRateItem)
    {
        if($scheduleOfRateItem->hasBuildUpRates())
        {
            $formulatedColumnConstants = Utilities::getAllFormulatedColumnConstants('ScheduleOfRateBuildUpRateItem');
            $edgeTable = Doctrine_Core::getTable('ScheduleOfRateBuildUpRateEdge');

            $buildUpRateResourceIds = array();

            foreach($scheduleOfRateItem->BuildUpRateResources as $buildUpRateResource)
            {
                $cloneBuildUpRateResource = $buildUpRateResource->copy();
                $cloneBuildUpRateResource->schedule_of_rate_item_id = $this->id;
                $cloneBuildUpRateResource->save();

                $buildUpRateResourceIds[$buildUpRateResource->id] = $cloneBuildUpRateResource->id;

                unset($buildUpRateResource);
            }

            foreach($scheduleOfRateItem->BuildUpRates as $buildUpRate)
            {
                $cloneBuildUpRate = $buildUpRate->copy();

                $cloneBuildUpRate->schedule_of_rate_item_id = $this->id;
                $cloneBuildUpRate->build_up_rate_resource_id = $buildUpRateResourceIds[$buildUpRate->build_up_rate_resource_id];
                $cloneBuildUpRate->save();

                array_push($this->buildUpRatesContainerAfterCopy, array(
                    'id' => $cloneBuildUpRate->id,
                    'origin' => $buildUpRate->id
                ));

                foreach($formulatedColumnConstants as $constant)
                {
                    $formulatedColumn = $buildUpRate->getFormulatedColumnByName($constant);
                    if($formulatedColumn)
                    {
                        $cloneFormulatedColumn = $formulatedColumn->copy();
                        $cloneFormulatedColumn->relation_id = $cloneBuildUpRate->id;
                        $cloneFormulatedColumn->save();

                        array_push($this->buildUpRatesFormulatedColumnContainerAfterCopy, array(
                            'id' => $cloneFormulatedColumn->id,
                            'origin' => $formulatedColumn->id
                        ));

                        $edgeTable->getConnection()->fetchAssoc("INSERT INTO ".$edgeTable->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                        SELECT ".$cloneFormulatedColumn->id.", old.node_to, old.column_name, NOW(), NOW() FROM ".$edgeTable->getTableName()." AS old
                        WHERE old.node_from = ".$formulatedColumn->id." AND old.deleted_at IS NULL");
                    }
                }
            }

            $this->updateBuildUpRatesRowLinkingAfterCopy();

            $originBuildUpSummary = $scheduleOfRateItem->BuildUpRateSummary;
            $cloneBuildUpSummary = $this->BuildUpRateSummary;
            $cloneBuildUpSummary->schedule_of_rate_item_id = $this->id;
            $cloneBuildUpSummary->total_cost = $originBuildUpSummary->total_cost;
            $cloneBuildUpSummary->markup = $originBuildUpSummary->markup;
            $cloneBuildUpSummary->final_cost = $originBuildUpSummary->final_cost;
            $cloneBuildUpSummary->apply_conversion_factor = $originBuildUpSummary->apply_conversion_factor;
            $cloneBuildUpSummary->conversion_factor_amount = $originBuildUpSummary->conversion_factor_amount;
            $cloneBuildUpSummary->conversion_factor_uom_id = $originBuildUpSummary->conversion_factor_uom_id;
            $cloneBuildUpSummary->conversion_factor_operator = $originBuildUpSummary->conversion_factor_operator;
            $cloneBuildUpSummary->save();
        }
        else
        {
            return false;
        }
    }

    public function getPreviousRoot()
    {
        $rootId = $this->root_id > 0 ? $this->root_id : $this->id;
        $root = $this->getTable()->find($rootId);

        return $this->getTable()
            ->createQuery('i')
            ->select('i.id')
            ->where('i.root_id = i.id')
            ->addWhere('i.trade_id = ?', $this->trade_id)
            ->addWhere('i.priority < ?', $root->priority)
            ->orderBy('i.priority DESC')
            ->limit(1)
            ->fetchOne();
    }

    public function updateRootPriority($priority, $excludeId=null)
    {
        ScheduleOfRateItemTable::updateRootPriority($priority, $this->trade_id, $excludeId);
    }

    private function _loadNestedSetData($nestedSetData, $containerScope, ScheduleOfRateItem $parent)
    {
        $nestedSetData = array_reverse($nestedSetData, true);

        foreach($nestedSetData as $nestedSet)
        {
            $children = array();
            $originScheduleOfRateItem = $this->getTable()->find($nestedSet['id']);
            unset($nestedSet['id']);

            if(array_key_exists('__children', $nestedSet))
            {
                $children = (array) $nestedSet['__children'];
                unset($nestedSet['__children']);
            }

            $obj = new ScheduleOfRateItem();

            foreach($nestedSet as $key => $value)
            {
                $func = 'set' . Doctrine_Inflector::classify($key);
                $obj->$func($value);
            }

            $parent->node->addChild($obj);

            $obj->priority = $parent->priority;
            $obj->save();

            array_push($containerScope->itemContainerAfterCopy, array(
                'id'     => $obj->id,
                'origin' => $originScheduleOfRateItem->id
            ));

            $obj->copyFormulatedColumnsFromItem($originScheduleOfRateItem, $containerScope);
            $obj->copyBuildUpRatesFromItem($originScheduleOfRateItem);

            if(is_array($children) and !empty($children))
            {
                $this->_loadNestedSetData($children, $containerScope, $obj);
            }
        }
    }

    public function calculateBuildUpTotalByResourceId($resourceId)
    {
        $result = DoctrineQuery::create()->select('COALESCE(SUM(b.line_total), 0) as total')
            ->from('ScheduleOfRateBuildUpRateItem b')
            ->where('b.schedule_of_rate_item_id = ?', $this->id)
            ->andWhere('b.build_up_rate_resource_id = ?', $resourceId)
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $result ? $result['total'] : 0;
    }

    public function importResourceItems($resourceItemIds, ScheduleOfRateBuildUpRateResource $resource)
    {
        $results = DoctrineQuery::create()->select('i.id, i.resource_item_library_id')
            ->from('ScheduleOfRateBuildUpRateItem i')
            ->where('i.schedule_of_rate_item_id = ?', $this->id)
            ->andWhere('i.build_up_rate_resource_id = ?', $resource->id)
            ->andWhereIn('i.resource_item_library_id', $resourceItemIds)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->execute();

        if($results)
        {
            foreach($results as $result)
            {
                //if resource already linked to build up, unset resource id from array
                if(($key = array_search($result['resource_item_library_id'], $resourceItemIds)) !== false) {
                    unset($resourceItemIds[$key]);
                }
            }
        }

        $buildUpRateItems = array();

        if(count($resourceItemIds) > 0)
        {
            $pdo = $this->getTable()->getConnection()->getDbh();

            // only select work item to be imported into build up
            $stmt = $pdo->prepare("SELECT i.id, i.description, i.uom_id, i.resource_trade_id, i.priority, i.lft, i.level FROM
            ".ResourceItemTable::getInstance()->getTableName()." AS i
            WHERE i.id IN (".implode(',', $resourceItemIds).") AND i.type = ".ResourceItem::TYPE_WORK_ITEM." AND i.deleted_at IS NULL
            ORDER BY i.root_id, i.priority, i.lft, i.level ASC");

            $stmt->execute();

            $resourceItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $priority = DoctrineQuery::create()->select('i.id, i.description, i.uom_id, i.priority')
                ->from('ScheduleOfRateBuildUpRateItem i')
                ->where('i.schedule_of_rate_item_id = ?', $this->id)
                ->andWhere('i.build_up_rate_resource_id = ?', $resource->id)
                ->orderBy('i.priority DESC')
                ->limit(1)
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->fetchOne();

            $priority = $priority ? $priority['priority']+1 : 0;

            foreach($resourceItems as $item)
            {
                $buildUpRateItem = new ScheduleOfRateBuildUpRateItem();
                $buildUpRateItem->schedule_of_rate_item_id = $this->id;
                $buildUpRateItem->description = $item['description'];
                $buildUpRateItem->build_up_rate_resource_id = $resource->id;
                $buildUpRateItem->resource_trade_library_id = $item['resource_trade_id'];
                $buildUpRateItem->resource_item_library_id = $item['id'];
                $buildUpRateItem->uom_id = $item['uom_id'];
                $buildUpRateItem->priority = $priority;

                $buildUpRateItem->save();

                $columns = array(
                    ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_CONSTANT,
                    ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_RATE,
                    ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_WASTAGE
                );

                foreach($columns as $column)
                {
                    $formulatedColumn = new ScheduleOfRateBuildUpRateFormulatedColumn();
                    $formulatedColumn->relation_id = $buildUpRateItem->id;
                    $formulatedColumn->column_name = $column;
                    $formulatedColumn->linked = true;

                    $resourceItemFormulatedColumn = DoctrineQuery::create()->select('c.id, c.column_name, c.final_value')
                        ->from('ResourceItemFormulatedColumn c')
                        ->where('c.relation_id = ?', $item['id'])
                        ->andWhere('c.column_name = ?', $column)
                        ->limit(1)
                        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                        ->fetchOne();

                    if($resourceItemFormulatedColumn)
                    {
                        $formulatedColumn->value = $resourceItemFormulatedColumn['final_value'];
                        $formulatedColumn->final_value = $resourceItemFormulatedColumn['final_value'];
                    }
                    else
                    {
                        // set linking to null for null column's value
                        $formulatedColumn->linked = false;
                    }

                    $formulatedColumn->save();

                    unset($formulatedColumn);
                }

                $priority++;

                array_push($buildUpRateItems, $buildUpRateItem);
            }
        }

        return $buildUpRateItems;
    }

    public function importSORBuildUpItems(array $sorBuildUpItemIds, ScheduleOfRateBuildUpRateResource $resource)
    {
        $buildUpRateItems = array();

        $results = DoctrineQuery::create()
            ->select('i.id, i.resource_item_library_id')
            ->from('ScheduleOfRateBuildUpRateItem i')
            ->leftJoin('i.ScheduleOfRateBuildUpRateResource sorburr')
            ->andWhere('sorburr.resource_library_id = ?', array($resource->resource_library_id))
            ->andWhereIn('i.id', $sorBuildUpItemIds)
            ->fetchArray();

        if (empty($results))
        {
            return $buildUpRateItems;
        }

        $priority = DoctrineQuery::create()
            ->select('i.id, i.description, i.uom_id, i.priority')
            ->from('ScheduleOfRateBuildUpRateItem i')
            ->where('i.schedule_of_rate_item_id = ?', array($this->id))
            ->andWhere('i.build_up_rate_resource_id = ?', array($resource->id))
            ->orderBy('i.priority DESC')
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        $priority = $priority ? $priority['priority']+1 : 0;

        // only select work item to be imported into build up
        $resourceItems = DoctrineQuery::create()
            ->from('ScheduleOfRateBuildUpRateItem i')
            ->leftJoin('i.ScheduleOfRateBuildUpRateResource sorburr')
            ->andWhere('sorburr.resource_library_id = ?', array($resource->resource_library_id))
            ->andWhereIn('i.id', $sorBuildUpItemIds)
            ->orderBy('i.priority ASC')
            ->execute();

        $columns = array(
            ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_NUMBER,
            ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_CONSTANT,
            ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_QUANTITY,
            ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_RATE,
            ScheduleOfRateBuildUpRateItem::FORMULATED_COLUMN_WASTAGE,
        );

        foreach($resourceItems as $item)
        {
            $clonedBuildUpRateItem                            = $item->copy();
            $clonedBuildUpRateItem->schedule_of_rate_item_id  = $this->id;
            $clonedBuildUpRateItem->build_up_rate_resource_id = $resource->id;
            $clonedBuildUpRateItem->priority                  = $priority;

            $clonedBuildUpRateItem->save();

            foreach($columns as $column)
            {
                $formulatedColumn              = new ScheduleOfRateBuildUpRateFormulatedColumn();
                $formulatedColumn->relation_id = $clonedBuildUpRateItem->id;
                $formulatedColumn->column_name = $column;
                $formulatedColumn->linked      = true;

                $sorBuildUpItemFormulatedColumn = DoctrineQuery::create()
                    ->select('c.id, c.column_name, c.linked, c.final_value')
                    ->from('ScheduleOfRateBuildUpRateFormulatedColumn c')
                    ->where('c.relation_id = ?', $item['id'])
                    ->andWhere('c.column_name = ?', $column)
                    ->limit(1)
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                    ->fetchOne();

                if($sorBuildUpItemFormulatedColumn)
                {
                    $formulatedColumn->value       = $sorBuildUpItemFormulatedColumn['final_value'];
                    $formulatedColumn->final_value = $sorBuildUpItemFormulatedColumn['final_value'];
                    $formulatedColumn->linked      = $sorBuildUpItemFormulatedColumn['linked'];
                }
                else
                {
                    // set linking to null for null column's value
                    $formulatedColumn->linked = false;
                }

                $formulatedColumn->save();

                unset($formulatedColumn);
            }

            $priority++;

            array_push($buildUpRateItems, $clonedBuildUpRateItem);

            unset($clonedBuildUpRateItem);
        }

        return $buildUpRateItems;
    }

    public function importRateIntoBillItems(Array $billItemIds, $elementId)
    {
        $scheduleOfRateFormulatedColumn = $this->getFormulatedColumnByName(self::FORMULATED_COLUMN_RATE);

        $rate = $scheduleOfRateFormulatedColumn ? $scheduleOfRateFormulatedColumn->final_value : 0;

        $buildUpSummary = $this->BuildUpRateSummary;

        $applyConversionFactor = $buildUpSummary->apply_conversion_factor ? 1 : 0;
        $conversionFactorUOMId = $buildUpSummary->conversion_factor_uom_id > 0 ? $buildUpSummary->conversion_factor_uom_id : null;
        $roundingType = BillSetting::ROUNDING_TYPE_DISABLED;  //later to change to default setting

        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

        $pdo = ScheduleOfRateItemTable::getInstance()->getConnection()->getDbh();
        $con = BillItemFormulatedColumnTable::getInstance()->getConnection();

        $element = Doctrine_Core::getTable('BillElement')->find($elementId);

        try
        {
            $con->beginTransaction();

            foreach($billItemIds as $billItemId)
            {
                BillItemTable::deleteBuildUpRatesByBillItemId($billItemId);

                $rateFormulatedColumn = BillItemFormulatedColumnTable::getInstance()->getByRelationIdAndColumnName($billItemId, BillItem::FORMULATED_COLUMN_RATE);

                if($this->hasBuildUpRates() and $rate > 0)
                {
                    switch($roundingType)
                    {
                        case BillBuildUpRateSummary::ROUNDING_TYPE_UPWARD:
                            $rate  = ceil($rate);
                            break;
                        case BillBuildUpRateSummary::ROUNDING_TYPE_DOWNWARD:
                            $rate  = floor($rate);
                            break;
                        case BillBuildUpRateSummary::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                            $rate  = round($rate);
                            break;
                        case BillBuildUpRateSummary::ROUNDING_TYPE_NEAREST_TENTH:
                            $rate  = round($rate * 10) / 10;
                            break;
                        default:
                            $rate  = number_format($rate, 2, '.', '');
                    }
                }

                $rateFormulatedColumn->setFormula($rate);
                $rateFormulatedColumn->linked = true;

                /*
                 * call save function first because we need to save the data and remove any existing build up (if any) for the particular item
                 */
                $rateFormulatedColumn->save($con);

                if($scheduleOfRateFormulatedColumn)
                {
                    $rateFormulatedColumn->has_build_up = $scheduleOfRateFormulatedColumn->has_build_up;
                    $rateFormulatedColumn->schedule_of_rate_item_formulated_column_id = $scheduleOfRateFormulatedColumn->id;

                    $rateFormulatedColumn->parentSave($con);// to save the SOR formulated column id since calling obj save function will just unset schedule_of_rate_item_formulated_column_id
                }

                if($this->hasBuildUpRates())
                {
                    $formulatedColumnData = array();
                    foreach($this->BuildUpRates as $buildUpRate)
                    {
                        $buildUpRateResourceId   = $buildUpRate->build_up_rate_resource_id;
                        $resourceTradeLibraryId  = $buildUpRate->resource_trade_library_id;

                        // find existing BillBuildUpRateResourceTrade, if got then use current ID
                        // if not then create new one
                        $billBuildUpRateResource = BillBuildUpRateResourceTable::getExistingRecordFromScheduleOfRateBuildUpRateResource($billItemId, $buildUpRateResourceId);
                        $billBuildUpRateTrade = BillBuildUpRateResourceTradeTable::getExistingRecordFromResourceTrade($billItemId, $billBuildUpRateResource['id'], $resourceTradeLibraryId);

                        $resourceItemLibraryId = $buildUpRate->resource_item_library_id > 0 ? $buildUpRate->resource_item_library_id : 'NULL';
                        $uomId = $buildUpRate->uom_id > 0 ? $buildUpRate->uom_id : 'NULL';
                        $billBuildUpRateTradeId = is_array($billBuildUpRateTrade) ? $billBuildUpRateTrade['id'] : 'NULL';

                        $stmt = $pdo->prepare("INSERT INTO ".BillBuildUpRateItemTable::getInstance()->getTableName()."
                        (bill_item_id, build_up_rate_resource_id, build_up_rate_resource_trade_id, resource_item_library_id, description, total, line_total,
                        uom_id, priority, created_at, updated_at, created_by, updated_by)
                        VALUES (".$billItemId.", ".$billBuildUpRateResource['id'].", ".$billBuildUpRateTradeId.", ".$resourceItemLibraryId.",
                        :description, ".$buildUpRate->total.", ".$buildUpRate->line_total.", ".$uomId.", ".$buildUpRate->priority.",
                        NOW(), NOW(), ".$userId.", ".$userId.") RETURNING id");

                        $stmt->execute(array(
                            'description' => $buildUpRate->description
                        ));

                        $returnId = $stmt->fetch(PDO::FETCH_ASSOC);

                        array_push($this->buildUpRatesContainerAfterCopy, array(
                            'id' => $returnId['id'],
                            'origin' => $buildUpRate->id
                        ));

                        foreach($buildUpRate->FormulatedColumns as $formulatedColumn)
                        {
                            $linked = $formulatedColumn->linked ? 'TRUE' : 'FALSE';
                            $finalValue = ($formulatedColumn->final_value != "NULL" and strlen($formulatedColumn->final_value) > 0 and !is_null($formulatedColumn->final_value)) ? $formulatedColumn->final_value : 0;

                            $formulatedColumnData[] = "(".$linked.", ".$returnId['id'].", '".$formulatedColumn->column_name."', '".pg_escape_string($formulatedColumn->value)."', ".$finalValue.", NOW(), NOW(), ".$userId.", ".$userId.")";

                            array_push($this->buildUpRatesFormulatedColumnContainerAfterCopy, array(
                                'id' => null,
                                'origin' => $formulatedColumn->id
                            ));

                            unset($formulatedColumn);
                        }
                    }

                    if(count($formulatedColumnData) > 0)
                    {
                        $stmt = $pdo->prepare("INSERT INTO ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()."
                        (linked, relation_id, column_name, value, final_value, created_at, updated_at, created_by, updated_by)
                        VALUES ".implode(",", $formulatedColumnData)." RETURNING id");

                        $stmt->execute();

                        $formulatedColumnsIds = $stmt->fetchAll(PDO::FETCH_ASSOC);

                        foreach($formulatedColumnsIds as $key => $formulatedColumnsId)
                        {
                            $this->buildUpRatesFormulatedColumnContainerAfterCopy[$key]['id'] = $formulatedColumnsId['id'];
                        }
                    }
                }

                $billBuildUpSummaryQuery = DoctrineQuery::create()->select('*')
                    ->from('BillBuildUpRateSummary s')
                    ->where('s.bill_item_id = ?', $billItemId)
                    ->limit(1)
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

                $finalCost = $buildUpSummary->final_cost;

                if($finalCost > 0)
                {
                    switch($roundingType)
                    {
                        case BillBuildUpRateSummary::ROUNDING_TYPE_UPWARD:
                            $finalCost = ceil($buildUpSummary->final_cost);
                            break;
                        case BillBuildUpRateSummary::ROUNDING_TYPE_DOWNWARD:
                            $finalCost = floor($buildUpSummary->final_cost);
                            break;
                        case BillBuildUpRateSummary::ROUNDING_TYPE_NEAREST_WHOLE_NUMBER:
                            $finalCost = round($buildUpSummary->final_cost);
                            break;
                        case BillBuildUpRateSummary::ROUNDING_TYPE_NEAREST_TENTH:
                            $finalCost = round($buildUpSummary->final_cost * 10) / 10;
                            break;
                        default:
                            $finalCost = number_format($buildUpSummary->final_cost, 2, '.', '');
                    }
                }

                if($billBuildUpSummaryQuery->count() == 0)
                {
                    $sql = "INSERT INTO ".BillBuildUpRateSummaryTable::getInstance()->getTableName()."
                    (bill_item_id, total_cost, markup, final_cost, apply_conversion_factor, conversion_factor_amount, conversion_factor_uom_id, conversion_factor_operator, rounding_type, created_at, updated_at, created_by, updated_by)
                    VALUES (:bill_item_id, :total_cost, :markup, :final_cost, :apply_conversion_factor, :conversion_factor_amount, :conversion_factor_uom_id, :conversion_factor_operator, :rounding_type, NOW(), NOW(), ".$userId.", ".$userId.")";
                }
                else
                {
                    $sql = "UPDATE ".BillBuildUpRateSummaryTable::getInstance()->getTableName()." SET total_cost = :total_cost, markup = :markup, final_cost = :final_cost, apply_conversion_factor = :apply_conversion_factor, conversion_factor_amount = :conversion_factor_amount,
                    conversion_factor_uom_id = :conversion_factor_uom_id, conversion_factor_operator = :conversion_factor_operator, rounding_type = :rounding_type, created_at = NOW(), updated_at = NOW(), created_by = ".$userId.", updated_by = ".$userId." WHERE bill_item_id = :bill_item_id";
                }

                $stmt = $pdo->prepare($sql);

                $stmt->execute(array(
                    'bill_item_id'               => $billItemId,
                    'total_cost'                 => $buildUpSummary->total_cost,
                    'markup'                     => $buildUpSummary->markup,
                    'final_cost'                 => $finalCost,
                    'apply_conversion_factor'    => $applyConversionFactor,
                    'conversion_factor_amount'   => $buildUpSummary->conversion_factor_amount,
                    'conversion_factor_operator' => ( ! is_null($buildUpSummary->conversion_factor_operator) ) ? $buildUpSummary->conversion_factor_operator : Constants::ARITHMETIC_OPERATOR_MULTIPLICATION,
                    'conversion_factor_uom_id'   => $conversionFactorUOMId,
                    'rounding_type'              => $roundingType
                ));

                unset($rateFormulatedColumn);

                //Update Grand Total
                $grandTotalStatement = "SELECT COALESCE(SUM(r.grand_total), 0) FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()."
                AS r LEFT JOIN ".BillColumnSettingTable::getInstance()->getTableName()." AS c ON r.bill_column_setting_id = c.id
                WHERE r.bill_item_id = ".$billItemId." AND r.include IS TRUE AND r.deleted_at IS NULL AND c.deleted_at IS NULL";

                $grandTotalAfterMarkupStatement = "SELECT COALESCE(SUM(r.grand_total_after_markup), 0) FROM ".BillItemTypeReferenceTable::getInstance()->getTableName()."
                AS r LEFT JOIN ".BillColumnSettingTable::getInstance()->getTableName()." AS c ON r.bill_column_setting_id = c.id
                WHERE r.bill_item_id = ".$billItemId." AND r.include IS TRUE AND r.deleted_at IS NULL AND c.deleted_at IS NULL";

                //update grand total qty
                $con->fetchAssoc("UPDATE ".BillItemTable::getInstance()->getTableName()." SET
                    grand_total = (".$grandTotalStatement."),
                    grand_total_after_markup = (".$grandTotalAfterMarkupStatement.") WHERE id = ".$billItemId);

                //update markup amount columns since any changes on original grand total will affect markup amount (base on markup percentage)
                BillItemTable::updateMarkupAmountByBillItemId($billItemId);

                /*
                 * This is a tricky bit where we need to update row linking inside each formulated columns (if any).
                 * Since we copied formulated columns from ScheduleOfRateBuildUpRateFormulatedColumn into BillBuildUpRateFormulatedColumn,
                 * we need to change the node_to id from ScheduleOfRateBuildUpRateFormulatedColumn id to BillBuildUpRateFormulatedColumn id.
                 * We store return id from saved BillBuildUpRateFormulatedColumn along with it origin id from ScheduleOfRateBuildUpRateFormulatedColumn
                 * into buildUpRatesFormulatedColumnContainerAfterCopy. Then we have to traverse through buildUpRatesFormulatedColumnContainerAfterCopy
                 * to get BillBuildUpRateFormulatedColumn id based on the node_to and node_form id in ScheduleOfRateBuildUpRateFormulatedColumn.
                 *
                 * If this comment does not make any sense at all it shows that how this solution does not make any sense at all too. Fuckin Booyahh!
                 */
                if(count($this->buildUpRatesFormulatedColumnContainerAfterCopy) > 0)
                {
                    $formulatedColumnIdList = array();
                    $formulatedColumnOriginList = array();

                    $billBuildUpRateOriginList = array();

                    foreach($this->buildUpRatesFormulatedColumnContainerAfterCopy as $list)
                    {
                        array_push($formulatedColumnIdList, $list['id']);
                        array_push($formulatedColumnOriginList, $list['origin']);
                    }

                    $billBuildUpRateEdgeData = array();

                    foreach($formulatedColumnOriginList as $idx => $originId)
                    {
                        $stmt = $pdo->prepare("SELECT node_to, column_name FROM ".ScheduleOfRateBuildUpRateEdgeTable::getInstance()->getTableName()."
                            WHERE node_from = ".$originId." AND deleted_at IS NULL");

                        $stmt->execute();

                        $edge = $stmt->fetch(PDO::FETCH_ASSOC);

                        if($edge && ($key = array_search($edge['node_to'], $formulatedColumnOriginList)) !== false)
                        {
                            $billBuildUpRateEdgeData[] = "(".$formulatedColumnIdList[$idx].", ".$formulatedColumnIdList[$key].", '".$edge['column_name']."', NOW(), NOW())";
                            $billBuildUpRateOriginList[] = $formulatedColumnIdList[$key];
                        }
                    }

                    if(count($billBuildUpRateEdgeData) > 0)
                    {
                        $stmt = $pdo->prepare("INSERT INTO ".BillBuildUpRateEdgeTable::getInstance()->getTableName()." (node_from, node_to, column_name, created_at, updated_at)
                            VALUES ".implode(",", $billBuildUpRateEdgeData));

                        $stmt->execute();

                        $stmt = $pdo->prepare("SELECT DISTINCT r.id, r.value FROM ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." r
                            JOIN ".BillBuildUpRateEdgeTable::getInstance()->getTableName()." e ON r.id = e.node_from
                            WHERE e.node_from IN (".implode(',', $formulatedColumnIdList).")
                            AND e.node_to IN (".implode(',', $billBuildUpRateOriginList).")
                            AND e.deleted_at IS NULL
                            AND r.deleted_at IS NULL
                            ORDER BY r.id ASC");

                        $stmt->execute();

                        $formulatedColumns = $stmt->fetchAll(PDO::FETCH_ASSOC);

                        $formulatedColumnUpdateIds = array();
                        $formulatedColumnUpdateValues = array();

                        foreach($formulatedColumns as $formulatedColumn)
                        {
                            $pattern = '/r[\d{1,}]+/i';
                            $match = strlen($formulatedColumn['value']) > 0 ? preg_match_all($pattern, $formulatedColumn['value'], $matches, PREG_PATTERN_ORDER) : false;

                            if($match)
                            {
                                $value = $formulatedColumn['value'];

                                foreach($this->buildUpRatesContainerAfterCopy as $buildUpList)
                                {
                                    $pattern = '/\b(R'.$buildUpList['origin'].')\b/i';
                                    $value = preg_replace($pattern, 'Rtemp'.$buildUpList['id'], $value);
                                }

                                $pattern = '/\bRtemp/';
                                $value = preg_replace($pattern, 'R', $value);

                                array_push($formulatedColumnUpdateIds, $formulatedColumn['id']);
                                array_push($formulatedColumnUpdateValues, $value);
                            }
                        }

                        unset($formulatedColumns);

                        if($formulatedColumnUpdateIds)
                        {
                            $stmt = $pdo->prepare("UPDATE ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName()." SET value = virtual_table.value
                            FROM
                            (SELECT UNNEST(ARRAY[" . implode(",", $formulatedColumnUpdateIds)."]) AS id,
                                UNNEST(ARRAY['" . implode("','", $formulatedColumnUpdateValues) . "']) AS value
                            ) AS virtual_table
                            WHERE ".BillBuildUpRateFormulatedColumnTable::getInstance()->getTableName().".id = virtual_table.id");

                            $stmt->execute();
                        }

                        unset($formulatedColumnUpdateIds, $formulatedColumnUpdateValues);
                    }

                    unset($formulatedColumnIdList, $formulatedColumnOriginList, $billBuildUpRateEdgeData);

                    $this->buildUpRatesFormulatedColumnContainerAfterCopy = array();
                    $this->buildUpRatesContainerAfterCopy = array();
                }
            }

            BillElementTable::updateMarkupAmountByElementId($element->id);

            $con->commit();

            $element->updateAllItemTotalAfterMarkup();
        }
        catch(Exception $e)
        {
            $con->rollback();
            throw $e;
        }
    }

    public function updateBillItemRatesFromAnalysis($val, $project)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

        $stmt = $pdo->prepare("UPDATE ".BillItemFormulatedColumnTable::getInstance()->getTableName()."
            SET value = '".$val."', final_value = ".$val.", updated_by = $userId, updated_at = NOW()
            FROM (SELECT DISTINCT bi.id FROM
            ".ScheduleOfRateItemTable::getInstance()->getTableName()." AS i JOIN
            ".ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName()." AS ifc ON i.id = ifc.relation_id JOIN
            ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS bifc ON ifc.id = bifc.schedule_of_rate_item_formulated_column_id JOIN
            ".BillItemTable::getInstance()->getTableName()." AS bi ON bifc.relation_id = bi.id JOIN
            ".BillElementTable::getInstance()->getTableName()." AS be ON bi.element_id = be.id JOIN
            ".ProjectStructureTable::getInstance()->getTableName()." AS s ON be.project_structure_id = s.id
            WHERE s.root_id = ".$project->id." AND i.id = ".$this->id."
            AND bifc.column_name = '".BillItem::FORMULATED_COLUMN_RATE."'
            AND i.deleted_at IS NULL AND ifc.deleted_at IS NULL AND bifc.deleted_at IS NULL AND bi.project_revision_deleted_at IS NULL
            AND bi.deleted_at IS NULL AND be.deleted_at IS NULL AND s.deleted_at IS NULL) AS subquery
            WHERE ".BillItemFormulatedColumnTable::getInstance()->getTableName().".relation_id = subquery.id
            AND ".BillItemFormulatedColumnTable::getInstance()->getTableName().".column_name = '".BillItem::FORMULATED_COLUMN_RATE."'
            AND ".BillItemFormulatedColumnTable::getInstance()->getTableName().".deleted_at IS NULL RETURNING relation_id");

        $stmt->execute();

        $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        if($billItemIds)
        {
            /*
             * Insert into recalculate bill item table so we can track the affected bil items and do recalculation
             * after analysis updates.
             */
            $stmt = $pdo->prepare("INSERT INTO ".RecalculateBillItemTable::getInstance()->getTableName()."
                (bill_item_id, type, created_at, updated_at)
                SELECT i.id, ".RecalculateBillItem::TYPE_SCHEDULE_OF_RATE_ANALYSIS.", NOW(), NOW() FROM ".BillItemTable::getInstance()->getTableName()." AS i WHERE
                i.id IN (".implode(',', $billItemIds).") AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND
                NOT EXISTS (SELECT 1 FROM ".RecalculateBillItemTable::getInstance()->getTableName()." AS r WHERE r.bill_item_id = i.id AND r.type = ".RecalculateBillItem::TYPE_SCHEDULE_OF_RATE_ANALYSIS.")");

            $stmt->execute();

            /*
             * Update bill status
             */
            $stmt = $pdo->prepare("UPDATE ".BillTypeTable::getInstance()->getTableName()." SET status = ".BillType::STATUS_SCHEDULE_OF_RATE_ANALYSIS_RECALCULATE_ITEM."
                WHERE project_structure_id IN (SELECT DISTINCT be.project_structure_id FROM
                ".ScheduleOfRateItemTable::getInstance()->getTableName()." AS i JOIN
                ".ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName()." AS ifc ON i.id = ifc.relation_id JOIN
                ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS bifc ON ifc.id = bifc.schedule_of_rate_item_formulated_column_id JOIN
                ".BillItemTable::getInstance()->getTableName()." AS bi ON bifc.relation_id = bi.id JOIN
                ".BillElementTable::getInstance()->getTableName()." AS be ON bi.element_id = be.id JOIN
                ".ProjectStructureTable::getInstance()->getTableName()." AS s ON be.project_structure_id = s.id
                WHERE s.root_id = ".$project->id." AND i.id = ".$this->id."
                AND bifc.column_name = '".BillItem::FORMULATED_COLUMN_RATE."'
                AND i.deleted_at IS NULL AND ifc.deleted_at IS NULL AND bifc.deleted_at IS NULL AND bi.project_revision_deleted_at IS NULL
                AND bi.deleted_at IS NULL AND be.deleted_at IS NULL AND s.deleted_at IS NULL) AND deleted_at IS NULL");

            $stmt->execute();
        }
    }

    public function updateBillItemMarkupFromAnalysis($val, $project)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT bi.id FROM
            ".ScheduleOfRateItemTable::getInstance()->getTableName()." AS i JOIN
            ".ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName()." AS ifc ON i.id = ifc.relation_id JOIN
            ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS bifc ON ifc.id = bifc.schedule_of_rate_item_formulated_column_id JOIN
            ".BillItemTable::getInstance()->getTableName()." AS bi ON bifc.relation_id = bi.id JOIN
            ".BillElementTable::getInstance()->getTableName()." AS be ON bi.element_id = be.id JOIN
            ".ProjectStructureTable::getInstance()->getTableName()." AS s ON be.project_structure_id = s.id
            WHERE s.root_id = ".$project->id." AND i.id = ".$this->id."
            AND bifc.column_name = '".BillItem::FORMULATED_COLUMN_RATE."'
            AND i.deleted_at IS NULL AND ifc.deleted_at IS NULL AND bifc.deleted_at IS NULL AND bi.project_revision_deleted_at IS NULL
            AND bi.deleted_at IS NULL AND be.deleted_at IS NULL AND s.deleted_at IS NULL");

        $stmt->execute();

        $billItemIds = $stmt->fetchAll(PDO::FETCH_COLUMN);

        if($billItemIds)
        {
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');


            $stmt = $pdo->prepare("DELETE FROM ".BillItemFormulatedColumnTable::getInstance()->getTableName()." WHERE
                relation_id IN (".implode(',', $billItemIds).") AND column_name IN ('".BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE."',
                '".BillItem::FORMULATED_COLUMN_MARKUP_AMOUNT."') AND deleted_at IS NULL");

            $stmt->execute();

            $stmt = $pdo->prepare("INSERT INTO ".BillItemFormulatedColumnTable::getInstance()->getTableName()."
                (relation_id, column_name, value, final_value, created_at, updated_at, created_by, updated_by)
                SELECT id, '".BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE."', '".$val."', ".$val.", NOW(), NOW(), ".$userId.", ".$userId."
                FROM ".BillItemTable::getInstance()->getTableName()." WHERE id IN (".implode(',', $billItemIds).") AND project_revision_deleted_at IS NULL
                AND deleted_at IS NULL");

            $stmt->execute();

            $stmt = $pdo->prepare("INSERT INTO ".BillItemFormulatedColumnTable::getInstance()->getTableName()."
                (relation_id, column_name, value, final_value, created_at, updated_at, created_by, updated_by)
                SELECT i.id, '".BillItem::FORMULATED_COLUMN_MARKUP_AMOUNT."', ROUND(i.grand_total * (ifc.final_value / 100), 5),
                ROUND(i.grand_total * (ifc.final_value / 100), 5), NOW(), NOW(), ".$userId.", ".$userId." FROM ".BillItemTable::getInstance()->getTableName()." i
                LEFT JOIN ".BillItemFormulatedColumnTable::getInstance()->getTableName()." ifc ON i.id = ifc.relation_id WHERE i.id IN
                (".implode(',', $billItemIds).") AND ifc.column_name = '".BillItem::FORMULATED_COLUMN_MARKUP_PERCENTAGE."'
                AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND ifc.deleted_at IS NULL");

            $stmt->execute();

            /*
             * Insert into recalculate bill item table so we can track the affected bil items and do recalculation
             * after analysis updates.
             */
            $stmt = $pdo->prepare("INSERT INTO ".RecalculateBillItemTable::getInstance()->getTableName()."
                (bill_item_id, type, created_at, updated_at)
                SELECT i.id, ".RecalculateBillItem::TYPE_SCHEDULE_OF_RATE_ANALYSIS.", NOW(), NOW() FROM ".BillItemTable::getInstance()->getTableName()." AS i WHERE
                i.id IN (".implode(',', $billItemIds).") AND i.project_revision_deleted_at IS NULL AND i.deleted_at IS NULL AND
                NOT EXISTS (SELECT 1 FROM ".RecalculateBillItemTable::getInstance()->getTableName()." AS r WHERE r.bill_item_id = i.id AND r.type = ".RecalculateBillItem::TYPE_SCHEDULE_OF_RATE_ANALYSIS.")");

            $stmt->execute();

            /*
             * Update bill status
             */
            $stmt = $pdo->prepare("UPDATE ".BillTypeTable::getInstance()->getTableName()." SET status = ".BillType::STATUS_SCHEDULE_OF_RATE_ANALYSIS_RECALCULATE_ITEM." WHERE project_structure_id IN (SELECT DISTINCT be.project_structure_id FROM
                ".ScheduleOfRateItemTable::getInstance()->getTableName()." AS i JOIN
                ".ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName()." AS ifc ON i.id = ifc.relation_id JOIN
                ".BillItemFormulatedColumnTable::getInstance()->getTableName()." AS bifc ON ifc.id = bifc.schedule_of_rate_item_formulated_column_id JOIN
                ".BillItemTable::getInstance()->getTableName()." AS bi ON bifc.relation_id = bi.id JOIN
                ".BillElementTable::getInstance()->getTableName()." AS be ON bi.element_id = be.id JOIN
                ".ProjectStructureTable::getInstance()->getTableName()." AS s ON be.project_structure_id = s.id
                WHERE s.root_id = ".$project->id." AND i.id = ".$this->id."
                AND bifc.column_name = '".BillItem::FORMULATED_COLUMN_RATE."'
                AND i.deleted_at IS NULL AND ifc.deleted_at IS NULL AND bifc.deleted_at IS NULL AND bi.project_revision_deleted_at IS NULL
                AND bi.deleted_at IS NULL AND be.deleted_at IS NULL AND s.deleted_at IS NULL) AND deleted_at IS NULL");

            $stmt->execute();
        }
    }

    public function isResourceLibraryExistsInBuildUpRate($resourceLibraryId)
    {
        return ScheduleOfRateBuildUpRateResourceTable::isResourceFromLibraryExists($resourceLibraryId, $this->id);
    }

    public function createBuildUpRateResourceFromResourceLibrary(Resource $resource)
    {
        if($this->isResourceLibraryExistsInBuildUpRate($resource->id))
            throw new Exception("Resource id ".$resource->id." already exists for build up rate resource with schedule of rate item id ".$this->id);

        $buildUpRateResource = new ScheduleOfRateBuildUpRateResource();
        $buildUpRateResource->schedule_of_rate_item_id = $this->id;
        $buildUpRateResource->resource_library_id = $resource->id;
        $buildUpRateResource->name = $resource->name;

        $buildUpRateResource->save();

        return $buildUpRateResource;
    }

    public function getBillItems(ProjectStructure $project)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT p.id, p.element_id, p.root_id, p.description, p.type, p.uom_id, p.grand_total, p.grand_total_quantity, p.level, p.priority, e.priority AS element_priority, p.lft, uom.symbol AS uom_symbol
        FROM " . BillItemTable::getInstance()->getTableName() . " c
        LEFT JOIN " . UnitOfMeasurementTable::getInstance()->getTableName() . " AS uom ON c.uom_id = uom.id AND uom.deleted_at IS NULL
        JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " AS bifc ON c.id = bifc.relation_id
        JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS ifc ON bifc.schedule_of_rate_item_formulated_column_id = ifc.id
        JOIN " . BillItemTable::getInstance()->getTableName() . " p ON c.lft BETWEEN p.lft AND p.rgt
        JOIN " . BillElementTable::getInstance()->getTableName() . " AS e ON p.element_id = e.id
        JOIN " . ProjectStructureTable::getInstance()->getTableName() . " AS s ON e.project_structure_id = s.id
        WHERE s.root_id = " . $project->id . " AND c.root_id = p.root_id AND c.element_id = p.element_id
        AND ifc.relation_id = " . $this->id . " AND bifc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "'
        AND c.project_revision_deleted_at IS NULL AND c.deleted_at IS NULL
        AND p.project_revision_deleted_at IS NULL AND p.deleted_at IS NULL
        AND e.deleted_at IS NULL AND ifc.deleted_at IS NULL AND bifc.deleted_at IS NULL AND s.deleted_at IS NULL
        ORDER BY e.priority, p.priority, p.lft, p.level ASC");

        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getRates(ProjectStructure $project)
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT DISTINCT COALESCE(ifc.final_value, 0) AS value
            FROM " . ProjectStructureTable::getInstance()->getTableName() . " AS s
            JOIN " . BillElementTable::getInstance()->getTableName() . " AS be ON be.project_structure_id = s.id
            JOIN " . BillItemTable::getInstance()->getTableName() . " AS bi ON bi.element_id = be.id
            JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " ifc ON ifc.relation_id = bi.id
            JOIN " . ScheduleOfRateItemFormulatedColumnTable::getInstance()->getTableName() . " AS sorifc
            ON ifc.schedule_of_rate_item_formulated_column_id = sorifc.id
            WHERE s.root_id = " . $project->id . " AND sorifc.relation_id = " . $this->id . " AND ifc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "'
            AND s.deleted_at IS NULL AND be.deleted_at IS NULL AND bi.project_revision_deleted_at IS NULL AND bi.deleted_at IS NULL
            AND ifc.deleted_at IS NULL AND sorifc.deleted_at IS NULL");

        $stmt->execute(array());

        $multiRate      = false;
        $rateValue      = 0;
        $rateFinalValue = 0;

        if( $stmt->rowCount() > 1 )
        {
            $multiRate = true;
        }
        else
        {
            $rate = $stmt->fetch(PDO::FETCH_ASSOC);

            $rateValue      = $rate['value'];
            $rateFinalValue = $rate['value'];
        }

        return array(
            'multi-rate'       => $multiRate,
            'rate-value'       => $rateValue,
            'rate-final_value' => $rateFinalValue,
        );
    }
}
