<?php

/**
 * PreDefinedLocationCode
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PreDefinedLocationCode extends BasePreDefinedLocationCode
{
    const TRADE_LEVEL = 0;
    const ELEMENT_LEVEL = 1;
    const SUB_ELEMENT_LEVEL = 2;

    const TYPE_TRADE_TEXT = 'TRADE';
    const TYPE_ELEMENT_TEXT = 'ELEMENT';
    const TYPE_SUB_ELEMENT_TEXT = 'SUB ELEMENT';

    public static function getTypeTextByLevel($level)
    {
        switch($level)
        {
            case PreDefinedLocationCode::TRADE_LEVEL:
                return PreDefinedLocationCode::TYPE_TRADE_TEXT;
            case PreDefinedLocationCode::ELEMENT_LEVEL:
                return PreDefinedLocationCode::TYPE_ELEMENT_TEXT;
            default:
                return $level > PreDefinedLocationCode::SUB_ELEMENT_LEVEL ? PreDefinedLocationCode::TYPE_SUB_ELEMENT_TEXT." ".($level - 1) : PreDefinedLocationCode::TYPE_SUB_ELEMENT_TEXT;
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        if($this->canBeDeleted())
        {
            Doctrine_Query::create()
                ->delete('PreDefinedLocationCode l')
                ->where('l.root_id = ?', $this->root_id)
                ->andWhere('l.lft > ?', $this->lft)
                ->andWhere('l.rgt < ?', $this->rgt)
                ->execute();

            parent::delete($conn);

            //recalculate left-right values when deleting child nodes
            if(!$this->node->isRoot())
            {
                $first = $this->rgt + 1;
                $delta = $this->lft - $this->rgt - 1;

                Utilities::shiftRightLeftNestedSet(get_class($this), $first, $delta, $this->root_id, $conn);
            }
        }
        else
        {
            throw new Exception('Predefined Location  Code with id: '.$this->id." cannot be deleted");
        }
    }

    public function indent()
    {
        $indented = false;
        $previousRoot = $this->getPreviousRoot();

        if($this->node->isRoot() and $previousRoot and !$previousRoot->hasLocationAssigned())
        {
            $this->node->moveAsLastChildOf($previousRoot);

            $this->refresh();

            $pdo = $this->getTable()->getConnection()->getDbh();

            $stmt = $pdo->prepare("UPDATE ".$this->getTable()->getTableName()." SET priority = ".$previousRoot->priority."
            WHERE root_id = ".$previousRoot->root_id." AND priority <> ".$previousRoot->priority."
            AND deleted_at IS NULL");

            $stmt->execute();

            $indented = true;
        }
        else if(!$this->node->isRoot() and $this->node->hasPrevSibling() and !$this->node->getPrevSibling()->hasLocationAssigned())
        {
            $this->node->moveAsLastChildOf($this->node->getPrevSibling());

            $this->refresh();

            $indented = true;
        }

        return $indented;
    }

    public function outdent()
    {
        if(!$this->node->isRoot())
        {
            $parent = $this->node->getParent();

            if(!$parent || !$parent->node)
            {
                return false;
            }
            
            $siblings = $this->getTable()
                ->createQuery('l')
                ->where('l.root_id = ?',$this->root_id)
                ->andWhere('l.level = ?', $this->level)
                ->andWhere('l.lft BETWEEN ? AND ?', array($parent->lft, $parent->rgt))
                ->andWhere('l.lft > ?', $this->rgt)
                ->addOrderBy('l.lft ASC')
                ->execute();

            if(!$this->hasLocationAssigned() and !empty($siblings))
            {
                foreach($siblings as $sibling)
                {
                    $sibling->node->moveAsLastChildOf($this);

                    $this->refresh();
                }
            }

            if((!$this->hasLocationAssigned() and !empty($siblings)) or (empty($siblings)))
            {
                if(!$parent->node->isRoot())
                {
                    $this->node->moveAsNextSiblingOf($parent);
                }
                else
                {
                    $this->node->makeRoot($this->id);

                    parent::save();

                    $this->priority = $parent->priority + 1;

                    $this->save();

                    $this->updateRootPriority($parent->priority + 1, $this->id);
                }

                $this->refresh();

                return true;
            }

            return false;
        }
        else
        {
            return false;
        }
    }

    public function canBeDeleted()
    {
        return PreDefinedLocationCodeTable::canBeDeletedById($this->id);
    }

    public function hasLocationAssigned()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT COUNT(l.id)
        FROM ".LocationAssignmentTable::getInstance()->getTableName()." l
        WHERE l.pre_defined_location_code_id = ".$this->id);

        $stmt->execute();

        $count = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return $count > 0;
    }

    public function getPreviousRoot()
    {
        $rootId = $this->root_id > 0 ? $this->root_id : $this->id;
        $root = $this->getTable()->find($rootId);

        return $this->getTable()
            ->createQuery('l')
            ->where('l.root_id = l.id')
            ->addWhere('l.priority < ?', $root->priority)
            ->orderBy('l.priority DESC')
            ->limit(1)
            ->fetchOne();
    }

    public function updateRootPriority($priority, $excludeId=null)
    {
        PreDefinedLocationCodeTable::updateRootPriority($priority, $excludeId);
    }
}
