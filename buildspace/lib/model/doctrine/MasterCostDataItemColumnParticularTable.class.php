<?php

/**
 * MasterCostDataItemColumnParticularTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class MasterCostDataItemColumnParticularTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return MasterCostDataItemColumnParticularTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('MasterCostDataItemColumnParticular');
    }

    public static function sync(MasterCostDataItem $item, $field, array $masterCostDataParticularIds)
    {
        self::unlink($item, $field);

        self::link($item, $field, $masterCostDataParticularIds);
    }

    protected static function unlink(MasterCostDataItem $item, $field)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $itemColumn = MasterCostDataItemColumnTable::getItemColumn($item, $field);

        $statement = "DELETE FROM ".self::getInstance()->getTableName()." pivot
        WHERE pivot.master_cost_data_item_column_id = :itemColumnId";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array( 'itemColumnId' => $itemColumn['id'] ));
    }

    protected static function link(MasterCostDataItem $item, $field, array $masterCostDataParticularIds)
    {
        $itemColumn = MasterCostDataItemColumnTable::getItemColumn($item, $field);

        foreach($masterCostDataParticularIds as $particularId)
        {
            $pivotRecord = new MasterCostDataItemColumnParticular();
            $pivotRecord->master_cost_data_item_column_id = $itemColumn['id'];
            $pivotRecord->master_cost_data_particular_id = $particularId;
            $pivotRecord->save();
        }
    }

    public static function resetItems(array $itemIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $itemColumnIds = MasterCostDataItemColumnTable::getColumnIds($itemIds);

        if(empty($itemColumnIds)) return;

        $itemColumnIds = implode(',', $itemColumnIds);

        $statement = "DELETE FROM ".self::getInstance()->getTableName()." pivot
        WHERE pivot.master_cost_data_item_column_id in ({$itemColumnIds})";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();
    }

    public static function getLinkedItemParticulars(MasterCostDataItem $item, $field)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $itemColumn = MasterCostDataItemColumnTable::getItemColumn($item, $field);

        $statement = "SELECT pivot.master_cost_data_particular_id FROM ".self::getInstance()->getTableName()." pivot
        WHERE pivot.master_cost_data_item_column_id = :itemColumnId";

        $stmt = $pdo->prepare($statement);

        $stmt->execute(array( 'itemColumnId' => $itemColumn['id'] ));

        return $stmt->fetchAll(PDO::FETCH_COLUMN,0);
    }

    public static function getLinkedParticulars(array $itemIds)
    {
        if(empty($itemIds)) return array();

        $pdo = self::getInstance()->getConnection()->getDbh();

        $itemColumnIds = implode(',', MasterCostDataItemColumnTable::getColumnIds($itemIds));

        $statement = "SELECT pivot.master_cost_data_item_column_id, pivot.master_cost_data_particular_id FROM ".self::getInstance()->getTableName()." pivot
        WHERE pivot.master_cost_data_item_column_id in ({$itemColumnIds})";

        $stmt = $pdo->prepare($statement);

        $stmt->execute();

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC|PDO::FETCH_GROUP);

        $output = array();

        foreach($results as $columnId => $resultSet)
        {
            foreach($resultSet as $key => $result)
            {
                $output[$columnId][] = $result['master_cost_data_particular_id'];
            }
        }

        return $output;
    }
}