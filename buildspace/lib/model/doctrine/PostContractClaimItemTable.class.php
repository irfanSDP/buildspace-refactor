<?php

/**
 * PostContractClaimItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PostContractClaimItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PostContractClaimItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PostContractClaimItem');
    }

    public static function createItemFromLastRow($type, $previousItem, $postContractClaimId, $fieldName=null, $fieldValue=null)
    {
        $item = new PostContractClaimItem();
        $item->post_contract_claim_id = $postContractClaimId;

        if($type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            $postContractClaimMaterialOnSite = new PostContractClaimMaterialOnSite();
        }

        if($fieldName)
        {
            $columns = array_keys(self::getInstance()->getColumns());

            if(in_array($fieldName, $columns))
            {
                $fieldValue = ($fieldName == 'uom_id' and $fieldValue == -1) ? null : $fieldValue;

                if($fieldName == "type" or $fieldName == "uom_id")
                {
                    $item->updateColumnByColumnName($fieldName, $fieldValue);
                }
                elseif($fieldName == 'rate')
                {
                    $fieldValue = is_numeric($fieldValue) ? $fieldValue : 0;
                    $item->rate = number_format($fieldValue,2,'.','');
                }
                else
                {
                    $item->{'set'.sfInflector::camelize($fieldName)}($fieldValue);
                }
            }

            if($fieldName == 'labour_type')
            {
                $outOfContractItem = new OutOfContractItem();
                $outOfContractItem->labour_type = $fieldValue;
            }
            elseif($fieldName == 'document_number')
            {
                $purchaseOnBehalf = new PurchaseOnBehalf();
                $purchaseOnBehalf->document_number = $fieldValue; 
            }

            if($fieldName == 'reduction_percentage' || $fieldName == 'reduction_amount')
            { 
                $postContractClaimMaterialOnSite->{'set'.sfInflector::camelize($fieldName)}($fieldValue);
            }
        }

        if($fieldName != 'type')
        {
            $item->type = PostContractClaimItem::TYPE_WORK_ITEM;
        }

        $asRoot = true;
        $sequence = 0;

        if($previousItem)
        {
            if($previousItem->node->isRoot())
            {
                $sequence = $previousItem->sequence + 1;
            }
            else
            {
                $asRoot = false;
                $item->node->insertAsNextSiblingOf($previousItem);

                $sequence = $previousItem->sequence;
            }
        }

        $item->sequence = $sequence;
        $item->save();

        if(isset($postContractClaimMaterialOnSite))
        {
            $postContractClaimMaterialOnSite->post_contract_claim_item_id = $item->id;
            $postContractClaimMaterialOnSite->save();
        }
        
        if(isset($outOfContractItem))
        {
            $outOfContractItem->post_contract_claim_item_id = $item->id;
            $outOfContractItem->save();
        }

        if(isset($purchaseOnBehalf))
        {
            $purchaseOnBehalf->post_contract_claim_item_id = $item->id;
            $purchaseOnBehalf->save();
        }

        if($asRoot)
        {
            $item->getTable()->getTree()->createRoot($item);

            $item->updateRootSequence($sequence, $item->id);
        }

        return $item;
    }

    public static function createItem($type, $currentSelectedItem, $postContractClaimId, $description = null)
    {
        $item = new PostContractClaimItem();
        $item->post_contract_claim_id = $postContractClaimId;
        $item->type = PostContractClaimItem::TYPE_WORK_ITEM;

        if($currentSelectedItem->node->isRoot())
        {
            $sequence = $currentSelectedItem->sequence;

            $item->sequence = $sequence;

            $item->save();

            $node = $item->node;

            if ($node->isValidNode())
            {
                $node->makeRoot($item->id);
            }
            else
            {
                $item->getTable()->getTree()->createRoot($item);
            }

            $item->updateRootSequence($sequence, $item->id);
        }
        else
        {
            $item->node->insertAsPrevSiblingOf($currentSelectedItem);
            $item->sequence = $currentSelectedItem->sequence;
        }

        if($description)
        {
            $item->description = trim($description);
        }

        $item->save();

        if($type == PostContractClaim::TYPE_POST_CONTRACT_CLAIM_MATERIAL_ON_SITE)
        {
            $postContractClaimMaterialOnSite = new PostContractClaimMaterialOnSite();
            $postContractClaimMaterialOnSite->post_contract_claim_item_id = $item->id;
            $postContractClaimMaterialOnSite->save();
        }

        return $item;
    }
}