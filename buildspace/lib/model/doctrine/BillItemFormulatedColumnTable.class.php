<?php

/**
 * BillItemFormulatedColumnTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillItemFormulatedColumnTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BillItemFormulatedColumnTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BillItemFormulatedColumn');
    }

    public static function unlinkFormulatedColumnFromSor(Array $affectedFormulatedColumnId)
    {
        Doctrine_Query::create()
            ->update('BillItemFormulatedColumn bifc')
            ->set('bifc.linked', '?', false)
            ->set('bifc.schedule_of_rate_item_formulated_column_id', 'NULL')
            ->whereIn('bifc.schedule_of_rate_item_formulated_column_id', $affectedFormulatedColumnId)
            ->execute();
    }

    public static function initializeDefaultRates(array $billItemIds)
    {
        $pdo = self::getInstance()->getConnection()->getDbh();

        $stmt = $pdo->prepare("SELECT i.id
            FROM " . BillItemTable::getInstance()->getTableName() . " i
            LEFT JOIN " . BillItemFormulatedColumnTable::getInstance()->getTableName() . " fc ON i.id = fc.relation_id AND fc.column_name = '" . BillItem::FORMULATED_COLUMN_RATE . "'
            WHERE i.id IN (" . implode(',', $billItemIds) . ")
            AND fc.id IS null");

        $stmt->execute();

        $itemsWithoutRates = $stmt->fetchAll(PDO::FETCH_COLUMN);

        $stmt = new sfImportStatementGenerator();

        $stmt->createInsert(self::getInstance()->getTableName(), array(
            'relation_id', 'column_name', 'value', 'final_value', 'created_at', 'updated_at', 'created_by', 'updated_by',
        ));

        $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

        foreach($itemsWithoutRates as $itemId)
        {
            $stmt->addRecord(array(
                $itemId, BillItem::FORMULATED_COLUMN_RATE, 0, 0, 'NOW()', 'NOW()', $userId, $userId
            ));
        }

        if( count($stmt->records) ) $stmt->save();
    }
}