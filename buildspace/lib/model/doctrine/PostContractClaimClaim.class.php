<?php

/**
 * PostContractClaimClaim
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    buildspace
 * @subpackage model
 * @author     1337 developers
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PostContractClaimClaim extends BasePostContractClaimClaim
{
	const STATUS_PROGRESSING = 1;
    const STATUS_CLOSED = 2;

    public function setStatus($value)
    {
        $status = intval($value);

        $this->_set('status', $status);

        if($status == PostContractClaimClaim::STATUS_CLOSED and $this->PostContractClaim->ProjectStructure->PostContract->published_type == PostContract::PUBLISHED_TYPE_NEW and
        	$openClaimRevision = $this->PostContractClaim->ProjectStructure->PostContract->getOpenClaimRevision())
        {
            $this->claim_certificate_id = $openClaimRevision->ClaimCertificate->id;
            $this->save();

            if($openClaimRevision->ClaimCertificate->id)
            {
                $openClaimRevision->ClaimCertificate->save();
            }
        }
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $isNew = $this->isNew();

        parent::save($conn);

        if($this->deleted_at == NULL and $isNew)
        {
            $record = DoctrineQuery::create()->select('c.revision')
                ->from('PostContractClaimClaim c')
                ->where('c.post_contract_claim_id = ?', $this->post_contract_claim_id)
                ->andWhere('c.id <> ?', $this->id)
                ->orderBy('c.revision DESC')
                ->limit(1)
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->fetchOne();

            if($record)
            {
                $this->revision = $record['revision'] + 1;
                $this->save();

                Doctrine_Query::create()->update('PostContractClaimClaim c')
                    ->set('is_viewing', "FALSE")
                    ->where('c.revision < ?', $this->revision)
                    ->andWhere('c.id <> ?', $this->id)
                    ->andWhere('c.post_contract_claim_id = ?', $this->post_contract_claim_id)
                    ->execute();
            }

            if($this->revision > 1)
            {
                $this->clonePreviousClaimItems();
            }
        }
    }

    private function clonePreviousClaimItems()
    {
        $pdo = $this->getTable()->getConnection()->getDbh();

        $previousClaim = $this->getPreviousClaim(Doctrine_Core::HYDRATE_ARRAY);

        if($previousClaim)
        {
            $userId = sfContext::getInstance()->getUser()->getAttribute('user_id', null, 'sfGuardSecurityUser');

            $stmt = $pdo->prepare("INSERT INTO ".PostContractClaimClaimItemTable::getInstance()->getTableName()."
            (post_contract_claim_claim_id, post_contract_claim_item_id, up_to_date_quantity, up_to_date_percentage, up_to_date_amount, created_by, updated_by, created_at, updated_at)
            SELECT ".$this->id.", post_contract_claim_item_id, up_to_date_quantity, up_to_date_percentage, up_to_date_amount, ".$userId.", ".$userId.", NOW(), NOW()
            FROM ".PostContractClaimClaimItemTable::getInstance()->getTableName()." prev_item
            WHERE  prev_item.post_contract_claim_claim_id = ".$previousClaim['id']." AND prev_item.deleted_at IS NULL");

            $stmt->execute(array());
        }
    }

    public function canBeDeleted()
    {
        $record = DoctrineQuery::create()->select('c.id')
            ->from('PostContractClaimClaim c')
            ->where('c.post_contract_claim_id = ?', $this->post_contract_claim_id)
            ->andWhere('c.revision > ?', $this->revision)
            ->limit(1)
            ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
            ->fetchOne();

        return $record ? false : true;
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        if($this->canBeDeleted())
        {
            $previousClaim = $this->getPreviousClaim();

            if($previousClaim)
            {
                $previousClaim->is_viewing = true;
                $previousClaim->save();
            }

            Doctrine_Query::create()->delete('PostContractClaimClaimItem i')
                ->where('i.post_contract_claim_claim_id = ?', $this->id)
                ->execute();

            parent::delete($conn);
        }
        else
        {
            throw new Exception("post contract claim with id: ".$this->id." cannot be deleted.");
        }
    }

    public function getPreviousClaim($hydrate = null)
    {
        $query = DoctrineQuery::create()->select('c.*')
            ->from('PostContractClaimClaim c')
            ->where('c.post_contract_claim_id = ?', $this->post_contract_claim_id)
            ->andWhere('c.revision = ?', $this->revision - 1)
            ->limit(1);

        if($hydrate)
        {
            $query->setHydrationMode($hydrate);

        }

        return $query->fetchOne();
    }

    public function setAsViewingClaim()
    {
        $postContractClaim = $this->PostContractClaim;

        $viewingClaim = $postContractClaim->getViewingClaim();

        $this->is_viewing = true;
        $this->save();

        if ( $viewingClaim->id != $this->id )
        {
            $viewingClaim->is_viewing = false;
            $viewingClaim->save();
        }
    }
}
