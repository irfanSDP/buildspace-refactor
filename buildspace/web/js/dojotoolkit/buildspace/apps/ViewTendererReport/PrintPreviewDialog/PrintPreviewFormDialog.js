// Generated by CoffeeScript 1.9.0
(function() {
    define( 'buildspace/apps/ViewTendererReport/PrintPreviewDialog/PrintPreviewFormDialog', [ "dojo/_base/declare", 'dojo/_base/lang', "dojo/keys", "dojo/parser", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", 'dijit/Toolbar', 'dijit/form/Button', "dijit/layout/BorderContainer", "dijit/form/ValidationTextBox", "dijit/form/RadioButton", "dijit/form/SimpleTextarea", "dijit/registry", "dojo/dom-style", "dojo/dom-form", "dojo/request", "dojo/json", "dojox/validate/web", "dojox/form/Manager", "dojo/text!./templates/printPreviewForm.html", 'dojo/i18n!buildspace/nls/TenderingReport' ], function(declare, lang, keys, parser, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, Toolbar, Button, BorderContainer, ValidationTextBox, RadioButton, SimpleTextarea, registry, domStyle, domForm, request, JSON, web, Manager, template, nls) {
        var Dialog, printPreviewForm;
        printPreviewForm = declare( "buildspace.apps.ViewTendererReport.SupplierList.PrintPreviewForm", [ _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin ], {
            baseClass: "buildspace-form",
            templateString: template,
            region: 'center',
            style: "overflow: auto;",
            default_title_input: null,
            billId: -1,
            elementId: -1,
            projectId: -1,
            printURL: null,
            exportURL: null,
            selectedTenderers: [],
            selectedRows: [],
            sortingType: null,
            _csrf_token: null,
            nls: nls,
            dialogContainer: null,
            print: function() {
                var billIdInput, csrfToken, descriptionFormat, elementIdInput, form, formValues, priceFormat, printNoCents, printingPageTitle, projectIdInput, selectedRows, selectedTenderers, self, sortingType;
                self = this;
                form = this.viewTendererReportingPrintForm;
                if( !form.validate() ) {
                    return false;
                }
                formValues = dojo.formToObject( form.id );
                form = document.getElementById( 'printingPreviewForm' );
                if( form ) {
                    form.parentNode.removeChild( form );
                }
                form = document.createElement( "form" );
                form.setAttribute( "method", "post" );
                form.setAttribute( "action", this.printURL );
                form.setAttribute( "id", 'printingPreviewForm' );
                form.setAttribute( "target", "formresult" );
                printingPageTitle = document.createElement( "input" );
                printingPageTitle.setAttribute( "name", "printingPageTitle" );
                printingPageTitle.setAttribute( "value", formValues[ 'fileName' ] );
                printingPageTitle.setAttribute( 'type', 'hidden' );
                form.appendChild( printingPageTitle );
                descriptionFormat = document.createElement( "input" );
                descriptionFormat.setAttribute( "name", "descriptionFormat" );
                descriptionFormat.setAttribute( "value", formValues[ 'descriptionFormat' ] );
                descriptionFormat.setAttribute( 'type', 'hidden' );
                form.appendChild( descriptionFormat );
                selectedRows = document.createElement( "input" );
                selectedRows.setAttribute( "name", "selectedRows" );
                selectedRows.setAttribute( "value", JSON.stringify( this.selectedRows ) );
                selectedRows.setAttribute( 'type', 'hidden' );
                form.appendChild( selectedRows );
                if( this.elementId > 0 ) {
                    elementIdInput = document.createElement( "input" );
                    elementIdInput.setAttribute( "name", "elementId" );
                    elementIdInput.setAttribute( "value", this.elementId );
                    elementIdInput.setAttribute( 'type', 'hidden' );
                    form.appendChild( elementIdInput );
                }
                if( this.billId > 0 ) {
                    billIdInput = document.createElement( "input" );
                    billIdInput.setAttribute( "name", "billId" );
                    billIdInput.setAttribute( "value", this.billId );
                    billIdInput.setAttribute( 'type', 'hidden' );
                    form.appendChild( billIdInput );
                }
                if( this.projectId > 0 ) {
                    projectIdInput = document.createElement( "input" );
                    projectIdInput.setAttribute( "name", "projectId" );
                    projectIdInput.setAttribute( "value", this.projectId );
                    projectIdInput.setAttribute( 'type', 'hidden' );
                    form.appendChild( projectIdInput );
                }
                if( this.sortingType ) {
                    sortingType = document.createElement( "input" );
                    sortingType.setAttribute( "name", "sortingType" );
                    sortingType.setAttribute( "value", this.sortingType );
                    sortingType.setAttribute( 'type', 'hidden' );
                    form.appendChild( sortingType );
                }
                if( this.selectedTenderers.length > 0 ) {
                    selectedTenderers = document.createElement( "input" );
                    selectedTenderers.setAttribute( "name", "selectedTenderers" );
                    selectedTenderers.setAttribute( "value", JSON.stringify( this.selectedTenderers ) );
                    selectedTenderers.setAttribute( 'type', 'hidden' );
                    form.appendChild( selectedTenderers );
                }
                priceFormat = document.createElement( "input" );
                priceFormat.setAttribute( "name", "priceFormat" );
                priceFormat.setAttribute( "value", formValues[ 'priceFormat' ] );
                priceFormat.setAttribute( 'type', 'hidden' );
                form.appendChild( priceFormat );
                printNoCents = document.createElement( "input" );
                printNoCents.setAttribute( "name", "printNoCents" );
                printNoCents.setAttribute( "value", formValues[ 'printNoCents' ] );
                printNoCents.setAttribute( 'type', 'hidden' );
                form.appendChild( printNoCents );
                csrfToken = document.createElement( "input" );
                csrfToken.setAttribute( "name", "_csrf_token" );
                csrfToken.setAttribute( "value", this._csrf_token );
                csrfToken.setAttribute( 'type', 'hidden' );
                form.appendChild( csrfToken );
                document.body.appendChild( form );
                window.open( null, 'formresult' );
                return form.submit();
            },
            "export": function() {
                var billIdInput, csrfToken, descriptionFormat, elementIdInput, form, formValues, priceFormat, printNoCents, printingPageTitle, projectIdInput, selectedRows, selectedTenderers, self, sortingType;
                self = this;
                form = this.viewTendererReportingPrintForm;
                if( !form.validate() ) {
                    return false;
                }
                formValues = dojo.formToObject( form.id );
                form = document.getElementById( 'printingPreviewForm' );
                if( form ) {
                    form.parentNode.removeChild( form );
                }
                form = document.createElement( "form" );
                form.setAttribute( "method", "post" );
                form.setAttribute( "action", this.exportURL );
                form.setAttribute( "id", 'printingPreviewForm' );
                form.setAttribute( "target", "_self" );
                printingPageTitle = document.createElement( "input" );
                printingPageTitle.setAttribute( "name", "printingPageTitle" );
                printingPageTitle.setAttribute( "value", formValues[ 'fileName' ] );
                printingPageTitle.setAttribute( 'type', 'hidden' );
                form.appendChild( printingPageTitle );
                descriptionFormat = document.createElement( "input" );
                descriptionFormat.setAttribute( "name", "descriptionFormat" );
                descriptionFormat.setAttribute( "value", formValues[ 'descriptionFormat' ] );
                descriptionFormat.setAttribute( 'type', 'hidden' );
                form.appendChild( descriptionFormat );
                selectedRows = document.createElement( "input" );
                selectedRows.setAttribute( "name", "selectedRows" );
                selectedRows.setAttribute( "value", JSON.stringify( this.selectedRows ) );
                selectedRows.setAttribute( 'type', 'hidden' );
                form.appendChild( selectedRows );
                if( this.elementId > 0 ) {
                    elementIdInput = document.createElement( "input" );
                    elementIdInput.setAttribute( "name", "elementId" );
                    elementIdInput.setAttribute( "value", this.elementId );
                    elementIdInput.setAttribute( 'type', 'hidden' );
                    form.appendChild( elementIdInput );
                }
                if( this.billId > 0 ) {
                    billIdInput = document.createElement( "input" );
                    billIdInput.setAttribute( "name", "billId" );
                    billIdInput.setAttribute( "value", this.billId );
                    billIdInput.setAttribute( 'type', 'hidden' );
                    form.appendChild( billIdInput );
                }
                if( this.projectId > 0 ) {
                    projectIdInput = document.createElement( "input" );
                    projectIdInput.setAttribute( "name", "projectId" );
                    projectIdInput.setAttribute( "value", this.projectId );
                    projectIdInput.setAttribute( 'type', 'hidden' );
                    form.appendChild( projectIdInput );
                }
                if( this.sortingType ) {
                    sortingType = document.createElement( "input" );
                    sortingType.setAttribute( "name", "sortingType" );
                    sortingType.setAttribute( "value", this.sortingType );
                    sortingType.setAttribute( 'type', 'hidden' );
                    form.appendChild( sortingType );
                }
                if( this.selectedTenderers.length > 0 ) {
                    selectedTenderers = document.createElement( "input" );
                    selectedTenderers.setAttribute( "name", "selectedTenderers" );
                    selectedTenderers.setAttribute( "value", JSON.stringify( this.selectedTenderers ) );
                    selectedTenderers.setAttribute( 'type', 'hidden' );
                    form.appendChild( selectedTenderers );
                }
                priceFormat = document.createElement( "input" );
                priceFormat.setAttribute( "name", "priceFormat" );
                priceFormat.setAttribute( "value", formValues[ 'priceFormat' ] );
                priceFormat.setAttribute( 'type', 'hidden' );
                form.appendChild( priceFormat );
                printNoCents = document.createElement( "input" );
                printNoCents.setAttribute( "name", "printNoCents" );
                printNoCents.setAttribute( "value", formValues[ 'printNoCents' ] );
                printNoCents.setAttribute( 'type', 'hidden' );
                form.appendChild( printNoCents );
                csrfToken = document.createElement( "input" );
                csrfToken.setAttribute( "name", "_csrf_token" );
                csrfToken.setAttribute( "value", this._csrf_token );
                csrfToken.setAttribute( 'type', 'hidden' );
                form.appendChild( csrfToken );
                document.body.appendChild( form );
                if( this.dialogContainer ) {
                    this.dialogContainer.hide();
                }
                return form.submit();
            }
        } );
        return Dialog = declare( 'buildspace.apps.ViewTendererReport.PrePrintFormDialog', dijit.Dialog, {
            style: "padding:0px;margin:0px;width:480px;height:210px;",
            printURL: null,
            exportURL: null,
            selectedTenderers: [],
            selectedRows: [],
            type: null,
            billId: -1,
            elementId: -1,
            projectId: -1,
            _csrf_token: null,
            buildRendering: function() {
                var content;
                content = this.createContent();
                this.content = content;
                content.startup();
                return this.inherited( arguments );
            },
            postCreate: function() {
                domStyle.set( this.containerNode, {
                    padding: "0px",
                    margin: "0px"
                } );
                this.closeButtonNode.style.display = "none";
                return this.inherited( arguments );
            },
            createContent: function(self) {
                var borderContainer, form, toolbar;
                if( self == null ) {
                    self = this;
                }
                borderContainer = new BorderContainer( {
                    style: "width:480px;height:210px;padding:0;margin:0;",
                    gutters: false
                } );
                form = new printPreviewForm( {
                    default_title_input: self.title,
                    dialogContainer: self,
                    printURL: self.printURL,
                    exportURL: self.exportURL,
                    selectedTenderers: self.selectedTenderers,
                    selectedRows: self.selectedRows,
                    _csrf_token: self._csrf_token,
                    billId: self.billId,
                    elementId: self.elementId,
                    projectId: self.projectId,
                    sortingType: self.type
                } );
                toolbar = new Toolbar( {
                    region: 'top',
                    style: "outline:none!important;padding:2px;overflow:hidden;"
                } );
                if( self.printURL != null ) {
                    toolbar.addChild( new Button( {
                        label: nls.print,
                        iconClass: "icon-16-container icon-16-print",
                        onClick: function() {
                            return form.print();
                        }
                    } ) );
                    toolbar.addChild( new dijit.ToolbarSeparator() );
                }
                if( self.exportURL != null ) {
                    toolbar.addChild( new Button( {
                        label: nls.exportToExcel,
                        iconClass: "icon-16-container icon-16-spreadsheet",
                        onClick: function() {
                            return form[ "export" ]();
                        }
                    } ) );
                    toolbar.addChild( new dijit.ToolbarSeparator() );
                }
                toolbar.addChild( new dijit.form.Button( {
                    label: nls.close,
                    iconClass: "icon-16-container icon-16-close",
                    onClick: function() {
                        return self.hide();
                    }
                } ) );
                borderContainer.addChild( toolbar );
                borderContainer.addChild( form );
                return borderContainer;
            },
            _onKey: function(e) {
                var key;
                key = e.keyCode;
                if( key === keys.ESCAPE ) {
                    return dojo.stopEvent( e );
                }
            },
            onHide: function() {
                return this.destroyRecursive();
            }
        } );
    } );

}).call( this );
