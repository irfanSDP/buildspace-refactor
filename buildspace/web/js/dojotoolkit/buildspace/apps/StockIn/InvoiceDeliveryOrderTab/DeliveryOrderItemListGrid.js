// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/StockIn/InvoiceDeliveryOrderTab/DeliveryOrderItemListGrid', ["dojo/_base/declare", "dojo/_base/lang", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Rearrange", "buildspace/widget/grid/plugins/FormulatedColumn", 'dojo/request', "dijit/focus", 'dojo/i18n!../../../nls/StockIn'], function(declare, lang, Menu, Rearrange, FormulatedColumn, request, focusUtil, nls) {
    return declare("buildspace.apps.StockIn.InvoiceInformation.DeliveryOrderItemListingGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      keepSelection: true,
      rowSelector: "0px",
      region: 'center',
      deliveryOrderContainer: null,
      invoice: null,
      invoiceId: -1,
      deliveryOrder: null,
      constructor: function() {
        this.rearranger = Rearrange(this, {});
        return this.formulatedColumn = FormulatedColumn(this, {});
      },
      canSort: function() {
        return false;
      },
      canEdit: function(inCell, inRowIndex) {
        var item, self;
        self = this;
        if (inCell !== void 0) {
          item = this.getItem(inRowIndex);
          if (item.id[0] > 0) {
            if (item.type[0] === parseInt(buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER) || item.type[0] === parseInt(buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER_N)) {
              window.setTimeout(function() {
                self.edit.cancel();
                return self.focus.setFocusIndex(inRowIndex, inCell.index);
              }, 10);
              return;
            }
          } else {
            window.setTimeout(function() {
              self.edit.cancel();
              return self.focus.setFocusIndex(inRowIndex, inCell.index);
            }, 10);
            return;
          }
        }
        return this._canEdit;
      },
      doApplyCellEdit: function(val, rowIdx, inAttrName) {
        var item, params, pb, self, stockInItemId, xhrArgs;
        self = this;
        item = this.getItem(rowIdx);
        stockInItemId = item.stockInItemId;
        if (val !== item[inAttrName][0]) {
          params = {
            deliveryOrderId: self.deliveryOrder.id[0],
            qtyId: item.qtyId,
            stockInItemId: stockInItemId,
            val: val,
            _csrf_token: item._csrf_token ? item._csrf_token : null
          };
          pb = buildspace.dialog.indeterminateProgressBar({
            title: nls.savingData + '. ' + nls.pleaseWait + '...'
          });
          pb.show();
          xhrArgs = {
            url: 'stockIn/updateDeliveryOrderItemQuantity',
            content: params,
            handleAs: 'json',
            load: function(resp) {
              var cell, data, _i, _len, _ref;
              if (resp.success) {
                _ref = resp.items;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  data = _ref[_i];
                  self.updateStore(item, data);
                }
              }
              cell = self.getCellByField(inAttrName);
              window.setTimeout(function() {
                return self.focus.setFocusIndex(rowIdx, cell.index);
              }, 10);
              return pb.hide();
            },
            error: function(error) {
              return pb.hide();
            }
          };
          return dojo.xhrPost(xhrArgs);
        } else {
          return self.inherited(arguments);
        }
      },
      updateStore: function(item, data) {
        var property, store, _results;
        store = this.store;
        _results = [];
        for (property in data) {
          if (item.hasOwnProperty(property) && property !== store._getIdentifierAttribute()) {
            _results.push(store.setValue(item, property, data[property]));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
  });

}).call(this);
