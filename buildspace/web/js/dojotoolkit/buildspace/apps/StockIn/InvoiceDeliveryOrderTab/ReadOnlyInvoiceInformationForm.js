// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/StockIn/InvoiceDeliveryOrderTab/ReadOnlyInvoiceInformationForm', ["dojo/_base/declare", 'dojo/_base/lang', "dojo/on", "dojo/keys", "dojo/parser", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", 'dijit/Toolbar', 'dijit/form/Button', "dijit/layout/BorderContainer", "dijit/form/ValidationTextBox", "dijit/form/DateTextBox", "dojo/dom-construct", "dojo/dom-style", "dojo/dom-attr", "dojo/dom-form", "dojo/request", "dojox/validate/web", "dijit/form/FilteringSelect", "dojo/store/Memory", "dojox/form/Manager", "dojo/text!./templates/readOnlyInvoiceForm.html", 'dojo/i18n!../../../nls/StockIn'], function(declare, lang, on_, keys, parser, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, Toolbar, Button, BorderContainer, ValidationTextBox, DateTextBox, domConstruct, domStyle, domAttr, domForm, request, web, FilteringSelect, Memory, Manager, template, nls) {
    var invoiceForm;
    invoiceForm = declare("buildspace.apps.StockIn.InvoiceInformation.ReadOnlyInvoiceForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
      baseClass: "buildspace-form",
      templateString: template,
      region: 'center',
      style: "overflow: auto;",
      formInfo: null,
      nls: nls,
      invoiceId: -1,
      startup: function() {
        this.inherited(arguments);
        this.createUploader();
        if (this.formInfo["attachmentDownloadLink"]) {
          this.showDownloadLink(this.formInfo["attachmentDownloadFileName"], this.formInfo["attachmentDownloadLink"]);
          return this.showRemoveLink(this.formInfo["attachmentRemoveLink"]);
        }
      },
      showDownloadLink: function(fileName, downloadLink) {
        var anchorLink, container;
        container = this["invoiceFileDownloadLink-" + this.invoiceId];
        domStyle.set(container, "display", "block");
        anchorLink = dojo.create("a", {
          href: downloadLink,
          innerHTML: "Download",
          download: fileName
        });
        domConstruct.empty(container);
        return domConstruct.place(anchorLink, container);
      },
      hideDownloadLink: function() {
        var container;
        container = this["invoiceFileDownloadLink-" + this.invoiceId];
        return domStyle.set(container, "display", "none");
      },
      showRemoveLink: function(removeLink, self) {
        var anchorLink, container;
        if (self == null) {
          self = this;
        }
        container = this["invoiceFileRemoveLink-" + this.invoiceId];
        domStyle.set(container, "display", "block");
        anchorLink = dojo.create("a", {
          href: '#',
          innerHTML: "Remove"
        });
        domConstruct.empty(container);
        domConstruct.place(anchorLink, container);
        return on_(anchorLink, 'click', function(e) {
          var pb;
          pb = new buildspace.dialog.indeterminateProgressBar({
            title: nls.processing + "..."
          });
          pb.show();
          return request.get(removeLink, {
            handleAs: 'json'
          }).then(function(response) {
            pb.hide();
            if (response.success) {
              self.hideDownloadLink();
              return self.hideRemoveLink();
            }
          }, function(error) {
            return pb.hide();
          });
        });
      },
      hideRemoveLink: function() {
        var container;
        container = this["invoiceFileRemoveLink-" + this.invoiceId];
        return domStyle.set(container, "display", "none");
      },
      createUploader: function() {
        var csrfToken, self;
        self = this;
        csrfToken = this.formInfo['stock_in_invoice[_csrf_token]'];
        this.uploader = new dojox.form.Uploader({
          label: nls.uploadFile,
          uploadOnSelect: true,
          style: 'height:24px;',
          url: "stockIn/uploadFileForInvoice/invoiceId/" + self.invoiceId + "/_csrf_token/" + csrfToken,
          name: 'stock_in_invoice[fileUpload]'
        });
        on_(this.uploader, "Begin", function(uploadedFiles) {
          self.pb = buildspace.dialog.indeterminateProgressBar({
            title: nls.pleaseWait + "..."
          });
          return self.pb.show();
        });
        on_(this.uploader, "Complete", function(uploadedFiles) {
          self.pb.hide();
          if (uploadedFiles.success) {
            self.showDownloadLink(uploadedFiles["attachmentDownloadFileName"], uploadedFiles["attachmentDownloadLink"]);
            return self.showRemoveLink(uploadedFiles["attachmentRemoveLink"]);
          } else {
            return buildspace.dialog.alert(nls.error, "<div>" + uploadedFiles.errorMsg + "</div>", 80, 280);
          }
        });
        this["invoiceFileUploadContainer-" + self.invoiceId].appendChild(this.uploader.domNode);
        return this.uploader.startup();
      }
    });
    return declare('buildspace.apps.StockIn.InvoiceInformation.ReadOnlyInvoiceFormContainer', BorderContainer, {
      style: "padding:0;margin:0;",
      gutters: false,
      invoiceId: -1,
      formInfo: null,
      postCreate: function() {
        var form, self;
        this.inherited(arguments);
        self = this;
        form = new invoiceForm({
          invoiceId: self.invoiceId,
          formInfo: this.formInfo
        });
        return this.addChild(form);
      }
    });
  });

}).call(this);
