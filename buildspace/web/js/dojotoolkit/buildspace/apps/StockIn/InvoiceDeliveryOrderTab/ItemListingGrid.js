// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/StockIn/InvoiceDeliveryOrderTab/ItemListingGrid', ["dojo/_base/declare", "dojo/_base/lang", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Rearrange", "buildspace/widget/grid/plugins/FormulatedColumn", 'dojo/request', "dijit/focus", "dijit/Toolbar", "dijit/form/Button", 'dijit/DropDownMenu', 'dijit/form/DropDownButton', 'dijit/MenuItem', 'dijit/layout/BorderContainer', 'buildspace/widget/grid/cells/Formatter', 'buildspace/widget/grid/cells/FormulaTextBox', 'buildspace/widget/grid/Filter', './ResourceLibraryDialog', './StockInItemRemarkDialog', 'dojo/i18n!../../../nls/StockIn'], function(declare, lang, Menu, Rearrange, FormulatedColumn, request, focusUtil, Toolbar, Button, DropDownMenu, DropDownButton, MenuItem, BorderContainer, Formatter, FormulaTextBox, Filter, ResourceLibraryDialog, StockInItemRemarkDialog, nls) {
    var ItemListGrid = declare("buildspace.apps.StockIn.InvoiceInformation.ItemListGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      rowSelector: "0px",
      region: 'center',
      invoice: null,
      constructor: function(args) {
        this.rearranger = Rearrange(this, {});
        return this.formulatedColumn = FormulatedColumn(this, {});
      },
      canSort: function(inSortInfo) {
        return false;
      },
      postCreate: function() {
        this.inherited(arguments);
        return this.on('RowClick', function(e) {
          var item;
          item = this.getItem(e.rowIndex);
          if (item && item.id[0] > 0) {
            return this.disableToolbarButtons(false);
          } else {
            return this.disableToolbarButtons(true);
          }
        });
      },
      canEdit: function(inCell, inRowIndex) {
        var item, self;
        self = this;
        if (inCell !== void 0) {
          item = this.getItem(inRowIndex);
          if (item.id[0] > 0) {
            if (item.type[0] === buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER || item.type[0] === buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER_N) {
              window.setTimeout(function() {
                self.edit.cancel();
                return self.focus.setFocusIndex(inRowIndex, inCell.index);
              }, 10);
              return;
            }
          } else {
            window.setTimeout(function() {
              self.edit.cancel();
              return self.focus.setFocusIndex(inRowIndex, inCell.index);
            }, 10);
            return;
          }
        }
        return this._canEdit;
      },
      onRowDblClick: function(e) {
        var colField, item, pb, stockInItemGridStore;
        item = this.getItem(e.rowIndex);
        colField = e.cell.field;
        stockInItemGridStore = this.store;
        if (item && item.stockInItemId && item.stockInItemId[0] > 0 && colField === 'description') {
          pb = buildspace.dialog.indeterminateProgressBar({
            title: nls.pleaseWait + "..."
          });
          pb.show();
          return request.post("requestForQuotation/getRFQItemRemarkInformation", {
            query: {
              rfqItemId: item.stockInItemId[0],
              rfqItemRemarkId: item.stockInItemRemarkId[0]
            },
            handleAs: 'json'
          }).then(function(response) {
            var dialog = new StockInItemRemarkDialog({
              title: "" + nls.itemRemarkDialogTitle,
              item: item,
              data: response,
              stockInItemGridStore: stockInItemGridStore
            });
            dialog.show();
            return pb.hide();
          }, function(error) {
            return pb.hide();
          });
        } else {
          return this.inherited(arguments);
        }
      },
      doApplyCellEdit: function(val, rowIdx, inAttrName) {
        var item, params, pb, self, xhrArgs;
        self = this;
        item = this.getItem(rowIdx);
        if (val !== item[inAttrName][0]) {
          params = {
            field_name: inAttrName,
            invoiceId: self.invoiceId,
            stockInItemId: item.stockInItemId,
            val: val,
            _csrf_token: item._csrf_token ? item._csrf_token : null
          };
          pb = buildspace.dialog.indeterminateProgressBar({
            title: nls.savingData + '. ' + nls.pleaseWait + '...'
          });
          pb.show();
          xhrArgs = {
            url: 'stockIn/updateItemInformation',
            content: params,
            handleAs: 'json',
            load: function(resp) {
              var cell, data, _i, _len, _ref;
              if (resp.success) {
                _ref = resp.items;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  data = _ref[_i];
                  self.updateStore(item, data);
                }
              }
              cell = self.getCellByField(inAttrName);
              window.setTimeout(function() {
                return self.focus.setFocusIndex(rowIdx, cell.index);
              }, 10);
              return pb.hide();
            },
            error: function(error) {
              return pb.hide();
            }
          };
          return dojo.xhrPost(xhrArgs);
        } else {
          return self.inherited(arguments);
        }
      },
      updateStore: function(item, data) {
        var property, store, _results;
        store = this.store;
        _results = [];
        for (property in data) {
          if (item.hasOwnProperty(property) && property !== store._getIdentifierAttribute()) {
            _results.push(store.setValue(item, property, data[property]));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      deleteRow: function(rowIndex) {
        var item, msg, pb, self, store, title, xhrArgs;
        self = this;
        item = this.getItem(rowIndex);
        store = self.store;
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.deleting + '. ' + nls.pleaseWait + '...'
        });
        focusUtil.curNode.blur();
        focusUtil.curNode = null;
        pb.show();
        xhrArgs = {
          url: 'stockIn/deleteInvoiceItem',
          content: {
            invoiceId: self.invoiceId,
            resourceItemId: item.id,
            _csrf_token: item._csrf_token
          },
          handleAs: 'json',
          load: function(data) {
            var affectedNodesList, _i, _len;
            if (data.success) {
              store = self.store;
              if (data.affected_nodes !== void 0) {
                affectedNodesList = data.affected_nodes;
                for (_i = 0, _len = affectedNodesList.length; _i < _len; _i++) {
                  data = affectedNodesList[_i];
                  store.fetchItemByIdentity({
                    'identity': data.id,
                    onItem: function(itm) {
                      if (itm) {
                        store.deleteItem(itm);
                        return store.save();
                      }
                    }
                  });
                }
              }
              pb.hide();
              self.selection.clear();
              return window.setTimeout(function() {
                return self.focus.setFocusIndex(rowIndex, 0);
              }, 10);
            }
          },
          error: function(error) {
            self.selection.clear();
            return pb.hide();
          }
        };
        if (item.type[0] === buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER || item.type[0] === buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER_N) {
          title = nls.deleteHeadDialogBoxTitle;
          msg = nls.deleteHeadDialogBoxMsg;
        } else {
          title = nls.deleteItemDialogBoxTitle;
          msg = nls.deleteItemDialogBoxMsg;
        }
        return new buildspace.dialog.confirm(title, msg, 80, 320, function() {
          return dojo.xhrPost(xhrArgs);
        }, function() {
          return pb.hide();
        });
      },
      disableToolbarButtons: function(isDisable) {
        var deleteRowBtn = dijit.byId("deleteItemListFromStockInInvoice-" + this.invoice.id[0]);
        if(deleteRowBtn)
          deleteRowBtn.set('disabled', isDisable);
      },
      refreshGrid: function() {
        this.store.save();
        this.store.close();
        return this.setStore(this.store);
      }
    });
    return declare("buildspace.apps.StockIn.InvoiceInformation.ItemListContainer", BorderContainer, {
      invoice: null,
      style: 'height:100%;width:100%;padding:0;margin:0;',
      gutters: false,
      postCreate: function() {
        var filter, grid, self, store, toolbar;
        this.inherited(arguments);
        self = this;
        store = new dojo.data.ItemFileWriteStore({
          url: "stockIn/getInvoiceItemListings/invoiceId/" + this.invoice.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new ItemListGrid({
          structure: self.getGridLayout(),
          store: store,
          invoice: this.invoice,
          invoiceId: this.invoice.id[0],
          escapeHTMLInData: false
        });
        toolbar = new Toolbar({
          region: 'top',
          style: "outline:none!important;padding:2px;overflow:hidden;border:none;"
        });
        toolbar.addChild(new Button({
          label: nls.copyFromResourceLibrary,
          iconClass: "icon-16-container icon-16-import",
          onClick: function() {
            var dialog = new ResourceLibraryDialog({
              title: nls.copyFromResourceLibrary,
              invoiceId: self.invoice.id[0],
              itemListGrid: grid
            });
            return dialog.show();
          }
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new Button({
          label: nls["delete"],
          id: "deleteItemListFromStockInInvoice-" + self.invoice.id[0],
          iconClass: "icon-16-container icon-16-delete",
          disabled: true,
          onClick: function() {
            return grid.deleteRow(grid.selection.selectedIndex);
          }
        }));
        filter = new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [{
            'description': nls.description
          }, {
            'quantity': nls.quantity
          }, {
            'uom': nls.unit
          }]
        });
        this.addChild(filter);
        this.addChild(toolbar);
        return this.addChild(grid);
      },
      getGridLayout: function() {
        var formatter = new Formatter;
        return [{
          name: "No",
          field: "id",
          width: '30px',
          styles: 'text-align: center;',
          formatter: formatter.rowCountCellFormatter,
          noresize: true
        }, {
          name: nls.description,
          field: "description",
          width: 'auto',
          formatter: formatter.treeCellFormatter,
          noresize: true
        }, {
          name: nls.quantity,
          field: "quantity",
          width: '100px',
          styles: 'text-align: right;',
          cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
          editable: true,
          formatter: formatter.rfqQuantityCellFormatter,
          noresize: true
        }, {
          name: nls.unit,
          field: "uom",
          width: '70px',
          styles: 'text-align: center;',
          formatter: formatter.rfqUnitCellFormatter,
          noresize: true
        }, {
          name: nls.rate,
          field: 'rates',
          styles: "text-align:right;",
          width: '120px',
          editable: true,
          cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
          formatter: formatter.currencyCellFormatter,
          noresize: true
        }, {
          name: nls.discount + " %",
          field: 'discount_percentage',
          styles: "text-align:right;",
          width: '75px',
          editable: true,
          cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
          formatter: formatter.currencyCellFormatter,
          noresize: true
        }, {
          name: nls.tax + " %",
          field: 'tax_percentage',
          styles: "text-align:right;",
          width: '75px',
          editable: true,
          cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
          formatter: formatter.currencyCellFormatter,
          noresize: true
        }, {
          name: nls.totalWithoutTax,
          field: 'total_without_tax',
          styles: "text-align:right;",
          width: '100px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.totalWithTax,
          field: 'total',
          styles: "text-align:right;",
          width: '100px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.doQuantity,
          field: "doQuantity",
          width: '90px',
          styles: 'text-align: right;',
          formatter: formatter.unEditableNumberCellFormatter,
          noresize: true
        }, {
          name: nls.balanceQuantity,
          field: "balanceQuantity",
          width: '90px',
          styles: 'text-align: right;',
          formatter: formatter.unEditableNumberCellFormatter,
          noresize: true
        }];
      }
    });
  });

}).call(this);
