// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/StockIn/InvoiceDeliveryOrderTab/DeliveryOrderListingGrid', ["dojo/_base/declare", "dojo/_base/lang", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Rearrange", "buildspace/widget/grid/plugins/FormulatedColumn", 'dojo/request', "dijit/focus", "dijit/Toolbar", "dijit/form/Button", 'dijit/DropDownMenu', 'dijit/form/DropDownButton', 'dijit/MenuItem', 'dijit/layout/BorderContainer', 'buildspace/widget/grid/cells/Formatter', 'buildspace/widget/grid/cells/FormulaTextBox', 'buildspace/widget/grid/Filter', './DeliveryOrderFormDialog', './StockInItemRemarkDialog', './DeliveryOrderItemListGrid', './DeliveryOrderImportFileFormDialog', 'dojo/i18n!../../../nls/StockIn'], function(declare, lang, Menu, Rearrange, FormulatedColumn, request, focusUtil, Toolbar, Button, DropDownMenu, DropDownButton, MenuItem, BorderContainer, Formatter, FormulaTextBox, Filter, DeliveryOrderFormDialog, StockInItemRemarkDialog, DeliveryOrderItemListGrid, DeliveryOrderImportFileFormDialog, nls) {
    var DeliveryOrderListGrid = declare("buildspace.apps.StockIn.InvoiceInformation.DeliveryOrderListingGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      keepSelection: true,
      rowSelector: "0px",
      region: 'center',
      deliveryOrderContainer: null,
      invoice: null,
      constructor: function() {
        this.rearranger = Rearrange(this, {});
        return this.formulatedColumn = FormulatedColumn(this, {});
      },
      canSort: function() {
        return false;
      },
      postCreate: function() {
        this.inherited(arguments);
        return this.on('RowClick', function(e) {
          var item;
          item = this.getItem(e.rowIndex);
          if (item && item.id[0] > 0) {
            return this.disableToolbarButtons(false);
          } else {
            return this.disableToolbarButtons(true);
          }
        });
      },
      deleteRow: function(rowIndex) {
        var item, msg, pb, self, title, xhrArgs;
        self = this;
        item = this.getItem(rowIndex);
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.deleting + '. ' + nls.pleaseWait + '...'
        });
        focusUtil.curNode.blur();
        focusUtil.curNode = null;
        pb.show();
        xhrArgs = {
          url: 'stockIn/deleteDeliveryOrder',
          content: {
            deliveryOrderId: item.id,
            _csrf_token: item._csrf_token
          },
          handleAs: 'json',
          load: function(data) {
            if (data.success) {
              self.refreshGrid();
              pb.hide();
              self.selection.clear();
              return window.setTimeout(function() {
                return self.focus.setFocusIndex(rowIndex, 0);
              }, 10);
            }
          },
          error: function(error) {
            self.selection.clear();
            return pb.hide();
          }
        };
        title = nls.deleteItemDialogBoxTitle;
        msg = nls.deleteItemDialogBoxMsg;
        return new buildspace.dialog.confirm(title, msg, 80, 320, function() {
          return dojo.xhrPost(xhrArgs);
        }, function() {
          return pb.hide();
        });
      },
      disableToolbarButtons: function(isDisable) {
        var deleteRowBtn = dijit.byId("deleteDeliveryOrderFromStockInInvoice-" + this.invoice.id[0]);
        if(deleteRowBtn)
          deleteRowBtn.set('disabled', isDisable);
      },
      createUploadAttachmentForm: function(deliveryOrder) {
        var dialog = new DeliveryOrderImportFileFormDialog({
          deliveryOrderId: deliveryOrder.id[0],
          _csrf_token: deliveryOrder['_csrf_token'][0],
          deliveryOrderListGrid: this
        });
        return dialog.show();
      },
      deleteUploadedAttachment: function(deliveryOrder, self) {
        var deleteURL, pb;
        if (self == null) {
          self = this;
        }
        deleteURL = deliveryOrder.remove_file_url[0];
        if (deleteURL === null) {
          return false;
        }
        pb = new buildspace.dialog.indeterminateProgressBar({
          title: nls.processing + "..."
        });
        pb.show();
        return request.post(deleteURL, {
          handleAs: 'json',
          data: {
            _csrf_token: deliveryOrder._csrf_token[0]
          }
        }).then(function(response) {
          pb.hide();
          if (response.success) {
            return self.refreshGrid();
          }
        }, function(error) {
          return pb.hide();
        });
      },
      refreshGrid: function() {
        this.store.save();
        this.store.close();
        return this.setStore(this.store);
      }
    });
    return declare("buildspace.apps.StockIn.InvoiceInformation.DeliveryOrderContainer", BorderContainer, {
      invoice: null,
      style: 'height:100%;width:100%;padding:0;margin:0;',
      gutters: false,
      postCreate: function() {
        var controller, controllerPane, filter, grid, gridContainer, self, stackContainer, stackPane, stackPaneId, store, toolbar;
        this.inherited(arguments);
        self = this;
        stackPaneId = "stockInInvoiceDeliveryOrderList-" + this.invoice.id[0];
        stackContainer = dijit.byId(stackPaneId + "-stackContainer");
        if (stackContainer) {
          dijit.byId(stackPaneId + "-stackContainer").destroyRecursive();
        }
        stackContainer = self.stackContainer = new dijit.layout.StackContainer({
          style: 'width:100%;height:100%;',
          region: "center",
          id: stackPaneId + "-stackContainer"
        });
        store = new dojo.data.ItemFileWriteStore({
          url: "stockIn/getDeliveryOrderListings/invoiceId/" + this.invoice.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new DeliveryOrderListGrid({
          structure: self.getDeliveryOrderGridLayout(),
          store: store,
          invoice: this.invoice,
          invoiceId: this.invoice.id[0],
          escapeHTMLInData: false,
          deliveryOrderContainer: self,
          onClick: function(e) {
            var colField, deliveryOrder;
            self = this;
            deliveryOrder = this.getItem(e.rowIndex);
            colField = e.cell.field;
            if (deliveryOrder.id[0] < 0) {
              return false;
            }
            if (colField === 'upload_file') {
              self.createUploadAttachmentForm(deliveryOrder);
            } else if (colField === 'remove_file') {
              self.deleteUploadedAttachment(deliveryOrder);
            }
            return true;
          },
          onRowDblClick: function(e) {
            var deliveryOrder = this.getItem(e.rowIndex);
            if (deliveryOrder.id[0] > 0) {
              this.deliveryOrderContainer.createDeliveryOrderItemQuantityView(deliveryOrder);
            }
          }
        });
        toolbar = new Toolbar({
          region: 'top',
          style: "outline:none!important;padding:2px;overflow:hidden;border:none;"
        });
        toolbar.addChild(new Button({
          label: nls.addNewDeliveryOrder,
          iconClass: "icon-16-container icon-16-add",
          onClick: function() {
            var pb;
            pb = new buildspace.dialog.indeterminateProgressBar({
              title: nls.processing + "..."
            });
            pb.show();
            return request.get('stockIn/getDeliveryOrderFormInformation', {
              query: {
                invoiceId: self.invoice.id[0]
              },
              handleAs: 'json'
            }).then(function(response) {
              var dialog = new DeliveryOrderFormDialog({
                invoice: self.invoice,
                deliveryOrderGrid: grid,
                formInfo: response.formInformation
              });
              dialog.show();
              return pb.hide();
            }, function(error) {
              return pb.hide();
            });
          }
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new Button({
          label: nls["delete"],
          id: "deleteDeliveryOrderFromStockInInvoice-" + self.invoice.id[0],
          iconClass: "icon-16-container icon-16-delete",
          disabled: true,
          onClick: function() {
            return grid.deleteRow(grid.selection.selectedIndex);
          }
        }));
        filter = new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [{
            'delivery_order_no': nls.doNo
          }]
        });
        gridContainer = new BorderContainer({
          region: 'top',
          gutters: false
        });
        gridContainer.addChild(filter);
        gridContainer.addChild(toolbar);
        gridContainer.addChild(grid);
        stackPane = new dijit.layout.ContentPane({
          title: nls.deliveryOrder,
          content: gridContainer
        });
        stackContainer.addChild(stackPane);
        controller = new dijit.layout.StackController({
          region: "top",
          containerId: stackPaneId + "-stackContainer"
        });
        controllerPane = new dijit.layout.ContentPane({
          style: "padding: 0px; overflow: hidden;",
          baseClass: 'breadCrumbTrail',
          region: 'top',
          content: controller
        });
        this.addChild(stackContainer);
        this.addChild(controllerPane);
        return dojo.subscribe(stackPaneId + "-stackContainer-selectChild", "", function(page) {
          var children, index, widget, _results;
          widget = dijit.byId(stackPaneId + "-stackContainer");
          if (widget) {
            children = widget.getChildren();
            index = dojo.indexOf(children, dijit.byId(page.id)) + 1;
            _results = [];
            while (children.length > index) {
              widget.removeChild(children[index]);
              children[index].destroyRecursive();
              _results.push(index = index + 1);
            }
            return _results;
          }
        });
      },
      createDeliveryOrderItemQuantityView: function(deliveryOrder) {
        var borderContainer, grid, self, store;
        self = this;
        store = new dojo.data.ItemFileWriteStore({
          url: "stockIn/getDeliveryOrderItemQuantities/deliveryOrderId/" + deliveryOrder.id,
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new DeliveryOrderItemListGrid({
          invoice: self.invoice,
          invoiceId: self.invoice.id[0],
          deliveryOrder: deliveryOrder,
          store: store,
          structure: self.getDeliveryOrderItemQuantityViewGridLayout()
        });
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          baseClass: "form",
          gutters: false,
          region: "center"
        });
        borderContainer.addChild(new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [{
            'description': nls.description
          }, {
            'uom': nls.unit
          }, {
            'invoiceQuantity': nls.invoiceQuantity
          }, {
            'doQuantity': nls.doQuantity
          }, {
            'remarks': nls.remarks
          }]
        }));
        borderContainer.addChild(grid);
        return self.makePane(deliveryOrder.delivery_order_no[0], borderContainer);
      },
      getDeliveryOrderGridLayout: function() {
        var formatter = new Formatter;
        return [{
          name: "No",
          field: "id",
          width: '30px',
          styles: 'text-align: center;',
          formatter: formatter.rowCountCellFormatter,
          noresize: true
        }, {
          name: nls.deliveryOrderNo,
          field: "delivery_order_no",
          width: 'auto',
          formatter: formatter.treeCellFormatter,
          noresize: true
        }, {
          name: nls.uploadFile,
          field: "upload_file",
          width: '100px',
          styles: 'text-align: center;',
          noresize: true
        }, {
          name: nls.downloadFile,
          field: "download_file",
          width: '100px',
          styles: 'text-align: center;',
          noresize: true
        }, {
          name: nls.removeFile,
          field: "remove_file",
          styles: 'text-align: center;',
          width: '100px',
          noresize: true
        }, {
          name: nls.date_of_delivery_order,
          field: 'delivery_order_date',
          width: '160px',
          styles: 'text-align: center;',
          filterable: false,
          noresize: true
        }];
      },
      getDeliveryOrderItemQuantityViewGridLayout: function() {
        var formatter = new Formatter;
        return [{
          name: "No",
          field: "id",
          width: '30px',
          styles: 'text-align: center;',
          formatter: formatter.rowCountCellFormatter
        }, {
          name: nls.description,
          field: "description",
          width: 'auto',
          formatter: formatter.treeCellFormatter
        }, {
          name: nls.remarks,
          field: "remarks",
          width: '280px',
          formatter: formatter.rfqSupplierRemarkCellFormatter
        }, {
          name: nls.unit,
          field: "uom",
          width: '70px',
          styles: 'text-align: center;',
          formatter: formatter.rfqUnitCellFormatter
        }, {
          name: nls.invoiceQuantity,
          field: "invoiceQuantity",
          width: '90px',
          styles: 'text-align: right;',
          cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
          formatter: formatter.rfqQuantityCellFormatter
        }, {
          name: nls.doQuantity,
          field: "doQuantity",
          width: '90px',
          styles: 'text-align: right;',
          cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
          editable: true,
          formatter: formatter.rfqQuantityCellFormatter
        }];
      },
      makePane: function(name, content) {
        var pane, stackContainer;
        stackContainer = dijit.byId("stockInInvoiceDeliveryOrderList-" + this.invoice.id[0] + "-stackContainer");
        pane = new dijit.layout.ContentPane({
          title: name,
          content: content
        });
        stackContainer.addChild(pane);
        return stackContainer.selectChild(pane);
      }
    });
  });

}).call(this);
