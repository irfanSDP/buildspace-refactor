// Generated by CoffeeScript 1.9.0
(function() {
  define(['dojo/_base/declare', 'dijit/layout/BorderContainer', 'dijit/layout/TabContainer', 'dijit/Toolbar', 'dijit/form/Button', 'dojo/request', 'dojo/dom', 'dojo/dom-attr', 'dojo/_base/lang', 'dojo/i18n!buildspace/nls/PrintLayoutSetting'], function(declare, BorderContainer, TabContainer, Toolbar, Button, request, dom, domAttr, lang, nls) {
    return declare('buildspace.apps.PrintingLayoutSetting', buildspace.apps._App, {
      saveURL: 'printLayoutSetting/saveSettings',
      init: function(args) {
        var layoutSettings, layoutSettingsTab;
        layoutSettings = this.layoutSettings = this.getSettings();
        this.baseWindow = new buildspace.widget.Window({
          title: nls.projectLayoutSetting,
          iconClass: this.iconClass,
          style: "padding:0px; width:100%; height:100%;"
        });
        layoutSettingsTab = this.renderTabs(layoutSettings);
        this.baseWindow.addChild(layoutSettingsTab);
        this.baseWindow.show();
        return this.baseWindow.startup();
      },
      renderTabs: function(layoutSettings) {
        var borderContainer, counter, form, selected, self, setting, settings, tc, toolBar, type;
        counter = 0;
        self = this;
        form = [];
        borderContainer = [];
        settings = {
          headStyling: {
            title: nls.headStyling,
            nameSpace: 'HeadStylingFormatForm',
            dataName: 'headSettings',
            id: 'headSettings'
          },
          fontNumber: {
            title: nls.fontNumFormat,
            nameSpace: 'FontNumberFormatForm',
            dataName: 'layoutSetting',
            id: 'fontNumber'
          },
          pageFormat: {
            title: nls.pageFormat,
            nameSpace: 'PageFormatForm',
            dataName: 'layoutSetting',
            id: 'pageFormat'
          },
          standardPhrase: {
            title: nls.standardPhrases,
            nameSpace: 'StandardPhrasesForm',
            dataName: 'phrase',
            id: 'standardPhrases'
          },
          headerFooter: {
            title: nls.headerFooter,
            nameSpace: 'HeaderFooterForm',
            dataName: 'phrase',
            id: 'headerFooter'
          }
        };
        tc = new TabContainer({
          style: "width: 100%; height: 100%;",
          region: "center"
        });
        for (type in settings) {
          setting = settings[type];
          selected = counter === 0 ? true : false;
          borderContainer[counter] = new BorderContainer({
            id: setting.id,
            title: setting.title,
            style: 'height:100%; width:100%;',
            gutters: false,
            selected: selected
          });
          form[counter] = new buildspace.apps.PrintingLayoutSetting[setting.nameSpace]({
            data: layoutSettings[setting.dataName],
            region: "center",
            style: "overflow: auto;"
          });
          toolBar = new Toolbar({
            region: 'top',
            style: "outline:none!important;padding:2px;overflow:hidden;"
          });
          toolBar.addChild(new Button({
            label: nls.save,
            iconClass: "icon-16-container icon-16-save",
            formCounter: counter,
            nameSpace: setting.nameSpace,
            onClick: function() {
              var dialog, postContent;
              postContent = form[this.formCounter].validateForm();
              if (postContent) {
                return self.postForm(postContent);
              } else {
                return dialog = new buildspace.dialog.dijitDialog({
                  title: nls.errorDialogTitle,
                  content: nls.validationMsg,
                  style: "width: 340px;"
                });
              }
            }
          }));
          borderContainer[counter].addChild(toolBar);
          borderContainer[counter].addChild(form[counter]);
          tc.addChild(borderContainer[counter]);
          counter++;
        }
        tc.startup();
        return tc;
      },
      getSettings: function(_at_projectId) {
        var layoutSettings;
        this.projectId = _at_projectId;
        layoutSettings = void 0;
        request.get('printLayoutSetting/getSettings', {
          sync: true,
          handleAs: 'json',
          preventCache: true
        }).then(function(response) {
          return layoutSettings = response;
        }, function(error) {
          return console.log(error);
        });
        return layoutSettings;
      },
      postForm: function(postContent) {
        var heads, pb, self;
        self = this;
        heads = [];
        pb = new buildspace.dialog.indeterminateProgressBar({
          title: 'Processing...'
        });
        lang.mixin(postContent, {
          '_csrf_token': self.layoutSettings._csrf_token
        });
        pb.show();
        return request.post(this.saveURL, {
          data: postContent,
          handleAs: 'json'
        }).then(function(response) {
          var dialog;
          pb.hide();
          if (response.success) {
            return heads = response.heads;
          } else {
            return dialog = new buildspace.dialog.dijitDialog({
              title: nls.errorDialogTitle,
              content: response.error,
              style: "width: 340px;"
            });
          }
        }, function(error) {
          var dialog;
          pb.hide();
          return dialog = new buildspace.dialog.dijitDialog({
            title: nls.errorDialogTitle,
            content: nls.serverErrorMsg,
            style: "width: 340px;"
          });
        });
      },
      updateFormNewIdValue: function(heads, type) {
        var id, idName, key, target, _results;
        idName = type === 'ReserveWordForm' ? 'word[id]' : 'content[id]';
        if (heads != null) {
          _results = [];
          for (key in heads) {
            id = heads[key];
            target = dom.byId(idName + "[" + key + "]");
            _results.push(domAttr.set(target, 'value', id));
          }
          return _results;
        }
      }
    });
  });

}).call(this);
