// Generated by CoffeeScript 1.9.0
(function() {
    define('buildspace/apps/RequestForQuotation/ItemList/RFQItemRemarkDialog', ["dojo/_base/declare", 'dojo/_base/lang', 'dojo/on', "dojo/keys", "dojo/parser", "dojo/_base/connect", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", 'dijit/Toolbar', 'dijit/form/Button', "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "dijit/form/ValidationTextBox", "dijit/form/SimpleTextarea", "dijit/registry", "dojo/dom-style", "dojo/dom-form", "dojo/request", "dojox/validate/web", "dijit/form/Select", "dijit/form/FilteringSelect", "dojo/store/Memory", "dojox/form/Manager", "dojo/text!./templates/rfqItemRemarkForm.html", 'buildspace/widget/grid/cells/Formatter', 'dojo/i18n!../../../nls/RequestForQuotation', 'buildspace/widget/grid/Filter'], function(declare, lang, bind, keys, parser, connect, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, Toolbar, Button, BorderContainer, ContentPane, ValidationTextBox, SimpleTextarea, registry, domStyle, domForm, request, web, Select, FilteringSelect, Memory, Manager, template, Formatter, nls, Filter) {
        var Dialog, RFQItemRemarkForm, RFQItemRemarkFormContainer, rfqItemDescriptionGrid;
        rfqItemDescriptionGrid = declare("buildspace.apps.RequestForQuotation.ItemList.RFQItemRemarkGrid", dojox.grid.EnhancedGrid, {
            style: "border:none;",
            keepSelection: true,
            rowSelector: "0px",
            newRFQItemRemarkId: -1,
            rfqItemRemarkId: -1,
            rfqItemId: -1,
            rfqItem: null,
            resourceItemId: -1,
            rfqItemGridStore: null,
            dialogContainer: null,
            _csrf_token: null,
            postCreate: function() {
                var self;
                this.inherited(arguments);
                self = this;
                this.on('RowClick', function(e) {
                    var item = this.getItem(e.rowIndex);
                    if (item && item.id[0] > 0) {
                        return this.disableToolbarButtons(false);
                    } else {
                        return this.disableToolbarButtons(true);
                    }
                });
                return this._connects.push(connect.connect(this, 'onCellClick', function(e) {
                    var fieldName, item;
                    item = this.getItem(e.rowIndex);
                    fieldName = e.cell.field;
                    if (fieldName !== 'action') {
                        return false;
                    }
                    return self.updateRFQItemDescription(item);
                }));
            },
            canSort: function(inSortInfo) {
                return false;
            },
            updateRFQItemDescription: function(item) {
                var formValues, pb, self;
                self = this;
                formValues = {
                    'rfq_item_remark[resource_item_id]': self.resourceItemId,
                    'rfq_item_remark[description]': item.description,
                    'rfq_item_remark[_csrf_token]': self._csrf_token
                };
                if (self.newRFQItemRemarkId > 0) {
                    lang.mixin(formValues, {
                        rfqItemRemarkId: self.newRFQItemRemarkId,
                        rfqItemId: self.rfqItemId
                    });
                } else {
                    lang.mixin(formValues, {
                        rfqItemRemarkId: self.rfqItemRemarkId,
                        rfqItemId: self.rfqItemId
                    });
                }
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + "..."
                });
                pb.show();

                return request.post("requestForQuotation/updateSelectedPreviousRFQItemRemark", {
                    data: formValues,
                    handleAs: 'json'
                }).then(function(response) {
                    var data, errorBlock, i, property, _results;
                    pb.hide();
                    if (response.success && response.id > 0) {
                        self.newRFQItemRemarkId = response.id;
                        self.refreshGrid();
                        data = response.data;
                        for (property in data) {
                            if (self.rfqItem.hasOwnProperty(property) && property !== self.rfqItemGridStore._getIdentifierAttribute()) {
                                self.rfqItemGridStore.setValue(self.rfqItem, property, data[property]);
                            }
                        }
                        return self.dialogContainer.hide();
                    } else {
                        _results = [];
                        for (i in response.errorMsgs) {
                            errorBlock = self["error-" + i];
                            errorBlock.innerHTML = response.errorMsgs[i];
                            _results.push(domStyle.set(errorBlock, "display", "block"));
                        }
                        return _results;
                    }
                }, function(error) {
                    return pb.hide();
                });
            },
            deleteRow: function(rowIndex) {
                var item, pb, self, xhrArgs;
                self = this;
                item = this.getItem(rowIndex);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.deleting + '. ' + nls.pleaseWait + '...'
                });
                pb.show();
                xhrArgs = {
                    url: 'requestForQuotation/deleteRFQItemRemark',
                    content: {
                        rfqItemRemarkId: item.id,
                        _csrf_token: item._csrf_token
                    },
                    handleAs: 'json',
                    load: function(data) {
                        pb.hide();
                        if (data.success) {
                            return self.refreshGrid();
                        } else {
                            return console.log(data);
                        }
                    },
                    error: function(error) {
                        return pb.hide();
                    }
                };
                return new buildspace.dialog.confirm(nls.deleteRFQItemRemarkTitle, nls.deleteRFQItemRemarkMsg, 80, 320, function() {
                    return dojo.xhrPost(xhrArgs);
                }, function() {
                    return pb.hide();
                });
            },
            refreshGrid: function() {
                this.store.save();
                this.store.close();
                return this.setStore(this.store);
            },
            disableToolbarButtons: function(isDisable, buttonsToEnable) {
                var deleteRowBtn = dijit.byId("deleteRemarkFromRequestForQuotationItem");

                if(deleteRowBtn)
                    deleteRowBtn.set('disabled', isDisable);
            }
        });

        RFQItemRemarkForm = declare("buildspace.apps.RequestForQuotation.ItemList.RFQItemRemarkForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
            baseClass: "buildspace-form",
            style: 'overflow: auto;',
            item: null,
            rfqId: -1,
            rfqItemId: -1,
            resourceItemId: -1,
            rfqItemRemarkId: -1,
            newRFQItemRemarkId: -1,
            templateString: template,
            region: 'center',
            style: "overflow: auto;",
            formInfo: null,
            nls: nls,
            dialogContainer: null,
            rfqItemGridStore: null,
            _csrf_token: null,
            postCreate: function() {
                var self;
                this.inherited(arguments);
                self = this;
                return bind(this.rfqItemRemarkFormSaveButton, 'click', function(e) {
                    return self.save();
                });
            },
            startup: function() {
                this.inherited(arguments);
                return this['rfqItemRemarkForm'].setFormValues(this.formInfo);
            },
            clearInputErrorMsgs: function() {
                var errorBlock, i, presetErrorBlocks, self, _results;
                self = this;
                presetErrorBlocks = {
                    description: null
                };
                _results = [];
                for (i in presetErrorBlocks) {
                    errorBlock = self["error-" + i];
                    errorBlock.innerHTML = presetErrorBlocks[i];
                    _results.push(domStyle.set(errorBlock, "display", "none"));
                }
                return _results;
            },
            save: function() {
                var form, formValues, pb, self;
                self = this;
                this.clearInputErrorMsgs();
                form = this['rfqItemRemarkForm'];
                if (!form.validate()) {
                    return false;
                }
                formValues = dojo.formToObject(this['rfqItemRemarkForm'].id);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + "..."
                });
                if (self.newRFQItemRemarkId > 0) {
                    lang.mixin(formValues, {
                        rfqItemRemarkId: self.newRFQItemRemarkId,
                        rfqItemId: self.rfqItemId,
                        resourceItemId: self.resourceItemId
                    });
                } else {
                    lang.mixin(formValues, {
                        rfqItemRemarkId: self.rfqItemRemarkId,
                        rfqItemId: self.rfqItemId,
                        resourceItemId: self.resourceItemId
                    });
                }
                pb.show();

                return request.post("requestForQuotation/updateRFQItemRemark", {
                    data: formValues,
                    handleAs: 'json'
                }).then(function(response) {
                    var errorBlock, i, _results;
                    pb.hide();
                    if (response.success && response.id > 0) {
                        self.newRFQItemRemarkId = response.id;
                        self['rfqItemRemarkForm'].reset();
                        return self.grid.refreshGrid();
                    } else {
                        _results = [];
                        for (i in response.errorMsgs) {
                            errorBlock = self["error-" + i];
                            errorBlock.innerHTML = response.errorMsgs[i];
                            _results.push(domStyle.set(errorBlock, "display", "block"));
                        }
                        return _results;
                    }
                }, function(error) {
                    return pb.hide();
                });
            }
        });

        RFQItemRemarkFormContainer = declare("buildspace.apps.RequestForQuotation.ItemList.RFQItemRemarkFormContainer", BorderContainer, {
            gutters: false,
            style: 'padding:0px;margin:0px;width:750px;height:400px;overflow:hidden;',
            item: null,
            rfqId: -1,
            dialogContainer: null,
            formInfo: null,
            rfqItemGridStore: null,
            _csrf_token: null,
            postCreate: function() {
                var dialogToolbar, form, grid, gridToolbar, itemRemarkId, resourceItemId, rfqItemId, self, store;
                this.inherited(arguments);
                self = this;
                rfqItemId = self.item.rfqItemId[0];
                resourceItemId = self.item.id[0];
                itemRemarkId = self.item.rfqItemRemarkId;
                store = new dojo.data.ItemFileWriteStore({
                    url: "requestForQuotation/getPreviousRFQItemRemarks/rfqItemId/" + rfqItemId + "/resourceItemId/" + resourceItemId,
                    clearOnClose: true,
                    urlPreventCache: true
                });

                grid = new rfqItemDescriptionGrid({
                    rfqItemId: rfqItemId,
                    rfqItemRemarkId: itemRemarkId,
                    structure: self.getRemarksGridLayout(),
                    store: store,
                    rfqItem: self.item,
                    resourceItemId: resourceItemId,
                    rfqItemGridStore: self.rfqItemGridStore,
                    dialogContainer: self.dialogContainer,
                    _csrf_token: self._csrf_token,
                    region: 'center'
                });

                form = new RFQItemRemarkForm({
                    item: self.item,
                    rfqId: self.rfqId,
                    rfqItemId: rfqItemId,
                    resourceItemId: resourceItemId,
                    rfqItemRemarkId: itemRemarkId,
                    dialogContainer: self.dialogContainer,
                    formInfo: self.formInfo,
                    rfqItemGridStore: self.rfqItemGridStore,
                    _csrf_token: self._csrf_token,
                    grid: grid
                });

                dialogToolbar = new Toolbar({
                    region: 'top',
                    style: "outline:none!important;padding:2px;overflow:hidden;"
                });

                dialogToolbar.addChild(new dijit.form.Button({
                    label: nls.close,
                    iconClass: "icon-16-container icon-16-close",
                    onClick: function() {
                        return self.dialogContainer.hide();
                    }
                }));

                gridToolbar = new Toolbar({
                    region: 'top',
                    style: "outline:none!important;padding:2px;overflow:hidden;border-bottom:none;"
                });

                gridToolbar.addChild(new dijit.form.Button({
                    label: nls["delete"],
                    id: 'deleteRemarkFromRequestForQuotationItem',
                    iconClass: "icon-16-container icon-16-delete",
                    disabled: true,
                    onClick: function() {
                        return grid.deleteRow(grid.selection.selectedIndex);
                    }
                }));

                var topContainer = new BorderContainer({
                    gutters: false,
                    style: 'width:100%;height:200px;margin:0;padding:0;overflow:hidden;',
                    region: 'top'
                });

                topContainer.addChild(dialogToolbar);
                topContainer.addChild(form);

                this.addChild(topContainer);

                var centerContainer = new BorderContainer({
                    gutters: false,
                    style: 'width:100%;height:200px;margin:0;padding:0;overflow:hidden;',
                    region: 'center'
                });

                centerContainer.addChild(new Filter({
                    region: 'top',
                    grid: grid,
                    editableGrid: false,
                    filterFields: [{
                        'description': nls.description
                    }]
                }));
                centerContainer.addChild(gridToolbar);
                centerContainer.addChild(grid);

                this.addChild(centerContainer);
            },
            getRemarksGridLayout: function() {
                var formatter  = new Formatter;
                return [{
                    name: "No",
                    field: "id",
                    width: '30px',
                    styles: 'text-align: center;',
                    formatter: formatter.rowCountCellFormatter
                },{
                    name: nls.description,
                    field: "description",
                    width: 'auto'
                },{
                    name: nls.action,
                    field: "action",
                    width: '100px',
                    styles: 'text-align: center;',
                    formatter: function(cellValue, rowIdx, cell) {
                        var fieldName, item, linkName, val;
                        item = this.grid.getItem(rowIdx);
                        val = item.id;
                        fieldName = cell.field;
                        if (val > 0) {
                            linkName = item.selected[0] ? nls.selected : nls.select;
                            val = "<a href=\"javascript:void(0);\">" + linkName + "</a>";
                        } else {
                            val = "&nbsp;";
                        }
                        return val;
                    }
                }];
            }
        });

        return declare('buildspace.apps.RequestForQuotation.ItemList.RFQItemRemarkDialog', dijit.Dialog, {
            style: "padding:0px;margin:0px;width:750px;height:420px;",
            item: null,
            rfqId: -1,
            data: null,
            rfqItemGridStore: null,
            buildRendering: function() {
                var content = this.createContent();
                this.content = content;
                content.startup();

                return this.inherited(arguments);
            },
            postCreate: function() {
                domStyle.set(this.containerNode, {
                    padding: "0px",
                    margin: "0px"
                });
                this.closeButtonNode.style.display = "none";
                return this.inherited(arguments);
            },
            createContent: function() {
                return new RFQItemRemarkFormContainer({
                    item: this.item,
                    rfqId: this.rfqId,
                    dialogContainer: this,
                    formInfo: this.data.rfqItemRemarkForm,
                    _csrf_token: this.data.rfqItemRemarkForm._csrf_token,
                    rfqItemGridStore: this.rfqItemGridStore
                });
            },
            _onKey: function(e) {
                var key = e.keyCode;
                if (key === keys.ESCAPE) {
                    return dojo.stopEvent(e);
                }
            },
            onHide: function() {
                return this.destroyRecursive();
            }
        });
    });

}).call(this);
