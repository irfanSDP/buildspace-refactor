// Generated by CoffeeScript 1.9.0
(function() {
    define('buildspace/apps/RequestForQuotation/ItemList/ItemListContainer', ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-attr", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Selector", "dojox/grid/enhanced/plugins/Rearrange", "buildspace/widget/grid/plugins/FormulatedColumn", "dojo/_base/event", "dojo/keys", "dojo/dom-style", "dijit/focus", "dojo/_base/html", "dojo/request/xhr", "dijit/Toolbar", "dijit/form/Button", "dijit/PopupMenuItem", 'dojo/request', 'dijit/layout/BorderContainer', "buildspace/widget/grid/cells/Textarea", 'buildspace/widget/grid/cells/Formatter', 'buildspace/widget/grid/cells/FormulaTextBox', './ProjectResourceDialog', './ResourceLibraryDialog', './RFQItemRemarkDialog', 'buildspace/widget/grid/Filter', 'dojo/i18n!../../../nls/RequestForQuotation'], function(declare, lang, array, domAttr, Menu, Selector, Rearrange, FormulatedColumn, evt, keys, domStyle, focusUtil, html, xhr, Toolbar, Button, PopupMenuItem, request, BorderContainer, Textarea, Formatter, FormulaTextBox, ProjectResourceDialog, ResourceLibraryDialog, RFQItemRemarkDialog, Filter, nls) {
        var ItemListContainer, ItemListGrid;
        ItemListGrid = declare("buildspace.apps.RequestForQuotation.ItemList.ItemListGrid", dojox.grid.EnhancedGrid, {
            style: "border-top:none;",
            rowSelector: "0px",
            region: 'center',
            rfq: null,
            constructor: function(args) {
                this.rearranger = Rearrange(this, {});
                return this.formulatedColumn = FormulatedColumn(this, {});
            },
            canSort: function(inSortInfo) {
                return false;
            },
            noDataMessage: nls.noRFQItemAvailableInGrid,
            postCreate: function() {
                this.inherited(arguments);
                return this.on('RowClick', function(e) {
                    var item = this.getItem(e.rowIndex);
                    if (item && item.id[0] > 0) {
                        return this.disableToolbarButtons(false);
                    } else {
                        return this.disableToolbarButtons(true);
                    }
                });
            },
            canEdit: function(inCell, inRowIndex) {
                var field, item, self;
                self = this;
                if (inCell !== void 0) {
                    item = this.getItem(inRowIndex);
                    field = inCell.field;
                    if (item.id[0] > 0) {
                        if (item.type[0] === buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER || item.type[0] === buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER_N) {
                            window.setTimeout(function() {
                                self.edit.cancel();
                                return self.focus.setFocusIndex(inRowIndex, inCell.index);
                            }, 10);
                            return;
                        }
                    } else {
                        window.setTimeout(function() {
                            self.edit.cancel();
                            return self.focus.setFocusIndex(inRowIndex, inCell.index);
                        }, 10);
                        return;
                    }
                }
                return this._canEdit;
            },
            onRowDblClick: function(e) {
                var colField, item, pb, rfqItemGridStore, self;
                self = this;
                item = this.getItem(e.rowIndex);
                colField = e.cell.field;
                rfqItemGridStore = this.store;
                if (item && item.rfqItemId && item.rfqItemId[0] > 0 && colField === 'remarks') {
                    pb = buildspace.dialog.indeterminateProgressBar({
                        title: nls.pleaseWait + "..."
                    });
                    pb.show();
                    return request.post("requestForQuotation/getRFQItemRemarkInformation", {
                        query: {
                            rfqItemId: item.rfqItemId[0],
                            rfqItemRemarkId: item.rfqItemRemarkId[0]
                        },
                        handleAs: 'json'
                    }).then(function(response) {
                        var dialog = new RFQItemRemarkDialog({
                            title: "" + nls.itemRemarkDialogTitle,
                            item: item,
                            rfqId: self.rfqId,
                            data: response,
                            rfqItemGridStore: rfqItemGridStore
                        });
                        dialog.show();
                        return pb.hide();
                    }, function(error) {
                        return pb.hide();
                    });
                } else {
                    return this.inherited(arguments);
                }
            },
            doApplyCellEdit: function(val, rowIdx, inAttrName) {
                var item, params, pb, self;
                self = this;
                item = this.getItem(rowIdx);
                if (val !== item[inAttrName][0]) {
                    params = {
                        rfqId: self.rfqId,
                        rfqItemId: item.rfqItemId,
                        val: val,
                        _csrf_token: item._csrf_token ? item._csrf_token : null
                    };
                    pb = buildspace.dialog.indeterminateProgressBar({
                        title: nls.savingData + '. ' + nls.pleaseWait + '...'
                    });
                    pb.show();
                    return dojo.xhrPost({
                        url: 'requestForQuotation/updateRFQItemQuantity',
                        content: params,
                        handleAs: 'json',
                        load: function(resp) {
                            var cell, data, _i, _len, _ref;
                            if (resp.success) {
                                _ref = resp.items;
                                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                    data = _ref[_i];
                                    self.updateStore(item, data);
                                }
                            }
                            cell = self.getCellByField(inAttrName);
                            window.setTimeout(function() {
                                return self.focus.setFocusIndex(rowIdx, cell.index);
                            }, 10);
                            return pb.hide();
                        },
                        error: function(error) {
                            return pb.hide();
                        }
                    });
                } else {
                    return self.inherited(arguments);
                }
            },
            updateStore: function(item, data) {
                var property, store, _results;
                store = this.store;
                _results = [];
                for (property in data) {
                    if (item.hasOwnProperty(property) && property !== store._getIdentifierAttribute()) {
                        _results.push(store.setValue(item, property, data[property]));
                    } else {
                        _results.push(void 0);
                    }
                }
                return _results;
            },
            deleteRow: function(rowIndex) {
                var item, msg, pb, self, store, title, xhrArgs;
                self = this;
                item = this.getItem(rowIndex);
                store = self.store;
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.deleting + '. ' + nls.pleaseWait + '...'
                });
                focusUtil.curNode.blur();
                focusUtil.curNode = null;
                pb.show();

                xhrArgs = {
                    url: 'requestForQuotation/deleteRFQItems',
                    content: {
                        rfqId: self.rfqId,
                        resourceItemId: item.id,
                        _csrf_token: item._csrf_token
                    },
                    handleAs: 'json',
                    load: function(data) {
                        var affectedNodesList, _i, _len;
                        if (data.success) {
                            store = self.store;
                            if (data.affected_nodes !== void 0) {
                                affectedNodesList = data.affected_nodes;
                                for (_i = 0, _len = affectedNodesList.length; _i < _len; _i++) {
                                    data = affectedNodesList[_i];
                                    store.fetchItemByIdentity({
                                        'identity': data.id,
                                        onItem: function(itm) {
                                            if (itm) {
                                                store.deleteItem(itm);
                                                return store.save();
                                            }
                                        }
                                    });
                                }
                            }
                            pb.hide();
                            self.selection.clear();
                            return window.setTimeout(function() {
                                return self.focus.setFocusIndex(rowIndex, 0);
                            }, 10);
                        }
                    },
                    error: function(error) {
                        self.selection.clear();
                        return pb.hide();
                    }
                };

                if (item.type[0] === buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER || item.type[0] === buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER_N) {
                    title = nls.deleteHeadDialogBoxTitle;
                    msg = nls.deleteHeadDialogBoxMsg;
                } else {
                    title = nls.deleteItemDialogBoxTitle;
                    msg = nls.deleteItemDialogBoxMsg;
                }

                return new buildspace.dialog.confirm(title, msg, 80, 320, function() {
                    return dojo.xhrPost(xhrArgs);
                }, function() {
                    return pb.hide();
                });
            },
            disableToolbarButtons: function(isDisable, buttonsToEnable) {
                var deleteRowBtn = dijit.byId("deleteItemListFromRequestForQuotation");

                if(deleteRowBtn)
                    deleteRowBtn.set('disabled', isDisable);
            },
            refreshGrid: function() {
                this.store.save();
                this.store.close();
                return this.setStore(this.store);
            }
        });

        return ItemListContainer = declare("buildspace.apps.RequestForQuotation.ItemList.ItemListContainer", BorderContainer, {
            rfq: null,
            style: 'height:100%;width:100%;padding:0;margin:0;',
            gutters: false,
            postCreate: function() {
                var filter, grid, gridContainer, self, stackContainer, store, toolbar;
                this.inherited(arguments);
                self = this;
                stackContainer = dijit.byId('RequestForQuotationItemListMaintenance-stackContainer');
                if (stackContainer) {
                    dijit.byId('RequestForQuotationItemListMaintenance-stackContainer').destroyRecursive();
                }
                stackContainer = self.stackContainer = new dijit.layout.StackContainer({
                    style: 'width:100%;height:100%;',
                    region: "center",
                    id: 'RequestForQuotationItemListMaintenance-stackContainer'
                });
                store = new dojo.data.ItemFileWriteStore({
                    url: "requestForQuotation/getRFQItemListing/rfqId/" + this.rfq.id,
                    clearOnClose: true,
                    urlPreventCache: true
                });
                grid = new ItemListGrid({
                    structure: self.getGridLayout(),
                    store: store,
                    rfqId: this.rfq.id,
                    escapeHTMLInData: false
                });
                toolbar = new Toolbar({
                    region: 'top',
                    style: "outline:none!important;padding:2px;overflow:hidden;border-bottom:none;"
                });

                if (this.rfq.type_id[0] === parseInt(buildspace.constants.RFQ_TYPE_PROJECT)) {
                    toolbar.addChild(new Button({
                        label: nls.rfqCopyFromProjectResource,
                        iconClass: "icon-16-container icon-16-import",
                        onClick: function() {
                            var dialog = new ProjectResourceDialog({
                                title: nls.rfqCopyFromProjectResource,
                                projectId: self.rfq.project_id[0],
                                rfqId: self.rfq.id[0],
                                itemListGrid: grid
                            });
                            return dialog.show();
                        }
                    }));
                    toolbar.addChild(new dijit.ToolbarSeparator);
                }
                toolbar.addChild(new Button({
                    label: nls.rfqCopyFromResourceLibrary,
                    iconClass: "icon-16-container icon-16-import",
                    onClick: function() {
                        var dialog = new ResourceLibraryDialog({
                            title: nls.rfqCopyFromResourceLibrary,
                            rfqId: self.rfq.id[0],
                            itemListGrid: grid
                        });
                        return dialog.show();
                    }
                }));
                toolbar.addChild(new dijit.ToolbarSeparator);
                toolbar.addChild(new Button({
                    label: nls["delete"],
                    id: 'deleteItemListFromRequestForQuotation',
                    iconClass: "icon-16-container icon-16-delete",
                    disabled: true,
                    onClick: function() {
                        return grid.deleteRow(grid.selection.selectedIndex);
                    }
                }));

                filter = new Filter({
                    region: 'top',
                    grid: grid,
                    editableGrid: false,
                    filterFields: [{
                        'description': nls.description
                    },{
                        'quantity': nls.quantity
                    },{
                        'uom': nls.unit
                    },{
                        'remarks': nls.remarks
                    }]
                });

                this.addChild(filter);
                this.addChild(toolbar);

                return this.addChild(grid);
            },
            getGridLayout: function() {
                var formatter = new Formatter;
                return [{
                    name: "No",
                    field: "id",
                    width: '30px',
                    styles: 'text-align: center;',
                    formatter: formatter.rowCountCellFormatter
                },{
                    name: nls.description,
                    field: "description",
                    width: 'auto',
                    formatter: formatter.treeCellFormatter
                },{
                    name: nls.quantity,
                    field: "quantity",
                    width: '90px',
                    styles: 'text-align: right;',
                    cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
                    editable: true,
                    formatter: formatter.rfqQuantityCellFormatter
                },{
                    name: nls.unit,
                    field: "uom",
                    width: '70px',
                    styles: 'text-align: center;',
                    formatter: formatter.rfqUnitCellFormatter
                },{
                    name: nls.remarks,
                    field: "remarks",
                    width: '280px',
                    formatter: formatter.rfqRemarkCellFormatter
                }];
            }
        });
    });

}).call(this);
