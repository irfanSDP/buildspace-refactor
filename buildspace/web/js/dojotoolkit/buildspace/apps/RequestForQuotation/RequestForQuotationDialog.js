// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/RequestForQuotation/RequestForQuotationDialog', ['dojo/_base/declare', 'dojo/_base/lang', "dojo/_base/connect", 'dojo/on', "dojo/request", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dojo/html", "dojo/dom", "dojo/dom-attr", 'dojo/keys', "dojo/dom-style", 'dijit/layout/TabContainer', 'dijit/layout/ContentPane', 'dijit/layout/BorderContainer', 'dijit/Toolbar', 'dijit/form/FilteringSelect', 'dijit/form/Select', 'dijit/form/Button', "dojo/store/Memory", "dojox/form/Manager", "dojo/text!./templates/requestForQuotationForm.html", './AssignProjectGrid', 'dojo/i18n!../../nls/RequestForQuotation'], function(declare, lang, connect, bind, request, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, html, dom, domAttr, keys, domStyle, TabContainer, ContentPane, BorderContainer, Toolbar, FilteringSelect, Select, Button, Memory, Manager, template, AssignProjectGrid, nls) {
    var Dialog, RequestForQuotationForm;
    RequestForQuotationForm = declare("buildspace.apps.RequestForQuotation.RequestForQuotationForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
      baseClass: "buildspace-form",
      rfqId: -1,
      newRFQId: -1,
      stateValue: -1,
      templateString: template,
      region: 'center',
      style: "overflow: auto;",
      formInfo: null,
      dialogContainer: null,
      requestForQuotationGrid: null,
      rfqTypeSelections: null,
      rfqStatusSelections: null,
      currentRFQNo: null,
      nls: nls,
      postCreate: function() {
        var self;
        this.inherited(arguments);
        self = this;
        bind(this.assignProjectGridAction, 'click', function(e) {
          var dialog;
          dialog = new AssignProjectGrid({
            rfqId: self.newRFQId,
            rfqForm: self
          });
          return dialog.show();
        });
        bind(this.rfqPrefix, 'change', function(e) {
          return self.updateFormView();
        });
        this.createDropdown();
        return this.setRequiredFields();
      },
      startup: function() {
        this.inherited(arguments);
        this["rfqForm-" + this.rfqId].setFormValues(this.formInfo);
        return this.toggleProjectInformationContainer();
      },
      createDropdown: function() {
        var countrySelectStore, rfqTypeSelectStore, self, stateSelectStore;
        self = this;
        rfqTypeSelectStore = new Select({
          name: 'rfq[type]',
          store: new Memory({
            idProperty: "id",
            data: self.rfqTypeSelections
          }),
          labelAttr: 'name',
          style: "width: 180px;padding:2px!important;",
          selected: self.formInfo['rfq[type]'],
          required: true,
          onChange: function(type) {
            var projectStructureIdInput, saveButton;
            self.toggleProjectInformationContainer(type);
            self.setRequiredFields(type);
            projectStructureIdInput = domAttr.get(self.projectStructureIdInput, 'value');
            self.currentRFQNo = null;
            self.countrySelect.set('value', 0);
            self.stateValue = 0;
            if (type === buildspace.constants.RFQ_TYPE_RESOURCE) {
              return self.updateResourceRFQNo();
            } else if (!(projectStructureIdInput != null ? projectStructureIdInput.length : void 0)) {
              saveButton = dijit.byId('rfq-form-button-save');
              return saveButton.set('disabled', true);
            }
          }
        }).placeAt(self.typeSelectDivNode);
        countrySelectStore = new dojo.data.ItemFileReadStore({
          url: "projectBuilder/getCountry"
        });
        this.stateSelectStore = stateSelectStore = new dojo.data.ItemFileReadStore({
          url: "projectBuilder/getStateByCountry/regionId/" + self.formInfo["rfq[region_id]"]
        });
        this.countrySelect = new FilteringSelect({
          name: "rfq[region_id]",
          store: countrySelectStore,
          style: "width: 180px;padding:2px!important;",
          searchAttr: "name",
          value: self.formInfo["rfq[region_id]"],
          required: true,
          onChange: function(country) {
            return self.updateStateSelectStore(country);
          }
        }).placeAt(self.countrySelectDivNode);
        return this.stateSelect = new FilteringSelect({
          name: "rfq[sub_region_id]",
          store: stateSelectStore,
          style: "width: 180px;padding:2px!important;",
          searchAttr: "name",
          readOnly: self.formInfo["rfq[sub_region_id]"] > 0 ? false : true,
          value: self.formInfo["rfq[sub_region_id]"],
          required: true
        }).placeAt(self.stateSelectDivNode);
      },
      updateStateSelectStore: function(countryId) {
        var self;
        if (countryId == null) {
          countryId = 0;
        }
        self = this;
        if (!countryId) {
          countryId = 0;
        }
        this.stateSelectStore = new dojo.data.ItemFileReadStore({
          url: "projectBuilder/getStateByCountry/regionId/" + countryId,
          clearOnClose: true
        });
        this.stateSelect.store.close();
        this.stateSelect.set('store', this.stateSelectStore);
        if (this.stateValue) {
          return this.stateSelect.set('value', this.stateValue);
        }
      },
      clearInputErrorMsgs: function() {
        var errorBlock, i, presetErrorBlocks, self, _results;
        self = this;
        presetErrorBlocks = {
          name: null,
          registration_no: null,
          about: null,
          contact_person_name: null,
          contact_person_email: null,
          contact_person_direct_line: null,
          contact_person_mobile: null,
          phone_number: null,
          fax_number: null,
          address: null,
          postcode: null,
          website: null
        };
        _results = [];
        for (i in presetErrorBlocks) {
          errorBlock = self["error-" + i];
          errorBlock.innerHTML = presetErrorBlocks[i];
          _results.push(domStyle.set(errorBlock, "display", "none"));
        }
        return _results;
      },
      save: function() {
        var form, formValues, pb, self;
        self = this;
        form = this["rfqForm-" + this.rfqId];
        if (!form.validate()) {
          return false;
        }
        formValues = dojo.formToObject(this["rfqForm-" + this.rfqId].id);
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        if (self.newRFQId > 0) {
          lang.mixin(formValues, {
            rfqId: self.newRFQId
          });
        } else {
          lang.mixin(formValues, {
            rfqId: self.rfqId
          });
        }
        pb.show();
        return request.post('requestForQuotation/updateRFQInformation', {
          data: formValues,
          handleAs: 'json'
        }).then(function(response) {
          var errorBlock, i;
          if (response.success && response.id > 0) {
            self.newRFQId = response.id;
            self.requestForQuotationGrid.refreshGrid();
            self.dialogContainer.hide();
          } else {
            for (i in response.errorMsgs) {
              if (i !== 'username') {
                errorBlock = self["error-" + i];
                errorBlock.innerHTML = response.errorMsgs[i];
                domStyle.set(errorBlock, "display", "block");
              }
            }
          }
          return pb.hide();
        }, function(error) {
          return pb.hide();
        });
      },
      toggleProjectInformationContainer: function(typeId) {
        if (typeId == null) {
          typeId = 1;
        }
        if (typeId === buildspace.constants.RFQ_TYPE_PROJECT) {
          domStyle.set(this.projectNameContainer, 'display', 'table-row');
          return domStyle.set(this.projectSiteAddressContainer, 'display', 'table-row');
        } else {
          domStyle.set(this.projectNameContainer, 'display', 'none');
          return domStyle.set(this.projectSiteAddressContainer, 'display', 'none');
        }
      },
      setRequiredFields: function(typeId) {
        var countrySelect, rfqPrefix, stateSelect;
        if (typeId == null) {
          typeId = 1;
        }
        rfqPrefix = this.rfqPrefix;
        countrySelect = this.countrySelect;
        stateSelect = this.stateSelect;
        if (typeId === buildspace.constants.RFQ_TYPE_PROJECT) {
          rfqPrefix.set('required', true);
          countrySelect.set('required', false);
          stateSelect.set('required', false);
          countrySelect.set('readOnly', true);
          return stateSelect.set('readOnly', true);
        } else {
          rfqPrefix.set('required', false);
          countrySelect.set('required', true);
          stateSelect.set('required', true);
          countrySelect.set('readOnly', false);
          return stateSelect.set('readOnly', false);
        }
      },
      updateResourceRFQNo: function() {
        var self;
        self = this;
        return request.get('requestForQuotation/getResourceRFQNo', {
          handleAs: 'json'
        }).then(function(response) {
          var saveButton;
          self.currentRFQNo = response.rfqCount;
          saveButton = dijit.byId('rfq-form-button-save');
          saveButton.set('disabled', false);
          self.assignProjectTitle.innerHTML = null;
          self.projectSiteAddress.innerHTML = null;
          domAttr.set(self.projectStructureIdInput, 'value', null);
          domAttr.set(self.rfqCountInput, 'value', response.rfqCount);
          self.rfqPrefix.set('value', null);
          self.rfqPrefix.set('readOnly', false);
          return self.updateFormView();
        }, function(error) {
          return console.log(error);
        });
      },
      updateFormView: function() {
        var rfqNo, rfqPrefixValue;
        rfqPrefixValue = domAttr.get(this.rfqPrefix, 'value');
        if (this.currentRFQNo !== null) {
          if (rfqPrefixValue) {
            rfqNo = "" + rfqPrefixValue + this.currentRFQNo;
          } else {
            rfqNo = this.currentRFQNo;
          }
        } else {
          if ((typeof typeId !== "undefined" && typeId !== null) && typeId === buildspace.constants.RFQ_TYPE_RESOURCE) {
            rfqNo = this.currentRFQNo;
          } else {
            rfqNo = null;
          }
        }
        return this.rfqNoContainer.innerHTML = rfqNo;
      }
    });
    return Dialog = declare('buildspace.apps.RequestForQuotation.RequestForQuotationDialog', dijit.Dialog, {
      rfqId: -1,
      style: "padding:0px;margin:0px;width:560px;height:320px;",
      billId: null,
      data: null,
      requestForQuotationGrid: null,
      buildRendering: function() {
        var content;
        content = this.createContent();
        this.content = content;
        content.startup();
        return this.inherited(arguments);
      },
      postCreate: function() {
        domStyle.set(this.containerNode, {
          padding: "0px",
          margin: "0px"
        });
        this.closeButtonNode.style.display = "none";
        return this.inherited(arguments);
      },
      createContent: function() {
        var borderContainer, form, self, toolbar;
        self = this;
        form = new RequestForQuotationForm({
          rfqId: self.rfqId,
          dialogContainer: self,
          formInfo: self.data.requestForQuotationForm,
          rfqTypeSelections: self.data.rfqTypeSelections,
          rfqStatusSelections: self.data.rfqStatusSelections,
          requestForQuotationGrid: self.requestForQuotationGrid
        });
        toolbar = new Toolbar({
          region: 'top',
          style: "outline:none!important;padding:2px;overflow:hidden;"
        });
        toolbar.addChild(new Button({
          label: nls.save,
          iconClass: "icon-16-container icon-16-save",
          onClick: function() {
            return form.save();
          },
          id: 'rfq-form-button-save',
          disabled: true
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new Button({
          label: nls.close,
          iconClass: "icon-16-container icon-16-close",
          onClick: function() {
            return self.hide();
          }
        }));
        borderContainer = new BorderContainer({
          style: "width:560px;height:320px;padding:0;margin:0;",
          gutters: false
        });
        borderContainer.addChild(toolbar);
        borderContainer.addChild(form);
        return borderContainer;
      },
      _onKey: function(e) {
        var key;
        key = e.keyCode;
        if (key === keys.ESCAPE) {
          return dojo.stopEvent(e);
        }
      },
      onHide: function() {
        return this.destroyRecursive();
      }
    });
  });

}).call(this);
