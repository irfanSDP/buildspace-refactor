// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/RequestForQuotation/SupplierList/SupplierCompanyInformationDialog', ["dojo/_base/declare", 'dojo/_base/lang', "dojo/keys", "dojo/parser", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", 'dijit/Toolbar', 'dijit/form/Button', "dijit/layout/BorderContainer", "dijit/form/ValidationTextBox", "dijit/form/SimpleTextarea", "dijit/registry", "dojo/dom-style", "dojo/dom-form", "dojo/request", "dojox/validate/web", "dijit/form/Select", "dijit/form/FilteringSelect", "dojo/store/Memory", "dojox/form/Manager", "dojo/text!./templates/companyForm.html", 'dojo/i18n!../../../nls/CompanyDirectories'], function(declare, lang, keys, parser, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, Toolbar, Button, BorderContainer, ValidationTextBox, SimpleTextarea, registry, domStyle, domForm, request, web, Select, FilteringSelect, Memory, Manager, template, nls) {
    var Dialog, SupplierCompanyInformationForm;
    SupplierCompanyInformationForm = declare("buildspace.apps.RequestForQuotation.SupplierList.SupplierCompanyInformationForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
      baseClass: "buildspace-form",
      rfqId: -1,
      companyId: -1,
      newCompanyId: -1,
      templateString: template,
      region: 'center',
      style: "overflow: auto;",
      formInfo: null,
      businessTypeSelections: null,
      nls: nls,
      dialogContainer: null,
      supplierSelectionGridDialog: null,
      supplierListContainer: null,
      postCreate: function() {
        this.inherited(arguments);
        return this.createDropdown();
      },
      startup: function() {
        this.inherited(arguments);
        return this["companyForm-" + this.companyId].setFormValues(this.formInfo);
      },
      createDropdown: function() {
        var businessTypeSelectStore, countrySelectStore, self, stateSelectStore;
        self = this;
        businessTypeSelectStore = new Memory({
          idProperty: "id",
          data: self.businessTypeSelections
        });
        businessTypeSelectStore = new Select({
          name: 'company[company_business_type_id]',
          store: businessTypeSelectStore,
          labelAttr: 'name',
          maxHeight: -1,
          style: "width: 180px;padding:2px!important;",
          selected: self.formInfo['company[company_business_type_id]']
        }).placeAt(self.businessTypeSelection);
        countrySelectStore = new dojo.data.ItemFileReadStore({
          url: "projectBuilder/getCountry"
        });
        this.stateSelectStore = stateSelectStore = new dojo.data.ItemFileReadStore({
          url: "projectBuilder/getStateByCountry/regionId/" + self.formInfo["company[region_id]"]
        });
        this.countrySelect = new FilteringSelect({
          name: "company[region_id]",
          store: countrySelectStore,
          style: "width: 180px;padding:2px;",
          searchAttr: "name",
          value: self.formInfo["company[region_id]"],
          required: true,
          onChange: function(country) {
            if (country) {
              self.stateSelect.set('readOnly', false);
            } else {
              self.stateSelect.set('readOnly', true);
            }
            return self.updateStateSelectStore(country);
          }
        }).placeAt(self.countrySelectDivNode);
        return this.stateSelect = new FilteringSelect({
          name: "company[sub_region_id]",
          store: stateSelectStore,
          style: "width: 180px;padding:2px;",
          searchAttr: "name",
          readOnly: self.formInfo["company[sub_region_id]"] > 0 ? false : true,
          value: self.formInfo["company[sub_region_id]"],
          required: true
        }).placeAt(self.stateSelectDivNode);
      },
      updateStateSelectStore: function(countryId) {
        var self;
        if (countryId == null) {
          countryId = 0;
        }
        self = this;
        if (!countryId) {
          countryId = 0;
        }
        this.stateSelectStore = new dojo.data.ItemFileReadStore({
          url: "projectBuilder/getStateByCountry/regionId/" + countryId,
          clearOnClose: true
        });
        this.stateSelect.store.close();
        this.stateSelect.set('store', this.stateSelectStore);
        return this.stateSelect.set('value', '');
      },
      clearInputErrorMsgs: function() {
        var errorBlock, i, presetErrorBlocks, self, _results;
        self = this;
        presetErrorBlocks = {
          name: null,
          registration_no: null,
          about: null,
          contact_person_name: null,
          contact_person_email: null,
          contact_person_direct_line: null,
          contact_person_mobile: null,
          phone_number: null,
          fax_number: null,
          address: null,
          postcode: null,
          website: null
        };
        _results = [];
        for (i in presetErrorBlocks) {
          errorBlock = self["error-" + i];
          errorBlock.innerHTML = presetErrorBlocks[i];
          _results.push(domStyle.set(errorBlock, "display", "none"));
        }
        return _results;
      },
      save: function() {
        var form, formValues, pb, self;
        self = this;
        this.clearInputErrorMsgs();
        form = this["companyForm-" + this.companyId];
        if (!form.validate()) {
          return false;
        }
        formValues = dojo.formToObject(this["companyForm-" + this.companyId].id);
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        if (self.newCompanyId > 0) {
          lang.mixin(formValues, {
            companyId: self.newCompanyId
          });
        } else {
          lang.mixin(formValues, {
            companyId: self.companyId
          });
        }
        pb.show();
        return request.post("companyDirectories/updateCompanyInformation/rfqId/" + self.rfqId, {
          data: formValues,
          handleAs: 'json'
        }).then(function(response) {
          var errorBlock, i, _results;
          pb.hide();
          if (response.success && response.id > 0) {
            self.newCompanyId = response.id;
            if (self.companyId === -1) {
              self.supplierListContainer.grid.refreshGrid();
              self.dialogContainer.hide();
              self.supplierSelectionGridDialog.hide();
            }
            return self.dialogContainer.set('title', nls.edit + " (" + response.companyName + ")");
          } else {
            _results = [];
            for (i in response.errorMsgs) {
              if (i !== 'username') {
                errorBlock = self["error-" + i];
                errorBlock.innerHTML = response.errorMsgs[i];
                _results.push(domStyle.set(errorBlock, "display", "block"));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        }, function(error) {
          return pb.hide();
        });
      }
    });
    return Dialog = declare('buildspace.apps.CompanyDirectories.CompanyDirectoriesDialog', dijit.Dialog, {
      title: nls.add,
      style: "padding:0px;margin:0px;",
      rfqId: -1,
      companyId: -1,
      supplierSelectionGridDialog: null,
      supplierListContainer: null,
      formInfo: null,
      businessTypeSelections: null,
      buildRendering: function() {
        var content;
        content = this.createContent();
        this.content = content;
        content.startup();
        return this.inherited(arguments);
      },
      postCreate: function() {
        domStyle.set(this.containerNode, {
          padding: "0px",
          margin: "0px"
        });
        this.closeButtonNode.style.display = "none";
        return this.inherited(arguments);
      },
      createContent: function() {
        var borderContainer, form, self, toolbar;
        self = this;
        borderContainer = new BorderContainer({
          style: "width:650px;height:400px;padding:0;margin:0;",
          gutters: false
        });
        form = new SupplierCompanyInformationForm({
          rfqId: self.rfqId,
          companyId: this.companyId,
          formInfo: this.formInfo,
          dialogContainer: self,
          supplierSelectionGridDialog: this.supplierSelectionGridDialog,
          supplierListContainer: this.supplierListContainer,
          businessTypeSelections: this.businessTypeSelections
        });
        toolbar = new Toolbar({
          region: 'top',
          style: "outline:none!important;padding:2px;overflow:hidden;"
        });
        toolbar.addChild(new Button({
          label: nls.save,
          iconClass: "icon-16-container icon-16-save",
          onClick: function() {
            return form.save();
          }
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new dijit.form.Button({
          label: nls.close,
          iconClass: "icon-16-container icon-16-close",
          onClick: function() {
            return self.hide();
          }
        }));
        borderContainer.addChild(toolbar);
        borderContainer.addChild(form);
        return borderContainer;
      },
      _onKey: function(e) {
        var key;
        key = e.keyCode;
        if (key === keys.ESCAPE) {
          return dojo.stopEvent(e);
        }
      },
      onHide: function() {
        return this.destroyRecursive();
      }
    });
  });

}).call(this);
