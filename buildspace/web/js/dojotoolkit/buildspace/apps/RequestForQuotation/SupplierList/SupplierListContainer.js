// Generated by CoffeeScript 1.9.0
(function() {
    define('buildspace/apps/RequestForQuotation/SupplierList/SupplierListContainer', ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/aspect", "dojo/dom-attr", "buildspace/widget/grid/plugins/FormulatedColumn", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Selector", "dojox/grid/enhanced/plugins/Rearrange", "dojo/_base/event", "dojo/keys", "dojo/dom-style", "dijit/focus", "dojo/_base/html", "dojo/request/xhr", "dijit/Toolbar", "dijit/form/Button", 'dijit/form/DropDownButton', "dijit/DropDownMenu", "dijit/MenuItem", "dijit/PopupMenuItem", 'dojo/request', 'dijit/layout/BorderContainer', "buildspace/widget/grid/cells/Textarea", 'buildspace/widget/grid/cells/Formatter', 'buildspace/widget/grid/cells/FormulaTextBox', './SupplierSelectionGridDialog', './SupplierExcelExport', './SupplierRatesImportDialog', '../../CompanyDirectories/CompanyDirectoriesDialog', 'buildspace/widget/grid/Filter', 'dojo/i18n!../../../nls/RequestForQuotation'], function(declare, lang, array, aspect, domAttr, FormulatedColumn, Menu, Selector, Rearrange, evt, keys, domStyle, focusUtil, html, xhr, Toolbar, Button, DropDownButton, DropDownMenu, MenuItem, PopupMenuItem, request, BorderContainer, Textarea, Formatter, FormulaTextBox, SupplierSelectionGridDialog, SupplierExcelExport, SupplierRatesImportDialog, CompanyDirectoriesDialog, Filter, nls) {
        var SupplierItemRatesGrid, SupplierListGrid;
        SupplierItemRatesGrid = declare("buildspace.apps.RequestForQuotation.SupplierList.SupplierItemRatesGrid", dojox.grid.EnhancedGrid, {
            style: "border-top:none;",
            keepSelection: true,
            rowSelector: "0px",
            region: 'center',
            rfqId: -1,
            supplierId: -1,
            supplierListContainer: null,
            constructor: function(args) {
                this.rearranger = Rearrange(this, {});
                return this.formulatedColumn = FormulatedColumn(this, {});
            },
            canSort: function(inSortInfo) {
                return false;
            },
            canEdit: function(inCell, inRowIndex) {
                var field, item, self;
                self = this;
                if (inCell !== void 0) {
                    item = this.getItem(inRowIndex);
                    field = inCell.field;
                    if (item.id[0] > 0) {
                        if (item.type[0] === parseInt(buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER) || item.type[0] === parseInt(buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER_N)) {
                            window.setTimeout(function() {
                                self.edit.cancel();
                                return self.focus.setFocusIndex(inRowIndex, inCell.index);
                            }, 10);
                            return;
                        }
                    } else {
                        window.setTimeout(function() {
                            self.edit.cancel();
                            return self.focus.setFocusIndex(inRowIndex, inCell.index);
                        }, 10);
                        return;
                    }
                }
                return this._canEdit;
            },
            doApplyCellEdit: function(val, rowIdx, inAttrName) {
                var item, params, pb, rfqItemId, self, store, xhrArgs;
                self = this;
                item = this.getItem(rowIdx);
                rfqItemId = item.rfqItemId;
                store = self.store;
                if (val !== item[inAttrName][0]) {
                    params = {
                        rfqId: self.rfqId,
                        supplierId: self.supplierId,
                        rateId: item.rateId,
                        rfqItemId: rfqItemId,
                        val: val,
                        _csrf_token: item._csrf_token ? item._csrf_token : null
                    };
                    pb = buildspace.dialog.indeterminateProgressBar({
                        title: nls.savingData + '. ' + nls.pleaseWait + '...'
                    });
                    pb.show();
                    xhrArgs = {
                        url: 'requestForQuotation/updateRFQSupplierItemRate',
                        content: params,
                        handleAs: 'json',
                        load: function(resp) {
                            var cell, data, _i, _len, _ref;
                            if (resp.success) {
                                _ref = resp.items;
                                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                    data = _ref[_i];
                                    self.updateStore(item, data);
                                }
                            }
                            cell = self.getCellByField(inAttrName);
                            window.setTimeout(function() {
                                return self.focus.setFocusIndex(rowIdx, cell.index);
                            }, 10);
                            return pb.hide();
                        },
                        error: function(error) {
                            return pb.hide();
                        }
                    };
                    return dojo.xhrPost(xhrArgs);
                } else {
                    return self.inherited(arguments);
                }
            },
            updateStore: function(item, data) {
                var property, store, _results;
                store = this.store;
                _results = [];
                for (property in data) {
                    if (item.hasOwnProperty(property) && property !== store._getIdentifierAttribute()) {
                        _results.push(store.setValue(item, property, data[property]));
                    } else {
                        _results.push(void 0);
                    }
                }
                return _results;
            },
            updateSupplierStatus: function(opt, libraryId, csrfToken) {
                var pb, self, status;
                self = this;
                switch (opt) {
                    case 'pending':
                        status = 1;
                        break;
                    case 'sent':
                        status = 2;
                        break;
                    case 'closed':
                        status = 4;
                }
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + "..."
                });
                pb.show();
                return request.post('requestForQuotation/updateSupplierStatus', {
                    data: {
                        rfqId: self.rfqId,
                        supplierId: self.supplierId,
                        status: status,
                        _csrf_token: csrfToken
                    },
                    handleAs: 'json'
                }).then(function(response) {
                    var statusSelector;
                    pb.hide();
                    if (response.success && response.id > 0) {
                        statusSelector = dijit.byId("updateSupplierStatusLabel-" + libraryId);
                        if (statusSelector) {
                            statusSelector.set('label', nls.currentSupplierStatus + ": <strong style=\"color: blue;\">" + response.status + "</strong>");
                        }
                        return self.supplierListContainer.grid.refreshGrid();
                    } else {
                        return console.log('Error');
                    }
                }, function(error) {
                    return pb.hide();
                });
            }
        });

        SupplierListGrid = declare("buildspace.apps.RequestForQuotation.SupplierList.SupplierListGrid", dojox.grid.EnhancedGrid, {
            style: "border-top:none;",
            keepSelection: true,
            rowSelector: "0px",
            region: 'center',
            supplierListContainer: null,
            rfq: null,
            constructor: function(args) {
                return this.rearranger = Rearrange(this, {});
            },
            canSort: function(inSortInfo) {
                return false;
            },
            noDataMessage: nls.noSupplierAvailableInGrid,
            postCreate: function() {
                this.inherited(arguments);
                this.on('RowClick', function(e) {
                    var item;
                    item = this.getItem(e.rowIndex);
                    if (item && item.id[0] > 0) {
                        return this.disableToolbarButtons(false);
                    } else {
                        return this.disableToolbarButtons(true);
                    }
                });
                return this.on('RowContextMenu', function(e) {
                    var item, self;
                    self = this;
                    self.selection.clear();
                    item = self.getItem(e.rowIndex);
                    self.selection.setSelected(e.rowIndex, true);
                    self.contextMenu(e);
                    if (item) {
                        return this.disableToolbarButtons(false);
                    } else {
                        return this.disableToolbarButtons(true);
                    }
                });
            },
            onRowDblClick: function(e) {
                var pb, self, supplier;
                self = this;
                supplier = this.getItem(e.rowIndex);
                if (supplier.id[0] > 0) {
                    pb = new buildspace.dialog.indeterminateProgressBar({
                        title: nls.processing + "..."
                    });
                    pb.show();
                    return request.get('requestForQuotation/getRFQSupplierItemRates', {
                        query: {
                            rfqId: self.rfq.id[0],
                            supplierId: supplier.id
                        },
                        handleAs: 'json'
                    }).then(function(response) {
                        pb.hide();
                        return self.createRFQItemRatesViewForSupplier(supplier, response);
                    }, function(error) {
                        return pb.hide();
                    });
                }
            },
            createRFQItemRatesViewForSupplier: function(supplier, dataStore) {
                var borderContainer, grid, menu, self, sortOptions, store, toolbar;
                self = this;
                sortOptions = ['pending', 'sent', 'closed'];
                menu = new DropDownMenu({
                    style: "display: none;"
                });
                store = new dojo.data.ItemFileWriteStore({
                    data: dataStore,
                    clearOnClose: true,
                    urlPreventCache: true
                });
                grid = new SupplierItemRatesGrid({
                    rfqId: self.rfq.id,
                    supplierId: supplier.id,
                    store: store,
                    structure: self.getRFQItemRatesViewGridLayout(),
                    supplierListContainer: self.supplierListContainer
                });
                toolbar = new Toolbar({
                    region: 'top',
                    style: "outline:none!important;padding:2px;overflow:hidden;border-bottom:none;"
                });
                toolbar.addChild(new Button({
                    label: nls.rfqViewSupplierInformation,
                    iconClass: "icon-16-container icon-16-zoom_in",
                    onClick: function() {
                        var pb;
                        pb = new buildspace.dialog.indeterminateProgressBar({
                            title: nls.processing + "..."
                        });
                        pb.show();
                        return request.get('companyDirectories/getCompanyInformation', {
                            query: {
                                companyId: supplier.supplier_id[0]
                            },
                            handleAs: 'json'
                        }).then(function(response) {
                            var dialog;
                            pb.hide();
                            dialog = new CompanyDirectoriesDialog({
                                title: nls.supplierInformation + " (" + supplier.supplier_name + ")",
                                companyId: supplier.supplier_id[0],
                                data: response,
                                companyDirectoriesGrid: self,
                                editable: false
                            });
                            return dialog.show();
                        }, function(error) {
                            return pb.hide();
                        });
                    }
                }));
                toolbar.addChild(new dijit.ToolbarSeparator());
                dojo.forEach(sortOptions, function(opt) {
                    var menuItem;
                    menuItem = new MenuItem({
                        label: nls[opt],
                        onClick: function() {
                            return grid.updateSupplierStatus(opt, supplier.id, supplier._csrf_token);
                        }
                    });
                    return menu.addChild(menuItem);
                });
                toolbar.addChild(new DropDownButton({
                    id: 'updateSupplierStatusLabel-' + supplier.id,
                    label: nls.currentSupplierStatus + ": <strong style=\"color: blue;\">" + supplier.status[0] + "</strong>",
                    name: "updateSupplierStatus",
                    dropDown: menu
                }));
                borderContainer = new dijit.layout.BorderContainer({
                    style: "padding:0px;width:100%;height:100%;",
                    baseClass: "form",
                    gutters: false,
                    region: "center"
                });
                borderContainer.addChild(new Filter({
                    region: 'top',
                    grid: grid,
                    editableGrid: false,
                    filterFields: [{
                        'description': nls.description
                    },{
                        'quantity': nls.quantity
                    },{
                        'uom': nls.unit
                    },{
                        'rate': nls.rate
                    },{
                        'remarks': nls.remarks
                    }]
                }));
                borderContainer.addChild(toolbar);
                borderContainer.addChild(new dijit.layout.ContentPane({
                    style: 'width:100%',
                    content: grid,
                    region: 'center'
                }));
                return self.supplierListContainer.makePane(supplier.supplier_name, borderContainer);
            },
            exportDialog: function(rowIndex) {
                var item, pb, self;
                self = this;
                item = this.getItem(rowIndex);
                pb = new buildspace.dialog.indeterminateProgressBar({
                    title: nls.processing + "..."
                });
                pb.show();
                return request.get("requestForQuotationExportFile/getExcelFileNameFormToken", {
                    query: {
                        rfqId: self.rfq.id[0],
                        rfqSupplierId: item.id
                    },
                    handleAs: 'json'
                }).then(function(response) {
                    var dialog = new SupplierExcelExport({
                        rfqId: self.rfq.id[0],
                        rfqSupplierId: item.id,
                        rfqSupplierName: item.supplier_name[0],
                        formInfo: response
                    });
                    dialog.show();
                    return pb.hide();
                }, function(error) {
                    return pb.hide();
                });
            },
            importDialog: function(rowIndex) {
                var item, pb, self;
                self = this;
                item = this.getItem(rowIndex);
                pb = new buildspace.dialog.indeterminateProgressBar({
                    title: nls.processing + "..."
                });
                pb.show();
                return request.get("requestForQuotationExportFile/getImportExcelToken", {
                    query: {
                        rfqId: self.rfq.id[0],
                        rfqSupplierId: item.id
                    },
                    handleAs: 'json'
                }).then(function(response) {
                    var dialog = new SupplierRatesImportDialog({
                        rfqId: self.rfq.id[0],
                        rfqSupplierId: item.id,
                        rfqSupplierName: item.supplier_name[0],
                        formInfo: response,
                        supplierListGrid: self
                    });
                    dialog.show();
                    return pb.hide();
                }, function(error) {
                    return pb.hide();
                });
            },
            deleteRow: function(rowIndex) {
                var item, pb, self, xhrArgs;
                self = this;
                item = this.getItem(rowIndex);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.deleting + '. ' + nls.pleaseWait + '...'
                });
                pb.show();
                xhrArgs = {
                    url: 'requestForQuotation/deleteSupplierInfo',
                    content: {
                        rfqId: self.rfq.id,
                        supplierId: item.id,
                        _csrf_token: item._csrf_token
                    },
                    handleAs: 'json',
                    load: function(data) {
                        pb.hide();
                        if (data.success) {
                            return self.refreshGrid();
                        } else {
                            return console.log(data);
                        }
                    },
                    error: function(error) {
                        return pb.hide();
                    }
                };
                return new buildspace.dialog.confirm(nls.deleteSupplierTitle, nls.deleteSupplierMsg, 80, 320, function() {
                    return dojo.xhrPost(xhrArgs);
                }, function() {
                    return pb.hide();
                });
            },
            refreshGrid: function() {
                this.store.save();
                this.store.close();
                return this.setStore(this.store);
            },
            contextMenu: function(e) {
                var info, item, rowCtxMenu;
                rowCtxMenu = this.rowCtxMenu = new dijit.Menu();
                this.contextMenuItems(e);
                info = {
                    target: e.target
                };
                item = this.getItem(e.rowIndex);
                if (rowCtxMenu && item && (this.selection.isSelected(e.rowIndex) || e.rowNode && html.hasClass(e.rowNode, "dojoxGridRowbar"))) {
                    rowCtxMenu._openMyself(info);
                    evt.stop(e);
                }
            },
            contextMenuItems: function(e) {
                var item, self;
                self = this;
                item = this.getItem(e.rowIndex);
                if (item.id > 0) {
                    self.rowCtxMenu.addChild(new dijit.MenuItem({
                        label: nls.addSupplierToRFQ,
                        iconClass: "icon-16-container icon-16-add",
                        onClick: function() {
                            return self.supplierListContainer.generateAddSupplierDialog();
                        }
                    }));
                    return self.rowCtxMenu.addChild(new dijit.MenuItem({
                        label: nls["delete"],
                        iconClass: "icon-16-container icon-16-delete",
                        disabled: e.rowIndex > -1 ? false : true,
                        onClick: function() {
                            return self.deleteRow(e.rowIndex);
                        }
                    }));
                }
            },
            disableToolbarButtons: function(isDisable, buttonsToEnable) {
                var deleteRowBtn, exportBtn, importBtn;
                deleteRowBtn = dijit.byId("deleteSupplierFromRequestForQuotation");
                exportBtn = dijit.byId("rfqExportExcelBasedOnSupplier");
                importBtn = dijit.byId("rfqImportExcelBasedOnSupplier");
                deleteRowBtn.set('disabled', isDisable);
                exportBtn.set('disabled', isDisable);
                return importBtn.set('disabled', isDisable);
            },
            getRFQItemRatesViewGridLayout: function() {
                var formatter = new Formatter;
                return [{
                    name: "No",
                    field: "id",
                    width: '30px',
                    styles: 'text-align: center;',
                    formatter: formatter.rowCountCellFormatter
                },{
                    name: nls.description,
                    field: "description",
                    width: 'auto',
                    formatter: formatter.treeCellFormatter
                },{
                    name: nls.quantity,
                    field: "quantity",
                    width: '90px',
                    styles: 'text-align: right;',
                    cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
                    formatter: formatter.rfqQuantityCellFormatter
                },{
                    name: nls.unit,
                    field: "uom",
                    width: '70px',
                    styles: 'text-align: center;',
                    formatter: formatter.rfqUnitCellFormatter
                },{
                    name: nls.rate,
                    field: "rate",
                    width: '90px',
                    styles: 'text-align: right;',
                    cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
                    editable: true,
                    formatter: formatter.rfqQuantityCellFormatter
                },{
                    name: nls.remarks,
                    field: "remarks",
                    width: '280px',
                    formatter: formatter.rfqSupplierRemarkCellFormatter
                }];
            }
        });
        return declare("buildspace.apps.RequestForQuotation.SupplierList.SupplierListContainer", BorderContainer, {
            rfq: null,
            style: 'padding:0px;width:100%;height:100%;',
            title: nls.rfqSupplierListTabDesc,
            gutters: false,
            formInfo: null,
            postCreate: function() {
                var controller, controllerPane, grid, gridContainer, self, stackContainer, stackPane, store, toolbar;
                this.inherited(arguments);
                self = this;
                stackContainer = dijit.byId('requestForQuotationSupplierMaintenance-stackContainer');
                if (stackContainer) {
                    dijit.byId('requestForQuotationSupplierMaintenance-stackContainer').destroyRecursive();
                }
                stackContainer = self.stackContainer = new dijit.layout.StackContainer({
                    style: 'width:100%;height:100%;',
                    region: "center",
                    id: 'requestForQuotationSupplierMaintenance-stackContainer'
                });
                store = new dojo.data.ItemFileWriteStore({
                    url: "requestForQuotation/getRFQSupplierListing/rfqId/" + self.rfq.id[0],
                    clearOnClose: true,
                    urlPreventCache: true
                });
                grid = this.grid = new SupplierListGrid({
                    id: "supplier-list-container-" + self.rfq.id[0],structure: self.getGridLayout(),
                    store: store,
                    rfq: this.rfq,
                    supplierListContainer: self
                });
                toolbar = new Toolbar({
                    region: 'top',
                    style: "outline:none!important;padding:2px;border:none;width:100%;"
                });
                toolbar.addChild(new Button({
                    label: nls.addSupplierToRFQ,
                    iconClass: "icon-16-container icon-16-add",
                    onClick: function() {
                        return self.generateAddSupplierDialog();
                    }
                }));
                toolbar.addChild(new dijit.ToolbarSeparator);
                toolbar.addChild(new Button({
                    label: nls["delete"],
                    id: 'deleteSupplierFromRequestForQuotation',
                    iconClass: "icon-16-container icon-16-delete",
                    disabled: true,
                    onClick: function() {
                        return grid.deleteRow(grid.selection.selectedIndex);
                    }
                }));
                toolbar.addChild(new dijit.ToolbarSeparator());
                toolbar.addChild(new Button({
                    id: 'rfqExportExcelBasedOnSupplier',
                    label: nls.exportItems,
                    iconClass: "icon-16-container icon-16-export",
                    disabled: true,
                    onClick: function() {
                        return grid.exportDialog(grid.selection.selectedIndex);
                    }
                }));
                toolbar.addChild(new dijit.ToolbarSeparator());
                toolbar.addChild(new Button({
                    id: 'rfqImportExcelBasedOnSupplier',
                    label: nls.importSupplierRates,
                    iconClass: "icon-16-container icon-16-import",
                    disabled: true,
                    onClick: function() {
                        return grid.importDialog(grid.selection.selectedIndex);
                    }
                }));
                gridContainer = new dijit.layout.BorderContainer({
                    region: 'top',
                    gutters: false
                });
                gridContainer.addChild(new Filter({
                    region: 'top',
                    editableGrid: false,
                    grid: grid,
                    filterFields: [{
                        'supplier_name': nls.supplier,
                        'registration_no': nls.registrationNo,
                        'status': nls.status
                    }]
                }));
                gridContainer.addChild(toolbar);
                gridContainer.addChild(new dijit.layout.ContentPane({
                    style: 'width:100%',
                    content: grid,
                    region: 'center'
                }));
                stackPane = new dijit.layout.ContentPane({
                    title: nls.rfqSupplierListTabDesc,
                    content: gridContainer
                });
                stackContainer.addChild(stackPane);
                controller = new dijit.layout.StackController({
                    region: "top",
                    containerId: 'requestForQuotationSupplierMaintenance-stackContainer'
                });
                controllerPane = new dijit.layout.ContentPane({
                    style: "padding: 0px; overflow: hidden;",
                    baseClass: 'breadCrumbTrail',
                    region: 'top',
                    content: controller
                });
                this.addChild(stackContainer);
                this.addChild(controllerPane);
                return dojo.subscribe('requestForQuotationSupplierMaintenance-stackContainer-selectChild', "", function(page) {
                    var childLength, children, index, pageIndex, widget, _results;
                    widget = dijit.byId('requestForQuotationSupplierMaintenance-stackContainer');
                    if (widget) {
                        children = widget.getChildren();
                        index = dojo.indexOf(children, dijit.byId(page.id));
                        pageIndex = index = index + 1;
                        childLength = children.length;
                        _results = [];
                        while (children.length > index) {
                            widget.removeChild(children[index]);
                            children[index].destroyRecursive();
                            _results.push(index = index + 1);
                        }
                        return _results;
                    }
                });
            },
            generateAddSupplierDialog: function() {
                var pb, self;
                self = this;
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + "..."
                });
                pb.show();
                return request.get('requestForQuotation/getCompanyListing', {
                    query: {
                        rfqId: self.rfq.id
                    },
                    handleAs: 'json'
                }).then(function(response) {
                    var dialog = new SupplierSelectionGridDialog({
                        title: nls.addSupplierToRFQ,
                        rfqId: self.rfq.id,
                        supplierListContainer: self,
                        data: response
                    });
                    dialog.show();
                    return pb.hide();
                }, function(error) {
                    return pb.hide();
                });
            },
            makePane: function(name, content) {
                var stackContainer = dijit.byId('requestForQuotationSupplierMaintenance-stackContainer');
                var pane = new dijit.layout.ContentPane({
                    title: name,
                    content: content
                });
                stackContainer.addChild(pane);
                return stackContainer.selectChild(pane);
            },
            getGridLayout: function() {
                var formatter = new Formatter;
                return [{
                    name: "No",
                    field: "id",
                    width: '30px',
                    styles: 'text-align: center;',
                    formatter: formatter.rowCountCellFormatter
                },{
                    name: nls.supplier,
                    field: "supplier_name",
                    width: 'auto'
                },{
                    name: nls.registrationNo,
                    field: "registration_no",
                    width: '120px',
                    styles: 'text-align: center;'
                },{
                    name: nls.status,
                    field: "status",
                    width: '120px',
                    styles: 'text-align: center;'
                },{
                    name: nls.updatedAt,
                    field: "updated_at",
                    width: '120px',
                    styles: 'text-align: center;'
                }];
            }
        });
    });

}).call(this);
