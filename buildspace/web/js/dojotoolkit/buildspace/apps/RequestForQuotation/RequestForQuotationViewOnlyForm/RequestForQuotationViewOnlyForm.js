// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/RequestForQuotation/RequestForQuotationViewOnlyForm/RequestForQuotationViewOnlyForm', ['dojo/_base/declare', 'dojo/_base/lang', "dojo/_base/connect", 'dojo/on', "dojo/request", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dojo/html", "dojo/dom", "dojo/dom-attr", 'dojo/keys', "dojo/dom-style", 'dijit/layout/TabContainer', 'dijit/layout/ContentPane', 'dijit/layout/BorderContainer', 'dijit/Toolbar', 'dijit/form/FilteringSelect', 'dijit/form/Select', 'dijit/form/Button', "dojo/store/Memory", "dojox/form/Manager", "dojo/text!./templates/requestForQuotationViewOnlyForm.html", 'dojo/i18n!../../../nls/RequestForQuotation'], function(declare, lang, connect, bind, request, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, html, dom, domAttr, keys, domStyle, TabContainer, ContentPane, BorderContainer, Toolbar, FilteringSelect, Select, Button, Memory, Manager, template, nls) {
    var RequestForQuotationForm, RequestForQuotationViewOnlyContainer;
    RequestForQuotationForm = declare("buildspace.apps.RequestForQuotation.RequestForQuotationViewOnlyForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
      baseClass: "buildspace-form",
      rfqId: -1,
      newRFQId: -1,
      typeId: -1,
      templateString: template,
      region: 'center',
      style: "overflow: auto;",
      formInfo: null,
      rfqStatusSelections: null,
      nls: nls,
      postCreate: function() {
        var rfqStatusSelection, rfqStatusSelectionStore, self;
        this.inherited(arguments);
        self = this;
        rfqStatusSelectionStore = new Memory({
          idProperty: "id",
          data: self.rfqStatusSelections
        });
        return rfqStatusSelection = new Select({
          name: 'status',
          store: rfqStatusSelectionStore,
          labelAttr: 'name',
          maxHeight: -1,
          style: "width: 180px;padding:2px!important;",
          selected: self.formInfo.status
        }).placeAt(self["statusSelect-" + this.rfqId]);
      },
      startup: function() {
        this.inherited(arguments);
        this.toggleProjectInformationContainer();
        return this["rfqForm-" + this.rfqId].setFormValues(this.formInfo);
      },
      save: function() {
        var form, formValues, pb, self;
        self = this;
        form = this["rfqForm-" + this.rfqId];
        if (!form.validate()) {
          return false;
        }
        formValues = dojo.formToObject(this["rfqForm-" + this.rfqId].id);
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        lang.mixin(formValues, {
          rfqId: self.rfqId,
          _csrf_token: self.formInfo._csrf_token
        });
        pb.show();
        return request.post("requestForQuotation/updateRFQWorkareaInformation", {
          data: formValues,
          handleAs: 'json'
        }).then(function(response) {
          return pb.hide();
        }, function(error) {
          return pb.hide();
        });
      },
      toggleProjectInformationContainer: function() {
        if (this.formInfo.typeId === buildspace.constants.RFQ_TYPE_PROJECT) {
          domStyle.set(this.projectNameContainer, 'display', 'table-row');
          return domStyle.set(this.projectSiteAddressContainer, 'display', 'table-row');
        } else {
          domStyle.set(this.projectNameContainer, 'display', 'none');
          return domStyle.set(this.projectSiteAddressContainer, 'display', 'none');
        }
      }
    });
    return RequestForQuotationViewOnlyContainer = declare('buildspace.apps.RequestForQuotation.RequestForQuotationViewOnlyForm.RequestForQuotationViewOnlyContainer', BorderContainer, {
      rfqId: -1,
      style: "padding:0px;margin:0px;width:100%;height:height:100%;",
      gutters: false,
      data: null,
      postCreate: function() {
        var form, self, toolbar;
        this.inherited(arguments);
        self = this;
        form = new RequestForQuotationForm({
          rfqId: self.rfqId,
          formInfo: self.data.requestForQuotationForm,
          rfqStatusSelections: self.data.rfqStatusSelections,
          typeId: self.data.requestForQuotationForm.typeId
        });
        toolbar = new Toolbar({
          region: 'top',
          style: "outline:none!important;padding:2px;overflow:hidden;"
        });
        toolbar.addChild(new Button({
          label: nls.save,
          iconClass: "icon-16-container icon-16-save",
          onClick: function() {
            return form.save();
          }
        }));
        this.addChild(toolbar);
        return this.addChild(form);
      }
    });
  });

}).call(this);
