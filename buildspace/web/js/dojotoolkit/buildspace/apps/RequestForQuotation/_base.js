// Generated by CoffeeScript 1.9.0
(function() {
    define(["dojo/_base/declare", 'dojo/data/ItemFileWriteStore', 'dojo/request', 'dijit/layout/TabContainer', 'dijit/layout/ContentPane', 'dijit/layout/BorderContainer', 'dijit/layout/StackController', 'dijit/layout/StackContainer', 'dijit/Toolbar', 'dijit/form/Button', './grid', './WorkArea', './RequestForQuotationDialog', 'buildspace/widget/grid/cells/Formatter', 'dojo/i18n!../../nls/RequestForQuotation', 'buildspace/widget/grid/Filter'], function(declare, ItemFileWriteStore, request, TabContainer, ContentPane, BorderContainer, StackController, StackContainer, Toolbar, Button, RequestForQuotationGrid, WorkArea, RequestForQuotationDialog, Formatter, nls, FilterToolbar) {
        return  declare("buildspace.apps.RequestForQuotation", buildspace.apps._App, {
            init: function(args) {
                var grid, mainContainer, self, store, toolbar;
                self = this;
                self.win = new buildspace.widget.Window({
                    title: nls.appName,
                    height: "300px",
                    width: "450px",
                    showMaximize: false,
                    iconClass: this.iconClass,
                    onClose: dojo.hitch(this, "kill")
                });
                store = new dojo.data.ItemFileWriteStore({
                    url: 'requestForQuotation/getRFQListing',
                    clearOnClose: true,
                    urlPreventCache: true
                });
                grid = this.requestForQuotationGrid = new RequestForQuotationGrid({
                    requestForQuotationGridContainer: self,
                    structure: self.getGridLayout(),
                    store: store,
                    onRowDblClick: function(e) {
                        var rfq = this.getItem(e.rowIndex);
                        if (!(rfq.id[0] > 0)) {
                            return false;
                        }
                        self.kill();
                        self.win = new buildspace.widget.Window({
                            title: buildspace.truncateString("Request For Quotation (RFQ No : " + rfq.rfq_no[0] + ") (" + rfq.type[0] + ")", 150),
                            onClose: dojo.hitch(self, "kill")
                        });
                        var builder = new WorkArea({
                            rfq: rfq
                        });
                        self.win.addChild(builder);
                        self.win.show();
                        return self.win.startup();
                    }
                });
                toolbar = new Toolbar({
                    region: 'top',
                    style: "outline:none!important;padding:2px;border:none;width:100%;"
                });
                toolbar.addChild(new Button({
                    label: nls.add,
                    iconClass: "icon-16-container icon-16-add",
                    onClick: function() {
                        return dojo.hitch(self, 'requestForQuotationDialogForm', -1)();
                    }
                }));
                toolbar.addChild(new dijit.ToolbarSeparator);
                toolbar.addChild(new Button({
                    id: 'deleteCompanyFromRequestForQuotation',
                    label: nls["delete"],
                    iconClass: "icon-16-container icon-16-delete",
                    disabled: true,
                    onClick: function() {
                        return grid.deleteRow(grid.selection.selectedIndex);
                    }
                }));
                mainContainer = this.mainContainer = new BorderContainer({
                    style: "padding:0px;width:100%;height:100%;",
                    gutters: false
                });
                mainContainer.addChild(new FilterToolbar({
                    region: 'top',
                    grid: grid,
                    editableGrid: false,
                    filterFields: new Array('rfq_no', 'project', 'status')
                }));
                mainContainer.addChild(toolbar);
                mainContainer.addChild(grid);
                self.win.addChild(mainContainer);
                self.win.show();
                return self.win.startup();
            },
            requestForQuotationDialogForm: function(rfqId) {
                var pb, self;
                self = this;
                pb = new buildspace.dialog.indeterminateProgressBar({
                    title: nls.processing + "..."
                });
                pb.show();
                return request.get('requestForQuotation/getRequestForQuotationInformation', {
                    query: {
                        rfqId: rfqId
                    },
                    handleAs: 'json'
                }).then(function(response) {
                    pb.hide();
                    var dialog = new RequestForQuotationDialog({
                        title: nls.addNewRFQ,
                        rfqId: rfqId,
                        data: response,
                        requestForQuotationGrid: self.requestForQuotationGrid
                    });
                    return dialog.show();
                }, function(error) {
                    return pb.hide();
                });
            },
            getGridLayout: function() {
                var formatter = new Formatter;
                return [{
                    name: "No",
                    field: "id",
                    width: '30px',
                    styles: 'text-align: center;',
                    formatter: formatter.rowCountCellFormatter
                },{
                    name: nls.rfqNo,
                    field: "rfq_no",
                    width: '120px',
                    styles: 'text-align: center;'
                },{
                    name: nls.project,
                    field: "project",
                    width: 'auto'
                },{
                    name: nls.type,
                    field: "type",
                    width: '120px',
                    styles: 'text-align: center;',
                    formatter: function(cellValue, rowIdx, cell) {
                        if (cellValue) {
                            return cellValue;
                        } else {
                            return null;
                        }
                    }
                },{
                    name: nls.numberOfSupplier,
                    field: "number_of_supplier",
                    width: '140px',
                    styles: 'text-align: center;'
                },{
                    name: nls.status,
                    field: "status",
                    width: '120px',
                    styles: 'text-align: center;'
                },{
                    name: nls.issued_by,
                    field: "issued_by",
                    width: '140px',
                    styles: 'text-align: center;'
                },{
                    name: nls.date_issued,
                    field: "date_issued",
                    width: '140px',
                    styles: 'text-align: center;'
                }];
            },
            kill: function() {
                if (this.win && typeof(this.win) != "undefined"){
                    this.win.close();
                }
            }
        });
    });

}).call(this);
