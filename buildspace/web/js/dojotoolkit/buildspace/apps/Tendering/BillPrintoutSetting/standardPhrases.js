// Generated by CoffeeScript 1.9.0
(function() {
  define(['dojo/_base/declare', 'dojo/parser', 'dijit/_WidgetBase', 'dijit/_OnDijitClickMixin', 'dijit/_TemplatedMixin', 'dijit/_WidgetsInTemplateMixin', 'dijit/layout/BorderContainer', 'dijit/Toolbar', 'dijit/form/Button', 'dojo/request', 'dojox/validate/web', 'dojox/form/Manager', 'dijit/form/ValidationTextBox', 'dojo/dom-form', 'dojo/text!./templates/standardPhrasesForm.html', 'dojo/i18n!buildspace/nls/Tendering'], function(declare, parser, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, BorderContainer, Toolbar, Button, request, web, Manager, ValidationTextBox, domForm, template, nls) {
    var standardPhrasesForm;
    standardPhrasesForm = declare('buildspace.apps.Tendering.BillPrintoutSetting.StandardPhrasesForm', [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
      baseClass: "buildspace-form",
      templateString: template,
      billId: 1,
      data: null,
      startup: function() {
        this.inherited(arguments);
        return this["myForm-" + this.billId].setFormValues(this.data);
      },
      save: function() {
        var formValues, pb, self;
        this.inherited(arguments);
        self = this;
        if (!this["myForm-" + this.billId].validate()) {
          return false;
        }
        formValues = dojo.formToObject(this["myForm-" + this.billId].id);
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        pb.show();
        return request.post('tendering/updateStandardPhrases', {
          data: formValues,
          handleAs: 'json'
        }).then(function(response) {
          return pb.hide();
        }, function(error) {
          return pb.hide();
        });
      }
    });
    return declare('buildspace.apps.ProjectBuilder.BillPrintoutSettingContainer', BorderContainer, {
      billId: 1,
      region: 'center',
      style: "padding:0px;width:100%;height:100%;",
      gutters: false,
      postCreate: function() {
        var pb, self, xhrArgs;
        this.inherited(arguments);
        self = this;
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + '...'
        });
        pb.show();
        xhrArgs = {
          url: 'tendering/getStandardPhrasesForm',
          handleAs: 'json',
          content: {
            billId: self.billId
          },
          load: function(data) {
            var form, toolBar;
            form = new standardPhrasesForm({
              billId: self.billId,
              region: "center",
              style: "overflow: auto;",
              data: data
            });
            toolBar = new Toolbar({
              region: "top",
              style: "padding:2px;margin:0px;width:100%;"
            });
            toolBar.addChild(new Button({
              label: nls.save,
              iconClass: "icon-16-container icon-16-save",
              onClick: dojo.hitch(form, 'save')
            }));
            self.addChild(toolBar);
            self.addChild(form);
            return pb.hide();
          },
          error: function(error) {
            return pb.hide();
          }
        };
        return dojo.xhrGet(xhrArgs);
      }
    });
  });

}).call(this);
