// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/BQLibrary/ImportBuildspaceZipFile', ["dojo/_base/declare", "dojo/on", 'dojo/_base/lang', "dojo/keys", "dojo/parser", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", 'dijit/Toolbar', 'dijit/form/Button', "dijit/layout/BorderContainer", "dijit/form/ValidationTextBox", "dijit/form/SimpleTextarea", "dijit/registry", "dojo/dom-style", "dojo/dom-form", "dojo/request", "dojox/validate/web", "dijit/form/Select", "dijit/form/FilteringSelect", "dojo/store/Memory", "dojox/form/Manager", "dojo/text!./templates/importBuildspaceZipFileForm.html", 'dojo/i18n!buildspace/nls/BQLibrary'], function(declare, on_, lang, keys, parser, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, Toolbar, Button, BorderContainer, ValidationTextBox, SimpleTextarea, registry, domStyle, domForm, request, web, Select, FilteringSelect, Memory, Manager, template, nls) {
    var BQLibraryImportForm, Dialog;
    BQLibraryImportForm = declare("buildspace.apps.BQLibrary.BQLibraryImportForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
      baseClass: "buildspace-form",
      libraryId: -1,
      templateString: template,
      region: 'center',
      style: "overflow: auto;",
      nls: nls,
      dialogContainer: null,
      libraryGrid: null,
      startup: function() {
        this.inherited(arguments);
        return this.createUploader();
      },
      createUploader: function() {
        var self;
        self = this;
        this.uploader = new dojox.form.Uploader({
          label: nls.importFromBuildspaceZipFile,
          uploadOnSelect: true,
          style: 'height:24px;',
          url: "bqLibrary/importBuildspaceZipFile/bqLibraryId/" + self.libraryId,
          name: 'company_other_information[fileUpload]'
        });
        on_(this.uploader, "Begin", function(uploadedFiles) {
          self.pb = buildspace.dialog.indeterminateProgressBar({
            title: nls.pleaseWait + "..."
          });
          return self.pb.show();
        });
        on_(this.uploader, "Complete", function(uploadedFiles) {
          self.pb.hide();
          if (uploadedFiles.success) {
            self.libraryGrid.store.save();
            self.libraryGrid.store.close();
            self.libraryGrid.setStore(self.libraryGrid.store);
            return self.dialogContainer.hide();
          } else {
            return buildspace.dialog.alert(nls.error, "<div>" + uploadedFiles.errorMsg + "</div>", 80, 280);
          }
        });
        this.buildspaceFormUploader.appendChild(this.uploader.domNode);
        return this.uploader.startup();
      },
      clearInputErrorMsgs: function() {
        var errorBlock, i, presetErrorBlocks, self, _results;
        self = this;
        presetErrorBlocks = {
          name: null
        };
        _results = [];
        for (i in presetErrorBlocks) {
          errorBlock = self["error-" + i];
          errorBlock.innerHTML = presetErrorBlocks[i];
          _results.push(domStyle.set(errorBlock, "display", "none"));
        }
        return _results;
      }
    });
    return Dialog = declare('buildspace.apps.ScheduleOfQuantity.ImportRFQSupplierRatesDialog', dijit.Dialog, {
      style: "padding:0px;margin:0px;width:400px;height:120px;",
      libraryId: -1,
      libraryGrid: null,
      buildRendering: function() {
        var content;
        content = this.createContent();
        this.content = content;
        content.startup();
        return this.inherited(arguments);
      },
      postCreate: function() {
        domStyle.set(this.containerNode, {
          padding: "0px",
          margin: "0px"
        });
        this.closeButtonNode.style.display = "none";
        return this.inherited(arguments);
      },
      createContent: function() {
        var borderContainer, form, self, toolbar;
        self = this;
        borderContainer = new BorderContainer({
          style: "width:400px;height:120px;padding:0;margin:0;",
          gutters: false
        });
        form = new BQLibraryImportForm({
          libraryId: this.libraryId,
          dialogContainer: self,
          libraryGrid: this.libraryGrid
        });
        toolbar = new Toolbar({
          region: 'top',
          style: "outline:none!important;padding:2px;overflow:hidden;"
        });
        toolbar.addChild(new dijit.form.Button({
          label: nls.close,
          iconClass: "icon-16-container icon-16-close",
          onClick: function() {
            return self.hide();
          }
        }));
        borderContainer.addChild(toolbar);
        borderContainer.addChild(form);
        return borderContainer;
      },
      _onKey: function(e) {
        var key;
        key = e.keyCode;
        if (key === keys.ESCAPE) {
          return dojo.stopEvent(e);
        }
      },
      onHide: function() {
        return this.destroyRecursive();
      }
    });
  });

}).call(this);
