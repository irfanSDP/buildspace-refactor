// Generated by CoffeeScript 1.9.0
(function() {
  define("buildspace/apps/SystemAdministration/GroupMaintenance/grid", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-attr", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Selector", "dojox/grid/enhanced/plugins/Rearrange", "dojo/_base/event", "dojo/keys", "dijit/focus", "dojo/_base/html", "dojo/request/xhr", "dijit/PopupMenuItem", 'dojo/request', './GroupForm', './assignUserGroupGrid', "buildspace/widget/grid/cells/Textarea", 'buildspace/widget/grid/cells/Formatter', 'dojo/i18n!../../../nls/SystemAdministration', 'buildspace/widget/grid/Filter'], function(declare, lang, array, domAttr, Menu, Selector, Rearrange, evt, keys, focusUtil, html, xhr, PopupMenuItem, request, GroupForm, AssignUserGroupGrid, Textarea, Formatter, nls, FilterToolbar) {
    var groupMaintenanceGrid;
    groupMaintenanceGrid = declare("buildspace.apps.SystemAdministration.GroupMaintenance.Grid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      keepSelection: true,
      rowSelector: "0px",
      region: 'center',
      groupMaintenanceGridContainer: null,
      constructor: function() {
        return this.rearranger = Rearrange(this, {});
      },
      canSort: function() {
        return false;
      },
      postCreate: function() {
        var self;
        this.inherited(arguments);
        self = this;
        this.on('RowClick', function(e) {
          var fieldName, item;
          fieldName = e.cell.field;
          item = this.getItem(e.rowIndex);
          this.disableToolbarButtons(true);
          if (item && item.id > 0) {
            if (!item.is_super_admin[0]) {
              this.disableToolbarButtons(false);
            } else {
              this.disableToolbarButtons(true);
            }
            if (fieldName === 'viewUserList') {
              return self.generateAssignUserGroupDialog(item);
            }
          }
        });
        return this.on('RowContextMenu', function(e) {
          var item;
          self = this;
          self.selection.clear();
          item = self.getItem(e.rowIndex);
          self.selection.setSelected(e.rowIndex, true);
          self.contextMenu(e);
          this.disableToolbarButtons(true);
          if (item && item.id > 0) {
            if (!item.is_super_admin[0]) {
              return this.disableToolbarButtons(false);
            } else {
              return this.disableToolbarButtons(true);
            }
          }
        });
      },
      onRowDblClick: function(e) {
        var group;
        group = this.getItem(e.rowIndex);
        if (group && group.id > 0) {
          return this.groupMaintenanceGridContainer.editExistingGroup(group);
        } else {
          return null;
        }
      },
      generateAssignUserGroupDialog: function(item) {
        var pb, self;
        self = this;
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + '...'
        });

        pb.show().then(function(){
            dojo.xhrGet({
                url: 'systemAdministration/getGroupUserLists',
                content: {
                    id: item.id
                },
                handleAs: 'json',
                load: function(data) {
                    var dialog;
                    pb.hide();
                    dialog = new AssignUserGroupGrid({
                        groupMaintenanceGrid: self,
                        groupId: item.id,
                        isSuperAdmin: item.is_super_admin[0],
                        groupName: item.name,
                        data: data
                    });
                    return dialog.show();
                },
                error: function() {
                    return pb.hide();
                }
            });
        });
      },
      deleteRow: function(rowIndex) {
        var item, pb, self, xhrArgs;
        self = this;
        item = this.getItem(rowIndex);
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.deleting + '. ' + nls.pleaseWait + '...'
        });

        return new buildspace.dialog.confirm(nls.deleteGroupTitle, nls.deleteGroupMsg, 80, 320, function() {
            pb.show().then(function(){
                dojo.xhrPost({
                    url: 'systemAdministration/deleteGroupInfo',
                    content: {
                        id: item.id,
                        _csrf_token: item._csrf_token
                    },
                    handleAs: 'json',
                    load: function(data) {
                        pb.hide();
                        if (data.success) {
                            return self.refreshGrid();
                        } else {
                            return console.log(data);
                        }
                    },
                    error: function() {
                        return pb.hide();
                    }
                });
            });
        }, function() {

        });
      },
      refreshGrid: function() {
        this.store.save();
        this.store.close();
        return this.setStore(this.store);
      },
      contextMenu: function(e) {
        var info, item, rowCtxMenu;
        rowCtxMenu = this.rowCtxMenu = new dijit.Menu();
        this.contextMenuItems(e);
        info = {
          target: e.target
        };
        item = this.getItem(e.rowIndex);
        if (rowCtxMenu && item && (this.selection.isSelected(e.rowIndex) || e.rowNode && html.hasClass(e.rowNode, "dojoxGridRowbar"))) {
          rowCtxMenu._openMyself(info);
          evt.stop(e);
        }
      },
      contextMenuItems: function(e) {
        var item, self;
        self = this;
        item = this.getItem(e.rowIndex);
        if (item.id > 0) {
          self.rowCtxMenu.addChild(new dijit.MenuItem({
            label: nls.addNewGroup,
            iconClass: "icon-16-container icon-16-add",
            onClick: function() {
              return self.groupMaintenanceGridContainer.addNewGroup();
            }
          }));
          return self.rowCtxMenu.addChild(new dijit.PopupMenuItem({
            label: nls["delete"],
            iconClass: "icon-16-container icon-16-delete",
            disabled: e.rowIndex > 0 ? false : true,
            onClick: function() {
              return self.deleteRow(e.rowIndex);
            }
          }));
        }
      },
      disableToolbarButtons: function(isDisable) {
        var deleteRowBtn;
        deleteRowBtn = dijit.byId("deleteGroupFromUserMaintenance");
        if (deleteRowBtn) {
          return deleteRowBtn.set('disabled', isDisable);
        }
      }
    });
    return declare("buildspace.apps.SystemAdministration.GroupMaintenance.Container", dijit.layout.BorderContainer, {
      style: "padding:0px;width:100%;height:100%;",
      gutters: false,
      postCreate: function() {
        var controller, controllerPane, grid, gridContainer, self, stackContainer, stackPane, store, toolbar;
        this.inherited(arguments);
        self = this;
        stackContainer = dijit.byId('groupMaintenance-stackContainer');
        if (stackContainer) {
          stackContainer.destroyRecursive();
        }
        stackContainer = self.stackContainer = new dijit.layout.StackContainer({
          style: 'width:100%;height:100%;',
          region: "center",
          id: 'groupMaintenance-stackContainer'
        });
        store = new dojo.data.ItemFileWriteStore({
          url: 'systemAdministration/getGroupLists',
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = this.groupMaintenanceGrid = new groupMaintenanceGrid({
          structure: self.getGridLayout(),
          store: store,
          groupMaintenanceGridContainer: self
        });
        toolbar = new dijit.Toolbar({
          region: "top",
          style: "padding:2px;border-bottom:none;width:100%;"
        });
        toolbar.addChild(new dijit.form.Button({
          id: 'addGroupIntoUserMaintenance',
          label: nls.addNewGroup,
          iconClass: "icon-16-container icon-16-add",
          onClick: dojo.hitch(self, 'addNewGroup')
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new dijit.form.Button({
          id: 'deleteGroupFromUserMaintenance',
          label: nls["delete"],
          iconClass: "icon-16-container icon-16-delete",
          disabled: true,
          onClick: function() {
            return grid.deleteRow(grid.selection.selectedIndex);
          }
        }));
        gridContainer = new dijit.layout.BorderContainer({
          region: 'top',
          gutters: false
        });
        gridContainer.addChild(new FilterToolbar({
          grid: self.groupMaintenanceGrid,
          region: "top",
          editableGrid: false,
          filterFields: [
            {
              'name': 'Name'
            }, {
              'usersCount': 'User Count'
            }
          ]
        }));
        gridContainer.addChild(toolbar);
        gridContainer.addChild(new dijit.layout.ContentPane({style: 'width:100%', content:grid, region:'center'}));
        stackPane = new dijit.layout.ContentPane({
          title: nls.groupList,
          content: gridContainer
        });
        stackContainer.addChild(stackPane);
        controller = new dijit.layout.StackController({
          region: "top",
          containerId: 'groupMaintenance-stackContainer'
        });
        controllerPane = new dijit.layout.ContentPane({
          style: "padding: 0px; overflow: hidden;",
          baseClass: 'breadCrumbTrail',
          region: 'top',
          content: controller
        });
        this.addChild(stackContainer);
        this.addChild(controllerPane);
        return dojo.subscribe('groupMaintenance-stackContainer-selectChild', "", function(page) {
          var children, index, widget, _results;
          widget = dijit.byId('groupMaintenance-stackContainer');
          if (widget) {
            children = widget.getChildren();
            index = dojo.indexOf(children, dijit.byId(page.id));
            index = index + 1;
            _results = [];
            while (children.length > index) {
              widget.removeChild(children[index]);
              children[index].destroyRecursive();
              _results.push(index = index + 1);
            }
            return _results;
          }
        });
      },
      addNewGroup: function() {
        var pb, self, values;
        self = this;
        values = {
          id: -1
        };
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + '...'
        });
        pb.show().then(function(){
            dojo.xhrGet({
                url: "systemAdministration/getGroupInfo",
                content: values,
                handleAs: "json",
                load: function(data) {
                    var borderContainer, groupForm;
                    pb.hide();
                    groupForm = new GroupForm({
                        region: "center",
                        data: data,
                        groupMaintenanceGrid: self.groupMaintenanceGrid
                    });
                    borderContainer = new dijit.layout.BorderContainer({
                        style: "padding:0px;width:100%;height:100%;",
                        baseClass: "form",
                        gutters: false,
                        region: "center"
                    });
                    borderContainer.addChild(groupForm);
                    return self.makePane(nls.addNewGroup, borderContainer);
                },
                error: function() {
                    return pb.hide();
                }
            });
        });
      },
      editExistingGroup: function(group) {
        var pb, self, values, xhrArgs;
        self = this;
        values = {
          id: group.id
        };
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + '...'
        });
        pb.show().then(function(){
            dojo.xhrGet({
                url: "systemAdministration/getGroupInfo",
                content: values,
                handleAs: "json",
                load: function(data) {
                    var borderContainer, groupForm;
                    pb.hide();
                    groupForm = new GroupForm({
                        region: "center",
                        data: data,
                        groupMaintenanceGrid: self.groupMaintenanceGrid,
                        isSuperAdmin: group.is_super_admin[0]
                    });
                    borderContainer = new dijit.layout.BorderContainer({
                        style: "padding:0px;width:100%;height:100%;",
                        baseClass: "form",
                        gutters: false,
                        region: "center"
                    });
                    borderContainer.addChild(groupForm);
                    return self.makePane(nls.editExistingGroup, borderContainer);
                },
                error: function() {
                    return pb.hide();
                }
            })
        });
      },
      makePane: function(name, content) {
        var pane, stackContainer;
        stackContainer = dijit.byId('groupMaintenance-stackContainer');
        pane = new dijit.layout.ContentPane({
          title: name,
          content: content
        });
        stackContainer.addChild(pane);
        return stackContainer.selectChild(pane);
      },
      getGridLayout: function() {
        var formatter;
        formatter = new Formatter();
        return [{
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter
          }, {
            name: nls.name,
            field: "name",
            width: 'auto'
          }, {
            name: nls.usersCount,
            field: "usersCount",
            width: '80px',
            styles: 'text-align: center;'
          }, {
            name: nls.viewUserList,
            field: "viewUserList",
            width: '80px',
            styles: 'text-align: center;',
            formatter: function(cellValue, rowIdx) {
              var item;
              item = this.grid.getItem(rowIdx);
              if (item.id > 0) {
                return "<a href=\"#\" onclick=\"return false;\">" + nls.view + "</a>";
              } else {
                return "&nbsp;";
              }
            }
          }, {
            name: nls.lastUpdatedAt,
            field: "updated_at",
            width: '120px',
            styles: 'text-align: center;'
          }];
      }
    });
  });

}).call(this);
