// Generated by CoffeeScript 1.9.0
(function() {
    define("buildspace/apps/SystemAdministration/GroupMaintenance/GroupForm", ["dojo/_base/declare", 'dojo/aspect', "dojo/on", "dojo/_base/connect", "dojo/_base/lang", "dojo/dom-form", "dojo/html", "dojo/dom", "dojo/dom-attr", "dojo/dom-style", "dojo/_base/array", './assignUserGroupGrid', "dojox/form/Manager", "dojox/validate/web", "dijit/form/Form", "dojox/form/PasswordValidator", "dijit/form/ValidationTextBox", "dijit/form/Textarea", "dijit/form/DateTextBox", "dijit/form/RadioButton", "dijit/form/Select", "dijit/form/FilteringSelect", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dojox/grid/enhanced/plugins/IndirectSelection", 'buildspace/widget/grid/cells/Formatter', "dojox/grid/enhanced/plugins/Rearrange", "dojo/text!./templates/groupForm.html", "dojo/i18n!buildspace/nls/SystemAdministration"], function(declare, aspect, on_, connect, lang, domForm, html, dom, domAttr, domStyle, array, AssignUserGroupGrid, Manager, web, Form, PasswordValidator, ValidateTextBox, Textarea, DateTextBox, RadioButton, Select, FilteringSelect, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, IndirectSelection, Formatter, Rearrange, GroupFormTemplate, nls) {
        var GroupForm, GroupFormContainer, menuMaintenanceGrid;
        menuMaintenanceGrid = declare("buildspace.apps.SystemAdministration.GroupMaintenance.MenuPermissionGrid", dojox.grid.EnhancedGrid, {
            style: "border-top:none; height: 300px;",
            keepSelection: true,
            rowSelector: "0px",
            region: 'center',
            groupId: -1,
            groupMaintenanceGridContainer: null,
            selectedMenus: null,
            isSuperAdmin: false,
            constructor: function(args) {
                this.urlGetDescendantIds = 'systemAdministration/getMenuDescendants';
                this.plugins = {
                    indirectSelection: {
                        headerSelector: true,
                        width: "20px",
                        styles: "text-align: center;"
                    }
                };
                this.rearranger = Rearrange(this, {});
                return this.itemIds = [];
            },
            canSort: function(inSortInfo) {
                return false;
            },
            postCreate: function() {
                var self;
                this.inherited(arguments);
                self = this;
                aspect.after(this, "_onFetchComplete", (function(_this) {
                    return function() {
                        return _this.markedCheckBoxObject(_this.selectedMenus, true);
                    };
                })(this));
                this._connects.push(connect.connect(this, 'onCellClick', function(e) {
                    if (e.cell.name !== "") {
                        return false;
                    }
                    return self.selectTree(e);
                }));
                return this._connects.push(connect.connect(this.rowSelectCell, 'toggleAllSelection', function(newValue) {
                    return self.toggleAllSelection(newValue);
                }));
            },
            markedCheckBoxObject: function(items, newValue) {
                var itemIndex, key, self, store, _results;
                self = this;
                store = this.store;
                itemIndex = -1;
                _results = [];
                for (key in items) {
                    _results.push(store.fetchItemByIdentity({
                        identity: key,
                        onItem: function(node) {
                            itemIndex = node._0;
                            self.pushItemIdIntoGridArray(node, newValue);
                            return self.selection.setSelected(itemIndex, newValue);
                        }
                    }));
                }
                return _results;
            },
            markedCheckBoxArray: function(items, newValue) {
                var itemIndex, self, store;
                self = this;
                store = this.store;
                itemIndex = -1;
                return dojo.forEach(items, function(itm) {
                    return store.fetchItemByIdentity({
                        identity: itm.id,
                        onItem: function(node) {
                            itemIndex = node._0;
                            self.pushItemIdIntoGridArray(node, newValue);
                            return self.selection.setSelected(itemIndex, newValue);
                        }
                    });
                });
            },
            selectTree: function(e) {
                var item, newValue, pb, rowIndex, self;
                self = this;
                rowIndex = e.rowIndex;
                newValue = this.selection.selected[rowIndex];
                item = this.getItem(rowIndex);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + '...'
                });
                pb.show().then(function(){
                    dojo.xhrPost({
                        url: self.urlGetDescendantIds,
                        content: {
                            id: item.id
                        },
                        handleAs: 'json',
                        load: function(data) {
                            pb.hide();
                            return self.markedCheckBoxArray(data.items, newValue);
                        },
                        error: function(error) {
                            return pb.hide();
                        }
                    });
                });
            },
            toggleAllSelection: function(checked) {
                var grid, selection;
                grid = this;
                selection = this.selection;
                if (checked) {
                    selection.selectRange(0, grid.rowCount - 1);
                    grid.itemIds = [];
                    return grid.store.fetch({
                        onComplete: function(items) {
                            return dojo.forEach(items, function(item, index) {
                                if (item.id > 0) {
                                    return grid.itemIds.push(item.id[0]);
                                }
                            });
                        }
                    });
                } else {
                    selection.deselectAll();
                    return grid.itemIds = [];
                }
            },
            pushItemIdIntoGridArray: function(item, select) {
                var grid, idx;
                grid = this;
                idx = dojo.indexOf(grid.itemIds, item.id[0]);
                if (select) {
                    if (idx === -1) {
                        return grid.itemIds.push(item.id[0]);
                    }
                } else {
                    if (idx !== -1) {
                        return grid.itemIds.splice(idx, 1);
                    }
                }
            }
        });
        GroupForm = declare("buildspace.apps.SystemAdministration.GroupMaintenance.GroupForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
            templateString: GroupFormTemplate,
            baseClass: "buildspace-form",
            region: "center",
            style: "border:none;padding:5px;overflow:auto;",
            groupId: -1,
            groupName: null,
            data: null,
            GroupFormContainer: null,
            groupMaintenanceGrid: null,
            nls: nls,
            isSuperAdmin: false,
            startup: function() {
                this.inherited(arguments);
                this.createPermissionGrid();
                this.groupMaintenanceForm.setFormValues(this.data);
                return this.showMenuPermissionGrid();
            },
            clearInputErrorMsgs: function() {
                var errorBlock, i, presetErrorBlocks, self, _results;
                self = this;
                presetErrorBlocks = {
                    name: null
                };
                _results = [];
                for (i in presetErrorBlocks) {
                    errorBlock = self["error-" + i];
                    errorBlock.innerHTML = presetErrorBlocks[i];
                    _results.push(domStyle.set(errorBlock, "display", "none"));
                }
                return _results;
            },
            save: function() {
                var formValues, pb, self, xhrArgs;
                this.clearInputErrorMsgs();
                if (!this.groupMaintenanceForm.validate()) {
                    return false;
                }
                self = this;
                formValues = dojo.formToObject(this.groupMaintenanceForm.id);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + "..."
                });
                lang.mixin(formValues, {
                    id: self.groupId,
                    "sf_guard_group[menus_list][]": this.menuGrid.itemIds
                });
                pb.show().then(function(){
                    dojo.xhrPost( {
                        url: "systemAdministration/updateGroupInfo",
                        handleAs: "json",
                        content: formValues,
                        load: function(data) {
                            var addUserToGroupButton, errorBlock, i, _results;
                            pb.hide();
                            if (data.success && data.id > 0) {
                                self.groupId = data.id;
                                self.groupName = data.name;
                                self.showMenuPermissionGrid();
                                addUserToGroupButton = dijit.byId('addUserToGroup-groupMaintenance');
                                if (addUserToGroupButton && self.groupId > 0) {
                                    addUserToGroupButton.set('disabled', false);
                                }
                                return self.groupMaintenanceGrid.refreshGrid();
                            } else {
                                _results = [];
                                for (i in data.errorMsgs) {
                                    errorBlock = self["error-" + i];
                                    errorBlock.innerHTML = data.errorMsgs[i];
                                    _results.push(domStyle.set(errorBlock, "display", "block"));
                                }
                                return _results;
                            }
                        },
                        error: function(error) {
                            return pb.hide();
                        }
                    });
                });
            },
            addUserToGroup: function() {
                var pb, self;
                self = this;
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + '...'
                });
                pb.show().then(function(){
                    dojo.xhrGet({
                        url: 'systemAdministration/getGroupUserLists',
                        content: {
                            id: self.groupId
                        },
                        handleAs: 'json',
                        load: function(data) {
                            var dialog;
                            pb.hide();
                            dialog = new AssignUserGroupGrid({
                                groupMaintenanceGrid: self.groupMaintenanceGrid,
                                groupId: self.groupId,
                                groupName: self.groupName,
                                data: data,
                                isSuperAdmin: self.isSuperAdmin
                            });
                            return dialog.show();
                        },
                        error: function(error) {
                            return pb.hide();
                        }
                    });
                });
            },
            createPermissionGrid: function() {
                var self, store;
                self = this;
                store = new dojo.data.ItemFileWriteStore({
                    url: 'systemAdministration/getMenuLists',
                    clearOnClose: true,
                    urlPreventCache: true
                });
                this.menuGrid = new menuMaintenanceGrid({
                    groupId: self.groupId,
                    structure: self.getGridLayout(),
                    store: store,
                    selectedMenus: self.data.menus
                });
                this.menuGrid.placeAt(this.groupMenuPermissionGrid);
                return this.menuGrid.startup();
            },
            getGridLayout: function() {
                var formatter, layout;
                formatter = new Formatter();
                return [{
                    name: "No",
                    field: "id",
                    width: '30px',
                    styles: 'text-align: center;',
                    formatter: formatter.rowCountCellFormatter
                }, {
                    name: nls.name,
                    field: "title",
                    width: 'auto',
                    formatter: formatter.menuCellFormatter
                }, {
                    name: nls.isApp,
                    field: "is_app",
                    width: '100px',
                    styles: 'text-align: center;',
                    formatter: function(cellValue, rowIdx, cell) {
                        return cellValue = cellValue ? nls.isAnApp : nls.isNotAnApp;
                    }
                }];
            },
            showMenuPermissionGrid: function() {
                if (this.groupId !== 1) {
                    return domStyle.set(this.groupMenuPermissionGridContainer, 'display', 'block');
                } else {
                    return domStyle.set(this.groupMenuPermissionGridContainer, 'display', 'none');
                }
            }
        });
        GroupFormContainer = declare("buildspace.apps.SystemAdministration.GroupMaintenance.GroupFormContainer", dijit.layout.BorderContainer, {
            region: "top",
            style: "padding:0px; width: 560px; height: 200px;",
            gutters: false,
            data: null,
            groupMaintenanceGrid: null,
            groupId: -1,
            groupName: null,
            isSuperAdmin: false,
            postCreate: function() {
                var groupForm, self, toolbar;
                this.inherited(arguments);
                self = this;
                this.groupId = self.data[0].id;
                groupForm = new GroupForm({
                    data: self.data[0],
                    groupId: this.groupId,
                    groupName: self.data[0].name,
                    GroupFormContainer: self,
                    groupMaintenanceGrid: self.groupMaintenanceGrid,
                    isSuperAdmin: self.isSuperAdmin
                });
                toolbar = new dijit.Toolbar({
                    region: "top",
                    style: "outline:none!important;border-bottom: 1px solid #ccc;border-top:none;border-left:none;border-right:none;padding:2px;width:100%;"
                });
                toolbar.addChild(new dijit.form.Button({
                    label: nls.save,
                    iconClass: "icon-16-container icon-16-save",
                    style: "outline:none!important;",
                    onClick: dojo.hitch(groupForm, "save")
                }));
                toolbar.addChild(new dijit.ToolbarSeparator());
                toolbar.addChild(new dijit.form.Button({
                    id: "addUserToGroup-groupMaintenance",
                    label: nls.addUserToGroup,
                    iconClass: "icon-16-container icon-16-add",
                    style: "outline:none!important;",
                    disabled: self.groupId > 0 ? false : true,
                    onClick: dojo.hitch(groupForm, "addUserToGroup")
                }));
                this.addChild(toolbar);
                return this.addChild(groupForm);
            }
        });
        return GroupFormContainer;
    });

}).call(this);
