// Generated by CoffeeScript 1.9.0
(function() {
    define("buildspace/apps/SystemAdministration/GroupMaintenance/assignUserGroupGrid", [
        "dojo/_base/declare",
        "dojo/aspect",
        "dojo/_base/lang",
        "dojo/_base/connect",
        "dojo/when",
        "dojo/html",
        "dojo/dom",
        "dojo/keys",
        "dojo/dom-style",
        'dojox/layout/TableContainer',
        'dijit/layout/ContentPane',
        'dijit/form/TextBox',
        'dijit/form/Button',
        "dijit/form/Select",
        "buildspace/widget/grid/cells/Formatter",
        "dojox/grid/enhanced/plugins/IndirectSelection",
        'dojo/i18n!../../../nls/SystemAdministration'], function(declare, aspect, lang, connect, when_, html, dom, keys, domStyle, TableContainer, ContentPane, TextBox, Button, Select, Formatter, IndirectSelection, nls) {
    var Dialog, UserGroupAssignmentGrid, UserGroupAssignmentGridContainer;
    UserGroupAssignmentGrid = declare("buildspace.apps.ProjectBuilder.BillManager.UserGroupAssignmentGrid", dojox.grid.EnhancedGrid, {
        style: "border-top:none;",
        region: "center",
        groupMaintenanceGrid: null,
        groupId: -1,
        itemIds: [],
        selectedUsers: null,
        isSuperAdmin: false,
        constructor: function(args) {
            this.itemIds = [];
            this.plugins = {
                indirectSelection: {
                    headerSelector: true,
                    width: "20px",
                    style: "text-align:center;"
                }
            };

            return this.inherited(arguments);
        },
        canSort: function() {
            return false;
        },
        postCreate: function() {
            var self;
            self = this;
            self.inherited(arguments);
            aspect.after(this, "_onFetchComplete", (function(_this) {
                return function() {
                    return _this.markedCheckBoxObject(_this.selectedUsers, true);
                };
            })(this));

            this._connects.push(connect.connect(this, 'onCellClick', function(e) {
                if (e.cell.name !== "") {
                    return false;
                }
                return self.selectTree(e);
            }));

            return this._connects.push(connect.connect(this.rowSelectCell, 'toggleAllSelection', function(newValue) {
                return self.toggleAllSelection(newValue);
            }));
        },
        save: function() {
            var formValues, pb, selectedItem, self;
            self = this;
            selectedItem = this.getItem(0);
            formValues = {
                id: self.groupId,
                "sf_guard_group[users_list][]": this.itemIds,
                "sf_guard_group[_csrf_token]": selectedItem._csrf_token[0]
            };
            pb = buildspace.dialog.indeterminateProgressBar({
                title: nls.pleaseWait + '...'
            });
            pb.show().then(function(){
                dojo.xhrPost({
                    url: "systemAdministration/updateGroupUserInfo",
                    handleAs: "json",
                    content: formValues,
                    load: function(data) {
                        var grid;
                        pb.hide();
                        if(data.success){
                            grid = self.groupMaintenanceGrid;
                            grid.store.save();
                            grid.store.close();

                            grid.setStore(grid.store);
                        }
                    },
                    error: function(error) {
                        pb.hide();
                    }
                });
            });
        },
        selectTree: function(e) {
            var item, newValue, rowIndex;
            rowIndex = e.rowIndex;
            newValue = this.selection.selected[rowIndex];
            item = this.getItem(rowIndex);
            if (item && item.id[0] > 0) {
                return this.pushItemIdIntoGridArray(item, newValue);
            }
        },
        markedCheckBoxObject: function(items, newValue) {
            var itemIndex, key, self, store, _results;
            self = this;
            store = this.store;
            itemIndex = -1;
            _results = [];
            for (key in items) {
                _results.push(store.fetchItemByIdentity({
                    identity: key,
                    onItem: function(node) {
                        if(node){
                            itemIndex = node._0;
                            self.pushItemIdIntoGridArray(node, newValue);
                            self.selection.setSelected(itemIndex, newValue);
                        }
                    }
                }));
            }

            return _results;
        },
        pushItemIdIntoGridArray: function(item, select) {
            var grid, idx;
            grid = this;
            idx = dojo.indexOf(grid.itemIds, item.id[0]);
            if (select) {
                if (idx === -1) {
                    return grid.itemIds.push(item.id[0]);
                }
            } else {
                if (idx !== -1) {
                    return grid.itemIds.splice(idx, 1);
                }
            }
        },
        toggleAllSelection: function(checked) {
            var grid, selection;
            grid = this;
            selection = grid.selection;
            if (checked) {
                selection.selectRange(0, grid.rowCount - 1);
                grid.itemIds = [];
                return grid.store.fetch({
                    onComplete: function(items) {
                        return dojo.forEach(items, function(item, index) {
                            if (item.id[0] > 0) {
                                return grid.itemIds.push(item.id[0]);
                            }
                        });
                    }
                });
            } else {
                selection.deselectAll();
                return grid.itemIds = [];
            }
        },
        destroy: function() {
            this.inherited(arguments);
            dojo.forEach(this._connects, connect.disconnect);
            return delete this._connects;
        }
    });
    UserGroupAssignmentGridContainer = declare("buildspace.apps.ProjectBuilder.BillManager.UserGroupAssignmentGridContainer", dijit.layout.BorderContainer, {
        style: "padding:0px;width:100%;height:100%;",
        region: "center",
        gutters: false,
        dialog: null,
        store: null,
        structure: null,
        groupMaintenanceGrid: null,
        groupId: -1,
        groupName: null,
        selectedUsers: null,
        isSuperAdmin: false,
        postCreate: function() {
            var grid, self, toolbar;
            self = this;
            this.inherited(arguments);

            grid = this.grid = new UserGroupAssignmentGrid({
                groupMaintenanceGrid: self.groupMaintenanceGrid,
                groupId: self.groupId,
                store: self.store,
                structure: self.structure,
                selectedUsers: self.selectedUsers[0],
                isSuperAdmin: self.isSuperAdmin
            });
            toolbar = new dijit.Toolbar({
                region: "top",
                style: "padding:2px;border-bottom:none;width:100%;"
            });
            toolbar.addChild(new dijit.form.Button({
                label: nls.save,
                iconClass: "icon-16-container icon-16-save",
                onClick: function() {
                    return grid.save();
                }
            }));
            toolbar.addChild(new dijit.ToolbarSeparator());
            toolbar.addChild(new dijit.form.Button({
                label: nls.close,
                iconClass: "icon-16-container icon-16-close",
                onClick: function() {
                    return self.dialog.hide();
                }
            }));

            var filter = this.createFilter();

            self.addChild(filter);
            self.addChild(toolbar);
            return self.addChild(new dijit.layout.ContentPane({style: 'width:100%', content:grid, region:'center'}));
        },
        createFilter: function(){
            var layout = new dojox.layout.TableContainer({
                showLabels: true,
                orientation: "horiz",
                region: 'top',
                cols: 5,
                labelWidth: "auto",
                style: 'padding:0;margin:0;width:100%;'
            });

            layout.addChild(new TextBox({
                id: 'assignGroupUsernameFilterTxtBox',
                title: nls.name,
                style: 'width:180px;padding:3px;',
                selectOnClick: true,
                intermediateChanges: true
            }));

            layout.addChild(new TextBox({
                id: 'assignGroupCompanyFilterTxtBox',
                title: nls.company,
                style: 'width:180px;padding:3px;',
                selectOnClick: true,
                intermediateChanges: true
            }));

            var dropDown = new Select({
                id: 'assignGroupCompanyRoleFilterTxtBox',
                title: nls.companyRole,
                name: "company_role",
                style: 'width:140px;padding:2px!important;',
                options: [
                    { label: nls.selectAll, value: -1 },
                    { label: nls.architect, value: 1 },
                    { label: nls.contractor, value: 2 },
                    { label: nls.qs_consultant, value: 4 },
                    { label: nls.c_and_s_engineer, value: 8 },
                    { label: nls.mep_engineer, value: 16 },
                    { label: nls.land_surveyor, value: 32 },
                    { label: nls.business_unit, value: 64 },
                    { label: nls.gcd, value: 128 }
                ]
            });

            layout.addChild(dropDown);

            layout.addChild(new ContentPane({
                content: new Button({
                    label: nls.search,
                    style: 'float:right;',
                    iconClass: 'icon-16-container icon-16-zoom',
                    onClick: dojo.hitch(this, 'filterUserList')
                })
            }));

            return layout;
        },
        filterUserList: function(){
            var self = this,
                usernameTxtBox = dijit.byId('assignGroupUsernameFilterTxtBox'),
                companyTxtBox = dijit.byId('assignGroupCompanyFilterTxtBox'),
                companyRoleTxtBox = dijit.byId('assignGroupCompanyRoleFilterTxtBox');

            var pb = buildspace.dialog.indeterminateProgressBar({
                title: nls.pleaseWait + '...'
            });
            pb.show().then(function(){
                dojo.xhrPost({
                    url: "systemAdministration/getGroupUserLists",
                    handleAs: "json",
                    content: {id: self.groupId, n: usernameTxtBox.get('value'), c:companyTxtBox.get('value'), cr: companyRoleTxtBox.get('value')},
                    load: function(data) {
                        pb.hide();

                        self.grid.selection.deselectAll();
                        self.grid.itemIds = [];

                        var store = new dojo.data.ItemFileReadStore({
                            data: data.data,
                            clearOnClose: true
                        });

                        self.grid.setStore(store);
                    },
                    error: function(error) {
                        return pb.hide();
                    }
                });
            });
        }
    });

    Dialog = declare("buildspace.apps.ProjectBuilder.BillManager.UserGroupAssignmentDialog", dijit.Dialog, {
        style: "padding:0px;margin:0px;",
        title: nls.addUserToGroup,
        groupMaintenanceGrid: null,
        groupId: -1,
        groupName: null,
        data: null,
        isSuperAdmin: false,
        buildRendering: function() {
            var content;
            content = this.createContent();
            content.startup();
            this.content = content;
            this.title = nls.addUserToGroup + " (" + this.groupName + ")";
            return this.inherited(arguments);
        },
        postCreate: function() {
            domStyle.set(this.containerNode, {
            padding: "0px",
            margin: "0px"
            });
            this.closeButtonNode.style.display = "none";
            return this.inherited(arguments);
        },
        _onKey: function(e) {
            var key;
            key = e.keyCode;
            if (key === keys.ESCAPE) {
                return dojo.stopEvent(e);
            }
        },
        onHide: function() {
            return this.destroyRecursive();
        },
        createContent: function() {
            var borderContainer, content, formatter, self, store;
            self = this;
            borderContainer = new dijit.layout.BorderContainer({
                style: "padding:0px;width:950px;height:500px;",
                gutters: false
            });
            store = dojo.data.ItemFileWriteStore({
                data: self.data.data
            });
            formatter = new Formatter();
            content = new UserGroupAssignmentGridContainer({
                dialog: self,
                groupMaintenanceGrid: self.groupMaintenanceGrid,
                selectedUsers: self.data.users,
                groupId: self.groupId,
                groupName: self.groupName,
                isSuperAdmin: self.isSuperAdmin,
                store: store,
                structure: [{
                    name: "No",
                    field: "id",
                    width: '30px',
                    styles: 'text-align: center;',
                    formatter: formatter.rowCountCellFormatter
                }, {
                    name: nls.name,
                    field: "name",
                    width: 'auto'
                },{
                    name: nls.email,
                    field: "email",
                    width: '200px'
                },{
                    name: nls.company,
                    field: "company",
                    width: '160px',
                    styles: 'text-align: center;'
                },{
                    name: nls.companyRole,
                    field: "company_role",
                    width: '120px',
                    styles: 'text-align: center;'
                }]
            });

            borderContainer.addChild(content);

            return borderContainer;
        }
    });
    return Dialog;
});

}).call(this);
