// Generated by CoffeeScript 1.9.0
(function() {
  define(["dojo/_base/declare", 'dojo/data/ItemFileWriteStore', 'dijit/tree/ForestStoreModel', 'dijit/layout/TabContainer', 'dijit/layout/BorderContainer', 'dijit/Tree', './CompanyProfileMaintenance/CompanyProfileForm', './UserMaintenance/grid', './GroupMaintenance/grid', 'dojo/i18n!../../nls/SystemAdministration'], function(declare, ItemFileWriteStore, ForestStoreModel, TabContainer, BorderContainer, Tree, CompanyProfileForm, UserMaintenanceGrid, GroupMaintenanceGrid, nls) {
    var systemAdminstrationMainContainer;
    return systemAdminstrationMainContainer = declare("buildspace.apps.SystemAdministration", buildspace.apps._App, {
      init: function(args) {
        var left, mainContainer, right, systemMaintenanceMenuStore, treeModel;
        this.win = new buildspace.widget.Window({
          title: nls.appName,
          height: "300px",
          width: "450px",
          showMaximize: false,
          iconClass: this.iconClass,
          onClose: dojo.hitch(this, "kill")
        });
        systemMaintenanceMenuStore = this.systemMaintenanceMenuStore = new ItemFileWriteStore({
          url: "systemAdministration/getSystemAdministrationMenu"
        });
        treeModel = new ForestStoreModel({
          store: systemMaintenanceMenuStore,
          rootId: "root",
          rootLabel: nls.appName,
          childrenAttrs: ["__children"]
        });
        right = this.tabArea = new TabContainer({
          region: "center",
          style: "width:100%;height:100%;"
        });
        left = this.left = new Tree({
          model: treeModel,
          splitter: true,
          region: "left",
          openOnClick: true,
          labelAttr: "name",
          style: "background-color:#ecede9;width:200px;height:100%;",
          getIconClass: dojo.hitch(systemMaintenanceMenuStore, function(item, opened) {
            if (item.root || item.parent) {
              if (opened) {
                return "icon-16-container icon-16-file";
              } else {
                return "icon-16-container icon-16-folder";
              }
            } else {
              return "icon-16-container icon-16-list";
            }
          })
        });
        dojo.connect(left, "onDblClick", this, "onItem");
        mainContainer = this.mainContainer = new BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          gutters: false
        });
        mainContainer.addChild(left);
        mainContainer.addChild(right);
        this.win.addChild(mainContainer);
        this.win.show();
        return this.win.startup();
      },
      onItem: function(item) {
        var i, name, param, self, slug, store, tac;
        store = this.systemMaintenanceMenuStore;
        if (!store.isItem(item)) {
          return;
        }
        slug = store.getValue(item, "slug");
        param = store.getValue(item, "param");
        name = store.getValue(item, "name");
        slug = (param ? slug + "-" + param : slug);
        if (slug === "root") {
          return;
        }
        tac = this.tabArea.getChildren();
        self = this;
        for (i in tac) {
          if (typeof tac[i].lib_info !== "object") {
            continue;
          }
          if (tac[i].lib_info.slug === slug) {
            return this.tabArea.selectChild(tac[i]);
          }
        }
        return this.makeTab(item);
      },
      makeTab: function(item) {
        var form, name, pane, slug;
        if (!item.app[0]) {
          return;
        }
        slug = item.slug[0];
        name = item.name[0];
        switch (slug) {
          case 'CompanyProfileMaintenance':
            form = new CompanyProfileForm();
            break;
          case 'UserMaintenance':
            form = new UserMaintenanceGrid();
            break;
          case 'GroupMaintenance':
            form = new GroupMaintenanceGrid();
        }
        pane = new dijit.layout.ContentPane({
          content: form,
          closable: true,
          style: "padding: 0px; overflow: hidden;border:0px;",
          title: buildspace.truncateString(name, 25)
        });
        this.tabArea.addChild(pane);
        this.tabArea.selectChild(pane);
        return pane.lib_info = {
          name: name,
          slug: (item.param ? slug + "-" + item.param[0] : slug)
        };
      },
      kill: function() {
        if (typeof this.win !== "undefined") {
          return this.win.destroyRecursive();
        }
      }
    });
  });

}).call(this);
