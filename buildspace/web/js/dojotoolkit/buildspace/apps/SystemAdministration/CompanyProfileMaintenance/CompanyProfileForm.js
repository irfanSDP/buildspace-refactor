// Generated by CoffeeScript 1.9.0
(function() {
  define("buildspace/apps/SystemAdministration/CompanyProfileMaintenance/CompanyProfileForm", ["dojo/_base/declare", "dojo/on", "dojo/_base/lang", "dojo/dom-form", "dojo/html", "dojo/dom", "dojo/dom-attr", "dojo/dom-style", "dojo/_base/array", "dojox/form/Manager", "dojox/validate/regexp", "dojox/validate/web", "dijit/form/Form", "dojox/form/PasswordValidator", "dijit/form/ValidationTextBox", "dijit/form/Textarea", "dijit/form/DateTextBox", "dijit/form/RadioButton", "dijit/form/Select", "dijit/form/FilteringSelect", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dojo/text!./templates/companyProfileForm.html", "dojo/i18n!buildspace/nls/CompanyProfile"], function(declare, on_, lang, domForm, html, dom, domAttr, domStyle, array, Manager, regexp, web, Form, PasswordValidator, ValidateTextBox, Textarea, DateTextBox, RadioButton, Select, FilteringSelect, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, CompanyProfileFormTemplate, nls) {
    var CompanyProfileForm = declare("buildspace.apps.SystemAdministration.CompanyProfileMaintenance.CompanyProfileForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
      templateString: CompanyProfileFormTemplate,
      baseClass: "buildspace-form",
      region: "center",
      style: "border:none;overflow:auto;",
      data: null,
      nls: nls,
      constructor: function(args) {
        if (args.data.company_logo) {
          return this.imgPath = require.toUrl("images/company_logo/" + args.data.company_logo);
        } else {
          return this.imgPath = require.toUrl("images/profiles/default_user-icon.jpg");
        }
      },
      postCreate: function() {
        var self, uploader;
        this.inherited(arguments);
        self = this;
        uploader = new dojox.form.Uploader({
          label: self.nls.changeCompanyLogoPic,
          uploadOnSelect: true,
          url: "systemAdministration/uploadMyCompanyLogo",
          styles: "padding: 5px;",
          name: 'my_company_profile[company_logo]'
        });
        on_(uploader, "Begin", function(uploadedFiles) {
          var errorBlock;
          self.pb = buildspace.dialog.indeterminateProgressBar({
            title: nls.pleaseWait + "..."
          });
          errorBlock = self["error-company_logo"];
          errorBlock.innerHTML = null;
          domStyle.set(errorBlock, 'display', 'none');
          return self.pb.show();
        });
        on_(uploader, "Complete", function(uploadedFiles) {
          var errorBlock;
          self.pb.hide();
          errorBlock = self["error-company_logo"];
          if (uploadedFiles.success) {
            errorBlock.innerHTML = null;
            domStyle.set(errorBlock, 'display', 'none');
            return domAttr.set(self.companyLogoPhoto, 'src', uploadedFiles.imgURL);
          } else {
            errorBlock.innerHTML = uploadedFiles.errorMsgs.company_logo;
            return domStyle.set(errorBlock, 'display', 'block');
          }
        });
        return this.myCompanyLogoUploader.appendChild(uploader.domNode);
      },
      startup: function() {
        var countrySelectStore, self, stateSelectStore, timezoneSelectStore;
        this.inherited(arguments);
        self = this;
        countrySelectStore = new dojo.data.ItemFileReadStore({
          url: "projectBuilder/getCountry"
        });
        this.stateSelectStore = stateSelectStore = new dojo.data.ItemFileReadStore({
          url: "projectBuilder/getStateByCountry/regionId/" + self.data["my_company_profile[region_id]"]
        });
        timezoneSelectStore = new dojo.data.ItemFileReadStore({
          data: self.data["timezones"]
        });
        this.countrySelect = new FilteringSelect({
          name: "my_company_profile[region_id]",
          store: countrySelectStore,
          style: "padding:3px;width:178px;",
          searchAttr: "name",
          value: self.data["my_company_profile[region_id]"],
          required: true,
          onChange: function(country) {
            if (country) {
              self.stateSelect.set('readOnly', false);
            } else {
              self.stateSelect.set('readOnly', true);
            }
            return self.updateStateSelectStore(country);
          }
        }).placeAt(self.countrySelectDivNode);
        this.stateSelect = new FilteringSelect({
          name: "my_company_profile[subregion_id]",
          store: stateSelectStore,
          style: "padding:3px;width:178px;",
          required: false,
          searchAttr: "name",
          readOnly: self.data["my_company_profile[subregion_id]"] > 0 ? false : true,
          value: self.data["my_company_profile[subregion_id]"]
        }).placeAt(self.stateSelectDivNode);
        this.timezoneSelect = new FilteringSelect({
          name: "my_company_profile[timezone]",
          store: timezoneSelectStore,
          style: "padding:3px;width:240px;",
          required: true,
          searchAttr: "name",
          value: self.data["my_company_profile[timezone]"]
        }).placeAt(self.timezoneSelectDiv);
        return this.myCompanyProfileForm.setFormValues(this.data);
      },
      updateStateSelectStore: function(countryId) {
        if (countryId == null) {
          countryId = 0;
        }
        if (!countryId) {
          countryId = 0;
        }
        this.stateSelectStore = new dojo.data.ItemFileReadStore({
          url: "projectBuilder/getStateByCountry/regionId/" + countryId,
          clearOnClose: true
        });
        this.stateSelect.store.close();
        this.stateSelect.set('store', this.stateSelectStore);
        return this.stateSelect.set('value', '');
      },
      save: function() {
        var formValues, pb;
        if (!this.myCompanyProfileForm.validate()) {
          return false;
        }
        formValues = dojo.formToObject(this.myCompanyProfileForm.id);
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        pb.show().then(function(){
            dojo.xhrPost({
                url: "systemAdministration/updateCompanyProfile",
                handleAs: "json",
                content: formValues,
                load: function(data) {
                    pb.hide();
                },
                error: function(error) {
                    return pb.hide();
                }
            });
        });
      }
    });
    return declare("buildspace.apps.SystemAdministration.CompanyProfileMaintenance.CompanyProfileFormContainer", dijit.layout.BorderContainer, {
      region: "top",
      style: "padding:0px;width:100%;height:100%;",
      gutters: false,
      data: null,
      nls: nls,
      postCreate: function() {
        var pb, self;
        this.inherited(arguments);
        self = this;
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        pb.show().then(function(){
            dojo.xhrGet({
                url: "systemAdministration/getCompanyProfile",
                handleAs: "json",
                load: function(data) {
                    var companyProfileForm, toolbar;
                    pb.hide();
                    companyProfileForm = new CompanyProfileForm({
                        data: data
                    });
                    toolbar = new dijit.Toolbar({
                        region: "top",
                        style: "outline:none!important;border-bottom: 1px solid #ccc;border-top:none;border-left:none;border-right:none;padding:2px;width:100%;"
                    });
                    toolbar.addChild(new dijit.form.Button({
                        label: nls.save,
                        iconClass: "icon-16-container icon-16-save",
                        style: "outline:none!important;",
                        onClick: dojo.hitch(companyProfileForm, "save")
                    }));
                    self.addChild(toolbar);
                    return self.addChild(companyProfileForm);
                },
                error: function(error) {
                    return pb.hide();
                }
            })
        });
      }
    });
  });

}).call(this);
