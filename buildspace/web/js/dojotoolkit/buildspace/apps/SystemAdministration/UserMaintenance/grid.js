// Generated by CoffeeScript 1.9.0
(function() {
  define("buildspace/apps/SystemAdministration/UserMaintenance/grid", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-attr", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Selector", "dojo/_base/event", "dojo/keys", "dijit/focus", "dojo/_base/html", "dojo/request/xhr", "dijit/PopupMenuItem", 'dojo/request', './UserProfileForm', "buildspace/widget/grid/cells/Textarea", 'buildspace/widget/grid/cells/Formatter', 'dojo/i18n!../../../nls/SystemAdministration', 'buildspace/widget/grid/Filter'], function(declare, lang, array, domAttr, Menu, Selector, evt, keys, focusUtil, html, xhr, PopupMenuItem, request, UserProfileForm, Textarea, Formatter, nls, FilterToolbar) {
    var userMaintenanceGrid, userMaintenanceGridContainer;
    userMaintenanceGrid = declare("buildspace.apps.SystemAdministration.UserMaintenance.Grid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      id: 'userMaintenance-userList',
      keepSelection: true,
      rowSelector: "0px",
      region: 'center',
      userMaintenanceGridContainer: null,
      canSort: function(inSortInfo) {
        return false;
      },
      onRowDblClick: function(e) {
        var user;
        user = this.getItem(e.rowIndex);
        return this.userMaintenanceGridContainer.editExistingUser(user);
      },
      refreshGrid: function() {
        this.store.save();
        this.store.close();
        return this.setStore(this.store);
      }
    });

    return declare("buildspace.apps.SystemAdministration.UserMaintenance.Container", dijit.layout.BorderContainer, {
      style: "padding:0px;width:100%;height:100%;",
      gutters: false,
      postCreate: function() {
        var controller, controllerPane, filter, grid, gridContainer, self, stackContainer, stackPane, store;
        this.inherited(arguments);
        self = this;
        stackContainer = dijit.byId('userMaintenance-stackContainer');
        if (stackContainer) {
          dijit.byId('userMaintenance-stackContainer').destroyRecursive();
        }
        stackContainer = self.stackContainer = new dijit.layout.StackContainer({
          style: 'width:100%;height:100%;',
          region: "center",
          id: 'userMaintenance-stackContainer'
        });
        store = new dojo.data.ItemFileWriteStore({
          url: 'systemAdministration/getUserLists',
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = this.userMaintenanceGrid = new userMaintenanceGrid({
          structure: self.getGridLayout(),
          store: store,
          userMaintenanceGridContainer: self
        });
        filter = new FilterToolbar({
          grid: self.userMaintenanceGrid,
          region: "top",
          editableGrid: false,
          filterFields: ['name', 'email', 'company', 'assignedGroups']
        });
        gridContainer = new dijit.layout.BorderContainer({
          region: 'top',
          gutters: false
        });
        gridContainer.addChild(filter);
        gridContainer.addChild(new dijit.layout.ContentPane({style: 'width:100%', content:grid, region:'center'}));
        stackPane = new dijit.layout.ContentPane({
          title: nls.userList,
          content: gridContainer
        });
        stackContainer.addChild(stackPane);
        controller = new dijit.layout.StackController({
          region: "top",
          containerId: 'userMaintenance-stackContainer'
        });
        controllerPane = new dijit.layout.ContentPane({
          style: "padding: 0px; overflow: hidden;",
          baseClass: 'breadCrumbTrail',
          region: 'top',
          content: controller
        });
        this.addChild(stackContainer);
        this.addChild(controllerPane);

        return dojo.subscribe('userMaintenance-stackContainer-selectChild', "", function(page) {
          var children, index, widget, _results;
          widget = dijit.byId('userMaintenance-stackContainer');
          if (widget) {
            children = widget.getChildren();
            index = dojo.indexOf(children, dijit.byId(page.id));
            index = index + 1;
            _results = [];
            while (children.length > index) {
              widget.removeChild(children[index]);
              children[index].destroyRecursive();
              _results.push(index = index + 1);
            }
            return _results;
          }
        });
      },
      editExistingUser: function(user) {
        var pb, self, values;
        self = this;
        values = {
          id: user.id
        };
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + '...'
        });
        pb.show().then(function(){
            dojo.xhrGet({
                url: "systemAdministration/getUserInfo",
                content: values,
                handleAs: "json",
                load: function(data) {
                    var borderContainer, userProfileForm;
                    userProfileForm = new UserProfileForm({
                        region: "center",
                        user: data,
                        userMaintenanceGrid: self.userMaintenanceGrid
                    });
                    borderContainer = new dijit.layout.BorderContainer({
                        style: "padding:0px;width:100%;height:100%;",
                        baseClass: "form",
                        gutters: false,
                        region: "center"
                    });
                    borderContainer.addChild(userProfileForm);
                    self.makePane(nls.userInformation, borderContainer);
                    return pb.hide();
                },
                error: function(error) {
                    return pb.hide();
                }
            });
        });
      },
      makePane: function(name, content) {
        var pane, stackContainer;
        stackContainer = dijit.byId('userMaintenance-stackContainer');
        pane = new dijit.layout.ContentPane({
          title: name,
          content: content
        });
        stackContainer.addChild(pane);
        return stackContainer.selectChild(pane);
      },
      getGridLayout: function() {
        var formatter = new Formatter();
        return [{
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter
          }, {
            name: nls.name,
            field: "name",
            width: 'auto'
          }, {
            name: nls.email,
            field: "email",
            width: '200px'
          }, {
            name: nls.company,
            field: "company",
            width: '200px'
          }, {
            name: nls.assignedGroups,
            field: "assignedGroups",
            width: '280px',
            formatter: function(cellValue, rowIdx, cell) {
              return "<span style=\"font-weight: bold;\">" + cellValue + "</span>";
            }
          }];
      }
    });
  });

}).call(this);
