// Generated by CoffeeScript 1.9.0
(function() {
  define("buildspace/apps/PostContractSubPackageReport/BillManager/PrintPreviewElementWithWorkDoneOnlyDialog", ["dojo/_base/declare", "dojo/aspect", "dojo/_base/lang", "dojo/_base/connect", "dojo/when", "dojo/html", "dojo/dom", "dojo/keys", "dojo/dom-style", "dojo/request", "dojo/json", "dojo/number", "dojo/currency", "./PrintPreviewFormDialog", "buildspace/widget/grid/cells/Formatter", 'dojo/i18n!buildspace/nls/PostContract'], function(declare, aspect, lang, connect, when_, html, dom, keys, domStyle, request, JSON, number, currency, PrintPreviewFormDialog, Formatter, nls) {
    var selectedElementGrid, selectedElementGridContainer;
    selectedElementGrid = declare("buildspace.apps.PostContractSubPackageReport.StandardBillClaim.SelectedElementGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      region: "center",
      escapeHTMLInData: false,
      canSort: function() {
        return false;
      },
      onStyleRow: function(e) {
        var childElement, elemToHide;
        this.inherited(arguments);
        if (e.node.children[0]) {
          if (e.node.children[0].children[0].rows.length >= 2) {
            elemToHide = e.node.children[0].children[0].rows[1];
            childElement = e.node.children[0].children[0].rows[0].children;
            elemToHide.parentNode.removeChild(elemToHide);
            return dojo.forEach(childElement, function(child, i) {
              var rowSpan;
              rowSpan = dojo.attr(child, "rowSpan");
              if (!rowSpan || rowSpan < 2) {
                return dojo.attr(child, "rowSpan", 2);
              }
            });
          }
        }
      }
    });
    selectedElementGridContainer = declare("buildspace.apps.PostContractSubPackageReport.StandardBillClaim.SelectedElementGridContainer", dijit.layout.BorderContainer, {
      style: "padding:0px;width:100%;height:100%;",
      region: "center",
      gutters: false,
      dialog: null,
      store: null,
      structure: null,
      type_ref_id: -1,
      subPackageId: -1,
      billId: -1,
      postCreate: function() {
        var grid, self, toolbar;
        self = this;
        self.inherited(arguments);
        grid = this.grid = new selectedElementGrid({
          store: self.store,
          structure: self.structure
        });
        toolbar = new dijit.Toolbar({
          region: "top",
          style: "padding:2px;border-bottom:none;width:100%;"
        });
        toolbar.addChild(new dijit.form.Button({
          label: nls.print,
          iconClass: "icon-16-container icon-16-print",
          onClick: function() {
            return self.openPrintingDialog();
          }
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new dijit.form.Button({
          label: nls.close,
          iconClass: "icon-16-container icon-16-close",
          onClick: function() {
            return self.dialog.hide();
          }
        }));
        self.addChild(toolbar);
        return self.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
      },
      openPrintingDialog: function(self) {
        var pb;
        if (self == null) {
          self = this;
        }
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        pb.show();
        return request("viewTendererReporting/getPrintingInformation", {
          handleAs: 'json'
        }).then(function(response) {
          var dialog;
          dialog = new PrintPreviewFormDialog({
            title: self.dialog.title,
            printURL: 'postContractSubPackageStandardBill/printStandardBillElementWorkDoneOnly',
            exportURL: 'postContractSubPackageStandardBillExportExcelReporting/exportExcelStandardBillElementWorkDoneOnly',
            subPackageId: self.subPackageId,
            billId: self.billId,
            type_ref_id: self.type_ref_id,
            _csrf_token: response._csrf_token
          });
          pb.hide();
          return dialog.show();
        }, function() {
          return pb.hide();
        });
      }
    });
    return declare("buildspace.apps.PostContractSubPackageReport.StandardBillClaim.GroupProjectAssignmentDialog", dijit.Dialog, {
      style: "padding:0px;margin:0px;",
      project: null,
      companyId: -1,
      type_ref_id: -1,
      subPackageId: -1,
      billId: -1,
      companyName: null,
      data: null,
      buildRendering: function() {
        var content;
        content = this.createContent();
        content.startup();
        this.content = content;
        return this.inherited(arguments);
      },
      postCreate: function() {
        domStyle.set(this.containerNode, {
          padding: "0px",
          margin: "0px"
        });
        this.closeButtonNode.style.display = "none";
        return this.inherited(arguments);
      },
      _onKey: function(e) {
        var key;
        key = e.keyCode;
        if (key === keys.ESCAPE) {
          return dojo.stopEvent(e);
        }
      },
      onHide: function() {
        return this.destroyRecursive();
      },
      createContent: function(self) {
        var borderContainer, content;
        if (self == null) {
          self = this;
        }
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:1280px;height:600px;",
          gutters: false
        });
        content = new selectedElementGridContainer({
          store: dojo.data.ItemFileWriteStore({
            data: self.data
          }),
          dialog: self,
          structure: self.constructGridStructure(),
          subPackageId: self.subPackageId,
          billId: self.billId,
          type_ref_id: self.type_ref_id
        });
        borderContainer.addChild(content);
        return borderContainer;
      },
      constructGridStructure: function() {
        var additionalStructures, basicStructure, colCount, formatter, parentCells, typeColumns;
        formatter = new Formatter();
        typeColumns = this.recurringItemGridStructure();
        colCount = 0;
        parentCells = [];
        basicStructure = {
          noscroll: false,
          width: "50",
          cells: [
            [
              {
                name: "No",
                field: "id",
                width: '30px',
                styles: 'text-align: center;',
                formatter: formatter.rowCountCellFormatter,
                rowSpan: 2
              }, {
                name: nls.description,
                field: 'description',
                width: 'auto',
                formatter: formatter.postContractPrintPreviewTreeCellFormatter,
                noresize: true,
                rowSpan: 2
              }, {
                name: "" + nls.contractAmount,
                field: 'total_per_unit',
                styles: "text-align:right;color:blue;",
                width: '110px',
                formatter: formatter.unEditableNumberCellFormatter,
                noresize: true,
                rowSpan: 2
              }
            ]
          ]
        };
        additionalStructures = [
          {
            name: nls.percent,
            field_name: 'percentage',
            width: '60px',
            styles: "text-align:right;",
            formatter: formatter.unEditablePercentageCellFormatter
          }, {
            name: nls.amount,
            field_name: 'amount',
            width: '100px',
            styles: "text-align:right;",
            formatter: formatter.unEditableNumberCellFormatter
          }
        ];
        dojo.forEach(typeColumns, function(typeColumn) {
          var cellStructure, colspan, field, fieldName, i, _results;
          colspan = additionalStructures.length;
          colCount++;
          parentCells.push({
            name: typeColumn.name,
            styles: "text-align:center;",
            headerClasses: "staticHeader typeHeader" + colCount,
            colSpan: colspan
          });
          field = null;
          i = 0;
          _results = [];
          while (i < additionalStructures.length) {
            fieldName = typeColumn.field_name;
            field = fieldName + "_" + additionalStructures[i].field_name;
            cellStructure = {
              field: field,
              columnType: "prelimClaimColumn",
              fieldName: typeColumn.field_name
            };
            lang.mixin(cellStructure, additionalStructures[i]);
            basicStructure.cells[0].push(cellStructure);
            _results.push(i++);
          }
          return _results;
        });
        basicStructure.cells.push(parentCells);
        return basicStructure;
      },
      recurringItemGridStructure: function() {
        var i, len, obj, recurringFields, typeColumns;
        typeColumns = [];
        recurringFields = [
          {
            name: nls.workDone,
            field_name: 'up_to_date'
          }
        ];
        len = recurringFields.length;
        i = 0;
        while (i < len) {
          obj = {
            name: recurringFields[i].name,
            field_name: recurringFields[i].field_name
          };
          typeColumns.push(obj);
          i++;
        }
        return typeColumns;
      }
    });
  });

}).call(this);
