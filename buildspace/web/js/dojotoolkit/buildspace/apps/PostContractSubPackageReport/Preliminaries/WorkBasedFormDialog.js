// Generated by CoffeeScript 1.7.0
(function() {
  define('buildspace/apps/PostContractSubPackageReport/Preliminaries/WorkBasedFormDialog', ["dojo/_base/declare", 'dojo/_base/lang', "dojo/keys", "dojo/parser", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", 'dijit/Toolbar', 'dijit/form/Button', "dijit/layout/BorderContainer", "dijit/form/ValidationTextBox", "dijit/form/SimpleTextarea", "dijit/registry", "dojo/dom-style", "dojo/dom-form", "dojo/on", "dojo/request", "dojox/validate/web", "dijit/form/Select", "dijit/form/FilteringSelect", "dojo/store/Memory", "dojox/form/Manager", "dojo/text!./templates/workBasedForm.html", 'dojo/i18n!../../../nls/PostContractSubPackage'], function(declare, lang, keys, parser, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, Toolbar, Button, BorderContainer, ValidationTextBox, SimpleTextarea, registry, domStyle, domForm, on_, request, web, Select, FilteringSelect, Memory, Manager, template, nls) {
    var Dialog, WorkBasedForm;
    WorkBasedForm = declare("buildspace.apps.PostContractSubPackageReport.WorkBasedForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
      baseClass: "buildspace-form",
      itemId: -1,
      bill_id: -1,
      subPackage: null,
      templateString: template,
      region: 'center',
      style: "overflow: auto;",
      formInfo: null,
      businessTypeSelections: null,
      nls: nls,
      dialogContainer: null,
      item: null,
      billGridStore: null,
      total: 0,
      currentClaimRevision: null,
      gridEditable: true,
      postCreate: function(self) {
        if (self == null) {
          self = this;
        }
        this.inherited(arguments);
        on_(this.buildersWorkDoneInput, 'blur', function(e) {
          return self.calculateTotal();
        });
        return on_(this.totalBuildersWorkInput, 'blur', function(e) {
          return self.calculateTotal();
        });
      },
      startup: function() {
        this.inherited(arguments);
        this["prelimWorkBasedClaimForm"].setFormValues(this.formInfo);
        if (!this.gridEditable) {
          return this["prelimWorkBasedClaimForm"].disable();
        }
      },
      clearInputErrorMsgs: function(self) {
        var errorBlock, i, presetErrorBlocks, _results;
        if (self == null) {
          self = this;
        }
        presetErrorBlocks = {
          builders_work_done: null,
          total_builders_work: null
        };
        _results = [];
        for (i in presetErrorBlocks) {
          errorBlock = self["error-" + i];
          errorBlock.innerHTML = presetErrorBlocks[i];
          _results.push(domStyle.set(errorBlock, "display", "none"));
        }
        return _results;
      },
      save: function() {
        var form, formValues, pb, self, store, xhrPost;
        self = this;
        store = self.billGridStore;
        if (this.total > 100) {
          return buildspace.dialog.alert(nls.error, nls.totalMustBelowOneHundredPercent, 80, 320);
        }
        this.clearInputErrorMsgs();
        form = this["prelimWorkBasedClaimForm"];
        if (!form.validate()) {
          return false;
        }
        formValues = dojo.formToObject(this["prelimWorkBasedClaimForm"].id);
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        lang.mixin(formValues, {
          id: self.itemId,
          bill_id: self.bill_id,
          sub_package_id: self.subPackage.id
        });
        pb.show();
        xhrPost = function() {
          return request.post("subPackagePostContractPreliminaries/updatedWorkBasedInformation", {
            data: formValues,
            handleAs: 'json'
          }).then(function(response) {
            var errorBlock, i, property, _results;
            pb.hide();
            if (response.success) {
              for (property in response.item) {
                if (self.item.hasOwnProperty(property) && property !== store._getIdentifierAttribute()) {
                  store.setValue(self.item, property, response.item[property]);
                }
              }
              store.save();
              return self.dialogContainer.hide();
            } else {
              _results = [];
              for (i in response.errorMsgs) {
                errorBlock = self["error-" + i];
                errorBlock.innerHTML = response.errorMsgs[i];
                _results.push(domStyle.set(errorBlock, "display", "block"));
              }
              return _results;
            }
          }, function(error) {
            return pb.hide();
          });
        };
        if (this.item['timeBased-applied'][0]) {
          return new buildspace.dialog.confirm(nls.deleteTimeBasedClaimTitle, nls.deleteTimeBasedClaimMsg, 80, 320, function() {
            return xhrPost();
          }, function() {
            return pb.hide();
          });
        } else {
          return xhrPost();
        }
      },
      calculateTotal: function(preDefinedValue) {
        var buildersWorkDoneInput, calculatedTotal, preTotal, totalBuildersWorkInput;
        if (preDefinedValue == null) {
          preDefinedValue = null;
        }
        buildersWorkDoneInput = parseFloat(this.buildersWorkDoneInput.value);
        totalBuildersWorkInput = parseFloat(this.totalBuildersWorkInput.value);
        calculatedTotal = buildersWorkDoneInput / totalBuildersWorkInput;
        calculatedTotal = isFinite(calculatedTotal) ? calculatedTotal : 0;
        preTotal = this.RoundNum(calculatedTotal, 5) * 100;
        this.total = this.RoundNum(preTotal, 2);
        return this.workBasedClaimCalculatedRates.innerHTML = "" + this.total;
      },
      RoundNum: function(num, length) {
        return Math.round(num * Math.pow(10, length)) / Math.pow(10, length);
      }
    });
    return Dialog = declare('buildspace.apps.PostContractSubPackageReport.WorkBasedFormDialog', dijit.Dialog, {
      title: nls.workBasedRecurringClaim,
      style: "padding:0px;margin:0px;width:320px;height:180px;",
      itemId: -1,
      bill_id: -1,
      formInfo: null,
      subPackage: null,
      item: null,
      billGridStore: null,
      currentClaimRevision: null,
      gridEditable: true,
      buildRendering: function() {
        var content;
        content = this.createContent();
        this.content = content;
        content.startup();
        return this.inherited(arguments);
      },
      postCreate: function() {
        domStyle.set(this.containerNode, {
          padding: "0px",
          margin: "0px"
        });
        this.closeButtonNode.style.display = "none";
        return this.inherited(arguments);
      },
      createContent: function() {
        var borderContainer, form, self, toolbar;
        self = this;
        borderContainer = new BorderContainer({
          style: "width:320px;height:180px;padding:0;margin:0;",
          gutters: false
        });
        form = new WorkBasedForm({
          itemId: self.itemId,
          bill_id: this.bill_id,
          formInfo: this.formInfo,
          subPackage: this.subPackage,
          dialogContainer: self,
          item: this.item,
          billGridStore: this.billGridStore,
          total: this.formInfo.total,
          currentClaimRevision: this.currentClaimRevision,
          gridEditable: this.gridEditable
        });
        toolbar = new Toolbar({
          region: 'top',
          style: "outline:none!important;padding:2px;overflow:hidden;"
        });
        toolbar.addChild(new Button({
          label: nls.save,
          iconClass: "icon-16-container icon-16-save",
          onClick: function() {
            return form.save();
          },
          disabled: self.gridEditable ? false : true
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new dijit.form.Button({
          label: nls.close,
          iconClass: "icon-16-container icon-16-close",
          onClick: function() {
            return self.hide();
          }
        }));
        borderContainer.addChild(toolbar);
        borderContainer.addChild(form);
        return borderContainer;
      },
      _onKey: function(e) {
        var key;
        key = e.keyCode;
        if (key === keys.ESCAPE) {
          return dojo.stopEvent(e);
        }
      },
      onHide: function() {
        return this.destroyRecursive();
      }
    });
  });

}).call(this);
