// Generated by CoffeeScript 1.9.0
(function() {
  define("buildspace/apps/StockOut/StockOutItemGridContainer", ["dojo/_base/declare", "dojo/_base/lang", "dojox/grid/enhanced/plugins/Selector", "dojox/grid/enhanced/plugins/Rearrange", 'buildspace/widget/grid/Filter', 'dijit/Toolbar', 'dijit/form/Button', "dojo/_base/event", "dijit/layout/BorderContainer", "dojo/keys", "dijit/focus", 'dojo/request', 'buildspace/widget/grid/cells/Formatter', 'dojo/i18n!../../nls/StockOut'], function(declare, lang, Selector, Rearrange, Filter, Toolbar, Button, evt, BorderContainer, keys, focusUtil, request, Formatter, nls) {
    var stockOutItemGrid = declare("buildspace.apps.StockOut.StockOutItemGrid", dojox.grid.EnhancedGrid, {
      escapeHTMLInData: false,
      style: "border-top:none;",
      keepSelection: true,
      rowSelector: "0px",
      region: 'center',
      gridContainer: null,
      stockOutWorkAreaContainer: null,
      constructor: function(args) {
        return this.rearranger = Rearrange(this, {});
      },
      canSort: function(inSortInfo) {
        return false;
      },
      refreshGrid: function() {
        this.store.save();
        this.store.close();
        return this.setStore(this.store);
      }
    });
    return declare("buildspace.apps.StockOut.StockOutItemGridContainer", BorderContainer, {
      stockOutWorkAreaContainer: null,
      project: null,
      resource: null,
      resourceTrade: null,
      style: 'height:100%;width:100%;padding:0;margin:0;',
      gutters: false,
      postCreate: function() {
        var filter, grid, self, store;
        this.inherited(arguments);
        self = this;
        store = new dojo.data.ItemFileWriteStore({
          url: "stockOut/getItemListingsWithDeliveryOrder/projectId/" + self.project.id[0] + "/resourceTradeId/" + self.resourceTrade.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new stockOutItemGrid({
          gridContainer: self,
          stockOutWorkAreaContainer: self.stockOutWorkAreaContainer,
          structure: self.getResourceItemGridLayout(),
          store: store,
          onRowDblClick: function(e) {
            var column, resourceItem;
            self = this;
            column = e.cell.field;
            resourceItem = this.getItem(e.rowIndex);
            if (resourceItem.id[0] < 0) {
              return false;
            }
            if (column === 'total_cost') {
              self.gridContainer.createViewTotalCostItemGridInDepthInformationGrid(resourceItem);
            } else if (column === 'do_quantity') {
              self.gridContainer.createViewDeliveryOrderQuantityItemGridInDepthInformationGrid(resourceItem);
            } else if (column === 'stock_out_quantity') {
              self.gridContainer.createViewStockOutQuantityItemGridInDepthInformationGrid(resourceItem);
            }
            return false;
          }
        });
        filter = new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [{
            'description': nls.description
          }, {
            'unit': nls.unit
          }]
        });
        this.addChild(filter);
        return this.addChild(grid);
      },
      createViewTotalCostItemGridInDepthInformationGrid: function(resourceItem, self) {
        var borderContainer, grid, store;
        if (self == null) {
          self = this;
        }
        store = new dojo.data.ItemFileWriteStore({
          url: "stockOut/getInvoiceCostingsByResourceItem/projectId/" + this.project.id[0] + "/resourceItemId/" + resourceItem.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new stockOutItemGrid({
          project: this.project,
          resourceItem: resourceItem,
          store: store,
          structure: self.getInvoiceGridLayout()
        });
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          baseClass: "form",
          gutters: false,
          region: "center"
        });
        borderContainer.addChild(new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [{
            'invoice_no': nls.invoiceNo
          }, {
            'supplier_name': nls.supplier
          }, {
            'issued_by': nls.issued_by
          }]
        }));
        borderContainer.addChild(grid);
        return self.stockOutWorkAreaContainer.makePane(this.resource, resourceItem.description[0], borderContainer);
      },
      createViewDeliveryOrderQuantityItemGridInDepthInformationGrid: function(resourceItem, self) {
        var borderContainer, grid, store;
        if (self == null) {
          self = this;
        }
        store = new dojo.data.ItemFileWriteStore({
          url: "stockOut/getDeliveryOrderCostingsByResourceItem/projectId/" + this.project.id[0] + "/resourceItemId/" + resourceItem.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new stockOutItemGrid({
          project: this.project,
          resourceItem: resourceItem,
          store: store,
          structure: self.getDeliveryOrderGridLayout()
        });
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          baseClass: "form",
          gutters: false,
          region: "center"
        });
        borderContainer.addChild(new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [{
            'invoice_no': nls.invoiceNo
          }, {
            'delivery_order_no': nls.doNo
          }, {
            'supplier_name': nls.supplier
          }]
        }));
        borderContainer.addChild(grid);
        return self.stockOutWorkAreaContainer.makePane(this.resource, resourceItem.description[0], borderContainer);
      },
      createViewStockOutQuantityItemGridInDepthInformationGrid: function(resourceItem, self) {
        var borderContainer, grid, store;
        if (self == null) {
          self = this;
        }
        store = new dojo.data.ItemFileWriteStore({
          url: "stockOut/getStockOutQtyByResourceItem/projectId/" + this.project.id[0] + "/resourceItemId/" + resourceItem.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new stockOutItemGrid({
          project: this.project,
          resourceItem: resourceItem,
          store: store,
          structure: self.getStockOutGridLayout()
        });
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          baseClass: "form",
          gutters: false,
          region: "center"
        });
        borderContainer.addChild(new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [{
            'running_number': nls.stockOutNo
          }, {
            'creator_name': nls.created_by
          }]
        }));
        borderContainer.addChild(grid);
        return self.stockOutWorkAreaContainer.makePane(this.resource, resourceItem.description[0], borderContainer);
      },
      getResourceItemGridLayout: function() {
        var formatter = new Formatter;
        return [{
          name: "No",
          field: "id",
          width: '30px',
          styles: 'text-align: center;',
          formatter: formatter.rowCountCellFormatter,
          noresize: true
        }, {
          name: nls.description,
          field: "description",
          width: 'auto',
          formatter: formatter.treeCellFormatter,
          noresize: true
        }, {
          name: nls.unit,
          field: "uom_id",
          styles: 'text-align: center;',
          width: '70px',
          formatter: formatter.unitIdCellFormatter,
          noresize: true
        }, {
          name: nls.totalCostWithTax,
          field: "total_cost",
          styles: 'text-align:right;color:blue;',
          width: '140px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.doQuantity,
          field: 'do_quantity',
          styles: "text-align:right;color:blue;",
          width: '120px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.stockOutQuantity,
          field: 'stock_out_quantity',
          styles: "text-align:right;color:blue;",
          width: '120px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.balanceQuantity,
          field: 'balance_quantity',
          styles: "text-align:right;",
          width: '120px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }];
      },
      getInvoiceGridLayout: function() {
        var formatter = new Formatter;
        return [{
          name: "No",
          field: "id",
          width: '30px',
          styles: 'text-align: center;',
          formatter: formatter.rowCountCellFormatter,
          noresize: true
        }, {
          name: nls.invoiceNo,
          field: "invoice_no",
          styles: 'text-align: center; color: red;',
          width: '140px',
          noresize: true
        }, {
          name: nls.supplier,
          field: "supplier_name",
          styles: 'text-align: center;',
          width: 'auto',
          noresize: true
        }, {
          name: nls.rate,
          field: 'rates',
          styles: "text-align:right;",
          width: '75px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.discount + " %",
          field: 'discount_percentage',
          styles: "text-align:right;",
          width: '75px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.tax + " %",
          field: 'tax_percentage',
          styles: "text-align:right;",
          width: '75px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.quantity,
          field: "quantity",
          width: '90px',
          styles: 'text-align: right;',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.totalWithoutTax,
          field: 'total_without_tax',
          styles: "text-align:right;",
          width: '120px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.totalWithTax,
          field: 'total',
          styles: "text-align:right;",
          width: '120px',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.issued_by,
          field: 'issued_by',
          styles: "text-align:center;",
          width: '140px',
          noresize: true
        }, {
          name: nls.invoiceDate,
          field: "invoice_date",
          styles: "text-align:center;",
          width: '160px',
          noresize: true
        }];
      },
      getDeliveryOrderGridLayout: function() {
        var formatter = new Formatter;
        return [{
          name: "No",
          field: "id",
          width: '30px',
          styles: 'text-align: center;',
          formatter: formatter.rowCountCellFormatter,
          noresize: true
        }, {
          name: nls.invoiceNo,
          field: "invoice_no",
          styles: 'text-align: center; color: red;',
          width: '140px',
          noresize: true
        }, {
          name: nls.doNo,
          field: "delivery_order_no",
          styles: 'text-align: center; color: red;',
          width: '140px',
          noresize: true
        }, {
          name: nls.doQuantity,
          field: "quantity",
          width: '90px',
          styles: 'text-align: right;',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.remarks,
          field: "remark",
          styles: 'color: blue;',
          width: '380px',
          noresize: true
        }, {
          name: nls.supplier,
          field: "supplier_name",
          styles: 'text-align: center;',
          width: 'auto',
          noresize: true
        }, {
          name: nls.date_of_delivery_order,
          field: "delivery_order_date",
          styles: "text-align:center;",
          width: '160px',
          noresize: true
        }];
      },
      getStockOutGridLayout: function() {
        var formatter = new Formatter;
        return [{
          name: "No",
          field: "id",
          width: '30px',
          styles: 'text-align: center;',
          formatter: formatter.rowCountCellFormatter,
          noresize: true
        }, {
          name: nls.stockOutNo,
          field: "running_number",
          styles: 'text-align: center; color: red;',
          width: '160px',
          noresize: true
        }, {
          name: nls.stockOutQuantity,
          field: "quantity",
          width: '90px',
          styles: 'text-align: right;',
          formatter: formatter.unEditableCurrencyCellFormatter,
          noresize: true
        }, {
          name: nls.created_by,
          field: "creator_name",
          styles: 'text-align: center;',
          width: 'auto',
          noresize: true
        }, {
          name: nls.stock_out_date,
          field: "stock_out_date",
          styles: "text-align:center;",
          width: '160px',
          noresize: true
        }];
      }
    });
  });

}).call(this);
