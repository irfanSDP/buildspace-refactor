// Generated by CoffeeScript 1.7.1
(function() {
  define(['dojo/_base/declare', 'dojo/parser', 'dijit/_WidgetBase', 'dijit/_OnDijitClickMixin', 'dijit/_TemplatedMixin', 'dijit/_WidgetsInTemplateMixin', 'dojox/validate/web', 'dojox/form/Manager', 'dijit/form/ValidationTextBox', 'dijit/form/CheckBox', 'dojo/dom-form', 'dojo/_base/lang', 'dojo/on', 'dojo/dom-construct', 'dijit/layout/ContentPane', 'dojo/text!./templates/headStylingForm.html'], function(declare, parser, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, web, Manager, ValidationTextBox, CheckBox, domForm, lang, delegate, domConstruct, ContentPane, template) {
    var form;
    form = declare('buildspace.apps.SubPackage.BillPrintoutSetting.HeadStylingFormatForm', [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
      baseClass: "buildspace-form",
      templateString: template,
      projectId: 1,
      subPackageId: -1,
      layoutSettingId: -1,
      data: void 0,
      counter: 4,
      postCreate: function() {
        var dataLength;
        this.inherited(arguments);
        dataLength = this.data.length;
        return this.generateTableRow(dataLength);
      },
      startup: function() {
        this.inherited(arguments);
        return this.populateForm();
      },
      generateTableRow: function(dataCount) {
        var actualHead, i, largeString, string, _i;
        if (dataCount == null) {
          dataCount = 0;
        }
        largeString = "";
        for (i = _i = 0; _i < dataCount; i = _i += 1) {
          actualHead = i + 1;
          string = "<tr style=\"height:32px;\"><td class=\"label\" style=\"width:100px;\" data-headIdentifier=" + actualHead + "><label style=\"display: inline;width:100px;\">Head " + actualHead + ":</label><input type=\"hidden\" name=\"content[id][" + actualHead + "]\"><input type=\"hidden\" name=\"content[head][" + actualHead + "]\"></td>" + "<td style=\"width:50px;text-align:center;\"><input type=\"checkbox\" data-dojo-type=\"dijit/form/CheckBox\" name=\"content[bold][" + actualHead + "]\"><label class=\"removeBlock addMarginRight\" style=\"font-weight:bold;\">Bold</label></td>" + "<td style=\"width:100px;text-align:center;\"><input type=\"checkbox\" data-dojo-type=\"dijit/form/CheckBox\" name=\"content[underline][" + actualHead + "]\"><label class=\"removeBlock addMarginRight\" style=\"text-decoration:underline;\">Underline</label></td>" + "<td style=\"width:50px;text-align:center;\"><input type=\"checkbox\" data-dojo-type=\"dijit/form/CheckBox\" name=\"content[italic][" + actualHead + "]\"><label class=\"removeBlock addMarginRight\" style=\"font-style:italic;\">Italic</label></td></tr>";
          largeString += string;
          if (actualHead >= this.counter) {
            this.counter += 1;
          }
        }
        return new ContentPane({
          content: largeString,
          style: "display: table-row-group;"
        }, this["tableContainer-" + this.projectId]);
      },
      populateForm: function() {
        var data, myForm, object, _ref, _results;
        myForm = this["myForm-" + this.projectId];
        _ref = this.data;
        _results = [];
        for (object in _ref) {
          data = _ref[object];
          _results.push(myForm.setFormValues(data));
        }
        return _results;
      },
      validateForm: function() {
        var formID, formValues, myForm, postContent;
        myForm = this["myForm-" + this.projectId];
        if (myForm.validate()) {
          formID = myForm.id;
          formValues = dojo.formToObject(formID);
          return postContent = formValues;
        } else {
          return false;
        }
      }
    });
    return form;
  });

}).call(this);
