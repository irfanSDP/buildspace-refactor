// Generated by CoffeeScript 1.9.0
(function() {
    define('buildspace/apps/CompanyDirectories/Branches/CompanyBranchContainer', ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-attr", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Selector", "dojox/grid/enhanced/plugins/Rearrange", "dojo/_base/event", "dojo/keys", "dojo/dom-style", "dijit/focus", "dojo/_base/html", "dojo/request/xhr", "dijit/Toolbar", "dijit/form/Button", "dijit/PopupMenuItem", 'dojo/request', 'dijit/layout/BorderContainer', "buildspace/widget/grid/cells/Textarea", 'buildspace/widget/grid/cells/Formatter', './CompanyBranchForm', 'dojo/i18n!../../../nls/CompanyDirectories'], function(declare, lang, array, domAttr, Menu, Selector, Rearrange, evt, keys, domStyle, focusUtil, html, xhr, Toolbar, Button, PopupMenuItem, request, BorderContainer, Textarea, Formatter, CompanyBranchForm, nls) {
        var companyBranchContainer, companyBranchGrid;
        companyBranchGrid = declare("buildspace.apps.CompanyDirectories.Branches.CompanyBranchGrid", dojox.grid.EnhancedGrid, {
            style: "border-top:none;",
            keepSelection: true,
            rowSelector: "0px",
            region: 'center',
            companyBranchContainer: null,
            editable: true,
            constructor: function(args) {
                return this.rearranger = Rearrange(this, {});
            },
            canSort: function(inSortInfo) {
                return false;
            },
            noDataMessage: nls.noBranchAvailableInGrid,
            postCreate: function() {
                this.inherited(arguments);
                return this.on('RowClick', function(e) {
                    var item;
                    item = this.getItem(e.rowIndex);
                    if (item && item.id[0] > 0 && this.editable) {
                        return this.disableToolbarButtons(false);
                    } else {
                        return this.disableToolbarButtons(true);
                    }
                });
            },
            onRowDblClick: function(e) {
                var item = this.getItem(e.rowIndex);
                if (item.id[0] > 0) {
                    return this.editExistingBranch(this.getItem(e.rowIndex));
                }
            },
            editExistingBranch: function(branch) {
                var pb, self;
                self = this;
                pb = new buildspace.dialog.indeterminateProgressBar({
                    title: nls.processing + "..."
                });
                pb.show();
                return request.get('companyDirectories/getBranchInformation', {
                    query: {
                        companyId: self.companyId,
                        branchId: branch.id
                    },
                    handleAs: 'json'
                }).then(function(response) {
                    var borderContainer, content;
                    content = new CompanyBranchForm({
                        companyId: self.companyId,
                        branchId: branch.id,
                        formInfo: response.branchInformationForm,
                        companyBranchContainer: self.companyBranchContainer,
                        editable: self.editable
                    });
                    borderContainer = new dijit.layout.BorderContainer({
                        style: "padding:0px;width:100%;height:100%;",
                        baseClass: "form",
                        gutters: false,
                        region: "center"
                    });
                    borderContainer.addChild(content);
                    self.companyBranchContainer.makePane(nls.editBranch, borderContainer);
                    return pb.hide();
                }, function(error) {
                    return pb.hide();
                });
            },
            deleteRow: function(rowIndex) {
                var item, pb, self, xhrArgs;
                self = this;
                item = this.getItem(rowIndex);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.deleting + '. ' + nls.pleaseWait + '...'
                });
                pb.show();
                xhrArgs = {
                    url: 'companyDirectories/deleteBranchInfo',
                    content: {
                        branchId: item.id,
                        _csrf_token: item._csrf_token
                    },
                    handleAs: 'json',
                    load: function(data) {
                        pb.hide();
                        if (data.success) {
                            return self.refreshGrid();
                        } else {
                            return console.log(data);
                        }
                    },
                    error: function(error) {
                        return pb.hide();
                    }
                };
                return new buildspace.dialog.confirm(nls.deleteBranchTitle, nls.deleteBranchMsg, 80, 320, function() {
                    return dojo.xhrPost(xhrArgs);
                }, function() {
                    return pb.hide();
                });
            },
            refreshGrid: function() {
                this.store.save();
                this.store.close();
                return this.setStore(this.store);
            },
            disableToolbarButtons: function(isDisable, buttonsToEnable) {
                var deleteRowBtn = dijit.byId("deleteBranchFromCompanyDirectories");
                if(deleteRowBtn)
                    deleteRowBtn.set('disabled', isDisable);
            }
        });

        return declare("buildspace.apps.CompanyDirectories.Branches.CompanyBranchContainer", BorderContainer, {
            companyId: -1,
            dialogContainer: null,
            style: 'padding:0px;width:100%;height:100%;',
            title: nls.tabBranchesDesc,
            gutters: false,
            formInfo: null,
            editable: true,
            postCreate: function() {
                var controller, controllerPane, grid, gridContainer, self, stackContainer, stackPane, store, toolbar;
                this.inherited(arguments);
                self = this;
                stackContainer = dijit.byId('companyDirectoriesBranchMaintenance-stackContainer');
                if (stackContainer) {
                    dijit.byId('companyDirectoriesBranchMaintenance-stackContainer').destroyRecursive();
                }
                stackContainer = self.stackContainer = new dijit.layout.StackContainer({
                    style: 'width:100%;height:100%;',
                    region: "center",
                    id: 'companyDirectoriesBranchMaintenance-stackContainer'
                });
                store = new dojo.data.ItemFileWriteStore({
                    url: "companyDirectories/getBranchesListing/companyId/" + this.companyId,
                    clearOnClose: true,
                    urlPreventCache: true
                });
                grid = this.grid = new companyBranchGrid({
                    structure: self.getGridLayout(),
                    store: store,
                    companyId: this.companyId,
                    formInfo: this.formInfo,
                    companyBranchContainer: self,
                    editable: self.editable
                });

                gridContainer = new dijit.layout.BorderContainer({
                    region: 'top',
                    gutters: false
                });

                if(this.editable){
                    toolbar = new Toolbar({
                        region: 'top',
                        style: "outline:none!important;padding:2px;border:none;overflow:hidden;"
                    });
                    toolbar.addChild(new Button({
                        label: nls.addNewBranch,
                        iconClass: "icon-16-container icon-16-add",
                        disabled: self.editable ? false : true,
                        onClick: function() {
                            var pb = new buildspace.dialog.indeterminateProgressBar({
                                title: nls.processing + "..."
                            });
                            pb.show();

                            return request.get('companyDirectories/getBranchInformation', {
                                query: {
                                    companyId: self.companyId,
                                    branchId: -1
                                },
                                handleAs: 'json'
                            }).then(function(response) {
                                var borderContainer, content;
                                content = new CompanyBranchForm({
                                    companyId: self.companyId,
                                    branchId: -1,
                                    formInfo: response.branchInformationForm,
                                    companyBranchContainer: self
                                });
                                borderContainer = new dijit.layout.BorderContainer({
                                    style: "padding:0px;width:100%;height:100%;",
                                    baseClass: "form",
                                    gutters: false,
                                    region: "center"
                                });
                                borderContainer.addChild(content);
                                self.makePane(nls.addNewBranch, borderContainer);
                                return pb.hide();
                            }, function(error) {
                                return pb.hide();
                            });
                        }
                    }));
                    toolbar.addChild(new dijit.ToolbarSeparator);
                    toolbar.addChild(new Button({
                        label: nls["delete"],
                        id: 'deleteBranchFromCompanyDirectories',
                        iconClass: "icon-16-container icon-16-delete",
                        disabled: true,
                        onClick: function() {
                            return grid.deleteRow(grid.selection.selectedIndex);
                        }
                    }));

                    gridContainer.addChild(toolbar);
                }

                gridContainer.addChild(grid);

                stackPane = new dijit.layout.ContentPane({
                    title: nls.tabBranchesDesc,
                    content: gridContainer
                });
                stackContainer.addChild(stackPane);
                controller = new dijit.layout.StackController({
                    region: "top",
                    containerId: 'companyDirectoriesBranchMaintenance-stackContainer'
                });
                controllerPane = new dijit.layout.ContentPane({
                    style: "padding: 0px; overflow: hidden;",
                    baseClass: 'breadCrumbTrail',
                    region: 'top',
                    content: controller
                });
                this.addChild(stackContainer);
                this.addChild(controllerPane);
                return dojo.subscribe('companyDirectoriesBranchMaintenance-stackContainer-selectChild', "", function(page) {
                    var children, index, widget, _results;
                    widget = dijit.byId('companyDirectoriesBranchMaintenance-stackContainer');
                    if (widget) {
                        children = widget.getChildren();
                        index = dojo.indexOf(children, dijit.byId(page.id));
                        index = index + 1;
                        _results = [];
                        while (children.length > index) {
                            widget.removeChild(children[index]);
                            children[index].destroyRecursive();
                            _results.push(index = index + 1);
                        }
                        return _results;
                    }
                });
            },
            makePane: function(name, content) {
                var pane, stackContainer;
                stackContainer = dijit.byId('companyDirectoriesBranchMaintenance-stackContainer');
                pane = new dijit.layout.ContentPane({
                    title: name,
                    content: content
                });
                stackContainer.addChild(pane);
                return stackContainer.selectChild(pane);
            },
            getGridLayout: function() {
                var formatter = new Formatter;
                return [{
                    name: "No",
                    field: "id",
                    width: '30px',
                    styles: 'text-align: center;',
                    formatter: formatter.rowCountCellFormatter
                },{
                    name: nls.branchName,
                    field: "branch_name",
                    width: 'auto'
                },{
                    name: nls.country,
                    field: "country",
                    width: '120px',
                    styles: 'text-align: center;'
                },{
                    name: nls.state,
                    field: "state",
                    width: '120px',
                    styles: 'text-align: center;'
                }];
            }
        });
    });

}).call(this);
