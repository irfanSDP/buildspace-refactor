// Generated by CoffeeScript 1.9.0
(function() {
    define('buildspace/apps/CompanyDirectories/CompanyInformation', ["dojo/_base/declare", 'dojo/_base/lang', "dojo/parser", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", 'dijit/Toolbar', 'dijit/form/Button', "dijit/layout/BorderContainer", "dijit/form/ValidationTextBox", "dijit/form/SimpleTextarea", "dijit/registry", "dojo/dom-style", "dojo/dom-form", "dojo/request", "dojox/validate/web", "dijit/form/Select", "dijit/form/FilteringSelect", "dojo/store/Memory", "dojox/form/Manager", "dojo/text!./templates/companyForm.html", 'dojo/i18n!../../nls/CompanyDirectories'], function(declare, lang, parser, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, Toolbar, Button, BorderContainer, ValidationTextBox, SimpleTextarea, registry, domStyle, domForm, request, web, Select, FilteringSelect, Memory, Manager, template, nls) {
        var companyInformationForm, companyInformationFormContainer;
        companyInformationForm = declare("buildspace.apps.CompanyDirectories.CompanyInformationForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
            baseClass: "buildspace-form",
            companyId: -1,
            templateString: template,
            region: 'center',
            style: "overflow: auto;",
            companyInfo: null,
            formInfo: null,
            dialogContainer: null,
            companyDirectoriesGrid: null,
            nls: nls,
            editable: true,
            postCreate: function() {
                this.inherited(arguments);
            },
            startup: function() {
                this.inherited(arguments);
                this["companyForm-" + this.companyId].setFormValues(this.formInfo);
                if (!this.editable) {
                    return this["companyForm-" + this.companyId].disable();
                }
            },
            clearInputErrorMsgs: function() {
                var errorBlock, i, presetErrorBlocks, self, _results;
                self = this;
                presetErrorBlocks = {
                    shortname: null,
                    about: null,
                    contact_person_name: null,
                    contact_person_email: null,
                    contact_person_direct_line: null,
                    contact_person_mobile: null,
                    website: null
                };
                _results = [];
                for (i in presetErrorBlocks) {
                    errorBlock = self["error-" + i];
                    errorBlock.innerHTML = presetErrorBlocks[i];
                    _results.push(domStyle.set(errorBlock, "display", "none"));
                }
                return _results;
            },
            save: function() {
                var form, formValues, pb, self;
                self = this;
                this.clearInputErrorMsgs();
                form = this["companyForm-" + this.companyId];
                if (!form.validate()) {
                    return false;
                }
                formValues = dojo.formToObject(this["companyForm-" + this.companyId].id);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + "..."
                });
                lang.mixin(formValues, {
                    companyId: self.companyId
                });
                pb.show();

                return request.post('companyDirectories/updateCompanyInformation', {
                    data: formValues,
                    handleAs: 'json'
                }).then(function(response) {
                    var errorBlock, i, _results;
                    pb.hide();

                    if (response.success) {
                        self.companyDirectoriesGrid.refreshGrid();
                        return self.dialogContainer.hide();
                    } else {
                        _results = [];
                        for (i in response.errorMsgs) {
                            if (i !== 'username') {
                                errorBlock = self["error-" + i];
                                errorBlock.innerHTML = response.errorMsgs[i];
                                _results.push(domStyle.set(errorBlock, "display", "block"));
                            } else {
                                _results.push(void 0);
                            }
                        }
                        return _results;
                    }
                }, function(error) {
                    return pb.hide();
                });
            }
        });

        return declare("buildspace.apps.CompanyDirectories.CompanyInformationFormContainer", BorderContainer, {
            companyId: -1,
            dialogContainer: null,
            style: 'height:100%; width:100%; padding: 0; margin: 0;border:none;',
            gutters: false,
            companyInfo: null,
            formInfo: null,
            companyDirectoriesGrid: null,
            title: nls.tabMainInformationDesc,
            editable: true,
            postCreate: function() {
                this.inherited(arguments);

                var form = new companyInformationForm({
                    companyId: this.companyId,
                    companyInfo: this.companyInfo,
                    formInfo: this.formInfo,
                    dialogContainer: this.dialogContainer,
                    companyDirectoriesGrid: this.companyDirectoriesGrid,
                    editable: this.editable
                });

                if(this.editable){
                    var toolbar = new Toolbar({
                        region: 'top',
                        style: "outline:none!important;padding:2px;overflow:hidden;"
                    });
                    toolbar.addChild(new Button({
                        label: nls.save,
                        iconClass: "icon-16-container icon-16-save",
                        disabled: this.editable ? false : true,
                        onClick: function() {
                            return form.save();
                        }
                    }));
                    this.addChild(toolbar);
                }

                return this.addChild(form);
            }
        });
    });
}).call(this);
