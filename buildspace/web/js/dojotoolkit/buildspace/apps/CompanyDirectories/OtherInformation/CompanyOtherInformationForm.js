// Generated by CoffeeScript 1.9.0
(function() {
    define('buildspace/apps/CompanyDirectories/OtherInformation/CompanyOtherInformationForm', ["dojo/_base/declare", "dojo/on", 'dojo/_base/lang', "dojo/parser", "dojo/_base/connect", "dojo/dom-attr", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", 'dijit/Toolbar', 'dijit/form/Button', "dijit/layout/BorderContainer", "dijit/form/ValidationTextBox", "dijit/form/SimpleTextarea", "dijit/registry", "dojo/dom-style", "dojo/dom-form", "dojo/request", "dojox/validate/web", "dijit/form/Select", "dijit/form/FilteringSelect", "dojo/store/Memory", "dojox/form/Manager", "dojox/grid/enhanced/plugins/Rearrange", "dojo/text!./templates/companyOtherInformationForm.html", 'buildspace/widget/grid/cells/Formatter', 'dojo/i18n!../../../nls/CompanyDirectories'], function(declare, on_, lang, parser, connect, domAttr, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, Toolbar, Button, BorderContainer, ValidationTextBox, SimpleTextarea, registry, domStyle, domForm, request, web, Select, FilteringSelect, Memory, Manager, Rearrange, template, Formatter, nls) {
        var companyOtherInformationForm, companyOtherInformationFormContainer, uploadedFilesGrid;
        uploadedFilesGrid = declare("buildspace.apps.CompanyDirectories.OtherInformation.UploadedFilesGrid", dojox.grid.EnhancedGrid, {
            style: "border:none;height:135px;",
            keepSelection: true,
            rowSelector: "0px",
            companyOtherInformationForm: null,
            escapeHTMLInData: false,
            noDataMessage: nls.noUploadedFileAvailableInGrid,
            editable: true,
            postCreate: function() {
                var self;
                this.inherited(arguments);
                self = this;
                return this._connects.push(connect.connect(this, 'onCellClick', function(e) {
                    var fieldName, item;
                    item = this.getItem(e.rowIndex);
                    fieldName = e.cell.field;
                    if (fieldName !== 'delete' || !self.editable) {
                        return false;
                    }
                    return self.deleteUploadedFile(item);
                }));
            },
            canSort: function(inSortInfo) {
                return false;
            },
            deleteUploadedFile: function(item) {
                var pb, self;
                self = this;
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + "..."
                });
                pb.show();
                return request.post('companyDirectories/deleteUploadedFile', {
                    data: {
                        fileId: item.id,
                        _csrf_token: item._csrf_token
                    },
                    handleAs: 'json'
                }).then(function(response) {
                    pb.hide();
                    if (response.success) {
                        return self.refreshGrid();
                    } else {
                        //return console.log('DIE');
                    }
                }, function(error) {
                    return pb.hide();
                });
            },
            refreshGrid: function() {
                this.store.save();
                this.store.close();
                return this.setStore(this.store);
            }
        });

        companyOtherInformationForm = declare("buildspace.apps.CompanyDirectories.OtherInformation.CompanyOtherInformationForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
            baseClass: "buildspace-form",
            companyId: -1,
            otherInformationId: -1,
            newOtherInformationId: -1,
            templateString: template,
            region: 'center',
            style: "overflow: auto;",
            formInfo: null,
            companyOtherInformationGrid: null,
            grid: null,
            nls: nls,
            editable: true,
            constructor: function(args) {
                if (args.otherInformationId > 0) {
                    return args.newOtherInformationId = args.otherInformationId;
                }
            },
            startup: function() {
                this.inherited(arguments);
                this["otherInformationForm-" + this.companyId + "-" + this.otherInformationId].setFormValues(this.formInfo);
                if (!this.editable) {
                    this["otherInformationForm-" + this.companyId + "-" + this.otherInformationId].disable();
                }
                if (this.otherInformationId > 0) {
                    return this.generateUploadedFilesGrid();
                } else {
                    return this.hideUploaderFilesGrid();
                }
            },
            clearInputErrorMsgs: function() {
                var errorBlock, i, presetErrorBlocks, self, _results;
                self = this;
                presetErrorBlocks = {
                    description: null
                };
                _results = [];
                for (i in presetErrorBlocks) {
                    errorBlock = self["error-" + i];
                    errorBlock.innerHTML = presetErrorBlocks[i];
                    _results.push(domStyle.set(errorBlock, "display", "none"));
                }
                return _results;
            },
            save: function() {
                var form, formValues, pb, self;
                self = this;
                this.clearInputErrorMsgs();
                form = this["otherInformationForm-" + this.companyId + "-" + this.otherInformationId];
                if (!form.validate()) {
                    return false;
                }
                formValues = dojo.formToObject(this["otherInformationForm-" + this.companyId + "-" + this.otherInformationId].id);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + "..."
                });
                if (self.newOtherInformationId > 0) {
                    lang.mixin(formValues, {
                        companyId: self.companyId,
                        otherInformationId: self.newOtherInformationId
                    });
                } else {
                    lang.mixin(formValues, {
                        companyId: self.companyId,
                        otherInformationId: self.otherInformationId
                    });
                }
                pb.show();
                return request.post('companyDirectories/updateOtherInformation', {
                    data: formValues,
                    handleAs: 'json'
                }).then(function(response) {
                    var errorBlock, i, _results;
                    pb.hide();
                    if (response.success && response.id > 0) {
                        self.newOtherInformationId = response.id;
                        self.companyOtherInformationGrid.refreshGrid();
                        if (response.isNew) {
                            return self.generateUploadedFilesGrid(response.id)();
                        }
                    } else {
                        _results = [];
                        for (i in response.errorMsgs) {
                            if (i !== 'username') {
                                errorBlock = self["error-" + i];
                                errorBlock.innerHTML = response.errorMsgs[i];
                                _results.push(domStyle.set(errorBlock, "display", "block"));
                            } else {
                                _results.push(void 0);
                            }
                        }
                        return _results;
                    }
                }, function(error) {
                    return pb.hide();
                });
            },
            hideUploaderFilesGrid: function() {
                return domStyle.set(this.uploadedFilesContainer, 'display', 'none');
            },
            createUploader: function() {
                if(this.editable){
                    var self = this;

                    this.uploader = new dojox.form.Uploader({
                        label: nls.fileUploadDesc,
                        uploadOnSelect: true,
                        iconClass: 'icon-16-container icon-16-upload',
                        style: 'height:24px;',
                        url: "companyDirectories/uploadOtherInformationFile/otherInformationId/" + self.newOtherInformationId,
                        name: 'company_other_information[fileUpload]',
                        disabled: this.editable ? false : true
                    });
                    on_(this.uploader, "Begin", function(uploadedFiles) {
                        var errorBlock;
                        self.pb = buildspace.dialog.indeterminateProgressBar({
                            title: nls.pleaseWait + "..."
                        });
                        errorBlock = self["error-fileUpload"];
                        errorBlock.innerHTML = null;
                        domStyle.set(errorBlock, 'display', 'none');
                        return self.pb.show();
                    });
                    on_(this.uploader, "Complete", function(uploadedFiles) {
                        var errorBlock;
                        self.pb.hide();
                        errorBlock = self["error-fileUpload"];
                        if (uploadedFiles.success) {
                            errorBlock.innerHTML = null;
                            domStyle.set(errorBlock, 'display', 'none');
                            return self.grid.refreshGrid();
                        } else {
                            errorBlock.innerHTML = uploadedFiles.errorMsgs.global_errors[0];
                            return domStyle.set(errorBlock, 'display', 'block');
                        }
                    });
                    this.companyDirectoriesOtherInformationFileUploader.appendChild(this.uploader.domNode);

                    this.uploader.startup();
                }
            },
            generateUploadedFilesGrid: function(otherInformationId) {
                var self, store;
                if (otherInformationId == null) {
                    otherInformationId = this.otherInformationId;
                }
                self = this;
                domStyle.set(this.uploadedFilesContainer, 'display', 'block');
                this.createUploader();
                store = new dojo.data.ItemFileWriteStore({
                    url: "companyDirectories/otherInformationFileListing/otherInformationId/" + otherInformationId,
                    clearOnClose: true,
                    urlPreventCache: true
                });
                this.grid = new uploadedFilesGrid({
                    structure: self.getGridLayout(),
                    store: store,
                    companyOtherInformationForm: self,
                    editable: self.editable
                });
                this.grid.placeAt(this.uploadedFilesGrid);
                return this.grid.startup();
            },
            getGridLayout: function() {
                var deleteUploadedFileColumn, formatter, layout;
                formatter = new Formatter;
                layout = [{
                    name: "No",
                    field: "id",
                    width: '30px',
                    styles: 'text-align: center;',
                    formatter: formatter.rowCountCellFormatter
                },{
                    name: nls.fileName,
                    field: "file_name",
                    width: 'auto'
                },{
                    name: nls.uploadedAt,
                    field: "created_at",
                    width: '120px',
                    styles: 'text-align: center;'
                },{
                    name: nls.download,
                    field: "download",
                    width: '120px',
                    styles: 'text-align: center;'
                }];

                if (this.editable) {
                    deleteUploadedFileColumn = {
                        name: nls["delete"],
                        field: "delete",
                        width: '80px',
                        styles: 'text-align: center;',
                        formatter: function() {
                            return "<a href=\"javascript:void(0);\">" + nls.remove + "</a>";
                        }
                    };
                    layout.push(deleteUploadedFileColumn);
                }
                return layout;
            }
        });

        return declare("buildspace.apps.CompanyDirectories.OtherInformation.CompanyOtherInformationFormContainer", BorderContainer, {
            companyId: -1,
            otherInformationId: -1,
            style: 'width:100%;height:100%;padding:0;margin:0;',
            gutters: false,
            formInfo: null,
            region: 'top',
            companyOtherInformationGrid: null,
            editable: true,
            postCreate: function() {
                this.inherited(arguments);

                var form = new companyOtherInformationForm({
                    companyId: this.companyId,
                    otherInformationId: this.otherInformationId,
                    formInfo: this.formInfo,
                    companyOtherInformationGrid: this.companyOtherInformationGrid,
                    editable: this.editable
                });

                if(this.editable){
                    var toolbar = new Toolbar({
                        region: 'top',
                        style: "outline:none!important;padding:2px;overflow:hidden;"
                    });
                    toolbar.addChild(new Button({
                        label: nls.save,
                        iconClass: "icon-16-container icon-16-save",
                        disabled: this.editable ? false : true,
                        onClick: function() {
                            return form.save();
                        }
                    }));

                    this.addChild(toolbar);
                }

                return this.addChild(form);
            }
        });
    });

}).call(this);
