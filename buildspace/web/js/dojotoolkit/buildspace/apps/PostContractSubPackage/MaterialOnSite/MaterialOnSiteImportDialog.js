// Generated by CoffeeScript 1.9.0
(function() {
  define("buildspace/apps/PostContractSubPackage/MaterialOnSite/MaterialOnSiteImportDialog", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/when", "dojo/html", "dojo/dom", "dojo/keys", "dojo/dom-style", "dojox/layout/ContentPane", "buildspace/widget/grid/cells/Formatter", "dojox/grid/enhanced/plugins/IndirectSelection", 'dojo/i18n!../../../nls/PostContractSubPackage'], function(declare, lang, connect, when_, html, dom, keys, domStyle, ContentPane, GridFormatter, IndirectSelection, nls) {
    var importGridContainer, importResourceGrid;
    importResourceGrid = declare("buildspace.apps.MaterialOnSite.ImportMaterialOnSiteItemGrid", dojox.grid.EnhancedGrid, {
      type: null,
      dialogWidget: null,
      _csrf_token: null,
      resource: null,
      itemIds: [],
      style: "border-top:none;",
      materialOnSiteItem: null,
      itemListGrid: null,
      constructor: function(args) {
        this.itemIds = [];
        this.connects = [];
        if (args.type === "tree") {
          this.urlGetDescendantIds = "subPackageMaterialOnSite/getDescendantsForImport";
          this.plugins = {
            indirectSelection: {
              headerSelector: true,
              width: "20px",
              styles: "text-align: center;"
            }
          };
        }
        return this.inherited(arguments);
      },
      canSort: function() {
        return false;
      },
      postCreate: function() {
        var self;
        self = this;
        self.inherited(arguments);
        this.on("RowClick", function(e) {
          var item;
          item = self.getItem(e.rowIndex);
          if (self.type === "tree") {
            if (item && item.id > 0) {
              return self.disableToolbarButtons(false);
            } else {
              return self.disableToolbarButtons(true);
            }
          }
        });
        if (this.type === "tree") {
          this._connects.push(connect.connect(this, "onCellClick", function(e) {
            return self.selectTree(e);
          }));
          return this._connects.push(connect.connect(this.rowSelectCell, "toggleAllSelection", function(newValue) {
            return self.toggleAllSelection(newValue);
          }));
        }
      },
      dodblclick: function(e) {
        return this.onRowDblClick(e);
      },
      selectTree: function(e) {
        var item, itemIndex, newValue, pb, rowIndex, self, store, xhrArgs;
        rowIndex = e.rowIndex;
        newValue = this.selection.selected[rowIndex];
        item = this.getItem(rowIndex);
        self = this;
        store = this.store;
        if (item.type[0] === buildspace.widget.grid.constants.HIERARCHY_TYPE_HEADER) {
          pb = buildspace.dialog.indeterminateProgressBar({
            title: nls.pleaseWait + "..."
          });
          pb.show();
          itemIndex = -1;
          xhrArgs = {
            url: this.urlGetDescendantIds,
            content: {
              id: item.id
            },
            handleAs: "json",
            load: function(data) {
              dojo.forEach(data.items, function(itm) {
                return store.fetchItemByIdentity({
                  identity: itm.id,
                  onItem: function(node) {
                    if (!node) {
                      return;
                    }
                    itemIndex = node._0;
                    self.pushItemIdIntoGridArray(node, newValue);
                    return self.selection[(newValue ? "addToSelection" : "deselect")](itemIndex);
                  }
                });
              });
              return pb.hide();
            },
            error: function() {
              return pb.hide();
            }
          };
          return dojo.xhrPost(xhrArgs);
        } else {
          if ((item.type != null) && item.type[0] === buildspace.widget.grid.constants.HIERARCHY_TYPE_WORK_ITEM) {
            return this.pushItemIdIntoGridArray(item, newValue);
          }
        }
      },
      pushItemIdIntoGridArray: function(item, select) {
        var grid, idx;
        grid = this;
        idx = dojo.indexOf(grid.itemIds, item.id[0]);
        if (select) {
          if (idx === -1) {
            return grid.itemIds.push(item.id[0]);
          }
        } else {
          if (idx !== -1) {
            return grid.itemIds.splice(idx, 1);
          }
        }
      },
      toggleAllSelection: function(checked) {
        var grid, selection, self;
        grid = this;
        self = this;
        selection = grid.selection;
        if (checked) {
          selection.selectRange(0, grid.rowCount - 1);
          grid.itemIds = [];
          return grid.store.fetch({
            onComplete: function(items) {
              return dojo.forEach(items, function(item) {
                if (item.id > 0) {
                  grid.itemIds.push(item.id[0]);
                  return self.disableToolbarButtons(false);
                }
              });
            }
          });
        } else {
          selection.deselectAll();
          return grid.itemIds = [];
        }
      },
      disableToolbarButtons: function(isDisable) {
        var importBtn;
        importBtn = dijit.byId("ImportMaterialOnSiteItemGrid-Import-button");
        return importBtn._setDisabledAttr(isDisable);
      },
      importFromMaterialOnSite: function() {
        var itemIds, pb, self, xhrArgs;
        self = this;
        itemIds = self.itemIds;
        if (itemIds.length > 0) {
          pb = buildspace.dialog.indeterminateProgressBar({
            title: nls.importingItems + ". " + nls.pleaseWait + "..."
          });
          pb.show();
          xhrArgs = {
            url: "subPackageMaterialOnSite/importMaterialOnSiteItems",
            content: {
              id: self.materialOnSiteItem.id[0],
              sp_material_on_site_id: self.materialOnSiteItem.relation_id[0],
              ids: [itemIds],
              _csrf_token: self._csrf_token
            },
            handleAs: "json",
            load: function(data) {
              pb.hide();
              if (data.success) {
                self.itemIds = [];
                self.itemListGrid.refreshGrid();
                return self.dialogWidget.hide();
              } else {
                self.itemIds = [];
                return self.dialogWidget.hide();
              }
            },
            error: function() {
              self.itemIds = [];
              pb.hide();
              return self.dialogWidget.hide();
            }
          };
          return dojo.xhrPost(xhrArgs);
        }
      },
      destroy: function() {
        this.inherited(arguments);
        dojo.forEach(this._connects, connect.disconnect);
        return delete this._connects;
      }
    });
    importGridContainer = declare("buildspace.apps.MaterialOnSite.ImportMaterialOnSiteItemGridContainer", dijit.layout.BorderContainer, {
      style: "padding:0px;width:100%;height:100%;",
      gutters: false,
      type: null,
      gridOpts: {},
      postCreate: function() {
        var child, container, grid, node, self, toolbar;
        self = this;
        self.inherited(arguments);
        lang.mixin(self.gridOpts, {
          type: self.type,
          region: "center"
        });
        grid = new importResourceGrid(self.gridOpts);
        if (self.type === "tree") {
          toolbar = new dijit.Toolbar({
            region: "top",
            style: "padding:2px;border-bottom:none;width:100%;"
          });
          toolbar.addChild(new dijit.form.Button({
            id: "ImportMaterialOnSiteItemGrid-Import-button",
            label: nls["import"],
            iconClass: "icon-16-container icon-16-import",
            disabled: true,
            onClick: function() {
              return grid.importFromMaterialOnSite();
            }
          }));
          self.addChild(toolbar);
        }
        self.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
        container = dijit.byId("materialOnSiteQuantityFromMaterialOnSite-stackContainer");
        if (container) {
          node = document.createElement("div");
          child = new ContentPane({
            title: buildspace.truncateString(self.title, 60),
            executeScripts: true
          }, node);
          container.addChild(child);
          child.set("content", self);
          return container.selectChild(child);
        }
      }
    });
    return declare("buildspace.apps.MaterialOnSite.ImportMaterialOnSiteDialog", dijit.Dialog, {
      style: "padding:0px;margin:0px;",
      subPackage: null,
      itemListGrid: null,
      buildRendering: function() {
        var content;
        content = this.createContent();
        content.startup();
        this.content = content;
        return this.inherited(arguments);
      },
      postCreate: function() {
        domStyle.set(this.containerNode, {
          padding: "0px",
          margin: "0px"
        });
        this.closeButtonNode.style.display = "none";
        return this.inherited(arguments);
      },
      _onKey: function(e) {
        var key;
        key = e.keyCode;
        if (key === keys.ESCAPE) {
          return dojo.stopEvent(e);
        }
      },
      onHide: function() {
        return this.destroyRecursive();
      },
      createContent: function() {
        var borderContainer, content, formatter, gridContainer, self, store, toolbar;
        self = this;
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:1080px;height:480px;",
          gutters: false
        });
        toolbar = new dijit.Toolbar({
          region: "top",
          style: "outline:none!important;padding:2px;overflow:hidden;"
        });
        toolbar.addChild(new dijit.form.Button({
          label: nls.close,
          iconClass: "icon-16-container icon-16-close",
          style: "outline:none!important;",
          onClick: dojo.hitch(this, "hide")
        }));
        formatter = new GridFormatter();
        store = dojo.data.ItemFileWriteStore({
          url: "subPackageMaterialOnSite/getMaterialOnSiteList/subPackageId/" + self.subPackage.id[0]
        });
        content = new importGridContainer({
          gridOpts: {
            store: store,
            itemListGrid: self.itemListGrid,
            structure: [
              {
                name: "No",
                field: "id",
                width: '30px',
                styles: 'text-align: center;',
                formatter: formatter.rowCountCellFormatter,
                noresize: true
              }, {
                name: nls.description,
                field: "description",
                width: 'auto',
                formatter: formatter.treeCellFormatter,
                noresize: true
              }
            ],
            onRowDblClick: function(e) {
              var _item, _this;
              _this = this;
              _item = _this.getItem(e.rowIndex);
              if (_item.id > 0) {
                return self.createItemGrid(_item);
              }
            }
          }
        });
        gridContainer = this.makeGridContainer(content);
        borderContainer.addChild(toolbar);
        borderContainer.addChild(gridContainer);
        return borderContainer;
      },
      createItemGrid: function(materialOnSite) {
        var formatter, self, store;
        self = this;
        formatter = new GridFormatter();
        store = new dojo.data.ItemFileWriteStore({
          url: "subPackageMaterialOnSite/getMaterialOnSiteItemList/id/" + materialOnSite.id[0]
        });
        return new importGridContainer({
          title: materialOnSite.description[0],
          type: "tree",
          gridOpts: {
            materialOnSiteItem: self.materialOnSiteItem,
            store: store,
            itemListGrid: self.itemListGrid,
            dialogWidget: self,
            _csrf_token: materialOnSite._csrf_token,
            structure: [
              {
                name: "No",
                field: "id",
                width: '30px',
                styles: 'text-align: center;',
                formatter: formatter.rowCountCellFormatter,
                noresize: true
              }, {
                name: nls.description,
                field: "description",
                width: 'auto',
                formatter: formatter.treeCellFormatter,
                noresize: true
              }, {
                name: nls.unit,
                field: "uom_id",
                styles: 'text-align: center;',
                width: '70px',
                formatter: formatter.unitIdCellFormatter,
                noresize: true
              }, {
                name: nls.deliveredQty,
                field: 'delivered_qty',
                styles: "text-align:right;color:blue;",
                width: '90px',
                formatter: formatter.unEditableCurrencyCellFormatter,
                noresize: true
              }, {
                name: nls.usedQty,
                field: 'used_qty',
                styles: "text-align:right;color:blue;",
                width: '90px',
                formatter: formatter.unEditableCurrencyCellFormatter,
                noresize: true
              }, {
                name: nls.balanceQty,
                field: 'balance_qty',
                styles: "text-align:right;",
                width: '90px',
                formatter: formatter.unEditableCurrencyCellFormatter,
                noresize: true
              }, {
                name: nls.rate,
                field: 'rate-value',
                styles: "text-align:right;",
                width: '120px',
                formatter: formatter.unEditableCurrencyCellFormatter,
                noresize: true
              }, {
                name: nls.amount,
                field: 'amount',
                styles: "text-align:right;",
                width: '120px',
                formatter: formatter.unEditableCurrencyCellFormatter,
                noresize: true
              }
            ]
          }
        });
      },
      makeGridContainer: function(content) {
        var borderContainer, controller, controllerPane, stackContainer, stackPane;
        stackContainer = dijit.byId("materialOnSiteQuantityFromMaterialOnSite-stackContainer");
        if (stackContainer) {
          dijit.byId("materialOnSiteQuantityFromMaterialOnSite-stackContainer").destroyRecursive();
        }
        stackContainer = new dijit.layout.StackContainer({
          style: "width:100%;height:100%;border:0px;",
          region: "center",
          id: "materialOnSiteQuantityFromMaterialOnSite-stackContainer"
        });
        stackPane = new dijit.layout.ContentPane({
          title: nls.materialOnSite,
          content: content
        });
        stackContainer.addChild(stackPane);
        controller = new dijit.layout.StackController({
          region: "top",
          containerId: "materialOnSiteQuantityFromMaterialOnSite-stackContainer"
        });
        controllerPane = new dijit.layout.ContentPane({
          style: "padding:0px;overflow:hidden;",
          "class": "breadCrumbTrail",
          region: "top",
          content: controller
        });
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;border:0px;",
          gutters: false,
          region: "center"
        });
        borderContainer.addChild(stackContainer);
        borderContainer.addChild(controllerPane);
        dojo.subscribe("materialOnSiteQuantityFromMaterialOnSite-stackContainer-selectChild", "", function(page) {
          var children, index, widget, _results;
          widget = dijit.byId("materialOnSiteQuantityFromMaterialOnSite-stackContainer");
          if (widget) {
            children = widget.getChildren();
            index = dojo.indexOf(children, dijit.byId(page.id));
            index = index + 1;
            _results = [];
            while (children.length > index) {
              widget.removeChild(children[index]);
              children[index].destroyRecursive(true);
              _results.push(index = index + 1);
            }
            return _results;
          }
        });
        return borderContainer;
      }
    });
  });

}).call(this);
