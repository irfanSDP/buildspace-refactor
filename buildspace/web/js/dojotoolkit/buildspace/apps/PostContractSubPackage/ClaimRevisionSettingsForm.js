// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  define("buildspace/apps/PostContractSubPackage/ClaimRevisionSettingsForm", ["dojo/_base/declare", "dojo/html", "dojo/dom", "dojo/dom-construct", "dojo/keys", "dojo/request", "dojo/dom-style", "dojo/dom-attr", "dojo/dom-geometry", "dojo/_base/lang", "dijit/form/Form", "dijit/form/RadioButton", "dijit/form/Select", "dijit/form/ValidationTextBox", "dijit/form/NumberTextBox", "dijit/form/CurrencyTextBox", "dojo/number", "dijit/_WidgetBase", "dijit/_OnDijitClickMixin", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dojo/on", "dojo/text!./templates/claimRevisionSettingsForm.html", "dojo/text!./templates/claimRevisionSettingsRow.html", "dojo/i18n!buildspace/nls/PostContractSubPackage"], function(declare, html, dom, domConstruct, keys, request, domStyle, domAttr, domGeo, lang, Form, RadioButton, Select, ValidateTextBox, NumberTextBox, CurrencyTextBox, number, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, bindOn, claimRevisionSettingsTemplate, claimRevisionSettingRowTemplate, nls) {
    var ClaimRevisionSettingRowForm, ClaimRevisionSettingsForm, maxRevision;
    maxRevision = buildspace.constants.MAX_CLAIM_REVISIONS;
    ClaimRevisionSettingRowForm = declare("buildspace.apps.PostContractSubPackage.ClaimRevisionSettingRowForm", [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {
      isNew: false,
      projectId: -1,
      revisionId: -1,
      subPackage: null,
      subPackageId: -1,
      region: "center",
      nls: nls,
      rootProject: null,
      revisionData: null,
      ClaimRevisionSettingsForm: null,
      _csrf_token: 0,
      constructor: function(args) {
        return args.templateString = claimRevisionSettingRowTemplate;
      },
      postCreate: function() {
        var self;
        this.inherited(arguments);
        self = this;

        this.setSelectedCurrentSelectedRevision();
        this.exitEditMode();
        this.updateRevisionStatusDescription(this.revisionData.locked_status);
        this.lockedStatusValue.set('value', this.revisionData.locked_status);

        return bindOn(this.showRevisionSelectedLink, 'click', function(e) {
          return self.assignNewSelectedRevision();
        });
      },
      assignNewSelectedRevision: function() {
        var pb, postContent, self;
        self = this;
        pb = new buildspace.dialog.indeterminateProgressBar({
          title: 'Processing...'
        });
        pb.show();
        postContent = {
          'sub_package_id': this.revisionData.sub_package_id,
          'revisionId': this.revisionId,
          'sub_package_post_contract_claim_revision[sub_package_id]': this.revisionData.sub_package_id,
          'sub_package_post_contract_claim_revision[current_selected_revision]': true,
          'sub_package_post_contract_claim_revision[_csrf_token]': this._csrf_token
        };
        return request.post('postContractSubPackage/assignNewSelectedRevision', {
          data: postContent,
          handleAs: 'json',
          preventCache: true
        }).then(function(response) {
          self.ClaimRevisionSettingsForm.revisionDatas = response;
          pb.hide();
          return self.ClaimRevisionSettingsForm.clearOldRevisionAndAddNewRevision();
        }, function(error) {
          console.log(error);
          return pb.hide();
        });
      },
      save: function() {
        var baseForm, lockedStatus, pb, postContent, self;
        baseForm = this.ClaimRevisionSettingsForm;
        self = this;
        pb = new buildspace.dialog.indeterminateProgressBar({
          title: 'Processing...'
        });
        pb.show();
        postContent = {
          'sub_package_id': this.revisionData.sub_package_id,
          'revisionId': this.revisionId,
          'sub_package_post_contract_claim_revision[sub_package_id]': this.revisionData.sub_package_id,
          'sub_package_post_contract_claim_revision[version]': this.revisionData.version,
          'sub_package_post_contract_claim_revision[locked_status]': this.lockedStatusValue.value,
          'sub_package_post_contract_claim_revision[_csrf_token]': this._csrf_token
        };

        lockedStatus = this.lockedStatusValue.value;
        request.post('postContractSubPackage/saveClaimRevision', {
          data: postContent,
          handleAs: 'json',
          preventCache: true
        }).then(function(response) {
          pb.hide();
          self.revisionId = response.item.id;
          self.updateRevisionStatusDescription(response.item.locked_status);
          html.set(self.updatedAtView, response.item.updated_at);
          return lang.hitch(baseForm, 'closeElementItemGrid')();
        }, function(error) {
          console.log(error);
          return pb.hide();
        });
        return this.exitEditMode();
      },
      setSelectedCurrentSelectedRevision: function() {
        if (this.revisionData.selected) {
          domStyle.set(this.showRevisionSelectedMarker, "display", "block");

          var container = dijit.byId(this.rootProject.id[0]+'-ProjectRevision');
          container.set('title', nls.claimRevision + '::' +nls.version + ' ' + this.revisionData.version);

          return domStyle.set(this.showRevisionSelectedLink, "display", "none");
        } else {
          domStyle.set(this.showRevisionSelectedMarker, "display", "none");
          return domStyle.set(this.showRevisionSelectedLink, "display", "block");
        }
      },
      enterEditMode: function() {
        return this.setupEditMode();
      },
      setupEditMode: function() {
        domStyle.set(this.addendumStatusInput, "display", "");
        domStyle.set(this.addendumStatusView, "display", "none");
        domStyle.set(this.editButton.domNode, "display", "none");
        return domStyle.set(this.saveButton.domNode, "display", "");
      },
      exitEditMode: function() {
        domStyle.set(this.addendumStatusInput, "display", "none");
        domStyle.set(this.addendumStatusView, "display", "");
        domStyle.set(this.editButton.domNode, "display", "");
        return domStyle.set(this.saveButton.domNode, "display", "none");
      },
      updateRevisionStatusDescription: function(revisionStatus) {
        var statusLabel;
        statusLabel = revisionStatus ? nls.addendumLocked : nls.addendumProgressing;
        html.set(this.addendumStatusView, statusLabel);
        if (revisionStatus && this.ClaimRevisionSettingsForm.tableCount !== (maxRevision + 2)) {
          return this.ClaimRevisionSettingsForm.addClaimButton.set('disabled', false);
        } else {
          return this.ClaimRevisionSettingsForm.addClaimButton.set('disabled', true);
        }
      },
      hideActionButton: function() {
        domStyle.set(this.editButton.domNode, "display", "none");
        domStyle.set(this.saveButton.domNode, "display", "none");
        return domStyle.set(this.noActionLabel, "display", "");
      }
    });
    ClaimRevisionSettingsForm = declare("buildspace.apps.PostContractSubPackage.ClaimRevisionSettingsForm", [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {
      projectId: -1,
      baseClass: "buildspace-form",
      style: "padding:5px;overflow:auto;border:0px;",
      region: "center",
      rootProject: null,
      subPackage: null,
      subPackageId: -1,
      nls: nls,
      workarea: null,
      revisionDatas: null,
      _csrf_token: 0,
      tableCount: 1,
      rowArray: [],
      constructor: function(args) {
        return args.templateString = claimRevisionSettingsTemplate;
      },
      postMixInProperties: function() {
        this.inherited(arguments);
        return this.rowArray[this.projectId] = [];
      },
      postCreate: function() {
        this.inherited(arguments);
        return this.masterGenerateClaimRevisionTableRow();
      },
      masterGenerateClaimRevisionTableRow: function() {
        var pb, xhrArgs,
          _this = this;
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        pb.show();
        xhrArgs = {
          url: "postContractSubPackage/getClaimRevisionLists",
          handleAs: "json",
          content: {
            id: this.subPackage.id
          },
          load: function(data) {
            _this.revisionDatas = data;
            _this.populateClaimRevisionTableRow();
            _this.subPackageId = data.subPackageId;
            return pb.hide();
          },
          error: function(error) {
            return pb.hide();
          }
        };
        return dojo.xhrGet(xhrArgs);
      },
      addClaim: function() {
        var version, key, pb, postContent, self;
        self = this;
        key = this.rowArray[this.projectId].length;
        key = key === 1 ? 1 : key;
        version = this.tableCount;
        pb = new buildspace.dialog.indeterminateProgressBar({
          title: 'Processing...'
        });
        pb.show();
        postContent = {
          'revisionId': -1,
          'sub_package_id': this.subPackageId,
          'sub_package_post_contract_claim_revision[sub_package_id]': this.subPackageId,
          'sub_package_post_contract_claim_revision[version]': version,
          'sub_package_post_contract_claim_revision[locked_status]': false,
          'sub_package_post_contract_claim_revision[_csrf_token]': this._csrf_token
        };
        return request.post('postContractSubPackage/saveClaimRevision', {
          data: postContent,
          handleAs: 'json',
          preventCache: true
        }).then(function(response) {
          self.revisionDatas = response;
          pb.hide();
          return self.clearOldRevisionAndAddNewRevision();
        }, function(error) {
          console.log(error);
          return pb.hide();
        });
      },
      clearOldRevisionAndAddNewRevision: function() {
        var self;
        self = this;
        self.rowArray[self.projectId] = [];
        self.tableCount = 1;
        dojo.empty(self.tableContainer);
        self.populateClaimRevisionTableRow();
        return lang.hitch(self, 'closeElementItemGrid')();
      },
      populateClaimRevisionTableRow: function() {
        var form, key, largeString, lastRowStatusValue, self, value, _ref;
        self = this;
        lastRowStatusValue = null;
        largeString = "";
        this._csrf_token = this.revisionDatas.form.csrf_token;
        _ref = this.revisionDatas.claimRevisions;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          form = this.rowArray[this.projectId][key] = new ClaimRevisionSettingRowForm({
            count: this.tableCount,
            rootProject: this.rootProject,
            projectId: this.projectId,
            revisionId: value.id,
            subPackage: this.subPackage,
            subPackageId: value.sub_package_id,
            revisionData: value,
            ClaimRevisionSettingsForm: this,
            _csrf_token: this.revisionDatas.form.csrf_token
          });
          lastRowStatusValue = value.locked_status;
          if (key > 0) {
            this.rowArray[this.projectId][key - 1].hideActionButton();
          }
          this.addTableRow(form);
        }
        if (!value.locked_status || this.tableCount === (maxRevision + 2)) {
          return this.addClaimButton.set('disabled', true);
        }
      },
      addTableRow: function(form) {
        domConstruct.place(form.domNode, this.tableContainer);
        return this.tableCount++;
      },
      closeElementItemGrid: function() {
        return lang.hitch(this.workarea, 'removeBillTab')();
      }
    });
    return ClaimRevisionSettingsForm;
  });

}).call(this);
