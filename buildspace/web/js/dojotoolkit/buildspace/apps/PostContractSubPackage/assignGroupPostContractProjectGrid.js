// Generated by CoffeeScript 1.6.3
(function() {
  define("buildspace/apps/PostContractSubPackage/assignGroupPostContractSubPackageProjectGrid", ["dojo/_base/declare", "dojo/aspect", "dojo/_base/lang", "dojo/_base/connect", "dojo/when", "dojo/html", "dojo/dom", "dojo/keys", "dojo/dom-style", "buildspace/widget/grid/cells/Formatter", "dojox/grid/enhanced/plugins/IndirectSelection", 'dojo/i18n!buildspace/nls/PostContractSubPackage'], function(declare, aspect, lang, connect, when_, html, dom, keys, domStyle, Formatter, IndirectSelection, nls) {
    var AssignGroupPostContractSubPackageProjectGridContainer, Dialog, assignGroupPostContractSubPackageProjectGrid;
    assignGroupPostContractSubPackageProjectGrid = declare("buildspace.apps.PostContractSubPackage.AssignGroupPostContractSubPackageProjectGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      region: "center",
      rootProjectId: -1,
      itemIds: [],
      selectedGroups: null,
      constructor: function(args) {
        this.itemIds = [];
        this.plugins = {
          indirectSelection: {
            headerSelector: true,
            width: "20px",
            styles: "text-align:center;"
          }
        };
        return this.inherited(arguments);
      },
      canSort: function() {
        return false;
      },
      postCreate: function() {
        var self,
          _this = this;
        self = this;
        self.inherited(arguments);
        aspect.after(this, "_onFetchComplete", function() {
          return _this.markedCheckBoxObject(_this.selectedGroups, true);
        });
        this._connects.push(connect.connect(this, 'onCellClick', function(e) {
          if (e.cell.name !== "") {
            return false;
          }
          return self.selectTree(e);
        }));
        return this._connects.push(connect.connect(this.rowSelectCell, 'toggleAllSelection', function(newValue) {
          return self.toggleAllSelection(newValue);
        }));
      },
      save: function() {
        var formValues, pb, selectedItem, self, xhrArgs;
        self = this;
        selectedItem = this.getItem(0);
        formValues = {
          id: self.rootProjectId,
          "project_structure[post_contract_groups_list][]": this.itemIds,
          "project_structure[_csrf_token]": selectedItem._csrf_token[0]
        };
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + '...'
        });
        pb.show();
        xhrArgs = {
          url: "postContract/updatePostContractSubPackageProjectGroupInfo",
          handleAs: "json",
          content: formValues,
          load: function(data) {
            return pb.hide();
          },
          error: function(error) {
            return pb.hide();
          }
        };
        return dojo.xhrPost(xhrArgs);
      },
      selectTree: function(e) {
        var item, newValue, rowIndex;
        rowIndex = e.rowIndex;
        newValue = this.selection.selected[rowIndex];
        item = this.getItem(rowIndex);
        if (item) {
          return this.pushItemIdIntoGridArray(item, newValue);
        }
      },
      markedCheckBoxObject: function(items, newValue) {
        var itemIndex, key, self, store, _results;
        self = this;
        store = this.store;
        itemIndex = -1;
        _results = [];
        for (key in items) {
          _results.push(store.fetchItemByIdentity({
            identity: key,
            onItem: function(node) {
              itemIndex = node._0;
              self.pushItemIdIntoGridArray(node, newValue);
              return self.selection.setSelected(itemIndex, newValue);
            }
          }));
        }
        return _results;
      },
      pushItemIdIntoGridArray: function(item, select) {
        var grid, idx;
        grid = this;
        idx = dojo.indexOf(grid.itemIds, item.id[0]);
        if (select) {
          if (idx === -1) {
            return grid.itemIds.push(item.id[0]);
          }
        } else {
          if (idx !== -1) {
            return grid.itemIds.splice(idx, 1);
          }
        }
      },
      toggleAllSelection: function(checked) {
        var grid, selection;
        grid = this;
        selection = grid.selection;
        if (checked) {
          selection.selectRange(0, grid.rowCount - 1);
          grid.itemIds = [];
          return grid.store.fetch({
            onComplete: function(items) {
              return dojo.forEach(items, function(item, index) {
                if (item.id > 0) {
                  return grid.itemIds.push(item.id[0]);
                }
              });
            }
          });
        } else {
          selection.deselectAll();
          return grid.itemIds = [];
        }
      },
      destroy: function() {
        this.inherited(arguments);
        dojo.forEach(this._connects, connect.disconnect);
        return delete this._connects;
      }
    });
    AssignGroupPostContractSubPackageProjectGridContainer = declare("buildspace.apps.PostContractSubPackage.AssignGroupPostContractSubPackageProjectGridContainer", dijit.layout.BorderContainer, {
      style: "padding:0px;width:100%;height:100%;",
      region: "center",
      gutters: false,
      dialog: null,
      store: null,
      structure: null,
      rootProjectId: -1,
      rootProjectTitle: null,
      selectedGroups: null,
      postCreate: function() {
        var grid, self, toolbar;
        self = this;
        self.inherited(arguments);
        grid = this.grid = new assignGroupPostContractSubPackageProjectGrid({
          rootProjectId: self.rootProjectId,
          store: self.store,
          structure: self.structure,
          selectedGroups: self.selectedGroups[0]
        });
        toolbar = new dijit.Toolbar({
          region: "top",
          style: "padding:2px;border-bottom:none;width:100%;"
        });
        toolbar.addChild(new dijit.form.Button({
          label: nls.save,
          iconClass: "icon-16-container icon-16-save",
          disabled: !self.isSuperAdmin ? false : true,
          onClick: function() {
            return grid.save();
          }
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new dijit.form.Button({
          label: nls.close,
          iconClass: "icon-16-container icon-16-close",
          onClick: function() {
            return self.dialog.hide();
          }
        }));
        self.addChild(toolbar);
        return self.addChild(new dijit.layout.ContentPane({style: 'width:100%', content:grid, region:'center'}));
      }
    });
    Dialog = declare("buildspace.apps.PostContractSubPackage.GroupProjectAssignmentDialog", dijit.Dialog, {
      style: "padding:0px;margin:0px;",
      title: nls.addGroupsToPostContractSubPackageProject,
      rootProjectId: -1,
      rootProjectTitle: null,
      data: null,
      isSuperAdmin: false,
      buildRendering: function() {
        var content;
        content = this.createContent();
        content.startup();
        this.content = content;
        this.title = "" + nls.addGroupsToPostContractSubPackageProject + " (" + this.rootProjectTitle + ")";
        return this.inherited(arguments);
      },
      postCreate: function() {
        domStyle.set(this.containerNode, {
          padding: "0px",
          margin: "0px"
        });
        this.closeButtonNode.style.display = "none";
        return this.inherited(arguments);
      },
      _onKey: function(e) {
        var key;
        key = e.keyCode;
        if (key === keys.ESCAPE) {
          return dojo.stopEvent(e);
        }
      },
      onHide: function() {
        return this.destroyRecursive();
      },
      createContent: function() {
        var borderContainer, content, formatter, self, store;
        self = this;
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:950px;height:500px;",
          gutters: false
        });
        store = dojo.data.ItemFileWriteStore({
          data: self.data.data
        });
        formatter = new Formatter();
        content = new AssignGroupPostContractSubPackageProjectGridContainer({
          dialog: self,
          selectedGroups: self.data.groups,
          rootProjectId: self.rootProjectId,
          rootProjectTitle: self.rootProjectTitle,
          store: store,
          structure: [
            {
              name: "No",
              field: "id",
              width: '30px',
              styles: 'text-align: center;',
              formatter: formatter.rowCountCellFormatter
            }, {
              name: nls.name,
              field: "name",
              width: 'auto'
            }, {
              name: nls.lastUpdated,
              field: "updated_at",
              width: '120px',
              styles: 'text-align: center;'
            }
          ]
        });
        borderContainer.addChild(content);
        return borderContainer;
      }
    });
    return Dialog;
  });

}).call(this);
