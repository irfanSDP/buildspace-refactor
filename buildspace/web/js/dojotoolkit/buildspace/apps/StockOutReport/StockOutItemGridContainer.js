// Generated by CoffeeScript 1.9.0
(function() {
  define("buildspace/apps/StockOutReport/StockOutItemGridContainer", ["dojo/_base/declare", 'dojo/_base/connect', "dojo/_base/lang", "dojo/aspect", "dojox/grid/enhanced/plugins/Selector", "dojox/grid/enhanced/plugins/Rearrange", 'buildspace/widget/grid/Filter', 'dijit/Toolbar', 'dijit/form/Button', 'dijit/form/DropDownButton', "dojo/_base/event", "dijit/layout/BorderContainer", "dojo/keys", "dijit/focus", 'dojo/request', 'dijit/Menu', 'dijit/DropDownMenu', 'dijit/MenuItem', 'buildspace/widget/grid/cells/Formatter', 'dojox/grid/enhanced/plugins/IndirectSelection', 'dojo/store/Memory', 'dojo/i18n!../../nls/StockOut'], function(declare, connect, lang, aspect, Selector, Rearrange, Filter, Toolbar, Button, DropDownButton, evt, BorderContainer, keys, focusUtil, request, Menu, DropDownMenu, MenuItem, Formatter, IndirectSelection, Memory, nls) {
    var stockOutItemGrid;
    stockOutItemGrid = declare("buildspace.apps.StockOutReport.StockOutItemGrid", dojox.grid.EnhancedGrid, {
      project: null,
      resource: null,
      resourceTrade: null,
      type: null,
      escapeHTMLInData: false,
      style: "border-top:none;",
      keepSelection: true,
      rowSelector: "0px",
      region: 'center',
      gridContainer: null,
      stockOutWorkAreaContainer: null,
      constructor: function(args) {
        this.rearranger = Rearrange(this, {});
        if ((args.type != null) && args.type === 'item') {
          this.type = args.type;
          return this.plugins = {
            indirectSelection: {
              headerSelector: true,
              width: "40px",
              styles: "text-align: center;"
            }
          };
        }
      },
      postCreate: function() {
        var self;
        this.inherited(arguments);
        self = this;
        if (this.type === 'item') {
          aspect.after(this, "_onFetchComplete", function() {
            return self.markedCheckBoxObject(self, self.stockOutWorkAreaContainer.resourceTradeItemStore[self.resource.id[0]][self.resourceTrade.id[0]]);
          });
          this._connects.push(connect.connect(this, 'onCellClick', function(e) {
            if (e.cell.name !== "") {
              return;
            }
            return self.singleCheckBoxSelection(e);
          }));
          return this._connects.push(connect.connect(this.rowSelectCell, 'toggleAllSelection', function(newValue) {
            return self.toggleAllSelection(newValue);
          }));
        }
      },
      canSort: function(inSortInfo) {
        return false;
      },
      refreshGrid: function() {
        this.store.save();
        this.store.close();
        return this.setStore(this.store);
      },
      arrayUnique: function(array) {
        return array.reverse().filter(function(e, i, arr) {
          return arr.indexOf(e, i + 1) === -1;
        }).reverse();
      },
      markedCheckBoxObject: function(grid, selectedRowStore) {
        var store;
        store = grid.store;
        return selectedRowStore.query().forEach(function(item) {
          if (item.id[0] < 0) {
            return false;
          }
          return store.fetchItemByIdentity({
            identity: item.id,
            onItem: function(node) {
              if (!node) {
                return false;
              }
              return grid.rowSelectCell.toggleRow(node._0, true);
            }
          });
        });
      }
    });
    return declare("buildspace.apps.StockOutReport.StockOutItemGridContainer", BorderContainer, {
      stockOutWorkAreaContainer: null,
      project: null,
      resource: null,
      resourceTrade: null,
      style: 'height:100%;width:100%;padding:0;margin:0;',
      gutters: false,
      postCreate: function() {
        var filter, grid, menu, self, store, toolbar;
        this.inherited(arguments);
        self = this;
        store = new dojo.data.ItemFileWriteStore({
          url: "stockOut/getItemListingsWithDeliveryOrder/projectId/" + self.project.id[0] + "/resourceTradeId/" + self.resourceTrade.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new stockOutItemGrid({
          type: 'item',
          project: this.project,
          resource: this.resource,
          resourceTrade: this.resourceTrade,
          gridContainer: self,
          stockOutWorkAreaContainer: self.stockOutWorkAreaContainer,
          structure: self.getResourceItemGridLayout(),
          store: store,
          onRowDblClick: function(e) {
            var column, resourceItem;
            self = this;
            column = e.cell.field;
            resourceItem = this.getItem(e.rowIndex);
            if (resourceItem.id[0] < 0) {
              return false;
            }
            if (column === 'total_cost') {
              return self.gridContainer.createViewTotalCostItemGridInDepthInformationGrid(resourceItem);
            } else if (column === 'do_quantity') {
              return self.gridContainer.createViewDeliveryOrderQuantityItemGridInDepthInformationGrid(resourceItem);
            } else if (column === 'stock_out_quantity') {
              return self.gridContainer.createViewStockOutQuantityItemGridInDepthInformationGrid(resourceItem);
            }
          },
          singleCheckBoxSelection: function(e) {
            var checked, item, rowIndex;
            if (this.stockOutWorkAreaContainer.resourceTradeItemStore[this.resource.id[0]][this.resourceTrade.id[0]] === void 0) {
              this.stockOutWorkAreaContainer.resourceTradeItemStore[this.resource.id[0]][this.resourceTrade.id[0]] = new Memory({
                idProperty: 'id'
              });
            }
            rowIndex = e.rowIndex;
            checked = this.selection.selected[rowIndex];
            item = this.getItem(rowIndex);
            if (checked) {
              return this.getAffectedResourceTradeByResourceItem(item, 'add');
            }
            return this.getAffectedResourceTradeByResourceItem(item, 'remove');
          },
          toggleAllSelection: function(checked) {
            var selectedItemStore, selection;
            if (this.stockOutWorkAreaContainer.resourceTradeItemStore[this.resource.id[0]][this.resourceTrade.id[0]] === void 0) {
              this.stockOutWorkAreaContainer.resourceTradeItemStore[this.resource.id[0]][this.resourceTrade.id[0]] = new Memory({
                idProperty: 'id'
              });
            }
            self = this;
            store = this.store;
            selection = this.selection;
            selectedItemStore = this.stockOutWorkAreaContainer.resourceTradeItemStore[this.resource.id[0]][this.resourceTrade.id[0]];
            if (checked) {
              selection.selectRange(0, self.rowCount - 1);
              store.fetch({
                onComplete: function(items) {
                  return dojo.forEach(items, function(item, index) {
                    if (item.id[0] > 0) {
                      return selectedItemStore.put({
                        id: item.id[0]
                      });
                    }
                  });
                }
              });
              return self.getAffectedResourceTradeByResourceItem(null, 'add');
            }
            selection.deselectAll();
            return self.getAffectedResourceTradeByResourceItem(null, 'remove');
          },
          getAffectedResourceTradeByResourceItem: function(resourceItem, type) {
            var pb, resourceItems, selectedItemStore;
            self = this;
            selectedItemStore = this.stockOutWorkAreaContainer.resourceTradeItemStore[self.resource.id[0]][self.resourceTrade.id[0]];
            resourceItems = [];
            pb = buildspace.dialog.indeterminateProgressBar({
              title: nls.pleaseWait + '...'
            });
            pb.show();
            if (resourceItem) {
              if (resourceItem.id[0] < 0) {
                pb.hide();
                return false;
              }
              selectedItemStore.put({
                id: resourceItem.id[0]
              });
              resourceItems.push(resourceItem.id[0]);
            } else {
              selectedItemStore.query().forEach(function(item) {
                return resourceItems.push(item.id);
              });
            }
            return request.post('stockOutReporting/getAffectedResourceTradeByItem', {
              handleAs: 'json',
              data: {
                projectId: self.project.id[0],
                resourceTradeId: self.resourceTrade.id[0],
                resource_item_ids: JSON.stringify(self.arrayUnique(resourceItems))
              }
            }).then(function(data) {
              var resourceItemId, resourceTradeGrid, resourceTradeId, _i, _len, _ref;
              resourceTradeGrid = dijit.byId("stockOutReport-resourceTrade-container-" + self.project.id[0] + "-" + self.resource.id[0]);
              for (resourceTradeId in data) {
                _ref = data[resourceTradeId];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  resourceItemId = _ref[_i];
                  if (type === 'add') {
                    resourceTradeGrid.store.fetchItemByIdentity({
                      identity: resourceTradeId,
                      onItem: function(node) {
                        if (!node) {
                          return;
                        }
                        self.stockOutWorkAreaContainer.resourceTradePreviewStore[self.resource.id[0]].put({
                          id: resourceTradeId
                        });
                        return resourceTradeGrid.rowSelectCell.toggleRow(node._0, true);
                      }
                    });
                    self.stockOutWorkAreaContainer.resourceTradeItemStore[self.resource.id[0]][resourceTradeId].put({
                      id: resourceItemId
                    });
                    self.stockOutWorkAreaContainer.resourceAllTradeItemStore[self.resource.id[0]].put({
                      id: resourceItemId
                    });
                  } else {
                    self.stockOutWorkAreaContainer.resourceTradeItemStore[self.resource.id[0]][resourceTradeId].remove(resourceItemId);
                    self.stockOutWorkAreaContainer.resourceAllTradeItemStore[self.resource.id[0]].remove(resourceItemId);
                    resourceTradeGrid.store.fetchItemByIdentity({
                      identity: resourceTradeId,
                      onItem: function(node) {
                        if (!node) {
                          return;
                        }
                        if (self.stockOutWorkAreaContainer.resourceTradeItemStore[self.resource.id[0]][resourceTradeId].data.length === 0) {
                          self.stockOutWorkAreaContainer.resourceTradePreviewStore[self.resource.id[0]].remove(resourceTradeId);
                          return resourceTradeGrid.rowSelectCell.toggleRow(node._0, false);
                        }
                      }
                    });
                  }
                }
              }
              return pb.hide();
            }, function(error) {
              console.log(error);
              return pb.hide();
            });
          }
        });
        filter = new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [
            {
              'description': nls.description
            }, {
              'unit': nls.unit
            }
          ]
        });
        menu = new DropDownMenu({
          style: "display: none;"
        });
        menu.addChild(new MenuItem({
          label: nls.printItemsByResourceTrade,
          iconClass: "icon-16-container icon-16-print",
          onClick: function() {
            return self.stockOutWorkAreaContainer.openBillPreviewDialogForSelectedItems(self.resource);
          }
        }));
        toolbar = new dijit.Toolbar({
          style: "outline:none!important; border-bottom:none; padding:2px; width:100%;",
          region: "top"
        });
        toolbar.addChild(new DropDownButton({
          label: nls.print,
          id: "stockOutReport-resourceTrade-printButton-" + self.project.id[0] + "-" + self.resource.id[0] + "-" + self.resourceTrade.id[0],
          iconClass: "icon-16-container icon-16-print",
          dropDown: menu
        }));
        this.addChild(filter);
        this.addChild(toolbar);
        return this.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
      },
      createViewTotalCostItemGridInDepthInformationGrid: function(resourceItem, self) {
        var borderContainer, grid, store;
        if (self == null) {
          self = this;
        }
        store = new dojo.data.ItemFileWriteStore({
          url: "stockOut/getInvoiceCostingsByResourceItem/projectId/" + this.project.id[0] + "/resourceItemId/" + resourceItem.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new stockOutItemGrid({
          project: this.project,
          resourceItem: resourceItem,
          store: store,
          structure: self.getInvoiceGridLayout()
        });
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          baseClass: "form",
          gutters: false,
          region: "center"
        });
        borderContainer.addChild(new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [
            {
              'invoice_no': nls.invoiceNo
            }, {
              'supplier_name': nls.supplier
            }, {
              'issued_by': nls.issued_by
            }
          ]
        }));
        borderContainer.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
        return self.stockOutWorkAreaContainer.makePane(this.resource, resourceItem.description[0], borderContainer);
      },
      createViewDeliveryOrderQuantityItemGridInDepthInformationGrid: function(resourceItem, self) {
        var borderContainer, grid, store;
        if (self == null) {
          self = this;
        }
        store = new dojo.data.ItemFileWriteStore({
          url: "stockOut/getDeliveryOrderCostingsByResourceItem/projectId/" + this.project.id[0] + "/resourceItemId/" + resourceItem.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new stockOutItemGrid({
          project: this.project,
          resourceItem: resourceItem,
          store: store,
          structure: self.getDeliveryOrderGridLayout()
        });
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          baseClass: "form",
          gutters: false,
          region: "center"
        });
        borderContainer.addChild(new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [
            {
              'invoice_no': nls.invoiceNo
            }, {
              'delivery_order_no': nls.doNo
            }, {
              'supplier_name': nls.supplier
            }
          ]
        }));
        borderContainer.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
        return self.stockOutWorkAreaContainer.makePane(this.resource, resourceItem.description[0], borderContainer);
      },
      createViewStockOutQuantityItemGridInDepthInformationGrid: function(resourceItem, self) {
        var borderContainer, grid, store;
        if (self == null) {
          self = this;
        }
        store = new dojo.data.ItemFileWriteStore({
          url: "stockOut/getStockOutQtyByResourceItem/projectId/" + this.project.id[0] + "/resourceItemId/" + resourceItem.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new stockOutItemGrid({
          project: this.project,
          resourceItem: resourceItem,
          store: store,
          structure: self.getStockOutGridLayout()
        });
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          baseClass: "form",
          gutters: false,
          region: "center"
        });
        borderContainer.addChild(new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [
            {
              'running_number': nls.stockOutNo
            }, {
              'creator_name': nls.created_by
            }
          ]
        }));
        borderContainer.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
        return self.stockOutWorkAreaContainer.makePane(this.resource, resourceItem.description[0], borderContainer);
      },
      getResourceItemGridLayout: function() {
        var formatter;
        formatter = new Formatter;
        return [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter,
            noresize: true
          }, {
            name: nls.description,
            field: "description",
            width: 'auto',
            formatter: formatter.treeCellFormatter,
            noresize: true
          }, {
            name: nls.unit,
            field: "uom_id",
            styles: 'text-align: center;',
            width: '70px',
            formatter: formatter.unitIdCellFormatter,
            noresize: true
          }, {
            name: nls.totalCostWithTax,
            field: "total_cost",
            styles: 'text-align:right;color:blue;',
            width: '140px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.doQuantity,
            field: 'do_quantity',
            styles: "text-align:right;color:blue;",
            width: '120px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.stockOutQuantity,
            field: 'stock_out_quantity',
            styles: "text-align:right;color:blue;",
            width: '120px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.balanceQuantity,
            field: 'balance_quantity',
            styles: "text-align:right;",
            width: '120px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }
        ];
      },
      getInvoiceGridLayout: function() {
        var formatter;
        formatter = new Formatter;
        return [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter,
            noresize: true
          }, {
            name: nls.invoiceNo,
            field: "invoice_no",
            styles: 'text-align: center; color: red;',
            width: '140px',
            noresize: true
          }, {
            name: nls.supplier,
            field: "supplier_name",
            styles: 'text-align: center;',
            width: 'auto',
            noresize: true
          }, {
            name: nls.rate,
            field: 'rates',
            styles: "text-align:right;",
            width: '75px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.discount + " %",
            field: 'discount_percentage',
            styles: "text-align:right;",
            width: '75px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.tax + " %",
            field: 'tax_percentage',
            styles: "text-align:right;",
            width: '75px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.quantity,
            field: "quantity",
            width: '90px',
            styles: 'text-align: right;',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.totalWithoutTax,
            field: 'total_without_tax',
            styles: "text-align:right;",
            width: '120px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.totalWithTax,
            field: 'total',
            styles: "text-align:right;",
            width: '120px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.issued_by,
            field: 'issued_by',
            styles: "text-align:center;",
            width: '140px',
            noresize: true
          }, {
            name: nls.invoiceDate,
            field: "invoice_date",
            styles: "text-align:center;",
            width: '160px',
            noresize: true
          }
        ];
      },
      getDeliveryOrderGridLayout: function() {
        var formatter;
        formatter = new Formatter;
        return [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter,
            noresize: true
          }, {
            name: nls.invoiceNo,
            field: "invoice_no",
            styles: 'text-align: center; color: red;',
            width: '140px',
            noresize: true
          }, {
            name: nls.doNo,
            field: "delivery_order_no",
            styles: 'text-align: center; color: red;',
            width: '140px',
            noresize: true
          }, {
            name: nls.doQuantity,
            field: "quantity",
            width: '90px',
            styles: 'text-align: right;',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.remarks,
            field: "remark",
            styles: 'color: blue;',
            width: '380px',
            noresize: true
          }, {
            name: nls.supplier,
            field: "supplier_name",
            styles: 'text-align: center;',
            width: 'auto',
            noresize: true
          }, {
            name: nls.date_of_delivery_order,
            field: "delivery_order_date",
            styles: "text-align:center;",
            width: '160px',
            noresize: true
          }
        ];
      },
      getStockOutGridLayout: function() {
        var formatter;
        formatter = new Formatter;
        return [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter,
            noresize: true
          }, {
            name: nls.stockOutNo,
            field: "running_number",
            styles: 'text-align: center; color: red;',
            width: '160px',
            noresize: true
          }, {
            name: nls.stockOutQuantity,
            field: "quantity",
            width: '90px',
            styles: 'text-align: right;',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.created_by,
            field: "creator_name",
            styles: 'text-align: center;',
            width: 'auto',
            noresize: true
          }, {
            name: nls.stock_out_date,
            field: "stock_out_date",
            styles: "text-align:center;",
            width: '160px',
            noresize: true
          }
        ];
      }
    });
  });

}).call(this);
