// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/StockOutReport/WorkArea', ["dojo/_base/declare", 'dojo/_base/connect', 'dojo/request', 'dijit/layout/ContentPane', 'dijit/layout/BorderContainer', 'dijit/layout/TabContainer', 'buildspace/widget/grid/cells/Formatter', 'dojox/grid/enhanced/plugins/Rearrange', 'buildspace/widget/grid/plugins/FormulatedColumn', 'dojox/grid/enhanced/plugins/IndirectSelection', 'dojo/store/Memory', 'dijit/Menu', 'dijit/DropDownMenu', 'dijit/MenuItem', 'dijit/form/Button', 'dijit/form/DropDownButton', 'buildspace/widget/grid/Filter', './StockOutItemGridContainer', './PrintPreviewDialog/PrintSelectedItemGridDialog', 'dojo/i18n!../../nls/StockOut'], function(declare, connect, request, ContentPane, BorderContainer, TabContainer, Formatter, Rearrange, FormulatedColumn, IndirectSelection, Memory, Menu, DropDownMenu, MenuItem, Button, DropDownButton, Filter, StockOutItemGridContainer, PrintSelectedItemGridDialog, nls) {
    var ResourceGrid;
    ResourceGrid = declare("buildspace.apps.StockOutReport.ResourceGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      keepSelection: true,
      rowSelector: "0px",
      region: 'center',
      stockOutWorkAreaContainer: null,
      project: null,
      type: null,
      constructor: function(args) {
        this.rearranger = Rearrange(this, {});
        this.formulatedColumn = FormulatedColumn(this, {});
        this.type = args.type;
        if (this.type && this.type === 'trade') {
          return this.plugins = {
            indirectSelection: {
              headerSelector: true,
              width: "40px",
              styles: "text-align: center;"
            }
          };
        }
      },
      postCreate: function() {
        var self;
        this.inherited(arguments);
        if (this.type && this.type === 'trade') {
          self = this;
          this._connects.push(connect.connect(this, 'onCellClick', function(e) {
            if (e.cell.name !== "") {
              return;
            }
            return self.singleCheckBoxSelection(e);
          }));
          return this._connects.push(connect.connect(this.rowSelectCell, 'toggleAllSelection', function(newValue) {
            return self.toggleAllSelection(newValue);
          }));
        }
      },
      canSort: function() {
        return false;
      },
      refreshGrid: function() {
        this.store.save();
        this.store.close();
        return this.setStore(this.store);
      },
      arrayUnique: function(array) {
        return array.reverse().filter(function(e, i, arr) {
          return arr.indexOf(e, i + 1) === -1;
        }).reverse();
      }
    });
    return declare('buildspace.apps.StockOutReport.WorkArea', TabContainer, {
      region: "center",
      style: "padding:0px;margin:0px;border:0px;width:100%;height:100%;",
      project: null,
      gutters: false,
      resourceTradePreviewStore: [],
      resourceAllTradeItemStore: [],
      resourceTradeItemStore: [],
      postCreate: function() {
        var pb, self;
        this.inherited(arguments);
        self = this;
        pb = new buildspace.dialog.indeterminateProgressBar({
          title: nls.processing + "..."
        });
        pb.show();
        return request.get("stockOut/getResourceWithStockInsByProject/projectId/" + this.project.id[0], {
          handleAs: 'json'
        }).then(function(response) {
          var firstPane;
          self.createContentPaneTab('main-stockOutResourceList', nls.resource, self.createResourceContainer(response), false);
          firstPane = dijit.byId('main-stockOutResourceList');
          self.selectChild(firstPane);
          return pb.hide();
        }, function(error) {
          return pb.hide();
        });
      },
      createResourceContainer: function(store, self) {
        var filter, grid, gridContainer;
        if (self == null) {
          self = this;
        }
        store = new dojo.data.ItemFileWriteStore({
          url: "stockOut/getResourceWithStockInsByProject/projectId/" + this.project.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new ResourceGrid({
          type: 'resource',
          structure: self.getResourceGridLayout(),
          store: store,
          project: this.project,
          projectId: this.project.id[0],
          stockOutWorkAreaContainer: self,
          onRowDblClick: function(e) {
            var resource, tabId, tabPane;
            resource = this.getItem(e.rowIndex);
            if (resource.id[0] > 0) {
              tabId = "main-stockOutResourceList-" + resource.id[0];
              if (tabPane = dijit.byId(tabId)) {
                return self.selectChild(tabPane);
              }
              return self.createContentPaneTab(tabId, resource.name[0], self.createResourceTradeGridView(resource), true);
            }
          }
        });
        filter = new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [
            {
              'name': nls.description
            }
          ]
        });
        gridContainer = new BorderContainer({
          region: 'top',
          gutters: false
        });
        gridContainer.addChild(filter);
        gridContainer.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
        return gridContainer;
      },
      createResourceTradeGridView: function(resource) {
        var borderContainer, controller, controllerPane, currentTabContainer, grid, masterBorderContainer, menu, self, stackContainer, stackPane, stackPaneId, store, toolbar;
        self = this;
        currentTabContainer = this;
        stackPaneId = "stockOutReportContainerPane-" + resource.id[0];
        stackContainer = dijit.byId(stackPaneId + "-stackContainer");
        if (stackContainer) {
          dijit.byId(stackPaneId + "-stackContainer").destroyRecursive();
        }
        stackContainer = self.stackContainer = new dijit.layout.StackContainer({
          id: stackPaneId + "-stackContainer",
          style: 'width:100%;height:100%;',
          region: "center"
        });
        store = new dojo.data.ItemFileWriteStore({
          url: "stockOut/getResourceTradeWithStockInsByProject/projectId/" + self.project.id[0] + "/resourceId/" + resource.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        this.resourceTradePreviewStore[resource.id[0]] = new Memory({
          idProperty: 'id'
        });
        this.resourceAllTradeItemStore[resource.id[0]] = new Memory({
          idProperty: 'id'
        });
        this.resourceTradeItemStore[resource.id[0]] = [];
        grid = new ResourceGrid({
          id: "stockOutReport-resourceTrade-container-" + self.project.id[0] + "-" + resource.id[0],
          type: 'trade',
          structure: self.getResourceTradeGridLayout(),
          project: self.project,
          projectId: self.project.id[0],
          stockOutWorkAreaContainer: self,
          resource: resource,
          store: store,
          onRowDblClick: function(e) {
            var resourceTrade;
            resourceTrade = this.getItem(e.rowIndex);
            if (resourceTrade.id[0] > 0) {
              return this.stockOutWorkAreaContainer.createResourceItemGridView(resource, resourceTrade);
            }
          },
          singleCheckBoxSelection: function(e) {
            var checked, item, rowIndex;
            rowIndex = e.rowIndex;
            checked = this.selection.selected[rowIndex];
            item = this.getItem(rowIndex);
            if (checked) {
              return this.getAffectedItemByResourceTrade(item, 'add');
            }
            return this.getAffectedItemByResourceTrade(item, 'remove');
          },
          toggleAllSelection: function(checked) {
            var selectedTradeStore, selection;
            self = this;
            selection = this.selection;
            selectedTradeStore = this.stockOutWorkAreaContainer.resourceTradePreviewStore[self.resource.id[0]];
            if (checked) {
              selection.selectRange(0, self.rowCount - 1);
              store.fetch({
                onComplete: function(items) {
                  return dojo.forEach(items, function(item, index) {
                    if (item.id[0] > 0) {
                      return selectedTradeStore.put({
                        id: item.id[0]
                      });
                    }
                  });
                }
              });
              return self.getAffectedItemByResourceTrade(null, 'add');
            }
            selection.deselectAll();
            return self.getAffectedItemByResourceTrade(null, 'remove');
          },
          getAffectedItemByResourceTrade: function(resourceTrade, type) {
            var pb, resourceTrades, selectedTradeStore;
            self = this;
            selectedTradeStore = this.stockOutWorkAreaContainer.resourceTradePreviewStore[self.resource.id[0]];
            resourceTrades = [];
            pb = buildspace.dialog.indeterminateProgressBar({
              title: nls.pleaseWait + '...'
            });
            pb.show();
            if (resourceTrade) {
              if (resourceTrade.id[0] < 0) {
                pb.hide();
                return false;
              }
              selectedTradeStore.put({
                id: resourceTrade.id[0]
              });
              resourceTrades.push(resourceTrade.id[0]);
            } else {
              selectedTradeStore.query().forEach(function(item) {
                return resourceTrades.push(item.id);
              });
            }
            return request.post('stockOutReporting/getAffectedItemsByResourceTrade', {
              handleAs: 'json',
              data: {
                projectId: self.projectId,
                resourceId: self.resource.id[0],
                resource_trade_ids: JSON.stringify(self.arrayUnique(resourceTrades))
              }
            }).then(function(data) {
              var resourceItemId, resourceTradeId, _i, _len, _ref;
              for (resourceTradeId in data) {
                if (self.stockOutWorkAreaContainer.resourceTradeItemStore[self.resource.id[0]][resourceTradeId] === void 0) {
                  self.stockOutWorkAreaContainer.resourceTradeItemStore[self.resource.id[0]][resourceTradeId] = new Memory({
                    idProperty: 'id'
                  });
                }
                _ref = data[resourceTradeId];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  resourceItemId = _ref[_i];
                  if (type === 'add') {
                    self.stockOutWorkAreaContainer.resourceTradeItemStore[self.resource.id[0]][resourceTradeId].put({
                      id: resourceItemId
                    });
                    self.stockOutWorkAreaContainer.resourceAllTradeItemStore[self.resource.id[0]].put({
                      id: resourceItemId
                    });
                  } else {
                    self.stockOutWorkAreaContainer.resourceTradeItemStore[self.resource.id[0]][resourceTradeId].remove(resourceItemId);
                    self.stockOutWorkAreaContainer.resourceAllTradeItemStore[self.resource.id[0]].remove(resourceItemId);
                  }
                }
              }
              return pb.hide();
            }, function(error) {
              console.log(error);
              return pb.hide();
            });
          }
        });
        menu = new DropDownMenu({
          style: "display: none;"
        });
        menu.addChild(new MenuItem({
          label: nls.printItemsByResourceTrade,
          iconClass: "icon-16-container icon-16-print",
          onClick: function() {
            return currentTabContainer.openBillPreviewDialogForSelectedItems(resource);
          }
        }));
        toolbar = new dijit.Toolbar({
          style: "outline:none!important; border-bottom:none; padding:2px; width:100%;",
          region: "top"
        });
        toolbar.addChild(new DropDownButton({
          label: nls.print,
          id: "stockOutReport-resourceTrade-printButton-" + self.project.id[0] + "-" + resource.id[0],
          iconClass: "icon-16-container icon-16-print",
          dropDown: menu
        }));
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          baseClass: "form",
          gutters: false,
          region: "center"
        });
        borderContainer.addChild(new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [
            {
              'description': nls.description
            }
          ]
        }));
        borderContainer.addChild(toolbar);
        borderContainer.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
        stackPane = new dijit.layout.ContentPane({
          title: resource.name,
          content: borderContainer
        });
        stackContainer.addChild(stackPane);
        controller = new dijit.layout.StackController({
          region: "top",
          containerId: stackPaneId + "-stackContainer"
        });
        controllerPane = new dijit.layout.ContentPane({
          style: "padding: 0px; overflow: hidden;",
          baseClass: 'breadCrumbTrail',
          region: 'top',
          content: controller
        });
        masterBorderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          baseClass: "form",
          gutters: false,
          region: "center"
        });
        masterBorderContainer.addChild(stackContainer);
        masterBorderContainer.addChild(controllerPane);
        dojo.subscribe(stackPaneId + "-stackContainer-selectChild", "", function(page) {
          var children, index, widget, _results;
          widget = dijit.byId(stackPaneId + "-stackContainer");
          if (widget) {
            children = widget.getChildren();
            index = dojo.indexOf(children, dijit.byId(page.id)) + 1;
            _results = [];
            while (children.length > index) {
              widget.removeChild(children[index]);
              children[index].destroyRecursive();
              _results.push(index = index + 1);
            }
            return _results;
          }
        });
        masterBorderContainer.startup();
        return masterBorderContainer;
      },
      openBillPreviewDialogForSelectedItems: function(resource) {
        var items, pb, selectedItemStore, self;
        self = this;
        selectedItemStore = self.resourceAllTradeItemStore[resource.id[0]];
        items = [];
        selectedItemStore.query().forEach(function(item) {
          return items.push(item.id);
        });
        items = items.reverse().filter(function(e, i, arr) {
          return arr.indexOf(e, i + 1) === -1;
        }).reverse();
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + '...'
        });
        pb.show();
        return request.post('stockOutReporting/getPrintPreviewStockOutItems', {
          handleAs: 'json',
          data: {
            projectId: self.project.id[0],
            resourceId: resource.id[0],
            item_ids: JSON.stringify(items)
          }
        }).then(function(data) {
          var dialog;
          dialog = new PrintSelectedItemGridDialog({
            title: nls.printItemsByResourceTrade,
            projectId: self.project.id[0],
            resourceId: resource.id[0],
            data: data,
            selectedItems: items
          });
          dialog.show();
          return pb.hide();
        }, function(error) {
          console.log(error);
          return pb.hide();
        });
      },
      createResourceItemGridView: function(resource, resourceTrade, self) {
        var gridContainer;
        if (self == null) {
          self = this;
        }
        gridContainer = new StockOutItemGridContainer({
          project: this.project,
          resource: resource,
          resourceTrade: resourceTrade,
          stockOutWorkAreaContainer: self
        });
        return self.makePane(resource, resourceTrade.description[0], gridContainer);
      },
      getResourceGridLayout: function() {
        var formatter;
        formatter = new Formatter;
        return [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter,
            noresize: true
          }, {
            name: nls.description,
            field: "name",
            width: 'auto',
            formatter: formatter.treeCellFormatter,
            noresize: true
          }, {
            name: nls.totalCost,
            field: "total_cost",
            width: '140px',
            styles: 'text-align: right;',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }
        ];
      },
      getResourceTradeGridLayout: function() {
        var formatter;
        formatter = new Formatter;
        return [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter,
            noresize: true
          }, {
            name: nls.description,
            field: "description",
            width: 'auto',
            formatter: formatter.treeCellFormatter,
            noresize: true
          }, {
            name: nls.totalCost,
            field: "total_cost",
            width: '140px',
            styles: 'text-align: right;',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }
        ];
      },
      createContentPaneTab: function(id, title, content, closable) {
        var pane;
        pane = new dijit.layout.ContentPane({
          closable: closable,
          id: id,
          style: "padding:0px;border:0px;margin:0px;overflow:hidden;",
          title: buildspace.truncateString(title, 60),
          content: content
        });
        this.addChild(pane);
        return this.selectChild(pane);
      },
      makePane: function(resource, name, content) {
        var pane, stackContainer;
        stackContainer = dijit.byId("stockOutReportContainerPane-" + resource.id[0] + "-stackContainer");
        pane = new dijit.layout.ContentPane({
          title: buildspace.truncateString(name, 35),
          content: content
        });
        stackContainer.addChild(pane);
        return stackContainer.selectChild(pane);
      }
    });
  });

}).call(this);
