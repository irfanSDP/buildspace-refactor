// Generated by CoffeeScript 1.9.0
(function() {
  define("buildspace/apps/PostContractReport/VariationOrder/PrintAllVOWithClaims", ["dojo/_base/declare", "dojo/aspect", "dojo/_base/lang", "dojo/_base/connect", "dojo/when", "dojo/html", "dojo/dom", "dojo/keys", "dojo/dom-style", "dojo/request", "dojo/json", "dojo/number", "dojo/currency", "./PrintPreviewFormDialog", "buildspace/widget/grid/cells/Formatter", 'dojo/i18n!buildspace/nls/PostContract'], function(declare, aspect, lang, connect, when_, html, dom, keys, domStyle, request, JSON, number, currency, PrintPreviewFormDialog, Formatter, nls) {
    var CustomFormatter, Dialog, selectedItemGrid, selectedItemGridContainer;
    CustomFormatter = declare("buildspace.apps.PostContractReport.VariationOrder.PreviewItemGridFormatter", null, {
      nettOmissionAdditionCellFormatter: function(cellValue, rowIdx, cell) {
        var item, value;
        item = this.grid.getItem(rowIdx);
        if (item.type && item.type[0] < 1) {
          cell.customClasses.push('invalidTypeItemCell');
          return "&nbsp;";
        } else {
          cell.customClasses.push('disable-cell');
          value = number.parse(cellValue);
          if (value < 0) {
            return '<span style="color:#FF0000">' + currency.format(value) + '</span>';
          } else {
            if (parseInt(value) === 0) {
              return "&nbsp;";
            } else {
              return '<span style="color:#42b449;">' + currency.format(value) + '</span>';
            }
          }
        }
      }
    });
    selectedItemGrid = declare("buildspace.apps.PostContractReport.VariationOrder.SelectedItemGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      region: "center",
      escapeHTMLInData: false,
      canSort: function() {
        return false;
      },
      onStyleRow: function(e) {
        var childElement, elemToHide;
        this.inherited(arguments);
        if (e.node.children[0]) {
          if (e.node.children[0].children[0].rows.length >= 2) {
            elemToHide = e.node.children[0].children[0].rows[1];
            childElement = e.node.children[0].children[0].rows[0].children;
            elemToHide.parentNode.removeChild(elemToHide);
            return dojo.forEach(childElement, function(child, i) {
              var rowSpan;
              rowSpan = dojo.attr(child, "rowSpan");
              if (!rowSpan || rowSpan < 2) {
                return dojo.attr(child, "rowSpan", 2);
              }
            });
          }
        }
      }
    });
    selectedItemGridContainer = declare("buildspace.apps.PostContractReport.VariationOrder.SelectedItemGridContainer", dijit.layout.BorderContainer, {
      style: "padding:0px;width:100%;height:100%;",
      region: "center",
      gutters: false,
      dialog: null,
      store: null,
      structure: null,
      billId: -1,
      projectId: -1,
      selectedItems: [],
      postCreate: function() {
        var grid, self, toolbar;
        self = this;
        self.inherited(arguments);
        grid = this.grid = new selectedItemGrid({
          store: self.store,
          structure: self.structure,
          selectedItems: self.selectedItems
        });
        toolbar = new dijit.Toolbar({
          region: "top",
          style: "padding:2px;border-bottom:none;width:100%;"
        });
        toolbar.addChild(new dijit.form.Button({
          label: nls.print,
          iconClass: "icon-16-container icon-16-print",
          onClick: function() {
            return self.openPrintingDialog();
          }
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new dijit.form.Button({
          label: nls.close,
          iconClass: "icon-16-container icon-16-close",
          onClick: function() {
            return self.dialog.hide();
          }
        }));
        self.addChild(toolbar);
        return self.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
      },
      openPrintingDialog: function(self) {
        var pb;
        if (self == null) {
          self = this;
        }
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        pb.show();
        return request.get("viewTendererReporting/getPrintingInformation", {
          handleAs: 'json'
        }).then(function(response) {
          var dialog;
          dialog = new PrintPreviewFormDialog({
            title: self.dialog.title,
            selectedRows: self.selectedItems,
            printURL: 'printReport/printVOWithClaims',
            exportURL: 'exportExcelReport/exportVOWithClaims',
            billId: self.billId,
            projectId: self.projectId,
            _csrf_token: response._csrf_token
          });
          pb.hide();
          return dialog.show();
        }, function(error) {
          return pb.hide();
        });
      }
    });
    return Dialog = declare("buildspace.apps.PostContractReport.VariationOrder.GroupProjectAssignmentDialog", dijit.Dialog, {
      style: "padding:0px;margin:0px;",
      project: null,
      companyId: -1,
      billId: -1,
      projectId: -1,
      companyName: null,
      data: null,
      selectedItems: [],
      buildRendering: function() {
        var content;
        content = this.createContent();
        content.startup();
        this.content = content;
        return this.inherited(arguments);
      },
      postCreate: function() {
        domStyle.set(this.containerNode, {
          padding: "0px",
          margin: "0px"
        });
        this.closeButtonNode.style.display = "none";
        return this.inherited(arguments);
      },
      _onKey: function(e) {
        var key;
        key = e.keyCode;
        if (key === keys.ESCAPE) {
          return dojo.stopEvent(e);
        }
      },
      onHide: function() {
        return this.destroyRecursive();
      },
      createContent: function(self) {
        var borderContainer, content;
        if (self == null) {
          self = this;
        }
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:1280px;height:600px;",
          gutters: false
        });
        content = new selectedItemGridContainer({
          store: dojo.data.ItemFileWriteStore({
            data: self.data
          }),
          dialog: self,
          selectedItems: self.selectedItems,
          structure: self.constructGridStructure(),
          billId: self.billId,
          projectId: self.projectId
        });
        borderContainer.addChild(content);
        return borderContainer;
      },
      constructGridStructure: function(self) {
        var basicStructure, cFormatter, colCount, formatter, parentCells;
        if (self == null) {
          self = this;
        }
        formatter = new Formatter();
        cFormatter = new CustomFormatter();
        colCount = 0;
        parentCells = [];
        basicStructure = {
          noscroll: false,
          width: "50",
          cells: [
            [
              {
                name: "No",
                field: "id",
                width: '30px',
                styles: 'text-align: center;',
                formatter: formatter.rowCountCellFormatter,
                rowSpan: 2
              }, {
                name: nls.description,
                field: 'description',
                width: '500px',
                formatter: formatter.postContractPrintPreviewTreeCellFormatter,
                noresize: true,
                rowSpan: 2
              }
            ]
          ]
        };
        basicStructure.cells[0].push({
          name: nls.omission,
          field: 'omission',
          styles: "text-align:right;color:#FF0000;",
          formatter: formatter.unEditableCurrencyCellFormatter,
          width: '150px',
          noresize: true
        });
        basicStructure.cells[0].push({
          name: nls.addition,
          field: 'addition',
          styles: 'text-align:right;',
          formatter: formatter.unEditableCurrencyCellFormatter,
          width: '150px',
          noresize: true
        });
        basicStructure.cells[0].push({
          name: nls.nett,
          field: 'nett_omission_addition',
          styles: 'text-align:right;',
          formatter: cFormatter.nettOmissionAdditionCellFormatter,
          width: '150px',
          noresize: true
        });
        basicStructure.cells[0].push({
          name: '%',
          field: 'up_to_date_percentage',
          styles: 'text-align:right;',
          formatter: formatter.unEditablePercentageCellFormatter,
          width: '75px',
          noresize: true
        });
        basicStructure.cells[0].push({
          name: nls.amount,
          field: 'total_claim',
          styles: 'text-align:right;',
          formatter: formatter.unEditableCurrencyCellFormatter,
          width: '150px',
          noresize: true
        });
        parentCells.push({
          name: nls.amount,
          styles: "text-align:center;",
          headerClasses: "staticHeader typeHeader",
          colSpan: 3
        });
        parentCells.push({
          name: nls.workDone,
          styles: "text-align:center;",
          headerClasses: "staticHeader typeHeader",
          colSpan: 2
        });
        basicStructure.cells.push(parentCells);
        return basicStructure;
      }
    });
  });

}).call(this);
