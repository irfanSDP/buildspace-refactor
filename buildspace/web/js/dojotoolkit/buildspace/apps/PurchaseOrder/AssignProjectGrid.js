// Generated by CoffeeScript 1.9.0
(function() {
    define('buildspace/apps/PurchaseOrder/AssignProjectGrid', ['dojo/_base/declare', 'dojo/_base/lang', "dojo/_base/connect", 'dojo/on', "dojo/request", "dojo/html", "dojo/dom", 'dojo/keys', "dojo/dom-style", "dojo/dom-attr", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Selector", "dojox/grid/enhanced/plugins/Rearrange", 'dijit/layout/TabContainer', 'dijit/layout/ContentPane', 'dijit/layout/BorderContainer', 'dijit/Toolbar', 'dijit/form/Button', 'buildspace/widget/grid/cells/Formatter', 'dojo/i18n!../../nls/PurchaseOrder', "dojox/grid/enhanced/plugins/IndirectSelection", 'buildspace/widget/grid/Filter'], function(declare, lang, connect, bind, request, html, dom, keys, domStyle, domAttr, Menu, Selector, Rearrange, TabContainer, ContentPane, BorderContainer, Toolbar, Button, Formatter, nls, IndirectSelection, Filter) {
        var purchaseOrderProjectGrid;
        purchaseOrderProjectGrid = declare("buildspace.apps.PurchaseOrder.PurchaseOrderProjectGrid", dojox.grid.EnhancedGrid, {
            style: "border:none;padding:0px;margin:0px;width:100%;height:100%;",
            selectionMode: 'single',
            keepSelection: true,
            rowSelector: "0px",
            region: 'center',
            poForm: null,
            dialogContainer: null,
            plugins: {
                indirectSelection: {
                    headerSelector: false,
                    width: "20px",
                    styles: "text-align:center;"
                }
            },
            constructor: function(args) {
                return this.rearranger = Rearrange(this, {});
            },
            canSort: function(inSortInfo) {
                return false;
            },
            noDataMessage: nls.noPurchaseOrderProjectAvailableInGrid,
            postCreate: function() {
                var self;
                this.inherited(arguments);
                self = this;
                this.connect(this.selection, 'onDeselected', function(rowIndex) {
                    return self.disableToolbarButtons(true);
                });
                return this.connect(this.selection, 'onSelected', function(rowIndex) {
                    var item = self.getItem(rowIndex);
                    if (item && item.id[0] > 0) {
                        return self.disableToolbarButtons(false);
                    } else {
                        return self.disableToolbarButtons(true);
                    }
                });
            },
            select: function() {
                var item, pb, selectedIndex, self;
                self = this;
                selectedIndex = this.selection.selectedIndex;
                item = this.getItem(selectedIndex);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + "..."
                });
                pb.show();
                return request.get('purchaseOrder/getCurrentProjectPurchaseOrderNoAndSupplierInfo', {
                    query: {
                        projectStructureId: item.id
                    },
                    handleAs: 'json'
                }).then(function(response) {
                    var saveButton;
                    pb.hide();
                    saveButton = dijit.byId('PO-form-button-save');
                    saveButton.set('disabled', false);
                    self.poForm.assignProjectTitle.innerHTML = item.title[0];
                    self.poForm.projectSiteAddress.innerHTML = item.site_address[0];
                    self.poForm.currentPurchaseOrderNo = response.poCount;
                    self.poForm.countrySelect.set('value', item.region_id[0]);
                    self.poForm.stateValue = item.subregion_id[0];
                    self.poForm.poPrefix.set('value', response.poPrefix);
                    if (response.poPrefix) {
                        self.poForm.poPrefix.set('readOnly', true);
                    } else {
                        self.poForm.poPrefix.set('readOnly', false);
                    }
                    domAttr.set(self.poForm.projectStructureIdInput, 'value', item.id[0]);
                    domAttr.set(self.poForm.poCountInput, 'value', response.poCount);
                    self.poForm.updateFormView();
                    if (response.poUsedSuppliers.length > 0) {
                        self.poForm.showSupplierSelectContainer();
                    } else {
                        self.poForm.hideSupplierSelectContainer();
                    }
                    self.poForm.updateSupplierSelectStore(response.poUsedSuppliers);
                    return self.dialogContainer.hide();
                }, function(error) {
                    return pb.hide();
                });
            },
            disableToolbarButtons: function(isDisable, buttonsToEnable) {
                var selectRowBtn = dijit.byId("requestForQuotationProjectSelectButton");

                if(selectRowBtn)
                    selectRowBtn.set('disabled', isDisable);
            }
        });

        return declare('buildspace.apps.PurchaseOrder.PurchaseOrderProjectGridDialog', dijit.Dialog, {
            title: nls.poProjectSelectionGrid,
            style: "padding:0px;margin:0px;width:750px;height:450px;",
            poForm: null,
            buildRendering: function() {
                var content = this.createContent();
                this.content = content;
                content.startup();
                return this.inherited(arguments);
            },
            postCreate: function() {
                domStyle.set(this.containerNode, {
                    padding: "0px",
                    margin: "0px"
                });
                this.closeButtonNode.style.display = "none";
                return this.inherited(arguments);
            },
            createContent: function() {
                var borderContainer, grid, self, store, toolbar;
                self = this;
                store = new dojo.data.ItemFileWriteStore({
                    url: 'purchaseOrder/getProjectListings',
                    clearOnClose: true,
                    urlPreventCache: true
                });
                grid = new purchaseOrderProjectGrid({
                    structure: self.getGridLayout(),
                    store: store,
                    poForm: self.poForm,
                    dialogContainer: self
                });
                toolbar = new Toolbar({
                    region: 'top',
                    style: "outline:none!important;padding:2px;border:none;width:100%;"
                });
                toolbar.addChild(new Button({
                    id: 'requestForQuotationProjectSelectButton',
                    label: nls.select,
                    iconClass: "icon-16-container icon-16-checkmark2",
                    disabled: true,
                    onClick: function() {
                        return grid.select();
                    }
                }));
                toolbar.addChild(new dijit.ToolbarSeparator());
                toolbar.addChild(new Button({
                    label: nls.close,
                    iconClass: "icon-16-container icon-16-close",
                    onClick: function() {
                        return self.hide();
                    }
                }));
                borderContainer = new BorderContainer({
                    style: "padding:0px;margin:0px;width:750px;height:420px;",
                    gutters: false
                });
                borderContainer.addChild(new Filter({
                    region: 'top',
                    editableGrid: false,
                    grid: grid,
                    filterFields: [{
                        'title': nls.title,
                        'country': nls.country,
                        'state': nls.state
                    }]
                }));
                borderContainer.addChild(toolbar);
                borderContainer.addChild(grid);
                return borderContainer;
            },
            getGridLayout: function() {
                var formatter = new Formatter;
                return [{
                    name: "No",
                    field: "id",
                    width: '30px',
                    styles: 'text-align: center;',
                    formatter: formatter.rowCountCellFormatter
                },{
                    name: nls.title,
                    field: "title",
                    width: 'auto'
                },{
                    name: nls.country,
                    field: "country",
                    width: '100px',
                    styles: 'text-align: center;'
                },{
                    name: nls.state,
                    field: "state",
                    width: '100px',
                    styles: 'text-align: center;'
                },{
                    name: nls.createdAt,
                    field: "created_at",
                    width: '80px',
                    styles: 'text-align: center;'
                }];
            },
            _onKey: function(e) {
                var key = e.keyCode;
                if (key === keys.ESCAPE) {
                    return dojo.stopEvent(e);
                }
            },
            onHide: function() {
                return this.destroyRecursive();
            }
        });
    });

}).call(this);
