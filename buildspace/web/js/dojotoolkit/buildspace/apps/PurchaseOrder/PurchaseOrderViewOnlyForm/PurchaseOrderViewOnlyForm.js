// Generated by CoffeeScript 1.9.0
(function() {
    define('buildspace/apps/PurchaseOrder/PurchaseOrderViewOnlyForm/PurchaseOrderViewOnlyForm',[
        'dojo/_base/declare',
        'dojo/_base/lang',
        "dojo/request",
        "dojo/dom-style",
        "dijit/_WidgetBase",
        "dijit/_OnDijitClickMixin",
        "dijit/_TemplatedMixin",
        "dijit/_WidgetsInTemplateMixin",
        'dijit/layout/BorderContainer',
        'dijit/Editor',
        'dijit/_editor/plugins/FontChoice',
        'dijit/_editor/plugins/AlwaysShowToolbar',
        'dijit/Toolbar',
        'dijit/form/FilteringSelect',
        "dijit/form/TextBox",
        "dijit/form/Textarea",
        "dijit/form/CheckBox",
        "dijit/form/RadioButton",
        'dijit/form/Select',
        'dijit/form/Button',
        "dojo/store/Memory",
        "dojox/form/Manager",
        '../SupplierList/SupplierSelectionGridDialog',
        "dojo/text!./templates/purchaseOrderViewOnlyForm.html",
        'dojo/i18n!../../../nls/PurchaseOrder'], function(declare, lang, request, domStyle, _WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin, BorderContainer, Editor, FontChoice, AlwaysShowToolbar, Toolbar, FilteringSelect, TextBox, Textarea, CheckBox, RadioButton, Select, Button, Memory, Manager, SupplierSelectionGridDialog, template, nls) {
        var purchaseOrderForm = declare("buildspace.apps.PurchaseOrder.PurchaseOrderViewOnlyForm", [_WidgetBase, _OnDijitClickMixin, _TemplatedMixin, _WidgetsInTemplateMixin], {
            baseClass: "buildspace-form",
            poId: -1,
            templateString: template,
            region: 'center',
            style: "overflow: auto;",
            formInfo: null,
            signatureEditor: null,
            subPackageSelections: [],
            poStatusSelections: [],
            currencySelections: [],
            nls: nls,
            postCreate: function() {
                var currencySelectionStore, poStatusSelectionStore, self, subPackageSelectionStore;
                this.inherited(arguments);
                self = this;
                if (this.subPackageSelections.length > 0) {
                    self["subCon-" + this.poId].innerHTML = null;
                    subPackageSelectionStore = new Memory({
                        idProperty: "id",
                        data: self.subPackageSelections
                    });
                    new Select({
                        name: 'sub_package_id',
                        store: subPackageSelectionStore,
                        labelAttr: 'name',
                        maxHeight: -1,
                        style: "width: 180px;padding:2px!important;"
                    }).placeAt(self["subCon-" + this.poId]);
                }

                poStatusSelectionStore = new Memory({
                    idProperty: "id",
                    data: self.poStatusSelections
                });
                new Select({
                    name: 'purchase_order_information[status]',
                    store: poStatusSelectionStore,
                    labelAttr: 'name',
                    maxHeight: -1,
                    style: "width: 180px;padding:2px!important;"
                }).placeAt(self["statusSelect-" + this.poId]);
                currencySelectionStore = new Memory({
                    idProperty: "id",
                    data: self.currencySelections
                });
                new FilteringSelect({
                    name: 'purchase_order_information[currency_id]',
                    store: currencySelectionStore,
                    labelAttr: 'name',
                    maxHeight: -1,
                    style: "width: 173px;padding:2px!important;"
                }).placeAt(self["currencySelect-" + this.poId]);

                this.signatureEditor = new Editor({
                    name: 'purchase_order_information[signature]',
                    height: '25%',
                    plugins: ['fontSize', '|', 'bold', 'italic', 'underline', '|', 'indent', 'outdent', 'justifyLeft', 'justifyCenter', 'justifyRight'],
                    style: "width:53.5%;font:81.25% arial,helvetica,sans-serif;border:1px solid #d3d3d3;",
                    value: this.formInfo['purchase_order_information[signature]']
                }).placeAt(self["signatureTextBox-" + this.poId]);
            },
            startup: function() {
                this.inherited(arguments);
                this["rfqForm-" + this.poId].setFormValues(this.formInfo);
            },
            clearErrorMsg: function() {
                var field, fieldNode, fields, _i, _len, _results;
                fields = ['ref', 'quo_ref', 'attention_to', 'company_address_1', 'company_address_2', 'company_address_3', 'supplier_address_1', 'supplier_address_2', 'supplier_address_3', 'ship_to_1', 'ship_to_2', 'ship_to_3', 'note'];
                _results = [];
                for (_i = 0, _len = fields.length; _i < _len; _i++) {
                    field = fields[_i];
                    fieldNode = dojo.byId("error-purchase_order_information_" + field);
                    if (fieldNode) {
                        fieldNode.innerHTML = null;
                        _results.push(domStyle.set(fieldNode, 'display', 'none'));
                    } else {
                        _results.push(void 0);
                    }
                }
                return _results;
            },
            fillErrorMsgs: function(errorMsgs) {
                var errorMsg, fieldNode, name, _results;
                _results = [];
                for (name in errorMsgs) {
                    errorMsg = errorMsgs[name];
                    fieldNode = dojo.byId("error-purchase_order_information_" + name);
                    if (fieldNode) {
                        fieldNode.innerHTML = errorMsg;
                        _results.push(domStyle.set(fieldNode, 'display', 'block'));
                    } else {
                        _results.push(void 0);
                    }
                }
                return _results;
            },
            save: function() {
                var form, formValues, pb, self;
                self = this;
                form = this["rfqForm-" + this.poId];
                if (!form.validate()) {
                    return false;
                }
                formValues = dojo.formToObject(this["rfqForm-" + this.poId].id);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.pleaseWait + "..."
                });
                lang.mixin(formValues, {
                    poId: self.poId,
                    'purchase_order_information[signature]': self.signatureEditor.value
                });
                pb.show();
                this.clearErrorMsg();
                return request.post("purchaseOrder/updateWorkAreaInformation", {
                    data: formValues,
                    handleAs: 'json'
                }).then(function(response) {
                    if (!response.success) {
                        self.fillErrorMsgs(response.errorMsgs);
                    }
                    return pb.hide();
                }, function(error) {
                    return pb.hide();
                });
            }
        });

        return declare('buildspace.apps.PurchaseOrder.PurchaseOrderViewOnlyForm.PurchaseOrderViewOnlyContainer', BorderContainer, {
            poId: -1,
            style: "padding:0px;margin:0px;width:100%;height:height:100%;",
            gutters: false,
            data: null,
            postCreate: function() {
                var form, self, toolbar;
                this.inherited(arguments);
                self = this;
                form = new purchaseOrderForm({
                    poId: self.poId,
                    formInfo: self.data.purchaseOrderForm,
                    subPackageSelections: self.data.subPackageSelections,
                    poStatusSelections: self.data.poStatusSelections,
                    currencySelections: self.data.currencySelections
                });
                toolbar = new Toolbar({
                    region: 'top',
                    style: "outline:none!important;padding:2px;overflow:hidden;"
                });
                toolbar.addChild(new Button({
                    label: nls.save,
                    iconClass: "icon-16-container icon-16-save",
                    onClick: function() {
                        return form.save();
                    }
                }));
                toolbar.addChild(new dijit.ToolbarSeparator);
                toolbar.addChild(new Button({
                    label: nls.assignSupplier,
                    iconClass: "icon-16-container icon-16-add",
                    onClick: function() {
                        var pb = buildspace.dialog.indeterminateProgressBar({
                            title: nls.pleaseWait + "..."
                        });
                        pb.show();
                        return request.get('purchaseOrder/getCompanyListing', {
                            query: {
                                poId: self.poId
                            },
                            handleAs: 'json'
                        }).then(function(response) {
                            var dialog = new SupplierSelectionGridDialog({
                                title: nls.addSupplierToPO,
                                poId: self.poId,
                                poForm: form,
                                supplierListContainer: self,
                                data: response
                            });
                            dialog.show();
                            return pb.hide();
                        }, function(error) {
                            return pb.hide();
                        });
                    }
                }));
                toolbar.addChild(new dijit.ToolbarSeparator);
                toolbar.addChild(new Button({
                    label: nls.print,
                    iconClass: "icon-16-container icon-16-print",
                    onClick: function() {
                        var win = window.open("PurchaseOrderPrintout/" + self.poId + "/" + self.data.purchaseOrderForm.printing_csrf_token, '_blank');
                        return win.focus();
                    }
                }));

                this.addChild(toolbar);

                this.addChild(form);
            }
        });
    });

}).call(this);
