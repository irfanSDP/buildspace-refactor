// Generated by CoffeeScript 1.9.0
(function() {
    define("buildspace/apps/PurchaseOrder/grid", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-attr", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Selector", "dojox/grid/enhanced/plugins/Rearrange", "dojo/_base/event", "dojo/keys", "dijit/focus", "dojo/_base/html", "dojo/request/xhr", "dijit/PopupMenuItem", 'dojo/request', "buildspace/widget/grid/cells/Textarea", 'buildspace/widget/grid/cells/Formatter', 'dojo/i18n!../../nls/PurchaseOrder'], function(declare, lang, array, domAttr, Menu, Selector, Rearrange, evt, keys, focusUtil, html, xhr, PopupMenuItem, request, Textarea, Formatter, nls) {
        return declare("buildspace.apps.PurchaseOrder.Grid", dojox.grid.EnhancedGrid, {
            style: "border:none;",
            keepSelection: true,
            rowSelector: "0px",
            region: 'center',
            requestForQuotationGridContainer: null,
            constructor: function(args) {
                return this.rearranger = Rearrange(this, {});
            },
            canSort: function(inSortInfo) {
                return false;
            },
            noDataMessage: nls.noPurchaseOrderAvailableInGrid,
            postCreate: function() {
                this.inherited(arguments);
                this.on('RowClick', function(e) {
                    var item = this.getItem(e.rowIndex);
                    if (item && item.id[0] > 0) {
                        return this.disableToolbarButtons(false);
                    } else {
                        return this.disableToolbarButtons(true);
                    }
                });
                return this.on('RowContextMenu', function(e) {
                    var item, self;
                    self = this;
                    self.selection.clear();
                    item = self.getItem(e.rowIndex);
                    self.selection.setSelected(e.rowIndex, true);
                    self.contextMenu(e);
                    if (item && item.id[0] > 0) {
                        return this.disableToolbarButtons(false);
                    } else {
                        return this.disableToolbarButtons(true);
                    }
                });
            },
            deleteRow: function(rowIndex) {
                var item, pb, self, xhrArgs;
                self = this;
                item = this.getItem(rowIndex);
                pb = buildspace.dialog.indeterminateProgressBar({
                    title: nls.deleting + '. ' + nls.pleaseWait + '...'
                });
                pb.show();
                xhrArgs = {
                    url: 'purchaseOrder/deletePurchaseInformation',
                    content: {
                        poId: item.id,
                        _csrf_token: item._csrf_token
                    },
                    handleAs: 'json',
                    load: function(data) {
                        pb.hide();
                        if (data.success) {
                            return self.refreshGrid();
                        } else {
                            return console.log(data);
                        }
                    },
                    error: function(error) {
                        return pb.hide();
                    }
                };
                return new buildspace.dialog.confirm(nls.deletePurchaseOrderTitle, nls.deletePurchaseOrderMsg, 80, 320, function() {
                    return dojo.xhrPost(xhrArgs);
                }, function() {
                    return pb.hide();
                });
            },
            refreshGrid: function() {
                this.store.save();
                this.store.close();
                return this.setStore(this.store);
            },
            contextMenu: function(e) {
                var info, item, rowCtxMenu;
                rowCtxMenu = this.rowCtxMenu = new dijit.Menu();
                this.contextMenuItems(e);
                info = {
                    target: e.target
                };
                item = this.getItem(e.rowIndex);
                if (rowCtxMenu && item && (this.selection.isSelected(e.rowIndex) || e.rowNode && html.hasClass(e.rowNode, "dojoxGridRowbar"))) {
                    rowCtxMenu._openMyself(info);
                    evt.stop(e);
                }
            },
            contextMenuItems: function(e) {
                var item, self;
                self = this;
                item = this.getItem(e.rowIndex);
                if (item.id > 0) {
                    self.rowCtxMenu.addChild(new dijit.MenuItem({
                        label: nls.createNewPO,
                        iconClass: "icon-16-container icon-16-add",
                        onClick: function() {
                            return self.requestForQuotationGridContainer.purchaseOrderDialogForm(-1);
                        }
                    }));
                    return self.rowCtxMenu.addChild(new dijit.MenuItem({
                        label: nls["delete"],
                        iconClass: "icon-16-container icon-16-delete",
                        disabled: e.rowIndex > -1 ? false : true,
                        onClick: function() {
                            return self.deleteRow(e.rowIndex);
                        }
                    }));
                }
            },
            disableToolbarButtons: function(isDisable, buttonsToEnable) {
                var deleteRowBtn = dijit.byId("deleteCompanyFromPurchaseOrder");

                if(deleteRowBtn)
                    deleteRowBtn.set('disabled', isDisable);
            }
        });
    });

}).call(this);
