// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/StockInReport/InvoiceDeliveryOrderTab/ItemListingGrid', ["dojo/_base/declare", 'dojo/_base/connect', "dojo/_base/lang", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Rearrange", "buildspace/widget/grid/plugins/FormulatedColumn", 'dojo/request', "dijit/focus", "dijit/Toolbar", "dijit/form/Button", 'dijit/DropDownMenu', 'dijit/form/DropDownButton', 'dijit/MenuItem', 'dijit/layout/BorderContainer', 'buildspace/widget/grid/cells/Formatter', 'buildspace/widget/grid/cells/FormulaTextBox', 'dojox/grid/enhanced/plugins/IndirectSelection', 'buildspace/widget/grid/Filter', 'dojo/store/Memory', './PrintPreviewDialog/PrintSelectedInvoiceItemGridDialog', 'dojo/i18n!../../../nls/StockIn'], function(declare, connect, lang, Menu, Rearrange, FormulatedColumn, request, focusUtil, Toolbar, Button, DropDownMenu, DropDownButton, MenuItem, BorderContainer, Formatter, FormulaTextBox, IndirectSelection, Filter, Memory, PrintSelectedInvoiceItemGridDialog, nls) {
    var ItemListGrid;
    ItemListGrid = declare("buildspace.apps.StockInReport.InvoiceInformation.ItemListGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      rowSelector: "0px",
      region: 'center',
      invoice: null,
      container: null,
      constructor: function(args) {
        this.rearranger = Rearrange(this, {});
        this.formulatedColumn = FormulatedColumn(this, {});
        return this.plugins = {
          indirectSelection: {
            headerSelector: true,
            width: "40px",
            styles: "text-align: center;"
          }
        };
      },
      postCreate: function() {
        var self;
        this.inherited(arguments);
        self = this;
        this._connects.push(connect.connect(this, 'onCellClick', function(e) {
          if (e.cell.name !== "") {
            return;
          }
          return self.singleCheckBoxSelection(e);
        }));
        return this._connects.push(connect.connect(this.rowSelectCell, 'toggleAllSelection', function(newValue) {
          return self.toggleAllSelection(newValue);
        }));
      },
      canSort: function(inSortInfo) {
        return false;
      },
      refreshGrid: function() {
        this.store.save();
        this.store.close();
        return this.setStore(this.store);
      },
      singleCheckBoxSelection: function(e) {
        var checked, item, itemId, rowIndex, selectedItemStore;
        rowIndex = e.rowIndex;
        checked = this.selection.selected[rowIndex];
        item = this.getItem(rowIndex);
        itemId = item.id[0];
        selectedItemStore = this.container.itemCheckedStore;
        if (itemId == buildspace.constants.GRID_LAST_ROW) {
          return false;
        }
        if (checked) {
          return selectedItemStore.put({
            id: itemId
          });
        }
        return selectedItemStore.remove(itemId);
      },
      toggleAllSelection: function(checked) {
        var selectedItemStore, selection, self, store;
        self = this;
        store = this.store;
        selection = this.selection;
        selectedItemStore = this.container.itemCheckedStore;
        selection.selectRange(0, self.rowCount - 1);
        store.fetch({
          onComplete: function(items) {
            return dojo.forEach(items, function(item, index) {
              var itemId;
              itemId = item.id[0];
              if (itemId == buildspace.constants.GRID_LAST_ROW) {
                return false;
              }
              if (checked) {
                return selectedItemStore.put({
                  id: itemId
                });
              }
              return selectedItemStore.remove(itemId);
            });
          }
        });
        if (!checked) {
          return selection.deselectAll();
        }
      }
    });
    return declare("buildspace.apps.StockIn.InvoiceInformation.ItemListContainer", BorderContainer, {
      invoice: null,
      style: 'height:100%;width:100%;padding:0;margin:0;',
      gutters: false,
      itemCheckedStore: null,
      postCreate: function() {
        var filter, grid, menu, self, store, toolbar;
        this.inherited(arguments);
        this.itemCheckedStore = new Memory({
          idProperty: 'id'
        });
        self = this;
        store = new dojo.data.ItemFileWriteStore({
          url: "stockIn/getInvoiceItemListings/invoiceId/" + this.invoice.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new ItemListGrid({
          structure: self.getGridLayout(),
          store: store,
          invoice: this.invoice,
          invoiceId: this.invoice.id[0],
          escapeHTMLInData: false,
          container: self
        });
        toolbar = new Toolbar({
          region: 'top',
          style: "outline:none!important;padding:2px;overflow:hidden;border-bottom:none;"
        });
        menu = new DropDownMenu({
          style: "display: none;"
        });
        menu.addChild(new MenuItem({
          label: nls.printItemsByResourceTrade,
          iconClass: "icon-16-container icon-16-print",
          onClick: function() {
            return self.openBillPreviewDialogForSelectedItems();
          }
        }));
        toolbar.addChild(new DropDownButton({
          label: nls.print,
          id: "stockInReport-invoiceItem-printButton-" + self.invoice.id[0],
          iconClass: "icon-16-container icon-16-print",
          dropDown: menu
        }));
        filter = new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [
            {
              'description': nls.description
            }, {
              'quantity': nls.quantity
            }, {
              'uom': nls.unit
            }
          ]
        });
        this.addChild(filter);
        this.addChild(toolbar);
        return this.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
      },
      openBillPreviewDialogForSelectedItems: function() {
        var items, pb, selectedItemStore, self;
        self = this;
        selectedItemStore = self.itemCheckedStore;
        items = [];
        selectedItemStore.query().forEach(function(item) {
          return items.push(item.id);
        });
        items = items.reverse().filter(function(e, i, arr) {
          return arr.indexOf(e, i + 1) === -1;
        }).reverse();
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + '...'
        });
        pb.show();
        return request.post('stockInReporting/getPrintPreviewStockOutItems', {
          handleAs: 'json',
          data: {
            invoiceId: self.invoice.id[0],
            item_ids: JSON.stringify(items)
          }
        }).then(function(data) {
          var dialog;
          dialog = new PrintSelectedInvoiceItemGridDialog({
            title: nls.printItemsByResourceTrade,
            invoiceId: self.invoice.id[0],
            data: data,
            selectedItems: items
          });
          dialog.show();
          return pb.hide();
        }, function(error) {
          console.log(error);
          return pb.hide();
        });
      },
      getGridLayout: function() {
        var formatter;
        formatter = new Formatter;
        return [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter,
            noresize: true
          }, {
            name: nls.description,
            field: "description",
            width: 'auto',
            formatter: formatter.treeCellFormatter,
            noresize: true
          }, {
            name: nls.quantity,
            field: "quantity",
            width: '100px',
            styles: 'text-align: right;',
            cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
            formatter: formatter.rfqQuantityCellFormatter,
            noresize: true
          }, {
            name: nls.unit,
            field: "uom",
            width: '70px',
            styles: 'text-align: center;',
            formatter: formatter.rfqUnitCellFormatter,
            noresize: true
          }, {
            name: nls.rate,
            field: 'rates',
            styles: "text-align:right;",
            width: '120px',
            cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
            formatter: formatter.currencyCellFormatter,
            noresize: true
          }, {
            name: nls.discount + " %",
            field: 'discount_percentage',
            styles: "text-align:right;",
            width: '75px',
            cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
            formatter: formatter.currencyCellFormatter,
            noresize: true
          }, {
            name: nls.tax + " %",
            field: 'tax_percentage',
            styles: "text-align:right;",
            width: '75px',
            cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
            formatter: formatter.currencyCellFormatter,
            noresize: true
          }, {
            name: nls.totalWithoutTax,
            field: 'total_without_tax',
            styles: "text-align:right;",
            width: '100px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.totalWithTax,
            field: 'total',
            styles: "text-align:right;",
            width: '100px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.doQuantity,
            field: "doQuantity",
            width: '90px',
            styles: 'text-align: right;',
            formatter: formatter.unEditableNumberCellFormatter,
            noresize: true
          }, {
            name: nls.balanceQuantity,
            field: "balanceQuantity",
            width: '90px',
            styles: 'text-align: right;',
            formatter: formatter.unEditableNumberCellFormatter,
            noresize: true
          }
        ];
      }
    });
  });

}).call(this);
