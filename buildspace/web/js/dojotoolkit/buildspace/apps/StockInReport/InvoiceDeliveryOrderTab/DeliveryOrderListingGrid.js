// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/StockInReport/InvoiceDeliveryOrderTab/DeliveryOrderListingGrid', ["dojo/_base/declare", "dojo/_base/lang", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Rearrange", 'dojo/store/Memory', "buildspace/widget/grid/plugins/FormulatedColumn", 'dojo/request', "dijit/focus", "dijit/Toolbar", "dijit/form/Button", 'dijit/DropDownMenu', 'dijit/form/DropDownButton', 'dijit/MenuItem', 'dijit/layout/BorderContainer', 'buildspace/widget/grid/cells/Formatter', 'buildspace/widget/grid/cells/FormulaTextBox', 'buildspace/widget/grid/Filter', './DeliveryOrderItemListGrid', './PrintPreviewDialog/PrintSelectedDOItemGrid', 'dojo/i18n!../../../nls/StockIn'], function(declare, lang, Menu, Rearrange, Memory, FormulatedColumn, request, focusUtil, Toolbar, Button, DropDownMenu, DropDownButton, MenuItem, BorderContainer, Formatter, FormulaTextBox, Filter, DeliveryOrderItemListGrid, PrintSelectedDOItemGrid, nls) {
    var DeliveryOrderListGrid;
    DeliveryOrderListGrid = declare("buildspace.apps.StockInReport.InvoiceInformation.DeliveryOrderListingGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      keepSelection: true,
      rowSelector: "0px",
      region: 'center',
      deliveryOrderContainer: null,
      invoice: null,
      constructor: function() {
        this.rearranger = Rearrange(this, {});
        return this.formulatedColumn = FormulatedColumn(this, {});
      },
      canSort: function() {
        return false;
      },
      refreshGrid: function() {
        this.store.save();
        this.store.close();
        return this.setStore(this.store);
      }
    });
    return declare("buildspace.apps.StockInReport.InvoiceInformation.DeliveryOrderContainer", BorderContainer, {
      invoice: null,
      doItemCheckedStore: null,
      style: 'height:100%;width:100%;padding:0;margin:0;',
      gutters: false,
      postCreate: function() {
        var controller, controllerPane, filter, grid, gridContainer, self, stackContainer, stackPane, stackPaneId, store;
        this.inherited(arguments);
        self = this;
        stackPaneId = "stockInReportInvoiceDeliveryOrderList-" + this.invoice.id[0];
        stackContainer = dijit.byId(stackPaneId + "-stackContainer");
        if (stackContainer) {
          dijit.byId(stackPaneId + "-stackContainer").destroyRecursive();
        }
        stackContainer = self.stackContainer = new dijit.layout.StackContainer({
          style: 'width:100%;height:100%;',
          region: "center",
          id: stackPaneId + "-stackContainer"
        });
        store = new dojo.data.ItemFileWriteStore({
          url: "stockIn/getDeliveryOrderListings/invoiceId/" + this.invoice.id[0],
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new DeliveryOrderListGrid({
          structure: self.getDeliveryOrderGridLayout(),
          store: store,
          invoice: this.invoice,
          invoiceId: this.invoice.id[0],
          escapeHTMLInData: false,
          deliveryOrderContainer: self,
          onRowDblClick: function(e) {
            var deliveryOrder, pb;
            self = this;
            deliveryOrder = this.getItem(e.rowIndex);
            if (deliveryOrder.id[0] > 0) {
              pb = new buildspace.dialog.indeterminateProgressBar({
                title: nls.processing + "..."
              });
              pb.show();
              return request.get('stockIn/getDeliveryOrderItemQuantities', {
                query: {
                  deliveryOrderId: deliveryOrder.id
                },
                handleAs: 'json'
              }).then(function(response) {
                pb.hide();
                return self.deliveryOrderContainer.createDeliveryOrderItemQuantityView(deliveryOrder, response);
              }, function(error) {
                return pb.hide();
              });
            }
          }
        });
        filter = new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [
            {
              'delivery_order_no': nls.doNo
            }
          ]
        });
        gridContainer = new BorderContainer({
          region: 'top',
          gutters: false
        });
        gridContainer.addChild(filter);
        gridContainer.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
        stackPane = new dijit.layout.ContentPane({
          title: nls.deliveryOrder,
          content: gridContainer
        });
        stackContainer.addChild(stackPane);
        controller = new dijit.layout.StackController({
          region: "top",
          containerId: stackPaneId + "-stackContainer"
        });
        controllerPane = new dijit.layout.ContentPane({
          style: "padding: 0px; overflow: hidden;",
          baseClass: 'breadCrumbTrail',
          region: 'top',
          content: controller
        });
        this.addChild(stackContainer);
        this.addChild(controllerPane);
        return dojo.subscribe(stackPaneId + "-stackContainer-selectChild", "", function(page) {
          var children, index, widget, _results;
          widget = dijit.byId(stackPaneId + "-stackContainer");
          if (widget) {
            children = widget.getChildren();
            index = dojo.indexOf(children, dijit.byId(page.id)) + 1;
            _results = [];
            while (children.length > index) {
              widget.removeChild(children[index]);
              children[index].destroyRecursive();
              _results.push(index = index + 1);
            }
            return _results;
          }
        });
      },
      createDeliveryOrderItemQuantityView: function(deliveryOrder, dataStore) {
        var borderContainer, grid, menu, self, store, toolbar;
        self = this;
        this.doItemCheckedStore = new Memory({
          idProperty: 'id'
        });
        store = new dojo.data.ItemFileWriteStore({
          data: dataStore,
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = new DeliveryOrderItemListGrid({
          gridContainer: self,
          invoice: self.invoice,
          invoiceId: self.invoice.id[0],
          deliveryOrder: deliveryOrder,
          store: store,
          structure: self.getDeliveryOrderItemQuantityViewGridLayout()
        });
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:100%;height:100%;",
          baseClass: "form",
          gutters: false,
          region: "center"
        });
        borderContainer.addChild(new Filter({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [
            {
              'description': nls.description
            }, {
              'uom': nls.unit
            }, {
              'invoiceQuantity': nls.invoiceQuantity
            }, {
              'doQuantity': nls.doQuantity
            }, {
              'remarks': nls.remarks
            }
          ]
        }));
        toolbar = new Toolbar({
          region: 'top',
          style: "outline:none!important;padding:2px;overflow:hidden;border-bottom:none;"
        });
        menu = new DropDownMenu({
          style: "display: none;"
        });
        menu.addChild(new MenuItem({
          label: nls.printDOItemsByResourceTrade,
          iconClass: "icon-16-container icon-16-print",
          onClick: function() {
            return self.openPreviewDialogForSelectedDOItems(deliveryOrder);
          }
        }));
        toolbar.addChild(new DropDownButton({
          label: nls.print,
          id: "stockInReport-doItem-printButton-" + self.invoice.id[0],
          iconClass: "icon-16-container icon-16-print",
          dropDown: menu
        }));
        borderContainer.addChild(toolbar);
        borderContainer.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
        return self.makePane(deliveryOrder.delivery_order_no[0], borderContainer);
      },
      getDeliveryOrderGridLayout: function() {
        var formatter;
        formatter = new Formatter;
        return [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter,
            noresize: true
          }, {
            name: nls.deliveryOrderNo,
            field: "delivery_order_no",
            width: 'auto',
            formatter: formatter.treeCellFormatter,
            noresize: true
          }, {
            name: nls.downloadFile,
            field: "download_file",
            width: '100px',
            styles: 'text-align: center;',
            noresize: true
          }, {
            name: nls.date_of_delivery_order,
            field: 'delivery_order_date',
            width: '160px',
            styles: 'text-align: center;',
            filterable: false,
            noresize: true
          }
        ];
      },
      getDeliveryOrderItemQuantityViewGridLayout: function() {
        var formatter;
        formatter = new Formatter;
        return [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter
          }, {
            name: nls.description,
            field: "description",
            width: 'auto',
            formatter: formatter.treeCellFormatter
          }, {
            name: nls.remarks,
            field: "remarks",
            width: '280px',
            formatter: formatter.rfqSupplierRemarkCellFormatter
          }, {
            name: nls.unit,
            field: "uom",
            width: '70px',
            styles: 'text-align: center;',
            formatter: formatter.rfqUnitCellFormatter
          }, {
            name: nls.invoiceQuantity,
            field: "invoiceQuantity",
            width: '90px',
            styles: 'text-align: right;',
            cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
            formatter: formatter.rfqQuantityCellFormatter
          }, {
            name: nls.doQuantity,
            field: "doQuantity",
            width: '90px',
            styles: 'text-align: right;',
            cellType: 'buildspace.widget.grid.cells.FormulaTextBox',
            formatter: formatter.rfqQuantityCellFormatter
          }
        ];
      },
      openPreviewDialogForSelectedDOItems: function(deliveryOrder) {
        var items, pb, selectedItemStore, self;
        self = this;
        selectedItemStore = self.doItemCheckedStore;
        items = [];
        selectedItemStore.query().forEach(function(item) {
          return items.push(item.id);
        });
        items = items.reverse().filter(function(e, i, arr) {
          return arr.indexOf(e, i + 1) === -1;
        }).reverse();
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + '...'
        });
        pb.show();
        return request.post('stockInReporting/getPrintPreviewStockOutDOItems', {
          handleAs: 'json',
          data: {
            deliveryOrderId: deliveryOrder.id[0],
            item_ids: JSON.stringify(items)
          }
        }).then(function(data) {
          var dialog;
          dialog = new PrintSelectedDOItemGrid({
            title: nls.printDOItemsByResourceTrade,
            deliveryOrderId: deliveryOrder.id[0],
            data: data,
            selectedItems: items
          });
          dialog.show();
          return pb.hide();
        }, function(error) {
          console.log(error);
          return pb.hide();
        });
      },
      makePane: function(name, content) {
        var pane, stackContainer;
        stackContainer = dijit.byId("stockInReportInvoiceDeliveryOrderList-" + this.invoice.id[0] + "-stackContainer");
        pane = new dijit.layout.ContentPane({
          title: name,
          content: content
        });
        stackContainer.addChild(pane);
        return stackContainer.selectChild(pane);
      }
    });
  });

}).call(this);
