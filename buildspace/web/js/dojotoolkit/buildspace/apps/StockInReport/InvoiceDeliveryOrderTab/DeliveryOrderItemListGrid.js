// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/StockInReport/InvoiceDeliveryOrderTab/DeliveryOrderItemListGrid', ["dojo/_base/declare", 'dojo/_base/connect', "dojo/_base/lang", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/Rearrange", "buildspace/widget/grid/plugins/FormulatedColumn", 'dojox/grid/enhanced/plugins/IndirectSelection', 'dojo/request', "dijit/focus", 'dojo/i18n!../../../nls/StockIn'], function(declare, connect, lang, Menu, Rearrange, FormulatedColumn, IndirectSelection, request, focusUtil, nls) {
    return declare("buildspace.apps.StockInReport.InvoiceInformation.DeliveryOrderItemListingGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      keepSelection: true,
      rowSelector: "0px",
      region: 'center',
      gridContainer: null,
      deliveryOrderContainer: null,
      invoice: null,
      invoiceId: -1,
      deliveryOrder: null,
      plugins: {
        indirectSelection: {
          headerSelector: true,
          width: "40px",
          styles: "text-align: center;"
        }
      },
      constructor: function() {
        this.rearranger = Rearrange(this, {});
        return this.formulatedColumn = FormulatedColumn(this, {});
      },
      postCreate: function() {
        var self;
        this.inherited(arguments);
        self = this;
        this._connects.push(connect.connect(this, 'onCellClick', function(e) {
          if (e.cell.name !== "") {
            return;
          }
          return self.singleCheckBoxSelection(e);
        }));
        return this._connects.push(connect.connect(this.rowSelectCell, 'toggleAllSelection', function(newValue) {
          return self.toggleAllSelection(newValue);
        }));
      },
      canSort: function() {
        return false;
      },
      singleCheckBoxSelection: function(e) {
        var checked, item, itemId, rowIndex, selectedItemStore;
        rowIndex = e.rowIndex;
        checked = this.selection.selected[rowIndex];
        item = this.getItem(rowIndex);
        itemId = item.id[0];
        selectedItemStore = this.gridContainer.doItemCheckedStore;
        if (itemId == buildspace.constants.GRID_LAST_ROW) {
          return false;
        }
        if (checked) {
          return selectedItemStore.put({
            id: itemId
          });
        }
        return selectedItemStore.remove(itemId);
      },
      toggleAllSelection: function(checked) {
        var selectedItemStore, selection, self, store;
        self = this;
        store = this.store;
        selection = this.selection;
        selectedItemStore = this.gridContainer.doItemCheckedStore;
        selection.selectRange(0, self.rowCount - 1);
        store.fetch({
          onComplete: function(items) {
            return dojo.forEach(items, function(item, index) {
              var itemId;
              itemId = item.id[0];
              if (itemId == buildspace.constants.GRID_LAST_ROW) {
                return false;
              }
              if (checked) {
                return selectedItemStore.put({
                  id: itemId
                });
              }
              return selectedItemStore.remove(itemId);
            });
          }
        });
        if (!checked) {
          return selection.deselectAll();
        }
      }
    });
  });

}).call(this);
