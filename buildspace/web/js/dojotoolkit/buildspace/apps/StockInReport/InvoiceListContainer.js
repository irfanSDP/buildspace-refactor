// Generated by CoffeeScript 1.9.0
(function() {
  define('buildspace/apps/StockInReport/InvoiceListContainer', ["dojo/_base/declare", "dojo/_base/lang", 'dojo/request', "dijit/focus", "dijit/form/Button", 'dijit/DropDownMenu', 'dijit/form/DropDownButton', 'dijit/MenuItem', 'dijit/layout/BorderContainer', 'buildspace/widget/grid/cells/Formatter', 'buildspace/widget/grid/Filter', './InvoiceDeliveryOrderTab/MasterTabContainer', 'dojo/i18n!../../nls/StockIn'], function(declare, lang, request, focusUtil, Button, DropDownMenu, DropDownButton, MenuItem, BorderContainer, Formatter, FilterToolbar, MasterTabContainer, nls) {
    var invoiceListGrid;
    invoiceListGrid = declare("buildspace.apps.StockInReport.InvoiceListGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      rowSelector: "0px",
      region: 'center',
      workArea: null,
      project: null,
      canSort: function(inSortInfo) {
        return false;
      },
      deleteRow: function(rowIndex) {
        var item, msg, pb, self, title, xhrArgs;
        self = this;
        item = this.getItem(rowIndex);
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.deleting + '. ' + nls.pleaseWait + '...'
        });
        focusUtil.curNode.blur();
        focusUtil.curNode = null;
        pb.show();
        xhrArgs = {
          url: 'stockIn/deleteInvoice',
          content: {
            invoiceId: item.id,
            _csrf_token: item._csrf_token
          },
          handleAs: 'json',
          load: function(data) {
            var openedTab;
            if (data.success) {
              openedTab = dijit.byId("main-invoiceInformation-" + item.id[0]);
              if (openedTab) {
                self.workArea.removeChild(openedTab);
                openedTab.destroy();
              }
              self.refreshGrid();
              pb.hide();
              self.selection.clear();
              return window.setTimeout(function() {
                return self.focus.setFocusIndex(rowIndex, 0);
              }, 10);
            }
          },
          error: function(error) {
            self.selection.clear();
            return pb.hide();
          }
        };
        title = nls.deleteInvoiceDialogBoxTitle;
        msg = nls.deleteInvoiceDialogBoxMsg;
        return new buildspace.dialog.confirm(title, msg, 80, 320, function() {
          return dojo.xhrPost(xhrArgs);
        }, function() {
          return pb.hide();
        });
      },
      refreshGrid: function() {
        this.store.save();
        this.store.close();
        return this.setStore(this.store);
      }
    });
    return declare("buildspace.apps.StockInReport.InvoiceListContainer", BorderContainer, {
      workArea: null,
      project: null,
      store: null,
      style: 'height:100%;width:100%;padding:0;margin:0;',
      gutters: false,
      postCreate: function() {
        var filter, grid, self, stackContainer, store;
        this.inherited(arguments);
        self = this;
        stackContainer = dijit.byId('StockInReportInvoiceListMaintenance-stackContainer');
        if (stackContainer) {
          dijit.byId('StockInReportInvoiceListMaintenance-stackContainer').destroyRecursive();
        }
        stackContainer = self.stackContainer = new dijit.layout.StackContainer({
          style: 'width:100%;height:100%;',
          region: "center",
          id: 'StockInReportInvoiceListMaintenance-stackContainer'
        });
        store = new dojo.data.ItemFileWriteStore({
          url: "stockIn/getStockInInvoiceList/pId/" + self.project.id,
          clearOnClose: true,
          urlPreventCache: true
        });
        grid = this.grid = new invoiceListGrid({
          workArea: self.workArea,
          structure: self.getGridLayout(),
          store: store,
          pId: this.project.id,
          escapeHTMLInData: false,
          onRowDblClick: function(e) {
            var invoice, tabId, tabPane;
            invoice = this.getItem(e.rowIndex);
            if (invoice.id[0] < 0) {
              return false;
            }
            tabId = "main-invoiceInformation-" + invoice.id[0];
            if (tabPane = dijit.byId(tabId)) {
              return self.workArea.selectChild(tabPane);
            } else {
              return self.workArea.createContentPaneTab(tabId, invoice.invoice_no[0], self.createInvoiceAndDeliveryOrderTabContent(invoice), true);
            }
          }
        });
        filter = new FilterToolbar({
          region: 'top',
          grid: grid,
          editableGrid: false,
          filterFields: [
            {
              'invoice_no': nls.invoiceNo
            }, {
              'selected_po': nls.selected_po
            }, {
              'supplier_name': nls.supplier
            }, {
              'created_by': nls.created_by
            }
          ]
        });
        this.addChild(filter);
        return this.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
      },
      createInvoiceAndDeliveryOrderTabContent: function(invoice) {
        return new MasterTabContainer({
          id: "stock-in-master-tabcontainer-" + invoice.id[0],
          project: this.project,
          invoice: invoice
        });
      },
      getGridLayout: function() {
        var formatter;
        formatter = new Formatter;
        return [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter,
            noresize: true,
            filterable: false
          }, {
            name: nls.invoiceNo,
            field: "invoice_no",
            styles: 'text-align: center; color: red;',
            width: '140px',
            noresize: true
          }, {
            name: nls.selected_po,
            field: "selected_po",
            styles: 'text-align: center; color: red;',
            width: '140px',
            noresize: true
          }, {
            name: nls.supplier,
            field: "supplier_name",
            styles: 'text-align: center;',
            width: 'auto',
            noresize: true
          }, {
            name: nls.invoiceTotal,
            field: 'invoice_total',
            styles: "text-align:right;",
            width: '120px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.created_by,
            field: 'created_by',
            styles: "text-align:center;",
            width: '140px',
            noresize: true
          }, {
            name: nls.created_at,
            field: "invoice_date",
            styles: "text-align:center;",
            width: '160px',
            noresize: true,
            filterable: false
          }
        ];
      }
    });
  });

}).call(this);
