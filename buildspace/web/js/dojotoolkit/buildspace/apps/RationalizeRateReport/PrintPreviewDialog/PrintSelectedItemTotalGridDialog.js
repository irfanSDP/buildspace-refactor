// Generated by CoffeeScript 1.9.0
(function() {
  define("buildspace/apps/RationalizeRateReport/PrintPreviewDialog/PrintSelectedItemTotalGridDialog", ["dojo/_base/declare", "dojo/aspect", "dojo/_base/lang", "dojo/_base/connect", "dojo/when", "dojo/html", "dojo/dom", "dojo/keys", "dojo/dom-style", "dojo/request", "dojo/json", "./PrintPreviewFormDialog", "buildspace/widget/grid/cells/Formatter", 'dojo/i18n!buildspace/nls/RationalizeRate'], function(declare, aspect, lang, connect, when_, html, dom, keys, domStyle, request, JSON, PrintPreviewFormDialog, Formatter, nls) {
    var Dialog, selectedItemGrid, selectedItemGridContainer;
    selectedItemGrid = declare("buildspace.apps.RationalizeRateReport.SelectedItemTotalGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      region: "center",
      selectedItems: [],
      escapeHTMLInData: false,
      canSort: function() {
        return false;
      }
    });
    selectedItemGridContainer = declare("buildspace.apps.RationalizeRateReport.SelectedItemTotalGridContainer", dijit.layout.BorderContainer, {
      style: "padding:0px;width:100%;height:100%;",
      region: "center",
      gutters: false,
      dialog: null,
      store: null,
      structure: null,
      billId: -1,
      elementId: -1,
      selectedTenderers: [],
      selectedItems: [],
      type: null,
      postCreate: function() {
        var grid, self, toolbar;
        self = this;
        self.inherited(arguments);
        grid = this.grid = new selectedItemGrid({
          store: self.store,
          structure: self.structure,
          selectedItems: self.selectedItems
        });
        toolbar = new dijit.Toolbar({
          region: "top",
          style: "padding:2px;border-bottom:none;width:100%;"
        });
        toolbar.addChild(new dijit.form.Button({
          label: nls.print,
          iconClass: "icon-16-container icon-16-print",
          onClick: function(e) {
            return self.openPrintingDialog();
          }
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new dijit.form.Button({
          label: nls.close,
          iconClass: "icon-16-container icon-16-close",
          onClick: function() {
            return self.dialog.hide();
          }
        }));
        self.addChild(toolbar);
        return self.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
      },
      openPrintingDialog: function(self) {
        var pb;
        if (self == null) {
          self = this;
        }
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        pb.show();
        return request.get("viewTendererReporting/getPrintingInformation", {
          handleAs: 'json'
        }).then(function(response) {
          var dialog;
          dialog = new PrintPreviewFormDialog({
            title: self.dialog.title,
            selectedRows: self.selectedItems,
            printURL: 'printReport/printSelectedItemTotal',
            exportURL: 'exportExcelReport/exportSelectedItemTotal',
            billId: self.billId,
            elementId: self.elementId,
            _csrf_token: response._csrf_token
          });
          pb.hide();
          return dialog.show();
        }, function(error) {
          return pb.hide();
        });
      }
    });
    return Dialog = declare("buildspace.apps.RationalizeRateReport.GroupProjectAssignmentDialog", dijit.Dialog, {
      style: "padding:0px;margin:0px;",
      project: null,
      billId: -1,
      elementId: -1,
      data: null,
      type: null,
      selectedTenderers: [],
      selectedItems: [],
      buildRendering: function() {
        var content;
        content = this.createContent();
        content.startup();
        this.content = content;
        return this.inherited(arguments);
      },
      postCreate: function() {
        domStyle.set(this.containerNode, {
          padding: "0px",
          margin: "0px"
        });
        this.closeButtonNode.style.display = "none";
        return this.inherited(arguments);
      },
      _onKey: function(e) {
        var key;
        key = e.keyCode;
        if (key === keys.ESCAPE) {
          return dojo.stopEvent(e);
        }
      },
      onHide: function() {
        return this.destroyRecursive();
      },
      createContent: function() {
        var borderContainer, content, self;
        self = this;
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:1280px;height:600px;",
          gutters: false
        });
        content = new selectedItemGridContainer({
          store: dojo.data.ItemFileWriteStore({
            data: self.data
          }),
          dialog: self,
          selectedTenderers: self.selectedTenderers,
          selectedItems: self.selectedItems,
          structure: self.constructGridStructure(),
          billId: self.billId,
          elementId: self.elementId,
          type: this.type
        });
        borderContainer.addChild(content);
        return borderContainer;
      },
      constructGridStructure: function(type, self) {
        var additionalStructures, basicStructure, formatter, key, structure;
        if (type == null) {
          type = this.type;
        }
        if (self == null) {
          self = this;
        }
        formatter = new Formatter();
        basicStructure = [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter
          }, {
            name: nls.billReference,
            field: 'bill_ref',
            styles: "text-align:center; color: red;",
            width: '80px',
            noresize: true,
            formatter: formatter.billRefCellFormatter
          }, {
            name: nls.description,
            field: 'description',
            width: 'auto',
            formatter: formatter.printPreviewTreeCellFormatter,
            noresize: true
          }, {
            name: nls.estimate,
            field: 'grand_total_after_markup',
            styles: "text-align:right;color:blue;",
            width: '100px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }
        ];
        additionalStructures = [
          {
            name: nls.rationalizedTotal,
            field: "rationalized_grand_total",
            styles: "text-align:right;color:blue;",
            width: '100px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.difference + " %",
            field: "rationalized-difference_percentage",
            styles: "text-align:right;color:blue;",
            width: '100px',
            formatter: formatter.unEditablePercentageCellFormatter,
            noresize: true
          }, {
            name: nls.difference + " " + buildspace.currencyAbbreviation,
            field: "rationalized-difference_amount",
            styles: "text-align:right;color:blue;",
            width: '100px',
            formatter: formatter.unEditableCurrencyCellFormatter,
            noresize: true
          }
        ];
        for (key in additionalStructures) {
          structure = additionalStructures[key];
          basicStructure.push(structure);
        }
        return basicStructure;
      }
    });
  });

}).call(this);
