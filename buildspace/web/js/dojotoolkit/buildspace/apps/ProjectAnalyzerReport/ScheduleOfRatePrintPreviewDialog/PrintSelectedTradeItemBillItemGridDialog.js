// Generated by CoffeeScript 1.9.0
(function() {
  define("buildspace/apps/ProjectAnalyzerReport/ScheduleOfRatePrintPreviewDialog/PrintSelectedTradeItemBillItemGridDialog", ["dojo/_base/declare", "dojo/aspect", "dojo/number", "dojo/currency", "dojo/_base/lang", "dojo/_base/connect", "dojo/when", "dojo/html", "dojo/dom", "dojo/keys", "dojo/dom-style", "dojo/request", "dojo/json", "./PrintPreviewFormDialog", "buildspace/widget/grid/cells/Formatter", 'dojo/i18n!buildspace/nls/ProjectAnalyzer'], function(declare, aspect, number, currency, lang, connect, when_, html, dom, keys, domStyle, request, JSON, PrintPreviewFormDialog, Formatter, nls) {
    var Dialog, PrintPreviewFormatter, selectedItemGrid, selectedItemGridContainer;
    PrintPreviewFormatter = declare("buildspace.apps.RationalizeRateReport.Formatter", null, {
      unEditableCurrencyCellFormatter: function(cellValue, rowIdx, cell) {
        var formattedValue, item, value;
        item = this.grid.getItem(rowIdx);
        value = number.parse(cellValue);
        if (isNaN(value) || value === 0 || value === null) {
          cellValue = "&nbsp;";
        } else {
          formattedValue = currency.format(value);
          cellValue = value >= 0 ? formattedValue : '<span style="color:#FF0000">' + formattedValue + '</span>';
        }
        if ((item.type != null) && item.type[0] === 'tradeItem') {
          cellValue = "<span style=\"color: blue;\">" + cellValue + "</span>";
        }
        if (item.type !== void 0 && item.type < 1) {
          cell.customClasses.push('invalidTypeItemCell');
        } else {
          cell.customClasses.push('disable-cell');
        }
        return cellValue;
      }
    });
    selectedItemGrid = declare("buildspace.apps.RationalizeRateReport.SelectedItemRateGrid", dojox.grid.EnhancedGrid, {
      style: "border-top:none;",
      region: "center",
      selectedItems: [],
      escapeHTMLInData: false,
      canSort: function() {
        return false;
      }
    });
    selectedItemGridContainer = declare("buildspace.apps.RationalizeRateReport.SelectedItemRateGridContainer", dijit.layout.BorderContainer, {
      style: "padding:0px;width:100%;height:100%;",
      region: "center",
      gutters: false,
      dialog: null,
      store: null,
      structure: null,
      billId: -1,
      projectId: -1,
      scheduleOfRateId: -1,
      tradeId: -1,
      elementId: -1,
      tradeItemIds: [],
      selectedItems: [],
      printURL: null,
      exportURL: null,
      postCreate: function() {
        var grid, self, toolbar;
        self = this;
        self.inherited(arguments);
        grid = this.grid = new selectedItemGrid({
          store: self.store,
          structure: self.structure,
          tradeItemIds: self.tradeItemIds,
          selectedItems: self.selectedItems
        });
        toolbar = new dijit.Toolbar({
          region: "top",
          style: "padding:2px;border-bottom:none;width:100%;"
        });
        toolbar.addChild(new dijit.form.Button({
          label: nls.print,
          iconClass: "icon-16-container icon-16-print",
          onClick: function(e) {
            return self.openPrintingDialog();
          }
        }));
        toolbar.addChild(new dijit.ToolbarSeparator());
        toolbar.addChild(new dijit.form.Button({
          label: nls.close,
          iconClass: "icon-16-container icon-16-close",
          onClick: function() {
            return self.dialog.hide();
          }
        }));
        self.addChild(toolbar);
        return self.addChild(new dijit.layout.ContentPane({
          style: 'width:100%',
          content: grid,
          region: 'center'
        }));
      },
      openPrintingDialog: function(self) {
        var pb;
        if (self == null) {
          self = this;
        }
        pb = buildspace.dialog.indeterminateProgressBar({
          title: nls.pleaseWait + "..."
        });
        pb.show();
        return request.get("viewTendererReporting/getPrintingInformation", {
          handleAs: 'json'
        }).then(function(response) {
          var dialog;
          dialog = new PrintPreviewFormDialog({
            title: self.dialog.title,
            tradeItemIds: self.tradeItemIds,
            selectedRows: self.selectedItems,
            printURL: self.printURL,
            exportURL: self.exportURL,
            billId: self.billId,
            elementId: self.elementId,
            projectId: self.projectId,
            scheduleOfRateId: self.scheduleOfRateId,
            tradeId: self.tradeId,
            _csrf_token: response._csrf_token
          });
          pb.hide();
          return dialog.show();
        }, function(error) {
          return pb.hide();
        });
      }
    });
    return Dialog = declare("buildspace.apps.RationalizeRateReport.PrintPreviewDialog", dijit.Dialog, {
      style: "padding:0px;margin:0px;",
      project: null,
      billId: -1,
      elementId: -1,
      projectId: -1,
      scheduleOfRateId: -1,
      tradeId: -1,
      data: null,
      tradeItemIds: [],
      selectedItems: [],
      contractorList: [],
      printURL: null,
      exportURL: null,
      buildRendering: function() {
        var content;
        content = this.createContent();
        content.startup();
        this.content = content;
        return this.inherited(arguments);
      },
      postCreate: function() {
        domStyle.set(this.containerNode, {
          padding: "0px",
          margin: "0px"
        });
        this.closeButtonNode.style.display = "none";
        return this.inherited(arguments);
      },
      _onKey: function(e) {
        var key;
        key = e.keyCode;
        if (key === keys.ESCAPE) {
          return dojo.stopEvent(e);
        }
      },
      onHide: function() {
        return this.destroyRecursive();
      },
      createContent: function() {
        var borderContainer, content, self;
        self = this;
        borderContainer = new dijit.layout.BorderContainer({
          style: "padding:0px;width:1280px;height:600px;",
          gutters: false
        });
        content = new selectedItemGridContainer({
          store: dojo.data.ItemFileWriteStore({
            data: self.data
          }),
          dialog: self,
          tradeItemIds: self.tradeItemIds,
          selectedItems: self.selectedItems,
          structure: self.constructGridStructure(),
          billId: self.billId,
          elementId: self.elementId,
          projectId: self.projectId,
          scheduleOfRateId: self.scheduleOfRateId,
          tradeId: self.tradeId,
          printURL: self.printURL,
          exportURL: self.exportURL
        });
        borderContainer.addChild(content);
        return borderContainer;
      },
      constructGridStructure: function(self) {
        var basicStructure, formatter, formatter2;
        if (self == null) {
          self = this;
        }
        formatter = new Formatter();
        formatter2 = new PrintPreviewFormatter();
        basicStructure = [
          {
            name: "No",
            field: "id",
            width: '30px',
            styles: 'text-align: center;',
            formatter: formatter.rowCountCellFormatter
          }, {
            name: nls.description,
            field: 'description',
            width: this.contractorList && this.contractorList.hasOwnProperty('items') && this.contractorList.items.length > 0 ? '500px' : 'auto',
            formatter: formatter.printPreviewTreeCellFormatter,
            noresize: true
          }, {
            name: nls.totalQty,
            field: 'grand_total_quantity',
            width: '120px',
            styles: 'text-align:right;',
            formatter: formatter.unEditableNumberCellFormatter,
            noresize: true
          }, {
            name: nls.unit,
            field: 'uom_id',
            width: '70px',
            styles: 'text-align:center;',
            formatter: formatter.unitIdCellFormatter,
            noresize: true
          }, {
            name: nls.rate,
            field: 'rate-value',
            width: '120px',
            styles: 'text-align:right;',
            formatter: formatter.unEditableAnalyzerRateCellFormatter,
            noresize: true
          }, {
            name: nls.total,
            field: 'grand_total',
            width: '120px',
            styles: 'text-align:right;',
            formatter: formatter2.unEditableCurrencyCellFormatter,
            noresize: true
          }, {
            name: nls.itemMarkup + " (%)",
            field: 'markup_percentage-value',
            width: '100px',
            styles: 'text-align:right;',
            formatter: formatter.analyzerItemMarkupCellFormatter,
            noresize: true
          }
        ];
        if (this.contractorList && this.contractorList.hasOwnProperty('items')) {
          dojo.forEach(this.contractorList.items, function(contractor) {
            var subConName;
            subConName = contractor.awarded ? '<p style="color:#0000FF!important;">' + buildspace.truncateString(contractor.name, 45) + '</p>' : buildspace.truncateString(contractor.name, 45);
            return basicStructure.push({
              name: subConName,
              field: 'contractor_rate-' + contractor.id + '-value',
              width: '120px',
              styles: 'text-align:right;',
              formatter: formatter.formulaCurrencyCellFormatter
            });
          });
        }
        return basicStructure;
      }
    });
  });

}).call(this);
